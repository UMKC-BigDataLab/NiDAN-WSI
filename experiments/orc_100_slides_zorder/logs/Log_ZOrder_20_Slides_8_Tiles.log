Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/31 23:35:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:35:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:35:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:35:31 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/31 23:35:33 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/31 23:35:43 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170531233532-0726).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@12d28106

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.430457943 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (52 + 63) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.002628453 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=156,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.718808782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (39 + 76) / 115][Stage 2:========================>                              (51 + 64) / 115][Stage 2:=============================>                         (61 + 54) / 115][Stage 2:==============================>                        (64 + 51) / 115][Stage 2:====================================>                  (77 + 38) / 115][Stage 2:========================================>              (85 + 30) / 115][Stage 2:==========================================>            (89 + 26) / 115][Stage 2:==============================================>        (97 + 18) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:===============================>                       (67 + 49) / 116][Stage 3:================================>                      (68 + 48) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:============================================>          (93 + 23) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.006567311 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53127519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===================================>                   (75 + 40) / 115][Stage 4:=======================================>               (82 + 33) / 115][Stage 4:===========================================>           (90 + 25) / 115][Stage 4:============================================>          (93 + 22) / 115][Stage 4:===============================================>      (101 + 14) / 115][Stage 4:==================================================>    (106 + 9) / 115][Stage 4:====================================================>  (109 + 6) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:======================================>                (82 + 34) / 116][Stage 5:=======================================>               (84 + 32) / 116][Stage 5:=============================================>         (97 + 19) / 116][Stage 5:===============================================>      (102 + 14) / 116][Stage 5:===================================================>   (109 + 7) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.382788707 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.683321053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==========================>                            (55 + 58) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==============================>                        (63 + 50) / 113][Stage 6:====================================>                  (75 + 38) / 113][Stage 6:=======================================>               (81 + 32) / 113][Stage 6:============================================>          (92 + 21) / 113][Stage 6:==================================================>    (104 + 9) / 113][Stage 6:=====================================================> (110 + 3) / 113]                                                                                [Stage 7:============================>                          (59 + 55) / 114][Stage 7:=============================>                         (62 + 52) / 114][Stage 7:================================>                      (68 + 46) / 114][Stage 7:=====================================>                 (78 + 36) / 114][Stage 7:=========================================>             (85 + 29) / 114][Stage 7:===============================================>       (99 + 15) / 114][Stage 7:===================================================>   (106 + 8) / 114][Stage 7:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.853526083 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.662458059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:============================>                          (62 + 58) / 120][Stage 8:================================>                      (71 + 49) / 120][Stage 8:=======================================>               (86 + 34) / 120][Stage 8:=============================================>        (101 + 19) / 120][Stage 8:=================================================>    (109 + 11) / 120][Stage 8:======================================================>(119 + 1) / 120]                                                                                [Stage 9:===========================>                           (61 + 60) / 121][Stage 9:================================>                      (71 + 50) / 121][Stage 9:=======================================>               (87 + 34) / 121][Stage 9:=============================================>        (102 + 19) / 121][Stage 9:=================================================>    (110 + 11) / 121][Stage 9:=====================================================> (117 + 4) / 121][Stage 9:======================================================>(119 + 2) / 121][Stage 9:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.904420574 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521878628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (72 + 46) / 118][Stage 10:=================================>                    (73 + 45) / 118][Stage 10:==================================>                   (76 + 42) / 118][Stage 10:=========================================>            (91 + 27) / 118][Stage 10:=============================================>       (102 + 16) / 118][Stage 10:===================================================>  (112 + 6) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:==================================>                   (76 + 43) / 119][Stage 11:========================================>             (89 + 30) / 119][Stage 11:============================================>         (98 + 21) / 119][Stage 11:===============================================>     (106 + 13) / 119][Stage 11:===================================================>  (113 + 6) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.152048711 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498374018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:======================================>               (82 + 33) / 115][Stage 12:============================================>         (94 + 21) / 115][Stage 12:===============================================>     (104 + 11) / 115][Stage 12:====================================================> (111 + 4) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:======================================>               (82 + 34) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:===============================================>     (105 + 11) / 116][Stage 13:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.245170683 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467942971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===================================>                  (75 + 38) / 113][Stage 14:========================================>             (84 + 29) / 113][Stage 14:===========================================>          (92 + 21) / 113][Stage 14:===============================================>     (101 + 12) / 113][Stage 14:==================================================>   (106 + 7) / 113][Stage 14:===================================================>  (107 + 6) / 113][Stage 14:====================================================> (110 + 3) / 113]                                                                                [Stage 15:===================================>                  (74 + 40) / 114][Stage 15:======================================>               (81 + 33) / 114][Stage 15:===========================================>          (91 + 23) / 114][Stage 15:==============================================>       (99 + 15) / 114][Stage 15:================================================>    (104 + 10) / 114][Stage 15:==================================================>   (106 + 8) / 114][Stage 15:===================================================>  (109 + 5) / 114][Stage 15:====================================================> (110 + 4) / 114][Stage 15:====================================================> (111 + 3) / 114][Stage 15:=====================================================>(112 + 2) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 9.280805605 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53381403 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (57 + 56) / 113][Stage 16:============================>                         (60 + 53) / 113][Stage 16:================================>                     (69 + 44) / 113][Stage 16:=======================================>              (82 + 31) / 113][Stage 16:==============================================>       (98 + 15) / 113][Stage 16:================================================>    (103 + 10) / 113][Stage 16:====================================================> (109 + 4) / 113]                                                                                [Stage 17:===========================>                          (58 + 56) / 114][Stage 17:=============================>                        (62 + 52) / 114][Stage 17:==================================>                   (72 + 42) / 114][Stage 17:=========================================>            (88 + 26) / 114][Stage 17:==============================================>      (100 + 14) / 114][Stage 17:=====================================================>(112 + 2) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.126201116 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481593943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (73 + 45) / 118][Stage 18:===================================>                  (77 + 41) / 118][Stage 18:=========================================>            (90 + 28) / 118][Stage 18:===============================================>     (105 + 13) / 118][Stage 18:====================================================> (114 + 4) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:====================================>                 (81 + 38) / 119][Stage 19:========================================>             (89 + 30) / 119][Stage 19:============================================>         (98 + 21) / 119][Stage 19:=================================================>    (110 + 9) / 119][Stage 19:===================================================>  (114 + 5) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.543808165 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56193771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:===========================>                          (62 + 58) / 120][Stage 20:===============================>                      (70 + 50) / 120][Stage 20:=========================================>            (92 + 28) / 120][Stage 20:=============================================>       (102 + 18) / 120][Stage 20:=====================================================>(118 + 2) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:=============================>                        (65 + 56) / 121][Stage 21:===================================>                  (79 + 42) / 121][Stage 21:===========================================>          (98 + 23) / 121][Stage 21:==================================================>   (114 + 7) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.240832692 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51822471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:==============================>                       (67 + 53) / 120][Stage 22:=======================================>              (88 + 32) / 120][Stage 22:================================================>    (109 + 11) / 120][Stage 22:=====================================================>(118 + 2) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:=============================>                        (66 + 55) / 121][Stage 23:====================================>                 (81 + 40) / 121][Stage 23:==========================================>           (96 + 25) / 121][Stage 23:==============================================>      (107 + 14) / 121][Stage 23:=====================================================>(119 + 2) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.856229709 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430995936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:======================================>               (82 + 33) / 115][Stage 24:===========================================>          (93 + 22) / 115][Stage 24:==================================================>   (108 + 7) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:=======================================>              (84 + 32) / 116][Stage 25:=========================================>            (90 + 26) / 116][Stage 25:===============================================>     (104 + 12) / 116][Stage 25:====================================================> (112 + 4) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.175267063 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497530172 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=================================>                    (72 + 43) / 115][Stage 26:=====================================>                (79 + 36) / 115][Stage 26:===============================================>     (104 + 11) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:==================================>                   (74 + 42) / 116][Stage 27:==========================================>           (91 + 25) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.920738086 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=19", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=19,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44708139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:================================>                     (72 + 46) / 118][Stage 28:==================================>                   (76 + 42) / 118][Stage 28:=======================================>              (86 + 32) / 118][Stage 28:===========================================>          (95 + 23) / 118][Stage 28:==============================================>      (103 + 15) / 118][Stage 28:=================================================>    (109 + 9) / 118][Stage 28:==================================================>   (111 + 7) / 118][Stage 28:=====================================================>(117 + 1) / 118]                                                                                [Stage 29:=================================>                    (73 + 46) / 119][Stage 29:==================================>                   (75 + 44) / 119][Stage 29:=======================================>              (88 + 31) / 119][Stage 29:============================================>        (100 + 19) / 119][Stage 29:==================================================>   (111 + 8) / 119][Stage 29:====================================================> (115 + 4) / 119][Stage 29:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.495676793 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479763923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (70 + 45) / 115][Stage 30:===========================================>          (93 + 22) / 115][Stage 30:===============================================>     (102 + 13) / 115][Stage 30:===================================================>  (110 + 5) / 115]                                                                                [Stage 31:=================================>                    (71 + 45) / 116][Stage 31:=====================================>                (81 + 35) / 116][Stage 31:=============================================>        (98 + 18) / 116][Stage 31:================================================>    (106 + 10) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:=====================================================>(114 + 2) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.808067284 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4421043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (81 + 32) / 113][Stage 32:===========================================>          (92 + 21) / 113][Stage 32:===============================================>     (102 + 11) / 113][Stage 32:===================================================>  (108 + 5) / 113]                                                                                [Stage 33:=====================================>                (79 + 35) / 114][Stage 33:===========================================>          (91 + 23) / 114][Stage 33:==============================================>      (101 + 13) / 114][Stage 33:===================================================>  (108 + 6) / 114][Stage 33:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.149595842 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=================================>                    (71 + 42) / 113][Stage 34:=======================================>              (82 + 31) / 113][Stage 34:===========================================>          (91 + 22) / 113][Stage 34:===============================================>     (101 + 12) / 113][Stage 34:===================================================>  (107 + 6) / 113]                                                                                [Stage 35:====================================>                 (76 + 38) / 114][Stage 35:========================================>             (86 + 28) / 114][Stage 35:===========================================>          (92 + 22) / 114][Stage 35:===============================================>     (103 + 11) / 114][Stage 35:====================================================> (111 + 3) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.898294041 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443985644 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:====================================>                 (76 + 37) / 113][Stage 36:===========================================>          (92 + 21) / 113][Stage 36:==============================================>      (100 + 13) / 113][Stage 36:==================================================>   (106 + 7) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:====================================>                 (76 + 38) / 114][Stage 37:========================================>             (86 + 28) / 114][Stage 37:=============================================>        (95 + 19) / 114][Stage 37:==============================================>       (98 + 16) / 114][Stage 37:================================================>    (104 + 10) / 114][Stage 37:=================================================>    (105 + 9) / 114][Stage 37:==================================================>   (106 + 8) / 114][Stage 37:====================================================> (111 + 3) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.035567472 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455725412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (72 + 46) / 118][Stage 38:=================================>                    (73 + 45) / 118][Stage 38:======================================>               (85 + 33) / 118][Stage 38:=============================================>       (101 + 17) / 118][Stage 38:=====================================================>(117 + 1) / 118]                                                                                [Stage 39:=================================>                    (73 + 46) / 119][Stage 39:==================================>                   (76 + 43) / 119][Stage 39:=========================================>            (92 + 27) / 119][Stage 39:==============================================>      (104 + 15) / 119][Stage 39:==================================================>   (111 + 8) / 119][Stage 39:====================================================> (115 + 4) / 119][Stage 39:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.961552741 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425845577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (82 + 33) / 115][Stage 40:===========================================>          (93 + 22) / 115][Stage 40:=================================================>    (106 + 9) / 115][Stage 40:====================================================> (112 + 3) / 115]                                                                                [Stage 41:======================================>               (83 + 33) / 116][Stage 41:============================================>         (95 + 21) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.33647089 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.572816574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (58 + 55) / 113][Stage 42:===============================>                      (65 + 48) / 113][Stage 42:======================================>               (80 + 33) / 113][Stage 42:============================================>         (94 + 19) / 113][Stage 42:=================================================>    (104 + 9) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:==============================>                       (65 + 49) / 114][Stage 43:====================================>                 (78 + 36) / 114][Stage 43:==============================================>       (98 + 16) / 114][Stage 43:===================================================>  (109 + 5) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.00019155 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462686245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=====================================>                (78 + 35) / 113][Stage 44:===========================================>          (90 + 23) / 113][Stage 44:===============================================>     (102 + 11) / 113][Stage 44:=====================================================>(111 + 2) / 113]                                                                                [Stage 45:====================================>                 (76 + 38) / 114][Stage 45:========================================>             (85 + 29) / 114][Stage 45:=============================================>        (97 + 17) / 114][Stage 45:==================================================>   (107 + 7) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.905218815 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500710244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:==============================>                       (68 + 52) / 120][Stage 46:======================================>               (86 + 34) / 120][Stage 46:================================================>    (109 + 11) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:==============================>                       (69 + 52) / 121][Stage 47:=======================================>              (88 + 33) / 121][Stage 47:=============================================>       (105 + 16) / 121][Stage 47:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.581871806 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461082139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:===============================>                      (66 + 47) / 113][Stage 48:========================================>             (85 + 28) / 113][Stage 48:================================================>    (103 + 10) / 113]                                                                                [Stage 49:============================>                         (61 + 53) / 114][Stage 49:==================================>                   (73 + 41) / 114][Stage 49:====================================>                 (77 + 37) / 114][Stage 49:=================================================>    (105 + 9) / 114][Stage 49:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.540571915 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (60 + 53) / 113][Stage 50:=================================>                    (71 + 42) / 113][Stage 50:=========================================>            (86 + 27) / 113][Stage 50:==================================================>   (106 + 7) / 113][Stage 50:====================================================> (110 + 3) / 113]                                                                                [Stage 51:============================>                         (60 + 54) / 114][Stage 51:================================>                     (69 + 45) / 114][Stage 51:=======================================>              (84 + 30) / 114][Stage 51:================================================>    (104 + 10) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.158467579 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397885115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (78 + 35) / 113][Stage 52:=========================================>            (87 + 26) / 113][Stage 52:=============================================>        (96 + 17) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:=====================================>                (80 + 34) / 114][Stage 53:============================================>         (94 + 20) / 114][Stage 53:===============================================>     (102 + 12) / 114][Stage 53:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.08627429 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (73 + 40) / 113][Stage 54:=======================================>              (83 + 30) / 113][Stage 54:==============================================>       (98 + 15) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:========================================>             (85 + 29) / 114][Stage 55:=============================================>        (95 + 19) / 114][Stage 55:==================================================>   (106 + 8) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:====================================================> (111 + 3) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.333319947 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=111", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=111,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402541226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=======================================>              (82 + 31) / 113][Stage 56:============================================>         (94 + 19) / 113][Stage 56:===============================================>     (102 + 11) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:=======================================>              (84 + 30) / 114][Stage 57:=============================================>        (96 + 18) / 114][Stage 57:================================================>    (104 + 10) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.025627459 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (71 + 42) / 113][Stage 58:========================================>             (85 + 28) / 113][Stage 58:===========================================>          (90 + 23) / 113][Stage 58:==================================================>   (105 + 8) / 113][Stage 58:=====================================================>(111 + 2) / 113]                                                                                [Stage 59:===================================>                  (75 + 39) / 114][Stage 59:===========================================>          (91 + 23) / 114][Stage 59:================================================>    (104 + 10) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.931212409 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=71,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433595892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=================================>                    (71 + 42) / 113][Stage 60:========================================>             (84 + 29) / 113][Stage 60:=============================================>        (96 + 17) / 113][Stage 60:=================================================>    (104 + 9) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:======================================>               (81 + 33) / 114][Stage 61:==========================================>           (90 + 24) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.051862182 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=163", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=163,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467342826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (70 + 45) / 115][Stage 62:========================================>             (86 + 29) / 115][Stage 62:===============================================>     (104 + 11) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:====================================================> (111 + 4) / 115]                                                                                [Stage 63:===================================>                  (77 + 39) / 116][Stage 63:==========================================>           (92 + 24) / 116][Stage 63:==================================================>   (108 + 8) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.090531082 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383236662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=====================================>                (80 + 35) / 115][Stage 64:========================================>             (86 + 29) / 115][Stage 64:==============================================>       (98 + 17) / 115][Stage 64:===================================================>  (110 + 5) / 115]                                                                                [Stage 65:========================================>             (86 + 30) / 116][Stage 65:=============================================>       (100 + 16) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.547424778 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376728945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=====================================>                (80 + 35) / 115][Stage 66:===========================================>          (92 + 23) / 115][Stage 66:===============================================>     (102 + 13) / 115][Stage 66:====================================================> (111 + 4) / 115]                                                                                [Stage 67:======================================>               (83 + 33) / 116][Stage 67:===========================================>          (94 + 22) / 116][Stage 67:==============================================>      (101 + 15) / 116][Stage 67:====================================================> (113 + 3) / 116][Stage 67:=====================================================>(114 + 2) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.455458697 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415905625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===================================>                  (75 + 38) / 113][Stage 68:========================================>             (85 + 28) / 113][Stage 68:============================================>         (94 + 19) / 113][Stage 68:===================================================>  (107 + 6) / 113]                                                                                [Stage 69:=====================================>                (79 + 35) / 114][Stage 69:=========================================>            (88 + 26) / 114][Stage 69:=============================================>        (97 + 17) / 114][Stage 69:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.907717379 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=125,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402429772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:==================================>                   (76 + 42) / 118][Stage 70:======================================>               (85 + 33) / 118][Stage 70:==============================================>      (103 + 15) / 118][Stage 70:=====================================================>(116 + 2) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:====================================>                 (81 + 38) / 119][Stage 71:============================================>        (101 + 18) / 119][Stage 71:====================================================> (115 + 4) / 119][Stage 71:=====================================================>(117 + 2) / 119][Stage 71:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.863392188 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444207241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 59) / 120][Stage 72:=============================>                        (66 + 54) / 120][Stage 72:=======================================>              (88 + 32) / 120][Stage 72:====================================================> (116 + 4) / 120]                                                                                [Stage 73:============================>                         (63 + 58) / 121][Stage 73:===================================>                  (79 + 42) / 121][Stage 73:=========================================>            (92 + 29) / 121][Stage 73:==================================================>   (114 + 7) / 121][Stage 73:====================================================> (118 + 3) / 121][Stage 73:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.185931934 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435944993 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:================================>                     (68 + 45) / 113][Stage 74:=====================================>                (78 + 35) / 113][Stage 74:===========================================>          (91 + 22) / 113][Stage 74:=================================================>    (104 + 9) / 113]                                                                                [Stage 75:============================>                         (60 + 54) / 114][Stage 75:==============================>                       (64 + 50) / 114][Stage 75:=======================================>              (84 + 30) / 114][Stage 75:==============================================>       (99 + 15) / 114][Stage 75:====================================================> (111 + 3) / 114][Stage 75:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.494386656 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=252", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=252,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439138126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (72 + 43) / 115][Stage 76:===========================================>          (93 + 22) / 115][Stage 76:===============================================>     (103 + 12) / 115][Stage 76:====================================================> (112 + 3) / 115]                                                                                [Stage 77:===================================>                  (76 + 40) / 116][Stage 77:============================================>         (96 + 20) / 116][Stage 77:===================================================>  (110 + 6) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.818523547 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380883614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (71 + 42) / 113][Stage 78:==========================================>           (88 + 25) / 113][Stage 78:============================================>         (93 + 20) / 113][Stage 78:==================================================>   (105 + 8) / 113][Stage 78:====================================================> (110 + 3) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:=====================================>                (79 + 35) / 114][Stage 79:===========================================>          (91 + 23) / 114][Stage 79:=============================================>        (97 + 17) / 114][Stage 79:===================================================>  (108 + 6) / 114][Stage 79:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.102940288 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=227 AND partitionZIndex<=234,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417788581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=====================================>                (81 + 37) / 118][Stage 80:==========================================>           (93 + 25) / 118][Stage 80:=================================================>    (109 + 9) / 118][Stage 80:===================================================>  (113 + 5) / 118][Stage 80:=====================================================>(117 + 1) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:===================================>                  (78 + 41) / 119][Stage 81:==========================================>           (94 + 25) / 119][Stage 81:===============================================>     (107 + 12) / 119][Stage 81:===================================================>  (113 + 6) / 119][Stage 81:=====================================================>(117 + 2) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.070824041 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46379348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (60 + 60) / 120][Stage 82:===============================>                      (70 + 50) / 120][Stage 82:======================================>               (85 + 35) / 120][Stage 82:=================================================>    (111 + 9) / 120]                                                                                [Stage 83:============================>                         (63 + 58) / 121][Stage 83:=================================>                    (75 + 46) / 121][Stage 83:=========================================>            (92 + 29) / 121][Stage 83:===============================================>     (109 + 12) / 121][Stage 83:=====================================================>(119 + 2) / 121][Stage 83:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.759396297 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4397138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:================================>                     (67 + 46) / 113][Stage 84:=========================================>            (87 + 26) / 113][Stage 84:================================================>    (103 + 10) / 113]                                                                                [Stage 85:===========================>                          (59 + 55) / 114][Stage 85:================================>                     (69 + 45) / 114][Stage 85:=========================================>            (88 + 26) / 114][Stage 85:=================================================>    (105 + 9) / 114][Stage 85:====================================================> (111 + 3) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.366330275 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=153,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388182086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (74 + 44) / 118][Stage 86:=====================================>                (83 + 35) / 118][Stage 86:===========================================>          (95 + 23) / 118][Stage 86:==================================================>   (111 + 7) / 118][Stage 86:=====================================================>(117 + 1) / 118]                                                                                [Stage 87:==================================>                   (75 + 44) / 119][Stage 87:======================================>               (85 + 34) / 119][Stage 87:============================================>         (99 + 20) / 119][Stage 87:=================================================>    (110 + 9) / 119][Stage 87:====================================================> (116 + 3) / 119][Stage 87:=====================================================>(117 + 2) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.582032482 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431404814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:============================>                         (63 + 57) / 120][Stage 88:===================================>                  (79 + 41) / 120][Stage 88:==============================================>      (106 + 14) / 120]                                                                                [Stage 89:===========================>                          (62 + 59) / 121][Stage 89:=================================>                    (76 + 45) / 121][Stage 89:=======================================>              (89 + 32) / 121][Stage 89:================================================>    (110 + 11) / 121][Stage 89:====================================================> (118 + 3) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.873745192 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380876116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==================================>                   (72 + 41) / 113][Stage 90:=======================================>              (83 + 30) / 113][Stage 90:============================================>         (94 + 19) / 113][Stage 90:=================================================>    (104 + 9) / 113][Stage 90:=====================================================>(111 + 2) / 113]                                                                                [Stage 91:=====================================>                (79 + 35) / 114][Stage 91:===========================================>          (92 + 22) / 114][Stage 91:===============================================>     (103 + 11) / 114][Stage 91:====================================================> (110 + 4) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.399077714 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421163555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (58 + 55) / 113][Stage 92:==============================>                       (63 + 50) / 113][Stage 92:=====================================>                (78 + 35) / 113][Stage 92:===============================================>      (99 + 14) / 113][Stage 92:===================================================>  (108 + 5) / 113]                                                                                [Stage 93:============================>                         (60 + 54) / 114][Stage 93:===================================>                  (75 + 39) / 114][Stage 93:==============================================>       (98 + 16) / 114][Stage 93:===================================================>  (108 + 6) / 114][Stage 93:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.743799716 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=185", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=185,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4273027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:============================>                         (64 + 56) / 120][Stage 94:====================================>                 (81 + 39) / 120][Stage 94:===============================================>     (107 + 13) / 120][Stage 94:=====================================================>(119 + 1) / 120]                                                                                [Stage 95:===========================>                          (61 + 60) / 121][Stage 95:===============================>                      (71 + 50) / 121][Stage 95:======================================>               (87 + 34) / 121][Stage 95:=============================================>       (105 + 16) / 121][Stage 95:====================================================> (117 + 4) / 121][Stage 95:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.727884475 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374738785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===================================>                  (75 + 38) / 113][Stage 96:==========================================>           (88 + 25) / 113][Stage 96:===============================================>      (99 + 14) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:===================================>                  (74 + 40) / 114][Stage 97:=========================================>            (88 + 26) / 114][Stage 97:==============================================>      (101 + 13) / 114][Stage 97:===================================================>  (108 + 6) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.943534658 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39649798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===================================>                  (75 + 38) / 113][Stage 98:=========================================>            (86 + 27) / 113][Stage 98:==============================================>      (100 + 13) / 113][Stage 98:===================================================>  (107 + 6) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:====================================>                 (77 + 37) / 114][Stage 99:==========================================>           (90 + 24) / 114][Stage 99:===============================================>     (102 + 12) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.971086995 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418381896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:=============================>                       (66 + 54) / 120][Stage 100:=========================================>           (93 + 27) / 120][Stage 100:===============================================>    (110 + 10) / 120][Stage 100:====================================================>(119 + 1) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:============================>                        (64 + 57) / 121][Stage 101:====================================>                (84 + 37) / 121][Stage 101:============================================>       (103 + 18) / 121][Stage 101:===================================================> (118 + 3) / 121][Stage 101:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.07669377 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364590545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:====================================>                (80 + 35) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:===================================================> (111 + 4) / 115]                                                                                [Stage 103:=====================================>               (83 + 33) / 116][Stage 103:===========================================>         (95 + 21) / 116][Stage 103:=================================================>   (109 + 7) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.693720448 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=200", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=200,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352846103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:====================================>                (80 + 35) / 115][Stage 104:=========================================>           (90 + 25) / 115][Stage 104:==============================================>     (102 + 13) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:======================================>              (85 + 31) / 116][Stage 105:============================================>       (100 + 16) / 116][Stage 105:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.674288064 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423515729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===============================>                     (69 + 46) / 115][Stage 106:====================================>                (80 + 35) / 115][Stage 106:============================================>        (97 + 18) / 115][Stage 106:=================================================>   (108 + 7) / 115]                                                                                [Stage 107:===================================>                 (77 + 39) / 116][Stage 107:==========================================>          (92 + 24) / 116][Stage 107:=============================================>      (102 + 14) / 116][Stage 107:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.84254141 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=133", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=133,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374514682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===================================>                 (75 + 38) / 113][Stage 108:======================================>              (82 + 31) / 113][Stage 108:==============================================>     (101 + 12) / 113][Stage 108:==================================================>  (108 + 5) / 113][Stage 108:====================================================>(112 + 1) / 113]                                                                                [Stage 109:=================================>                   (73 + 41) / 114][Stage 109:=======================================>             (85 + 29) / 114][Stage 109:==========================================>          (92 + 22) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.962646364 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383776156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==============================>                      (67 + 48) / 115][Stage 110:======================================>              (84 + 31) / 115][Stage 110:=============================================>       (99 + 16) / 115][Stage 110:=================================================>   (107 + 8) / 115][Stage 110:===================================================> (112 + 3) / 115][Stage 110:====================================================>(114 + 1) / 115]                                                                                [Stage 111:===============================>                     (70 + 46) / 116][Stage 111:=======================================>             (87 + 29) / 116][Stage 111:============================================>       (100 + 16) / 116][Stage 111:===============================================>    (105 + 11) / 116][Stage 111:===================================================> (113 + 3) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.312507445 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=164,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417186998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:==============================>                      (68 + 52) / 120][Stage 112:===================================>                 (81 + 39) / 120][Stage 112:=============================================>      (106 + 14) / 120][Stage 112:===================================================> (117 + 3) / 120]                                                                                [Stage 113:============================>                        (65 + 56) / 121][Stage 113:=================================>                   (77 + 44) / 121][Stage 113:==========================================>          (97 + 24) / 121][Stage 113:=================================================>   (112 + 9) / 121][Stage 113:====================================================>(119 + 2) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.823537126 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360856091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:====================================>                (80 + 35) / 115][Stage 114:============================================>        (96 + 19) / 115][Stage 114:==================================================>  (110 + 5) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:======================================>              (84 + 32) / 116][Stage 115:=========================================>           (91 + 25) / 116][Stage 115:=============================================>       (99 + 17) / 116][Stage 115:===============================================>    (105 + 11) / 116][Stage 115:=================================================>   (108 + 8) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.667141158 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=117", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=117,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348360853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=====================================>               (81 + 34) / 115][Stage 116:=========================================>           (89 + 26) / 115][Stage 116:==============================================>     (103 + 12) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:=====================================>               (83 + 33) / 116][Stage 117:=======================================>             (86 + 30) / 116][Stage 117:===============================================>    (105 + 11) / 116][Stage 117:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.568427647 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=59,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46324315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:===================================>                 (79 + 39) / 118][Stage 118:==========================================>          (94 + 24) / 118][Stage 118:===============================================>    (108 + 10) / 118][Stage 118:====================================================>(117 + 1) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:=================================>                   (76 + 43) / 119][Stage 119:========================================>            (91 + 28) / 119][Stage 119:===============================================>    (108 + 11) / 119][Stage 119:====================================================>(117 + 2) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.374260754 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=25", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=25,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350699751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:======================================>              (83 + 32) / 115][Stage 120:=========================================>           (89 + 26) / 115][Stage 120:=============================================>       (99 + 16) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:=========================================>           (90 + 26) / 116][Stage 121:==============================================>     (103 + 13) / 116][Stage 121:==================================================>  (111 + 5) / 116][Stage 121:===================================================> (112 + 4) / 116][Stage 121:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.971543187 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (81 + 34) / 115][Stage 122:=======================================>             (85 + 30) / 115][Stage 122:=============================================>      (100 + 15) / 115][Stage 122:==================================================>  (110 + 5) / 115]                                                                                [Stage 123:======================================>              (84 + 32) / 116][Stage 123:============================================>       (100 + 16) / 116][Stage 123:===============================================>    (105 + 11) / 116][Stage 123:===================================================> (113 + 3) / 116][Stage 123:====================================================>(114 + 2) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.556847212 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402538105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (58 + 55) / 113][Stage 124:=============================>                       (62 + 51) / 113][Stage 124:=====================================>               (80 + 33) / 113][Stage 124:============================================>        (95 + 18) / 113][Stage 124:==================================================>  (108 + 5) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===========================>                         (59 + 55) / 114][Stage 125:================================>                    (69 + 45) / 114][Stage 125:======================================>              (82 + 32) / 114][Stage 125:==========================================>          (92 + 22) / 114][Stage 125:==============================================>     (102 + 12) / 114][Stage 125:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.104250688 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364144322 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===================================>                 (75 + 38) / 113][Stage 126:=========================================>           (89 + 24) / 113][Stage 126:==============================================>     (101 + 12) / 113][Stage 126:===================================================> (109 + 4) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:===================================>                 (77 + 37) / 114][Stage 127:==========================================>          (91 + 23) / 114][Stage 127:==============================================>     (102 + 12) / 114][Stage 127:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.193413733 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387451755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:==============================>                      (64 + 49) / 113][Stage 128:=========================================>           (88 + 25) / 113][Stage 128:================================================>    (104 + 9) / 113]                                                                                [Stage 129:============================>                        (61 + 53) / 114][Stage 129:================================>                    (70 + 44) / 114][Stage 129:========================================>            (88 + 26) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.522208504 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335204672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=====================================>               (82 + 33) / 115][Stage 130:============================================>        (96 + 19) / 115][Stage 130:=================================================>   (108 + 7) / 115][Stage 130:====================================================>(114 + 1) / 115]                                                                                [Stage 131:======================================>              (85 + 31) / 116][Stage 131:==========================================>          (93 + 23) / 116][Stage 131:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.713472909 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=250,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=======================================>             (85 + 30) / 115][Stage 132:=============================================>      (100 + 15) / 115][Stage 132:===================================================> (112 + 3) / 115]                                                                                [Stage 133:======================================>              (85 + 31) / 116][Stage 133:========================================>            (89 + 27) / 116][Stage 133:=============================================>       (99 + 17) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.519689634 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334491237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (80 + 35) / 115][Stage 134:=======================================>             (85 + 30) / 115][Stage 134:==============================================>     (102 + 13) / 115][Stage 134:===================================================> (112 + 3) / 115]                                                                                [Stage 135:=====================================>               (82 + 34) / 116][Stage 135:==========================================>          (92 + 24) / 116][Stage 135:============================================>       (100 + 16) / 116][Stage 135:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.632409378 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=121,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336361194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (82 + 33) / 115][Stage 136:=============================================>       (99 + 16) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:=======================================>             (86 + 30) / 116][Stage 137:===============================================>    (106 + 10) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.437287044 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335587038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:======================================>              (83 + 32) / 115][Stage 138:==========================================>          (93 + 22) / 115][Stage 138:===============================================>    (105 + 10) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:======================================>              (84 + 32) / 116][Stage 139:============================================>        (97 + 19) / 116][Stage 139:=================================================>   (109 + 7) / 116][Stage 139:===================================================> (113 + 3) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.93772538 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345528032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:============================================>        (97 + 18) / 115][Stage 140:====================================================>(113 + 2) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:=====================================>               (82 + 34) / 116][Stage 141:==========================================>          (94 + 22) / 116][Stage 141:==============================================>     (104 + 12) / 116][Stage 141:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.769270795 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33339759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:======================================>              (83 + 32) / 115][Stage 142:=============================================>       (99 + 16) / 115][Stage 142:==================================================>  (109 + 6) / 115][Stage 142:====================================================>(113 + 2) / 115]                                                                                [Stage 143:=====================================>               (81 + 35) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:============================================>        (98 + 18) / 116][Stage 143:=================================================>   (109 + 7) / 116][Stage 143:===================================================> (113 + 3) / 116][Stage 143:====================================================>(114 + 2) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.933530686 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36937721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (75 + 43) / 118][Stage 144:=======================================>             (87 + 31) / 118][Stage 144:===========================================>         (97 + 21) / 118][Stage 144:=================================================>   (111 + 7) / 118]                                                                                [Stage 145:=================================>                   (75 + 44) / 119][Stage 145:===================================>                 (80 + 39) / 119][Stage 145:==========================================>          (96 + 23) / 119][Stage 145:===============================================>    (108 + 11) / 119][Stage 145:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.148506317 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390068233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:================================>                    (70 + 43) / 113][Stage 146:=====================================>               (81 + 32) / 113][Stage 146:================================================>    (104 + 9) / 113][Stage 146:====================================================>(111 + 2) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:==============================>                      (65 + 49) / 114][Stage 147:====================================>                (78 + 36) / 114][Stage 147:============================================>        (96 + 18) / 114][Stage 147:===================================================> (110 + 4) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.244206411 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397686073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===============================>                     (69 + 46) / 115][Stage 148:========================================>            (88 + 27) / 115][Stage 148:===============================================>    (104 + 11) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:===============================>                     (69 + 47) / 116][Stage 149:=====================================>               (82 + 34) / 116][Stage 149:===========================================>         (95 + 21) / 116][Stage 149:=================================================>   (109 + 7) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.784109484 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334095459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (80 + 35) / 115][Stage 150:=========================================>           (89 + 26) / 115][Stage 150:================================================>    (106 + 9) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:=========================================>           (90 + 26) / 116][Stage 151:=============================================>      (101 + 15) / 116][Stage 151:===================================================> (113 + 3) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.765063574 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407018971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:===========================>                         (62 + 58) / 120][Stage 152:===============================>                     (72 + 48) / 120][Stage 152:=======================================>             (89 + 31) / 120][Stage 152:==================================================>  (114 + 6) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:=============================>                       (67 + 54) / 121][Stage 153:=========================================>           (94 + 27) / 121][Stage 153:==================================================>  (115 + 6) / 121][Stage 153:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.576436745 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=36", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=36,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404486742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:============================>                        (64 + 56) / 120][Stage 154:==============================>                      (70 + 50) / 120][Stage 154:=========================================>           (93 + 27) / 120][Stage 154:==================================================>  (114 + 6) / 120]                                                                                [Stage 155:============================>                        (66 + 55) / 121][Stage 155:==================================>                  (78 + 43) / 121][Stage 155:==============================================>     (108 + 13) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.892275047 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338366873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=====================================>               (82 + 33) / 115][Stage 156:=========================================>           (90 + 25) / 115][Stage 156:=============================================>       (98 + 17) / 115][Stage 156:==================================================>  (110 + 5) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:========================================>            (89 + 27) / 116][Stage 157:=============================================>      (102 + 14) / 116][Stage 157:================================================>    (107 + 9) / 116][Stage 157:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.95705392 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344023039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:=========================================>           (90 + 25) / 115][Stage 158:==============================================>     (103 + 12) / 115][Stage 158:====================================================>(113 + 2) / 115]                                                                                [Stage 159:=====================================>               (83 + 33) / 116][Stage 159:========================================>            (89 + 27) / 116][Stage 159:==============================================>     (103 + 13) / 116][Stage 159:=================================================>   (108 + 8) / 116][Stage 159:===================================================> (112 + 4) / 116][Stage 159:===================================================> (113 + 3) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.967537837 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377280921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==============================>                      (66 + 49) / 115][Stage 160:===================================>                 (78 + 37) / 115][Stage 160:===========================================>         (95 + 20) / 115][Stage 160:==============================================>     (103 + 12) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:=================================>                   (74 + 42) / 116][Stage 161:==========================================>          (92 + 24) / 116][Stage 161:================================================>    (107 + 9) / 116][Stage 161:==================================================>  (111 + 5) / 116][Stage 161:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.193994289 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=195,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (73 + 42) / 115][Stage 162:=========================================>           (89 + 26) / 115][Stage 162:================================================>    (106 + 9) / 115][Stage 162:===================================================> (111 + 4) / 115]                                                                                [Stage 163:==================================>                  (76 + 40) / 116][Stage 163:============================================>        (97 + 19) / 116][Stage 163:==================================================>  (110 + 6) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.799537546 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377847774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:>                                                      (0 + 0) / 115][Stage 164:=================================>                   (72 + 43) / 115][Stage 164:========================================>            (88 + 27) / 115][Stage 164:=============================================>      (100 + 15) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:===============================>                     (69 + 47) / 116][Stage 165:======================================>              (85 + 31) / 116][Stage 165:=============================================>      (102 + 14) / 116][Stage 165:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.723860706 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380688141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:============================>                        (61 + 52) / 113][Stage 166:================================>                    (70 + 43) / 113][Stage 166:==========================================>          (90 + 23) / 113][Stage 166:=================================================>   (105 + 8) / 113]                                                                                [Stage 167:============================>                        (62 + 52) / 114][Stage 167:===================================>                 (76 + 38) / 114][Stage 167:=============================================>       (97 + 17) / 114][Stage 167:==================================================>  (108 + 6) / 114][Stage 167:====================================================>(112 + 2) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.208107164 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=103", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=103,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366035987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (72 + 46) / 118][Stage 168:================================>                    (73 + 45) / 118][Stage 168:=======================================>             (87 + 31) / 118][Stage 168:=============================================>      (104 + 14) / 118][Stage 168:====================================================>(116 + 2) / 118]                                                                                [Stage 169:================================>                    (73 + 46) / 119][Stage 169:=================================>                   (75 + 44) / 119][Stage 169:========================================>            (90 + 29) / 119][Stage 169:================================================>    (110 + 9) / 119][Stage 169:===================================================> (115 + 4) / 119][Stage 169:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.516548735 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38243445 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=============================>                       (65 + 50) / 115][Stage 170:====================================>                (79 + 36) / 115][Stage 170:===========================================>         (94 + 21) / 115][Stage 170:==============================================>     (102 + 13) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:===================================================> (112 + 3) / 115]                                                                                [Stage 171:==================================>                  (75 + 41) / 116][Stage 171:=======================================>             (86 + 30) / 116][Stage 171:=============================================>       (99 + 17) / 116][Stage 171:==============================================>     (104 + 12) / 116][Stage 171:================================================>    (107 + 9) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:====================================================>(114 + 2) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.990619076 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===============================>                     (68 + 47) / 115][Stage 172:====================================>                (79 + 36) / 115][Stage 172:============================================>        (96 + 19) / 115][Stage 172:================================================>    (106 + 9) / 115][Stage 172:===================================================> (111 + 4) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:===============================>                     (70 + 46) / 116][Stage 173:=====================================>               (83 + 33) / 116][Stage 173:===============================================>    (105 + 11) / 116][Stage 173:==================================================>  (111 + 5) / 116][Stage 173:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.1384415 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377893194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (58 + 55) / 113][Stage 174:==============================>                      (64 + 49) / 113][Stage 174:=====================================>               (80 + 33) / 113][Stage 174:==============================================>     (100 + 13) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:===========================>                         (59 + 55) / 114][Stage 175:================================>                    (70 + 44) / 114][Stage 175:========================================>            (87 + 27) / 114][Stage 175:==============================================>      (99 + 15) / 114][Stage 175:====================================================>(112 + 2) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.614084141 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356942708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=====================================>               (79 + 34) / 113][Stage 176:==========================================>          (90 + 23) / 113][Stage 176:================================================>    (104 + 9) / 113][Stage 176:====================================================>(111 + 2) / 113]                                                                                [Stage 177:=================================>                   (73 + 41) / 114][Stage 177:========================================>            (88 + 26) / 114][Stage 177:============================================>        (96 + 18) / 114][Stage 177:=================================================>   (106 + 8) / 114][Stage 177:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.894453652 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide14;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==================================>                  (74 + 39) / 113][Stage 178:========================================>            (86 + 27) / 113][Stage 178:==============================================>     (100 + 13) / 113][Stage 178:=================================================>   (105 + 8) / 113][Stage 178:====================================================>(111 + 2) / 113]                                                                                [Stage 179:=====================================>               (81 + 33) / 114][Stage 179:=========================================>           (90 + 24) / 114][Stage 179:==============================================>     (103 + 11) / 114][Stage 179:===================================================> (111 + 3) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.741808837 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355146398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:====================================>                (79 + 36) / 115][Stage 180:=========================================>           (89 + 26) / 115][Stage 180:===============================================>    (105 + 10) / 115][Stage 180:===================================================> (111 + 4) / 115][Stage 180:====================================================>(113 + 2) / 115]                                                                                [Stage 181:=======================================>             (87 + 29) / 116][Stage 181:=============================================>       (99 + 17) / 116][Stage 181:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.835336203 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405336523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:=============================>                       (66 + 54) / 120][Stage 182:=========================================>           (95 + 25) / 120][Stage 182:====================================================>(118 + 2) / 120]                                                                                [Stage 183:===========================>                         (62 + 59) / 121][Stage 183:===============================>                     (71 + 50) / 121][Stage 183:======================================>              (89 + 32) / 121][Stage 183:=============================================>      (107 + 14) / 121][Stage 183:===================================================> (118 + 3) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.505376298 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374911524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==================================>                  (74 + 41) / 115][Stage 184:===========================================>         (94 + 21) / 115][Stage 184:===============================================>    (105 + 10) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:==================================>                  (76 + 40) / 116][Stage 185:==========================================>          (93 + 23) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.936722965 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=217,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393475132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (61 + 59) / 120][Stage 186:=============================>                       (66 + 54) / 120][Stage 186:=======================================>             (89 + 31) / 120][Stage 186:===========================================>         (98 + 22) / 120][Stage 186:====================================================>(118 + 2) / 120]                                                                                [Stage 187:===========================>                         (62 + 59) / 121][Stage 187:==================================>                  (79 + 42) / 121][Stage 187:==========================================>          (97 + 24) / 121][Stage 187:===================================================> (118 + 3) / 121][Stage 187:====================================================>(119 + 2) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.332063924 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393790783 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:===============================>                     (72 + 48) / 120][Stage 188:======================================>              (88 + 32) / 120][Stage 188:============================================>       (103 + 17) / 120][Stage 188:====================================================>(118 + 2) / 120]                                                                                [Stage 189:==========================>                          (61 + 60) / 121][Stage 189:==============================>                      (70 + 51) / 121][Stage 189:=======================================>             (91 + 30) / 121][Stage 189:==============================================>     (108 + 13) / 121][Stage 189:===================================================> (117 + 4) / 121][Stage 189:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.184349873 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34913261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:====================================>                (77 + 36) / 113][Stage 190:=========================================>           (88 + 25) / 113][Stage 190:==============================================>     (101 + 12) / 113][Stage 190:===================================================> (110 + 3) / 113]                                                                                [Stage 191:=================================>                   (73 + 41) / 114][Stage 191:=======================================>             (85 + 29) / 114][Stage 191:==========================================>          (92 + 22) / 114][Stage 191:==============================================>     (101 + 13) / 114][Stage 191:==================================================>  (109 + 5) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 6.091549768 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=================================>                   (71 + 42) / 113][Stage 192:======================================>              (83 + 30) / 113][Stage 192:============================================>        (95 + 18) / 113][Stage 192:===============================================>    (103 + 10) / 113]                                                                                [Stage 193:===================================>                 (76 + 38) / 114][Stage 193:========================================>            (88 + 26) / 114][Stage 193:==============================================>      (99 + 15) / 114][Stage 193:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.764546276 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384273906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:============================>                        (60 + 53) / 113][Stage 194:=================================>                   (72 + 41) / 113][Stage 194:==========================================>          (91 + 22) / 113][Stage 194:==================================================>  (107 + 6) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:===========================>                         (59 + 55) / 114][Stage 195:==============================>                      (65 + 49) / 114][Stage 195:=====================================>               (81 + 33) / 114][Stage 195:=================================================>   (107 + 7) / 114][Stage 195:====================================================>(112 + 2) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.343293798 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378406261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (58 + 55) / 113][Stage 196:==============================>                      (64 + 49) / 113][Stage 196:===================================>                 (75 + 38) / 113][Stage 196:==============================================>     (101 + 12) / 113][Stage 196:====================================================>(111 + 2) / 113]                                                                                [Stage 197:============================>                        (61 + 53) / 114][Stage 197:===================================>                 (76 + 38) / 114][Stage 197:================================================>    (105 + 9) / 114][Stage 197:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.350380435 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3447448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (81 + 34) / 115][Stage 198:========================================>            (87 + 28) / 115][Stage 198:=============================================>       (98 + 17) / 115][Stage 198:=================================================>   (108 + 7) / 115]                                                                                [Stage 199:======================================>              (84 + 32) / 116][Stage 199:==========================================>          (93 + 23) / 116][Stage 199:===============================================>    (106 + 10) / 116][Stage 199:=================================================>   (108 + 8) / 116][Stage 199:==================================================>  (111 + 5) / 116][Stage 199:====================================================>(114 + 2) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.531851163 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386061586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (59 + 54) / 113][Stage 200:==============================>                      (66 + 47) / 113][Stage 200:========================================>            (87 + 26) / 113][Stage 200:==============================================>     (100 + 13) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:===========================>                         (59 + 55) / 114][Stage 201:================================>                    (70 + 44) / 114][Stage 201:========================================>            (87 + 27) / 114][Stage 201:==============================================>     (103 + 11) / 114][Stage 201:====================================================>(112 + 2) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.654312635 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/31 23:46:46 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:43948) dropped. RpcEnv already stopped.
17/05/31 23:46:46 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:43948) dropped. RpcEnv already stopped.

real	11m33.591s
user	12m19.896s
sys	1m31.464s
