Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/06/01 03:04:58 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:05:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:05:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:05:13 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/06/01 03:05:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/06/01 03:05:26 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170601030515-0746).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.438244373 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=========================>                             (54 + 61) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (62 + 54) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.737577106 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.743226625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:>                                                        (0 + 0) / 113][Stage 2:====================>                                  (43 + 70) / 113][Stage 2:========================>                              (50 + 63) / 113][Stage 2:=========================>                             (52 + 61) / 113][Stage 2:=========================>                             (53 + 60) / 113][Stage 2:=============================>                         (60 + 53) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:==========================================>            (88 + 25) / 113][Stage 2:===============================================>      (100 + 13) / 113][Stage 2:====================================================>  (107 + 6) / 113]                                                                                [Stage 3:===========================>                           (58 + 56) / 114][Stage 3:============================>                          (59 + 55) / 114][Stage 3:===============================>                       (65 + 49) / 114][Stage 3:====================================>                  (75 + 39) / 114][Stage 3:=========================================>             (85 + 29) / 114][Stage 3:============================================>          (93 + 21) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.221601308 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.690096067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:========================>                              (51 + 62) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:================================>                      (66 + 47) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:=============================================>         (93 + 20) / 113][Stage 4:===================================================>   (105 + 8) / 113][Stage 4:======================================================>(112 + 1) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:==============================>                        (63 + 51) / 114][Stage 5:=================================>                     (69 + 45) / 114][Stage 5:=======================================>               (82 + 32) / 114][Stage 5:=============================================>         (94 + 20) / 114][Stage 5:===================================================>   (106 + 8) / 114][Stage 5:======================================================>(112 + 2) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.124175518 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==========================>                            (54 + 59) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:===============================>                       (64 + 49) / 113][Stage 6:==================================>                    (71 + 42) / 113][Stage 6:=======================================>               (82 + 31) / 113][Stage 6:===============================================>       (97 + 16) / 113][Stage 6:=====================================================> (109 + 4) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:============================>                          (59 + 55) / 114][Stage 7:===================================>                   (73 + 41) / 114][Stage 7:=======================================>               (81 + 33) / 114][Stage 7:=============================================>         (95 + 19) / 114][Stage 7:===================================================>   (106 + 8) / 114][Stage 7:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.501629289 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (56 + 57) / 113][Stage 8:============================>                          (59 + 54) / 113][Stage 8:================================>                      (67 + 46) / 113][Stage 8:=========================================>             (85 + 28) / 113][Stage 8:=============================================>         (93 + 20) / 113][Stage 8:================================================>      (99 + 14) / 113][Stage 8:=====================================================> (110 + 3) / 113]                                                                                [Stage 9:=============================>                         (61 + 53) / 114][Stage 9:==================================>                    (71 + 43) / 114][Stage 9:=========================================>             (85 + 29) / 114][Stage 9:============================================>          (93 + 21) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.239816373 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.601161274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===============================>                      (68 + 50) / 118][Stage 10:================================>                     (72 + 46) / 118][Stage 10:=================================>                    (74 + 44) / 118][Stage 10:===========================================>          (94 + 24) / 118][Stage 10:===================================================>  (112 + 6) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:=================================>                    (74 + 45) / 119][Stage 11:====================================>                 (81 + 38) / 119][Stage 11:==========================================>           (93 + 26) / 119][Stage 11:=============================================>       (102 + 17) / 119][Stage 11:================================================>    (109 + 10) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.225397024 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=68,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483840198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:======================================>               (81 + 34) / 115][Stage 12:=========================================>            (88 + 27) / 115][Stage 12:==============================================>       (99 + 16) / 115][Stage 12:===================================================>  (109 + 6) / 115][Stage 12:====================================================> (111 + 4) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(113 + 2) / 115]                                                                                [Stage 13:======================================>               (82 + 34) / 116][Stage 13:=======================================>              (85 + 31) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.188033907 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502261022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (70 + 43) / 113][Stage 14:===================================>                  (75 + 38) / 113][Stage 14:=========================================>            (86 + 27) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:==================================================>   (106 + 7) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:======================================>               (82 + 32) / 114][Stage 15:===========================================>          (92 + 22) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:===================================================>  (109 + 5) / 114][Stage 15:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.488461773 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=47,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522355442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==================================>                   (73 + 40) / 113][Stage 16:======================================>               (80 + 33) / 113][Stage 16:============================================>         (93 + 20) / 113][Stage 16:===============================================>     (102 + 11) / 113][Stage 16:===================================================>  (107 + 6) / 113][Stage 16:====================================================> (110 + 3) / 113]                                                                                [Stage 17:========================================>             (86 + 28) / 114][Stage 17:===========================================>          (92 + 22) / 114][Stage 17:==============================================>      (100 + 14) / 114][Stage 17:================================================>    (104 + 10) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:=====================================================>(112 + 2) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.807642799 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=221", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=221,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.584859565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:==============================>                       (67 + 53) / 120][Stage 18:======================================>               (85 + 35) / 120][Stage 18:==============================================>      (105 + 15) / 120][Stage 18:=====================================================>(119 + 1) / 120]                                                                                [Stage 19:========================>                             (55 + 66) / 121][Stage 19:===============================>                      (71 + 50) / 121][Stage 19:===================================>                  (79 + 42) / 121][Stage 19:=========================================>            (94 + 27) / 121][Stage 19:==============================================>      (107 + 14) / 121][Stage 19:================================================>    (110 + 11) / 121][Stage 19:=====================================================>(119 + 2) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.494019996 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50352374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:======================================>               (83 + 32) / 115][Stage 20:========================================>             (87 + 28) / 115][Stage 20:===============================================>     (103 + 12) / 115][Stage 20:===================================================>  (110 + 5) / 115][Stage 20:====================================================> (112 + 3) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:=======================================>              (85 + 31) / 116][Stage 21:============================================>         (95 + 21) / 116][Stage 21:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.296465893 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530655603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:============================>                         (63 + 57) / 120][Stage 22:=====================================>                (83 + 37) / 120][Stage 22:============================================>        (100 + 20) / 120][Stage 22:===============================================>     (107 + 13) / 120][Stage 22:==================================================>   (113 + 7) / 120][Stage 22:=====================================================>(119 + 1) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:==============================>                       (68 + 53) / 121][Stage 23:========================================>             (90 + 31) / 121][Stage 23:=============================================>       (105 + 16) / 121][Stage 23:==================================================>   (113 + 8) / 121][Stage 23:=====================================================>(119 + 2) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.80475901 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56837798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:==============================>                       (64 + 49) / 113][Stage 24:===================================>                  (75 + 38) / 113][Stage 24:============================================>         (94 + 19) / 113][Stage 24:===================================================>  (107 + 6) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===========================>                          (59 + 55) / 114][Stage 25:==============================>                       (65 + 49) / 114][Stage 25:=======================================>              (84 + 30) / 114][Stage 25:==============================================>      (101 + 13) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.940749408 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=32,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475366592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (73 + 45) / 118][Stage 26:===================================>                  (78 + 40) / 118][Stage 26:==========================================>           (93 + 25) / 118][Stage 26:============================================>        (100 + 18) / 118][Stage 26:===================================================>  (113 + 5) / 118]                                                                                [Stage 27:=================================>                    (74 + 45) / 119][Stage 27:===================================>                  (79 + 40) / 119][Stage 27:=======================================>              (86 + 33) / 119][Stage 27:===========================================>          (96 + 23) / 119][Stage 27:==================================================>   (111 + 8) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.032000783 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451317411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==================================>                   (73 + 40) / 113][Stage 28:=========================================>            (86 + 27) / 113][Stage 28:=============================================>        (96 + 17) / 113][Stage 28:==================================================>   (105 + 8) / 113][Stage 28:====================================================> (110 + 3) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===================================>                  (74 + 40) / 114][Stage 29:=======================================>              (83 + 31) / 114][Stage 29:==========================================>           (89 + 25) / 114][Stage 29:==============================================>       (98 + 16) / 114][Stage 29:==============================================>       (99 + 15) / 114][Stage 29:=================================================>    (105 + 9) / 114][Stage 29:==================================================>   (106 + 8) / 114][Stage 29:=====================================================>(112 + 2) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.512534747 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=141,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490981765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (69 + 46) / 115][Stage 30:==========================================>           (91 + 24) / 115][Stage 30:================================================>    (105 + 10) / 115][Stage 30:===================================================>  (109 + 6) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:=================================>                    (71 + 45) / 116][Stage 31:========================================>             (86 + 30) / 116][Stage 31:==============================================>       (99 + 17) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.101178561 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46432038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (64 + 51) / 115][Stage 32:======================================>               (81 + 34) / 115][Stage 32:==========================================>           (91 + 24) / 115][Stage 32:==================================================>   (108 + 7) / 115][Stage 32:=====================================================>(113 + 2) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:===============================>                      (67 + 49) / 116][Stage 33:========================================>             (87 + 29) / 116][Stage 33:=============================================>        (97 + 19) / 116][Stage 33:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.04247301 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428534114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=======================================>              (85 + 30) / 115][Stage 34:============================================>         (95 + 20) / 115][Stage 34:==================================================>   (108 + 7) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:======================================>               (82 + 34) / 116][Stage 35:=========================================>            (90 + 26) / 116][Stage 35:================================================>    (106 + 10) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.815560522 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide49;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (82 + 33) / 115][Stage 36:========================================>             (87 + 28) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:===================================================>  (110 + 5) / 115]                                                                                [Stage 37:========================================>             (88 + 28) / 116][Stage 37:==============================================>      (102 + 14) / 116][Stage 37:=====================================================>(114 + 2) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.866279363 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515662755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:===========================>                          (62 + 58) / 120][Stage 38:=====================================>                (83 + 37) / 120][Stage 38:=================================================>    (111 + 9) / 120][Stage 38:=====================================================>(119 + 1) / 120]                                                                                [Stage 39:===========================>                          (62 + 59) / 121][Stage 39:==============================>                       (68 + 53) / 121][Stage 39:==========================================>           (96 + 25) / 121][Stage 39:================================================>    (111 + 10) / 121][Stage 39:=====================================================>(119 + 2) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.248421534 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431465712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==================================>                   (73 + 40) / 113][Stage 40:======================================>               (81 + 32) / 113][Stage 40:===========================================>          (90 + 23) / 113][Stage 40:==============================================>       (97 + 16) / 113][Stage 40:==================================================>   (105 + 8) / 113][Stage 40:=====================================================>(111 + 2) / 113]                                                                                [Stage 41:====================================>                 (78 + 36) / 114][Stage 41:=======================================>              (84 + 30) / 114][Stage 41:=============================================>        (95 + 19) / 114][Stage 41:=================================================>    (105 + 9) / 114][Stage 41:==================================================>   (106 + 8) / 114][Stage 41:====================================================> (111 + 3) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 6.78831531 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===================================>                  (75 + 38) / 113][Stage 42:=======================================>              (82 + 31) / 113][Stage 42:===========================================>          (91 + 22) / 113][Stage 42:================================================>    (103 + 10) / 113][Stage 42:====================================================> (109 + 4) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:===================================>                  (75 + 39) / 114][Stage 43:======================================>               (81 + 33) / 114][Stage 43:=========================================>            (88 + 26) / 114][Stage 43:==============================================>      (101 + 13) / 114][Stage 43:==================================================>   (106 + 8) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:====================================================> (111 + 3) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.207899274 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425644369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (81 + 34) / 115][Stage 44:========================================>             (86 + 29) / 115][Stage 44:===============================================>     (102 + 13) / 115][Stage 44:===================================================>  (109 + 6) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:======================================>               (82 + 34) / 116][Stage 45:========================================>             (87 + 29) / 116][Stage 45:===============================================>     (103 + 13) / 116][Stage 45:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.854413935 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470065786 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (69 + 46) / 115][Stage 46:=======================================>              (84 + 31) / 115][Stage 46:===============================================>     (104 + 11) / 115][Stage 46:====================================================> (111 + 4) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:===============================>                      (67 + 49) / 116][Stage 47:====================================>                 (79 + 37) / 116][Stage 47:===========================================>          (93 + 23) / 116][Stage 47:==============================================>      (101 + 15) / 116][Stage 47:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.117268459 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467217058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:===============================>                      (65 + 48) / 113][Stage 48:=========================================>            (86 + 27) / 113][Stage 48:==============================================>      (100 + 13) / 113][Stage 48:=====================================================>(111 + 2) / 113]                                                                                [Stage 49:============================>                         (60 + 54) / 114][Stage 49:====================================>                 (77 + 37) / 114][Stage 49:=============================================>        (95 + 19) / 114][Stage 49:================================================>    (104 + 10) / 114][Stage 49:====================================================> (110 + 4) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.204583165 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444098407 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=====================================>                (79 + 34) / 113][Stage 50:==========================================>           (89 + 24) / 113][Stage 50:===============================================>      (99 + 14) / 113][Stage 50:==================================================>   (105 + 8) / 113][Stage 50:=====================================================>(111 + 2) / 113]                                                                                [Stage 51:==================================>                   (72 + 42) / 114][Stage 51:===================================>                  (75 + 39) / 114][Stage 51:=========================================>            (88 + 26) / 114][Stage 51:==============================================>       (99 + 15) / 114][Stage 51:==================================================>   (106 + 8) / 114][Stage 51:====================================================> (110 + 4) / 114][Stage 51:====================================================> (111 + 3) / 114][Stage 51:=====================================================>(112 + 2) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.303492969 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489495989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 59) / 120][Stage 52:================================>                     (72 + 48) / 120][Stage 52:========================================>             (90 + 30) / 120][Stage 52:=================================================>    (111 + 9) / 120]                                                                                [Stage 53:===========================>                          (62 + 59) / 121][Stage 53:=================================>                    (74 + 47) / 121][Stage 53:========================================>             (90 + 31) / 121][Stage 53:===============================================>     (109 + 12) / 121][Stage 53:=====================================================>(119 + 2) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.988886593 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (61 + 59) / 120][Stage 54:===============================>                      (69 + 51) / 120][Stage 54:========================================>             (91 + 29) / 120][Stage 54:================================================>    (109 + 11) / 120]                                                                                [Stage 55:===========================>                          (61 + 60) / 121][Stage 55:=============================>                        (67 + 54) / 121][Stage 55:======================================>               (86 + 35) / 121][Stage 55:=============================================>       (105 + 16) / 121][Stage 55:=====================================================>(119 + 2) / 121][Stage 55:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.932048336 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423747154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=================================>                    (70 + 43) / 113][Stage 56:=======================================>              (82 + 31) / 113][Stage 56:============================================>         (93 + 20) / 113][Stage 56:===============================================>     (102 + 11) / 113][Stage 56:====================================================> (110 + 3) / 113]                                                                                [Stage 57:===================================>                  (74 + 40) / 114][Stage 57:========================================>             (85 + 29) / 114][Stage 57:=============================================>        (97 + 17) / 114][Stage 57:==================================================>   (106 + 8) / 114][Stage 57:===================================================>  (109 + 5) / 114][Stage 57:=====================================================>(112 + 2) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.294388523 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431763063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:=============================>                        (62 + 51) / 113][Stage 58:================================>                     (69 + 44) / 113][Stage 58:===========================================>          (90 + 23) / 113][Stage 58:================================================>    (103 + 10) / 113]                                                                                [Stage 59:===========================>                          (59 + 55) / 114][Stage 59:===============================>                      (66 + 48) / 114][Stage 59:===========================================>          (91 + 23) / 114][Stage 59:==================================================>   (106 + 8) / 114][Stage 59:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.588677434 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide35;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:============================>                         (59 + 54) / 113][Stage 60:==================================>                   (72 + 41) / 113][Stage 60:============================================>         (93 + 20) / 113][Stage 60:====================================================> (109 + 4) / 113]                                                                                [Stage 61:===========================>                          (59 + 55) / 114][Stage 61:=================================>                    (70 + 44) / 114][Stage 61:==========================================>           (89 + 25) / 114][Stage 61:==================================================>   (107 + 7) / 114][Stage 61:=====================================================>(112 + 2) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.754032988 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435974634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:=============================>                        (62 + 51) / 113][Stage 62:===================================>                  (74 + 39) / 113][Stage 62:========================================>             (85 + 28) / 113][Stage 62:==================================================>   (106 + 7) / 113]                                                                                [Stage 63:============================>                         (60 + 54) / 114][Stage 63:================================>                     (69 + 45) / 114][Stage 63:============================================>         (94 + 20) / 114][Stage 63:=====================================================>(112 + 2) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.689798049 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465828558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (72 + 46) / 118][Stage 64:==================================>                   (76 + 42) / 118][Stage 64:=====================================>                (81 + 37) / 118][Stage 64:===========================================>          (95 + 23) / 118][Stage 64:=================================================>    (109 + 9) / 118][Stage 64:=====================================================>(116 + 2) / 118]                                                                                [Stage 65:=================================>                    (74 + 45) / 119][Stage 65:==================================>                   (77 + 42) / 119][Stage 65:=====================================>                (83 + 36) / 119][Stage 65:=========================================>            (92 + 27) / 119][Stage 65:=================================================>    (110 + 9) / 119][Stage 65:=====================================================>(117 + 2) / 119][Stage 65:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.341011654 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427171449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===============================>                      (68 + 47) / 115][Stage 66:=======================================>              (84 + 31) / 115][Stage 66:=============================================>        (96 + 19) / 115][Stage 66:=================================================>    (106 + 9) / 115][Stage 66:=====================================================>(113 + 2) / 115]                                                                                [Stage 67:=================================>                    (72 + 44) / 116][Stage 67:====================================>                 (78 + 38) / 116][Stage 67:==========================================>           (92 + 24) / 116][Stage 67:==============================================>      (102 + 14) / 116][Stage 67:===================================================>  (111 + 5) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.431279609 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=241,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430555257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (58 + 55) / 113][Stage 68:=============================>                        (61 + 52) / 113][Stage 68:================================>                     (68 + 45) / 113][Stage 68:===========================================>          (91 + 22) / 113][Stage 68:==================================================>   (106 + 7) / 113]                                                                                [Stage 69:============================>                         (60 + 54) / 114][Stage 69:=================================>                    (70 + 44) / 114][Stage 69:========================================>             (85 + 29) / 114][Stage 69:==============================================>       (98 + 16) / 114][Stage 69:===================================================>  (108 + 6) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.678403928 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399573458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:=================================>                    (74 + 44) / 118][Stage 70:==================================>                   (76 + 42) / 118][Stage 70:=====================================>                (82 + 36) / 118][Stage 70:=========================================>            (91 + 27) / 118][Stage 70:===============================================>     (106 + 12) / 118][Stage 70:====================================================> (115 + 3) / 118]                                                                                [Stage 71:=================================>                    (74 + 45) / 119][Stage 71:===================================>                  (78 + 41) / 119][Stage 71:====================================>                 (81 + 38) / 119][Stage 71:============================================>         (97 + 22) / 119][Stage 71:==================================================>   (111 + 8) / 119][Stage 71:===================================================>  (114 + 5) / 119][Stage 71:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.662608101 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470456745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (60 + 60) / 120][Stage 72:==============================>                       (68 + 52) / 120][Stage 72:==========================================>           (95 + 25) / 120][Stage 72:================================================>    (109 + 11) / 120][Stage 72:===================================================>  (115 + 5) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:=============================>                        (67 + 54) / 121][Stage 73:======================================>               (87 + 34) / 121][Stage 73:================================================>    (110 + 11) / 121][Stage 73:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 5.001568659 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=51,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405123661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===============================>                      (67 + 48) / 115][Stage 74:===================================>                  (76 + 39) / 115][Stage 74:=============================================>        (96 + 19) / 115][Stage 74:===============================================>     (103 + 12) / 115][Stage 74:===================================================>  (110 + 5) / 115]                                                                                [Stage 75:================================>                     (70 + 46) / 116][Stage 75:====================================>                 (78 + 38) / 116][Stage 75:==========================================>           (91 + 25) / 116][Stage 75:============================================>         (96 + 20) / 116][Stage 75:==============================================>      (102 + 14) / 116][Stage 75:==================================================>   (108 + 8) / 116][Stage 75:====================================================> (113 + 3) / 116][Stage 75:=====================================================>(114 + 2) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.83253483 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=180", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=180,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436509354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===============================>                      (67 + 48) / 115][Stage 76:=====================================>                (79 + 36) / 115][Stage 76:==============================================>      (100 + 15) / 115][Stage 76:====================================================> (111 + 4) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:===============================>                      (67 + 49) / 116][Stage 77:======================================>               (82 + 34) / 116][Stage 77:===========================================>          (94 + 22) / 116][Stage 77:===============================================>     (104 + 12) / 116][Stage 77:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.988523457 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386404368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=====================================>                (78 + 35) / 113][Stage 78:==========================================>           (88 + 25) / 113][Stage 78:==============================================>       (98 + 15) / 113][Stage 78:==================================================>   (105 + 8) / 113][Stage 78:=====================================================>(111 + 2) / 113]                                                                                [Stage 79:====================================>                 (76 + 38) / 114][Stage 79:==========================================>           (90 + 24) / 114][Stage 79:=============================================>        (97 + 17) / 114][Stage 79:==================================================>   (106 + 8) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.063681266 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408335699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===============================>                      (68 + 47) / 115][Stage 80:========================================>             (86 + 29) / 115][Stage 80:==============================================>      (100 + 15) / 115][Stage 80:====================================================> (111 + 4) / 115]                                                                                [Stage 81:=================================>                    (72 + 44) / 116][Stage 81:=======================================>              (85 + 31) / 116][Stage 81:==============================================>      (102 + 14) / 116][Stage 81:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.961050579 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382541729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:====================================>                 (76 + 37) / 113][Stage 82:===========================================>          (91 + 22) / 113][Stage 82:===============================================>     (101 + 12) / 113][Stage 82:====================================================> (109 + 4) / 113][Stage 82:=====================================================>(112 + 1) / 113]                                                                                [Stage 83:===================================>                  (74 + 40) / 114][Stage 83:========================================>             (86 + 28) / 114][Stage 83:==============================================>       (98 + 16) / 114][Stage 83:=================================================>    (105 + 9) / 114][Stage 83:====================================================> (111 + 3) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.607262024 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453276692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:===============================>                      (70 + 50) / 120][Stage 84:=======================================>              (88 + 32) / 120][Stage 84:==============================================>      (106 + 14) / 120][Stage 84:====================================================> (117 + 3) / 120]                                                                                [Stage 85:=============================>                        (67 + 54) / 121][Stage 85:==================================>                   (78 + 43) / 121][Stage 85:===========================================>          (97 + 24) / 121][Stage 85:==================================================>   (113 + 8) / 121][Stage 85:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 5.112767838 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374204369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (81 + 34) / 115][Stage 86:========================================>             (87 + 28) / 115][Stage 86:==============================================>      (101 + 14) / 115][Stage 86:====================================================> (111 + 4) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:======================================>               (82 + 34) / 116][Stage 87:========================================>             (87 + 29) / 116][Stage 87:=============================================>        (97 + 19) / 116][Stage 87:=================================================>    (107 + 9) / 116][Stage 87:=====================================================>(114 + 2) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.652663539 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=253,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide63;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:========================================>             (86 + 29) / 115][Stage 88:=============================================>        (97 + 18) / 115][Stage 88:===================================================>  (110 + 5) / 115]                                                                                [Stage 89:=======================================>              (85 + 31) / 116][Stage 89:==============================================>       (99 + 17) / 116][Stage 89:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.559061298 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=252", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=252,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387233858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===================================>                  (75 + 38) / 113][Stage 90:=========================================>            (87 + 26) / 113][Stage 90:=============================================>        (95 + 18) / 113][Stage 90:===================================================>  (107 + 6) / 113][Stage 90:====================================================> (110 + 3) / 113]                                                                                [Stage 91:======================================>               (82 + 32) / 114][Stage 91:==========================================>           (89 + 25) / 114][Stage 91:==============================================>       (99 + 15) / 114][Stage 91:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.015928936 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=178", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=178,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392771365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:=====================================>                (81 + 37) / 118][Stage 92:===========================================>          (95 + 23) / 118][Stage 92:====================================================> (115 + 3) / 118]                                                                                [Stage 93:=================================>                    (74 + 45) / 119][Stage 93:===================================>                  (78 + 41) / 119][Stage 93:============================================>         (98 + 21) / 119][Stage 93:================================================>    (108 + 11) / 119][Stage 93:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.848883544 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=72,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383069497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (72 + 46) / 118][Stage 94:==================================>                   (75 + 43) / 118][Stage 94:====================================>                 (79 + 39) / 118][Stage 94:==========================================>           (92 + 26) / 118][Stage 94:============================================>        (100 + 18) / 118][Stage 94:===================================================>  (113 + 5) / 118][Stage 94:=====================================================>(117 + 1) / 118]                                                                                [Stage 95:=================================>                    (74 + 45) / 119][Stage 95:==================================>                   (75 + 44) / 119][Stage 95:=====================================>                (83 + 36) / 119][Stage 95:===========================================>          (95 + 24) / 119][Stage 95:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.56987004 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=19", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=19,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360102273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (81 + 34) / 115][Stage 96:===========================================>          (92 + 23) / 115][Stage 96:==================================================>   (107 + 8) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:===========================================>          (94 + 22) / 116][Stage 97:=============================================>       (100 + 16) / 116][Stage 97:===================================================>  (110 + 6) / 116][Stage 97:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 6.25203821 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=136,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381295516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:===================================>                  (78 + 40) / 118][Stage 98:==========================================>           (92 + 26) / 118][Stage 98:=================================================>    (109 + 9) / 118][Stage 98:=====================================================>(116 + 2) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:==================================>                   (77 + 42) / 119][Stage 99:========================================>             (90 + 29) / 119][Stage 99:============================================>         (99 + 20) / 119][Stage 99:===================================================>  (113 + 6) / 119][Stage 99:====================================================> (116 + 3) / 119][Stage 99:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.956089618 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41747555 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:===========================>                         (63 + 57) / 120][Stage 100:==============================>                      (70 + 50) / 120][Stage 100:======================================>              (88 + 32) / 120][Stage 100:==============================================>     (108 + 12) / 120][Stage 100:===================================================> (116 + 4) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:===============================>                     (71 + 50) / 121][Stage 101:=====================================>               (85 + 36) / 121][Stage 101:==============================================>     (108 + 13) / 121][Stage 101:=================================================>   (113 + 8) / 121][Stage 101:===================================================> (117 + 4) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 7.815926361 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407829021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (67 + 48) / 115][Stage 102:==================================>                  (75 + 40) / 115][Stage 102:======================================>              (84 + 31) / 115][Stage 102:=============================================>      (101 + 14) / 115]                                                                                [Stage 103:===============================>                     (68 + 48) / 116][Stage 103:=====================================>               (81 + 35) / 116][Stage 103:===========================================>         (95 + 21) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.801490355 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413742912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (58 + 55) / 113][Stage 104:=============================>                       (63 + 50) / 113][Stage 104:=====================================>               (81 + 32) / 113][Stage 104:=============================================>       (98 + 15) / 113][Stage 104:===================================================> (110 + 3) / 113]                                                                                [Stage 105:===========================>                         (59 + 55) / 114][Stage 105:=============================>                       (64 + 50) / 114][Stage 105:=====================================>               (81 + 33) / 114][Stage 105:===============================================>    (104 + 10) / 114][Stage 105:==================================================>  (108 + 6) / 114][Stage 105:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.513619527 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399185401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:=====================================>               (81 + 34) / 115][Stage 106:=============================================>       (98 + 17) / 115][Stage 106:==================================================>  (110 + 5) / 115]                                                                                [Stage 107:===================================>                 (77 + 39) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:=================================================>   (109 + 7) / 116][Stage 107:=====================================================(116 + 0) / 116]                                                                                Time elapsed: 2.72019303 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383921765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:================================>                    (72 + 46) / 118][Stage 108:================================>                    (73 + 45) / 118][Stage 108:===================================>                 (79 + 39) / 118][Stage 108:=======================================>             (87 + 31) / 118][Stage 108:===========================================>         (96 + 22) / 118][Stage 108:==================================================>  (113 + 5) / 118]                                                                                [Stage 109:================================>                    (73 + 46) / 119][Stage 109:==================================>                  (77 + 42) / 119][Stage 109:======================================>              (87 + 32) / 119][Stage 109:==========================================>          (96 + 23) / 119][Stage 109:==============================================>     (107 + 12) / 119][Stage 109:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.06314394 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=78", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=78,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403186111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===============================>                     (68 + 47) / 115][Stage 110:====================================>                (80 + 35) / 115][Stage 110:==========================================>          (92 + 23) / 115][Stage 110:===============================================>    (105 + 10) / 115][Stage 110:====================================================>(113 + 2) / 115]                                                                                [Stage 111:================================>                    (72 + 44) / 116][Stage 111:=====================================>               (82 + 34) / 116][Stage 111:=========================================>           (91 + 25) / 116][Stage 111:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.86445448 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=165", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=165,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415117374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:>                                                      (0 + 0) / 120][Stage 112:==========================>                          (60 + 60) / 120][Stage 112:==============================>                      (69 + 51) / 120][Stage 112:=====================================>               (85 + 35) / 120][Stage 112:=============================================>      (106 + 14) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:============================>                        (65 + 56) / 121][Stage 113:====================================>                (83 + 38) / 121][Stage 113:==========================================>         (100 + 21) / 121][Stage 113:=================================================>   (113 + 8) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.592881438 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=196,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388991482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==============================>                      (66 + 49) / 115][Stage 114:=====================================>               (81 + 34) / 115][Stage 114:==========================================>          (92 + 23) / 115][Stage 114:==================================================>  (110 + 5) / 115]                                                                                [Stage 115:==================================>                  (76 + 40) / 116][Stage 115:==========================================>          (94 + 22) / 116][Stage 115:=================================================>   (108 + 8) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.721151754 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415470752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (61 + 59) / 120][Stage 116:=================================>                   (75 + 45) / 120][Stage 116:=========================================>           (94 + 26) / 120][Stage 116:===================================================> (116 + 4) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:============================>                        (64 + 57) / 121][Stage 117:====================================>                (83 + 38) / 121][Stage 117:==========================================>          (97 + 24) / 121][Stage 117:==================================================>  (115 + 6) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.320346953 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364449103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:==========================================>          (92 + 23) / 115][Stage 118:================================================>    (106 + 9) / 115][Stage 118:==================================================>  (109 + 6) / 115]                                                                                [Stage 119:======================================>              (84 + 32) / 116][Stage 119:============================================>        (97 + 19) / 116][Stage 119:=================================================>   (108 + 8) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.761368212 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=104,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373643181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==================================>                  (73 + 40) / 113][Stage 120:======================================>              (83 + 30) / 113][Stage 120:===========================================>         (93 + 20) / 113][Stage 120:===============================================>    (103 + 10) / 113][Stage 120:===================================================> (109 + 4) / 113]                                                                                [Stage 121:===================================>                 (77 + 37) / 114][Stage 121:=======================================>             (84 + 30) / 114][Stage 121:==========================================>          (92 + 22) / 114][Stage 121:==============================================>     (103 + 11) / 114][Stage 121:===================================================> (110 + 4) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.404448248 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:====================================>                (78 + 35) / 113][Stage 122:=========================================>           (88 + 25) / 113][Stage 122:============================================>        (95 + 18) / 113][Stage 122:==================================================>  (108 + 5) / 113]                                                                                [Stage 123:===================================>                 (76 + 38) / 114][Stage 123:=========================================>           (90 + 24) / 114][Stage 123:==============================================>      (99 + 15) / 114][Stage 123:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.935065616 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389162432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=================================>                   (75 + 43) / 118][Stage 124:====================================>                (82 + 36) / 118][Stage 124:==========================================>          (95 + 23) / 118][Stage 124:================================================>    (109 + 9) / 118][Stage 124:====================================================>(116 + 2) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:================================>                    (74 + 45) / 119][Stage 125:===================================>                 (80 + 39) / 119][Stage 125:=======================================>             (88 + 31) / 119][Stage 125:===========================================>        (100 + 19) / 119][Stage 125:=================================================>   (111 + 8) / 119][Stage 125:====================================================>(117 + 2) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.238522557 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=86", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=79 AND partitionZIndex<=86,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378230155 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:================================>                    (73 + 45) / 118][Stage 126:==================================>                  (76 + 42) / 118][Stage 126:=======================================>             (89 + 29) / 118][Stage 126:============================================>        (98 + 20) / 118][Stage 126:==============================================>     (106 + 12) / 118][Stage 126:===================================================> (115 + 3) / 118]                                                                                [Stage 127:================================>                    (73 + 46) / 119][Stage 127:=================================>                   (75 + 44) / 119][Stage 127:====================================>                (82 + 37) / 119][Stage 127:==========================================>          (95 + 24) / 119][Stage 127:===============================================>    (108 + 11) / 119][Stage 127:==================================================>  (114 + 5) / 119][Stage 127:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.267153437 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=123,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399430276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 59) / 120][Stage 128:==============================>                      (70 + 50) / 120][Stage 128:=======================================>             (89 + 31) / 120][Stage 128:=================================================>   (113 + 7) / 120]                                                                                [Stage 129:===========================>                         (62 + 59) / 121][Stage 129:==================================>                  (78 + 43) / 121][Stage 129:===========================================>         (99 + 22) / 121][Stage 129:==================================================>  (115 + 6) / 121][Stage 129:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.49833344 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide7;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:=============================>                       (67 + 53) / 120][Stage 130:====================================>                (82 + 38) / 120][Stage 130:=============================================>      (106 + 14) / 120][Stage 130:====================================================>(119 + 1) / 120]                                                                                [Stage 131:==========================>                          (61 + 60) / 121][Stage 131:=============================>                       (67 + 54) / 121][Stage 131:===================================>                 (80 + 41) / 121][Stage 131:===========================================>        (101 + 20) / 121][Stage 131:===================================================> (117 + 4) / 121][Stage 131:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.913418808 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390277792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==================================>                  (74 + 41) / 115][Stage 132:=======================================>             (86 + 29) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:===================================================> (111 + 4) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:================================>                    (72 + 44) / 116][Stage 133:=========================================>           (90 + 26) / 116][Stage 133:===============================================>    (106 + 10) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.884959788 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394428366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 59) / 120][Stage 134:==============================>                      (70 + 50) / 120][Stage 134:==================================>                  (78 + 42) / 120][Stage 134:===========================================>         (99 + 21) / 120][Stage 134:===================================================> (116 + 4) / 120]                                                                                [Stage 135:===========================>                         (62 + 59) / 121][Stage 135:===============================>                     (73 + 48) / 121][Stage 135:=====================================>               (85 + 36) / 121][Stage 135:===============================================>    (111 + 10) / 121][Stage 135:====================================================>(119 + 2) / 121][Stage 135:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.719927862 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377885519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===============================>                     (68 + 47) / 115][Stage 136:====================================>                (79 + 36) / 115][Stage 136:=============================================>       (99 + 16) / 115][Stage 136:==================================================>  (109 + 6) / 115]                                                                                [Stage 137:====================================>                (80 + 36) / 116][Stage 137:=========================================>           (90 + 26) / 116][Stage 137:================================================>    (107 + 9) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.689714277 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=77", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=77,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395831913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (60 + 60) / 120][Stage 138:============================>                        (65 + 55) / 120][Stage 138:=====================================>               (85 + 35) / 120][Stage 138:=============================================>      (104 + 16) / 120][Stage 138:====================================================>(118 + 2) / 120]                                                                                [Stage 139:==========================>                          (61 + 60) / 121][Stage 139:=============================>                       (68 + 53) / 121][Stage 139:======================================>              (87 + 34) / 121][Stage 139:=============================================>      (106 + 15) / 121][Stage 139:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.376431878 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=215", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=215,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359890639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===============================>                     (71 + 47) / 118][Stage 140:=================================>                   (74 + 44) / 118][Stage 140:====================================>                (81 + 37) / 118][Stage 140:========================================>            (90 + 28) / 118][Stage 140:============================================>       (102 + 16) / 118][Stage 140:===================================================> (114 + 4) / 118]                                                                                [Stage 141:================================>                    (73 + 46) / 119][Stage 141:=================================>                   (75 + 44) / 119][Stage 141:=====================================>               (84 + 35) / 119][Stage 141:=========================================>           (93 + 26) / 119][Stage 141:=============================================>      (104 + 15) / 119][Stage 141:===================================================> (116 + 3) / 119][Stage 141:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.258253357 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358448185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=================================>                   (72 + 41) / 113][Stage 142:=======================================>             (85 + 28) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:=================================================>   (106 + 7) / 113][Stage 142:===================================================> (109 + 4) / 113][Stage 142:====================================================>(111 + 2) / 113]                                                                                [Stage 143:====================================>                (79 + 35) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:==============================================>     (102 + 12) / 114][Stage 143:==================================================>  (108 + 6) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.352606228 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=30,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364969099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (76 + 42) / 118][Stage 144:======================================>              (86 + 32) / 118][Stage 144:=============================================>      (103 + 15) / 118][Stage 144:================================================>    (109 + 9) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:================================>                    (74 + 45) / 119][Stage 145:==================================>                  (77 + 42) / 119][Stage 145:========================================>            (92 + 27) / 119][Stage 145:==============================================>     (106 + 13) / 119][Stage 145:====================================================>(117 + 2) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.809870245 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37108733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==============================>                      (66 + 49) / 115][Stage 146:=====================================>               (81 + 34) / 115][Stage 146:============================================>        (97 + 18) / 115][Stage 146:==================================================>  (110 + 5) / 115]                                                                                [Stage 147:=================================>                   (73 + 43) / 116][Stage 147:========================================>            (89 + 27) / 116][Stage 147:============================================>        (98 + 18) / 116][Stage 147:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.870194017 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=237,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412473825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:=============================>                       (67 + 53) / 120][Stage 148:===========================================>         (99 + 21) / 120][Stage 148:==================================================>  (114 + 6) / 120]                                                                                [Stage 149:============================>                        (65 + 56) / 121][Stage 149:===================================>                 (80 + 41) / 121][Stage 149:==========================================>          (96 + 25) / 121][Stage 149:===============================================>    (111 + 10) / 121][Stage 149:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.546905809 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide21;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:===============================>                     (72 + 48) / 120][Stage 150:====================================>                (82 + 38) / 120][Stage 150:=============================================>      (105 + 15) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:===============================>                     (71 + 50) / 121][Stage 151:======================================>              (87 + 34) / 121][Stage 151:=============================================>      (106 + 15) / 121][Stage 151:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.836580181 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356204814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==================================>                  (73 + 40) / 113][Stage 152:=======================================>             (85 + 28) / 113][Stage 152:=============================================>       (97 + 16) / 113][Stage 152:==================================================>  (107 + 6) / 113][Stage 152:===================================================> (109 + 4) / 113]                                                                                [Stage 153:===================================>                 (77 + 37) / 114][Stage 153:========================================>            (88 + 26) / 114][Stage 153:=============================================>       (97 + 17) / 114][Stage 153:==============================================>     (102 + 12) / 114][Stage 153:=================================================>   (107 + 7) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.472599876 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398688277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (58 + 55) / 113][Stage 154:=============================>                       (63 + 50) / 113][Stage 154:==================================>                  (74 + 39) / 113][Stage 154:===========================================>         (92 + 21) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:================================>                    (69 + 45) / 114][Stage 155:=======================================>             (86 + 28) / 114][Stage 155:===============================================>    (104 + 10) / 114][Stage 155:=================================================>   (107 + 7) / 114][Stage 155:====================================================>(112 + 2) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.275009759 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=200", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=200,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481222945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:=============================>                       (67 + 53) / 120][Stage 156:================================>                    (74 + 46) / 120][Stage 156:==========================================>          (97 + 23) / 120][Stage 156:=================================================>   (113 + 7) / 120][Stage 156:====================================================>(118 + 2) / 120]                                                                                [Stage 157:============================>                        (65 + 56) / 121][Stage 157:==================================>                  (79 + 42) / 121][Stage 157:==========================================>          (96 + 25) / 121][Stage 157:=================================================>   (112 + 9) / 121][Stage 157:===================================================> (118 + 3) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.313395707 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384178466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:============================>                        (60 + 53) / 113][Stage 158:================================>                    (69 + 44) / 113][Stage 158:======================================>              (82 + 31) / 113][Stage 158:=============================================>       (98 + 15) / 113][Stage 158:===================================================> (110 + 3) / 113]                                                                                [Stage 159:===========================>                         (59 + 55) / 114][Stage 159:==============================>                      (66 + 48) / 114][Stage 159:==================================>                  (75 + 39) / 114][Stage 159:=============================================>       (98 + 16) / 114][Stage 159:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.40247989 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=192,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37904412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (70 + 45) / 115][Stage 160:===================================>                 (78 + 37) / 115][Stage 160:==========================================>          (93 + 22) / 115][Stage 160:=================================================>   (107 + 8) / 115]                                                                                [Stage 161:=================================>                   (73 + 43) / 116][Stage 161:=====================================>               (82 + 34) / 116][Stage 161:==========================================>          (94 + 22) / 116][Stage 161:==============================================>     (104 + 12) / 116][Stage 161:===================================================> (112 + 4) / 116][Stage 161:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.170684395 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide28;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=================================>                   (72 + 43) / 115][Stage 162:========================================>            (87 + 28) / 115][Stage 162:===========================================>         (94 + 21) / 115][Stage 162:===============================================>    (104 + 11) / 115]                                                                                [Stage 163:===============================>                     (70 + 46) / 116][Stage 163:=======================================>             (86 + 30) / 116][Stage 163:===========================================>         (96 + 20) / 116][Stage 163:=================================================>   (108 + 8) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.086618196 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404880377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:==============================>                      (68 + 52) / 120][Stage 164:===========================================>        (100 + 20) / 120][Stage 164:====================================================>(118 + 2) / 120]                                                                                [Stage 165:===========================>                         (63 + 58) / 121][Stage 165:=================================>                   (77 + 44) / 121][Stage 165:=========================================>           (95 + 26) / 121][Stage 165:=================================================>   (114 + 7) / 121][Stage 165:====================================================>(119 + 2) / 121][Stage 165:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.747484092 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide42;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (61 + 59) / 120][Stage 166:===============================>                     (71 + 49) / 120][Stage 166:===========================================>         (98 + 22) / 120][Stage 166:=================================================>   (111 + 9) / 120][Stage 166:====================================================>(118 + 2) / 120]                                                                                [Stage 167:============================>                        (64 + 57) / 121][Stage 167:=================================>                   (76 + 45) / 121][Stage 167:============================================>       (103 + 18) / 121][Stage 167:==================================================>  (116 + 5) / 121][Stage 167:===================================================> (118 + 3) / 121][Stage 167:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.069593727 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4034807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:===============================>                     (72 + 48) / 120][Stage 168:======================================>              (88 + 32) / 120][Stage 168:===============================================>    (109 + 11) / 120][Stage 168:===================================================> (116 + 4) / 120]                                                                                [Stage 169:=============================>                       (67 + 54) / 121][Stage 169:=================================>                   (76 + 45) / 121][Stage 169:============================================>       (104 + 17) / 121][Stage 169:===================================================> (117 + 4) / 121][Stage 169:====================================================>(119 + 2) / 121][Stage 169:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.860277527 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide70;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:==============================>                      (70 + 50) / 120][Stage 170:=====================================>               (86 + 34) / 120][Stage 170:=============================================>      (104 + 16) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:==========================>                          (61 + 60) / 121][Stage 171:===============================>                     (71 + 50) / 121][Stage 171:====================================>                (83 + 38) / 121][Stage 171:==============================================>     (109 + 12) / 121][Stage 171:===================================================> (118 + 3) / 121][Stage 171:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.056577624 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36671072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (75 + 43) / 118][Stage 172:===================================>                 (80 + 38) / 118][Stage 172:===========================================>         (97 + 21) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:===================================>                 (79 + 40) / 119][Stage 173:=========================================>           (93 + 26) / 119][Stage 173:===============================================>    (109 + 10) / 119][Stage 173:====================================================>(117 + 2) / 119][Stage 173:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.729340537 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377789132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:===================================>                 (78 + 40) / 118][Stage 174:=======================================>             (89 + 29) / 118][Stage 174:=============================================>      (104 + 14) / 118][Stage 174:====================================================>(116 + 2) / 118]                                                                                [Stage 175:================================>                    (73 + 46) / 119][Stage 175:==================================>                  (77 + 42) / 119][Stage 175:=======================================>             (89 + 30) / 119][Stage 175:============================================>       (101 + 18) / 119][Stage 175:===================================================> (115 + 4) / 119][Stage 175:====================================================>(117 + 2) / 119][Stage 175:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.01887797 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33114523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=====================================>               (81 + 34) / 115][Stage 176:=======================================>             (85 + 30) / 115][Stage 176:================================================>    (106 + 9) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:=====================================>               (82 + 34) / 116][Stage 177:=======================================>             (87 + 29) / 116][Stage 177:=============================================>       (99 + 17) / 116][Stage 177:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.582056867 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=39,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409426538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:===============================>                     (67 + 46) / 113][Stage 178:==========================================>          (90 + 23) / 113][Stage 178:=================================================>   (105 + 8) / 113]                                                                                [Stage 179:============================>                        (62 + 52) / 114][Stage 179:==================================>                  (75 + 39) / 114][Stage 179:==========================================>          (91 + 23) / 114][Stage 179:=================================================>   (107 + 7) / 114][Stage 179:===================================================> (111 + 3) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.467644934 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337576462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:======================================>              (84 + 31) / 115][Stage 180:==============================================>     (102 + 13) / 115][Stage 180:=================================================>   (108 + 7) / 115]                                                                                [Stage 181:======================================>              (85 + 31) / 116][Stage 181:===========================================>         (96 + 20) / 116][Stage 181:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 2.572568015 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407649218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (71 + 44) / 115][Stage 182:=======================================>             (86 + 29) / 115][Stage 182:=============================================>       (98 + 17) / 115][Stage 182:==================================================>  (109 + 6) / 115]                                                                                [Stage 183:=================================>                   (73 + 43) / 116][Stage 183:========================================>            (89 + 27) / 116][Stage 183:==============================================>     (103 + 13) / 116][Stage 183:===================================================> (113 + 3) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.920382249 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370859802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==============================>                      (67 + 48) / 115][Stage 184:======================================>              (83 + 32) / 115][Stage 184:===========================================>         (94 + 21) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:====================================================>(113 + 2) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:===============================>                     (69 + 47) / 116][Stage 185:=======================================>             (87 + 29) / 116][Stage 185:=============================================>      (102 + 14) / 116][Stage 185:==================================================>  (111 + 5) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.367945188 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381579471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:============================>                        (61 + 52) / 113][Stage 186:================================>                    (69 + 44) / 113][Stage 186:===========================================>         (93 + 20) / 113][Stage 186:==================================================>  (107 + 6) / 113][Stage 186:====================================================>(111 + 2) / 113]                                                                                [Stage 187:===========================>                         (60 + 54) / 114][Stage 187:===============================>                     (67 + 47) / 114][Stage 187:======================================>              (82 + 32) / 114][Stage 187:=============================================>       (98 + 16) / 114][Stage 187:===================================================> (110 + 4) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.754895345 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33594174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (84 + 31) / 115][Stage 188:===========================================>         (94 + 21) / 115][Stage 188:===============================================>    (104 + 11) / 115][Stage 188:==================================================>  (109 + 6) / 115]                                                                                [Stage 189:======================================>              (84 + 32) / 116][Stage 189:========================================>            (89 + 27) / 116][Stage 189:============================================>        (98 + 18) / 116][Stage 189:================================================>    (107 + 9) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.310490528 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358585751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:=================================>                   (74 + 44) / 118][Stage 190:=====================================>               (84 + 34) / 118][Stage 190:========================================>            (90 + 28) / 118][Stage 190:==============================================>     (105 + 13) / 118][Stage 190:====================================================>(117 + 1) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:===================================>                 (79 + 40) / 119][Stage 191:========================================>            (92 + 27) / 119][Stage 191:==============================================>     (107 + 12) / 119][Stage 191:==================================================>  (114 + 5) / 119][Stage 191:====================================================>(117 + 2) / 119][Stage 191:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.047988082 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=202,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357168876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:================================>                    (73 + 45) / 118][Stage 192:======================================>              (86 + 32) / 118][Stage 192:===============================================>    (107 + 11) / 118][Stage 192:===================================================> (115 + 3) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:===================================>                 (80 + 39) / 119][Stage 193:=============================================>      (103 + 16) / 119][Stage 193:===================================================> (115 + 4) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.643372153 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399041249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (61 + 59) / 120][Stage 194:=================================>                   (76 + 44) / 120][Stage 194:=========================================>           (93 + 27) / 120][Stage 194:===============================================>    (109 + 11) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:================================>                    (75 + 46) / 121][Stage 195:=========================================>           (95 + 26) / 121][Stage 195:=================================================>   (113 + 8) / 121][Stage 195:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.517406584 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
org.apache.spark.sql.AnalysisException: Path does not exist: hdfs://ctl:9000/nidan/orc/individualORC/slide56;
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:382)
  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:370)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
  at scala.collection.immutable.List.foreach(List.scala:381)
  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
  at scala.collection.immutable.List.flatMap(List.scala:344)
  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:370)
  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:152)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:464)
  at org.apache.spark.sql.DataFrameReader.orc(DataFrameReader.scala:453)
  at $anonfun$1.apply$mcV$sp(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at $anonfun$1.apply(<console>:36)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:==============================>                      (68 + 52) / 120][Stage 196:=====================================>               (85 + 35) / 120][Stage 196:===============================================>    (110 + 10) / 120]                                                                                [Stage 197:============================>                        (64 + 57) / 121][Stage 197:=================================>                   (76 + 45) / 121][Stage 197:==========================================>          (98 + 23) / 121][Stage 197:===================================================> (117 + 4) / 121][Stage 197:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.520016186 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38905062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (72 + 41) / 113][Stage 198:=======================================>             (84 + 29) / 113][Stage 198:=============================================>       (96 + 17) / 113][Stage 198:==================================================>  (108 + 5) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:===================================>                 (76 + 38) / 114][Stage 199:======================================>              (82 + 32) / 114][Stage 199:==========================================>          (91 + 23) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:================================================>    (105 + 9) / 114][Stage 199:=================================================>   (107 + 7) / 114][Stage 199:===================================================> (111 + 3) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.580561932 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331334667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:========================================>            (87 + 28) / 115][Stage 200:============================================>        (97 + 18) / 115][Stage 200:===============================================>    (105 + 10) / 115][Stage 200:===================================================> (112 + 3) / 115]                                                                                [Stage 201:======================================>              (84 + 32) / 116][Stage 201:===========================================>         (95 + 21) / 116][Stage 201:===============================================>    (106 + 10) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.861001668 seconds
res203: Int = 0

scala> 

scala> :quit
17/06/01 03:16:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48332) dropped. RpcEnv already stopped.
17/06/01 03:16:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48332) dropped. RpcEnv already stopped.
17/06/01 03:16:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:48200) dropped. RpcEnv already stopped.
17/06/01 03:16:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:48200) dropped. RpcEnv already stopped.

real	11m35.739s
user	12m23.408s
sys	1m25.436s
