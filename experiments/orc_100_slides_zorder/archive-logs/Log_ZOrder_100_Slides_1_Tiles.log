Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 04:05:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:06:01 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:06:01 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:06:02 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 04:06:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:06:15 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525040604-0634).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.345341204 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=========>                                             (20 + 95) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (73 + 42) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.694997878 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZInd ex<=25", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=25,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.709786866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=============================>                         (60 + 53) / 113][Stage 2:===============================>                       (65 + 48) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:====================================>                  (74 + 39) / 113][Stage 2:=======================================>               (82 + 31) / 113][Stage 2:=========================================>             (86 + 27) / 113][Stage 2:============================================>          (91 + 22) / 113][Stage 2:===============================================>       (98 + 15) / 113][Stage 2:===================================================>   (106 + 7) / 113][Stage 2:======================================================>(111 + 2) / 113]                                                                                [Stage 3:==================================>                    (72 + 42) / 114][Stage 3:===================================>                   (74 + 40) / 114][Stage 3:======================================>                (80 + 34) / 114][Stage 3:===========================================>           (91 + 23) / 114][Stage 3:=============================================>         (94 + 20) / 114][Stage 3:=================================================>    (104 + 10) / 114][Stage 3:====================================================>  (109 + 5) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.390920219 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZInd ex<=64", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.706557985 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:========================>                              (50 + 63) / 113][Stage 4:=============================>                         (60 + 53) / 113][Stage 4:===============================>                       (65 + 48) / 113][Stage 4:===================================>                   (73 + 40) / 113][Stage 4:=========================================>             (86 + 27) / 113][Stage 4:================================================>      (99 + 14) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:============================>                          (59 + 55) / 114][Stage 5:===============================>                       (66 + 48) / 114][Stage 5:====================================>                  (76 + 38) / 114][Stage 5:==========================================>            (89 + 25) / 114][Stage 5:===================================================>   (107 + 7) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.139843964 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZInd ex<=81", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=81,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.523368264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:=============================================>         (96 + 19) / 115][Stage 6:===============================================>       (99 + 16) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:=====================================================> (111 + 4) / 115]                                                                                [Stage 7:=======================================>               (83 + 33) / 116][Stage 7:==========================================>            (89 + 27) / 116][Stage 7:==============================================>        (99 + 17) / 116][Stage 7:===================================================>   (108 + 8) / 116][Stage 7:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.781382454 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIn dex<=157", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.590902785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:=============================>                         (61 + 54) / 115][Stage 8:===============================>                       (66 + 49) / 115][Stage 8:==================================>                    (73 + 42) / 115][Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:======================================>                (81 + 34) / 115][Stage 8:=============================================>         (96 + 19) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:====================================================>  (110 + 5) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:=================================>                     (71 + 45) / 116][Stage 9:=======================================>               (83 + 33) / 116][Stage 9:==========================================>            (90 + 26) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:==============================================>        (99 + 17) / 116][Stage 9:===================================================>   (109 + 7) / 116][Stage 9:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.550966606 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZInd ex<=44", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=44,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465640214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=====================================>                (80 + 35) / 115][Stage 10:======================================>               (82 + 33) / 115][Stage 10:=======================================>              (85 + 30) / 115][Stage 10:==============================================>       (98 + 17) / 115][Stage 10:===============================================>     (102 + 13) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:====================================================> (112 + 3) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:======================================>               (83 + 33) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:==============================================>      (102 + 14) / 116][Stage 11:==================================================>   (108 + 8) / 116][Stage 11:====================================================> (113 + 3) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.518604887 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZInde x<=1", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=1,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.728981511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=========================>                            (57 + 63) / 120][Stage 12:============================>                         (63 + 57) / 120][Stage 12:=================================>                    (75 + 45) / 120][Stage 12:====================================>                 (82 + 38) / 120][Stage 12:==========================================>           (94 + 26) / 120][Stage 12:================================================>    (110 + 10) / 120][Stage 12:====================================================> (117 + 3) / 120][Stage 12:=====================================================>(118 + 2) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:============================>                         (64 + 57) / 121][Stage 13:=================================>                    (75 + 46) / 121][Stage 13:=======================================>              (88 + 33) / 121][Stage 13:============================================>        (101 + 20) / 121][Stage 13:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 4.005041658 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIn dex<=110", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=110,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562909563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:=============================>                        (62 + 51) / 113][Stage 14:====================================>                 (77 + 36) / 113][Stage 14:============================================>         (93 + 20) / 113][Stage 14:==============================================>      (100 + 13) / 113][Stage 14:====================================================> (109 + 4) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:============================>                         (61 + 53) / 114][Stage 15:====================================>                 (77 + 37) / 114][Stage 15:========================================>             (86 + 28) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.601691164 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIn dex<=177", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449267222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:=====================================>                (80 + 35) / 115][Stage 16:======================================>               (83 + 32) / 115][Stage 16:============================================>         (94 + 21) / 115][Stage 16:===============================================>     (104 + 11) / 115][Stage 16:==================================================>   (107 + 8) / 115][Stage 16:====================================================> (112 + 3) / 115]                                                                                [Stage 17:======================================>               (83 + 33) / 116][Stage 17:==========================================>           (92 + 24) / 116][Stage 17:===============================================>     (103 + 13) / 116][Stage 17:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.313478252 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIn dex<=144", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=144,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.666667739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:==========================>                           (60 + 61) / 121][Stage 18:===============================>                      (71 + 50) / 121][Stage 18:======================================>               (86 + 35) / 121][Stage 18:==============================================>      (106 + 15) / 121][Stage 18:===================================================>  (116 + 5) / 121]                                                                                [Stage 19:===========================>                          (61 + 61) / 122][Stage 19:==============================>                       (68 + 54) / 122][Stage 19:===================================>                  (80 + 42) / 122][Stage 19:==============================================>      (107 + 15) / 122][Stage 19:===================================================>  (116 + 6) / 122][Stage 19:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.697483541 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIn dex<=197", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=197,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.546282772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:==============================>                       (65 + 50) / 115][Stage 20:====================================>                 (77 + 38) / 115][Stage 20:============================================>         (95 + 20) / 115][Stage 20:===================================================>  (109 + 6) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:================================>                     (70 + 46) / 116][Stage 21:=======================================>              (85 + 31) / 116][Stage 21:=============================================>       (100 + 16) / 116][Stage 21:===============================================>     (105 + 11) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.641963458 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIn dex<=122", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=122,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504935195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:====================================>                 (80 + 38) / 118][Stage 22:=============================================>       (102 + 16) / 118][Stage 22:===================================================>  (112 + 6) / 118][Stage 22:===================================================>  (113 + 5) / 118][Stage 22:=====================================================>(117 + 1) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (77 + 42) / 119][Stage 23:=========================================>            (91 + 28) / 119][Stage 23:===============================================>     (106 + 13) / 119][Stage 23:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.518795373 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIn dex<=240", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=240,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506325697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:============================>                         (60 + 53) / 113][Stage 24:================================>                     (67 + 46) / 113][Stage 24:=========================================>            (86 + 27) / 113][Stage 24:==================================================>   (105 + 8) / 113][Stage 24:====================================================> (110 + 3) / 113]                                                                                [Stage 25:===========================>                          (59 + 55) / 114][Stage 25:===================================>                  (74 + 40) / 114][Stage 25:========================================>             (86 + 28) / 114][Stage 25:==============================================>      (101 + 13) / 114][Stage 25:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.397473949 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIn dex<=184", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=184,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448725306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:====================================>                 (77 + 36) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:================================================>    (103 + 10) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:=====================================>                (79 + 35) / 114][Stage 27:===========================================>          (91 + 23) / 114][Stage 27:==============================================>      (101 + 13) / 114][Stage 27:===================================================>  (108 + 6) / 114][Stage 27:====================================================> (110 + 4) / 114][Stage 27:=====================================================>(112 + 2) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.612273089 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIn dex<=183", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=183,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46350338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:===============================>                      (67 + 48) / 115][Stage 28:=====================================>                (79 + 36) / 115][Stage 28:==============================================>      (101 + 14) / 115][Stage 28:==================================================>   (108 + 7) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:================================>                     (69 + 47) / 116][Stage 29:=========================================>            (89 + 27) / 116][Stage 29:===================================================>  (110 + 6) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.314874465 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIn dex<=156", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=156,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466916103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:=================================>                    (70 + 43) / 113][Stage 30:====================================>                 (77 + 36) / 113][Stage 30:=========================================>            (86 + 27) / 113][Stage 30:============================================>         (93 + 20) / 113][Stage 30:==============================================>      (100 + 13) / 113][Stage 30:===================================================>  (107 + 6) / 113]                                                                                [Stage 31:=====================================>                (79 + 35) / 114][Stage 31:============================================>         (93 + 21) / 114][Stage 31:==============================================>      (101 + 13) / 114][Stage 31:=================================================>    (105 + 9) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.756428231 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIn dex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437897878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:==================================>                   (76 + 42) / 118][Stage 32:=======================================>              (86 + 32) / 118][Stage 32:==============================================>      (104 + 14) / 118][Stage 32:===================================================>  (113 + 5) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:===================================>                  (78 + 41) / 119][Stage 33:========================================>             (90 + 29) / 119][Stage 33:================================================>    (109 + 10) / 119][Stage 33:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.457023865 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZInd ex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462545441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:=================================>                    (70 + 43) / 113][Stage 34:=======================================>              (82 + 31) / 113][Stage 34:============================================>         (93 + 20) / 113][Stage 34:================================================>    (103 + 10) / 113][Stage 34:===================================================>  (107 + 6) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:=======================================>              (83 + 31) / 114][Stage 35:========================================>             (86 + 28) / 114][Stage 35:==============================================>      (100 + 14) / 114][Stage 35:==================================================>   (106 + 8) / 114][Stage 35:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.611451932 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZInd ex<=78", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489857767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:===========================>                          (58 + 55) / 113][Stage 36:============================>                         (60 + 53) / 113][Stage 36:=====================================>                (78 + 35) / 113][Stage 36:============================================>         (93 + 20) / 113][Stage 36:==================================================>   (105 + 8) / 113][Stage 36:=====================================================>(111 + 2) / 113]                                                                                [Stage 37:===========================>                          (59 + 55) / 114][Stage 37:==============================>                       (65 + 49) / 114][Stage 37:======================================>               (81 + 33) / 114][Stage 37:==============================================>       (98 + 16) / 114][Stage 37:==================================================>   (107 + 7) / 114][Stage 37:====================================================> (110 + 4) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.61441236 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZInde x<=7", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=7,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468602828 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=================================>                    (71 + 42) / 113][Stage 38:======================================>               (81 + 32) / 113][Stage 38:===========================================>          (92 + 21) / 113][Stage 38:===============================================>     (101 + 12) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===================================>                  (74 + 40) / 114][Stage 39:=======================================>              (83 + 31) / 114][Stage 39:=========================================>            (87 + 27) / 114][Stage 39:============================================>         (93 + 21) / 114][Stage 39:==============================================>      (100 + 14) / 114][Stage 39:==================================================>   (106 + 8) / 114][Stage 39:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.472646276 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZInde x<=5", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516955713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===================================>                  (75 + 38) / 113][Stage 40:=========================================>            (86 + 27) / 113][Stage 40:==============================================>       (97 + 16) / 113][Stage 40:===================================================>  (107 + 6) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:====================================>                 (76 + 38) / 114][Stage 41:========================================>             (86 + 28) / 114][Stage 41:==============================================>      (100 + 14) / 114][Stage 41:=================================================>    (105 + 9) / 114][Stage 41:=====================================================>(112 + 2) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.341418341 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZInd ex<=94", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=94,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513672411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:============================>                         (59 + 54) / 113][Stage 42:===============================>                      (66 + 47) / 113][Stage 42:======================================>               (81 + 32) / 113][Stage 42:==================================================>   (105 + 8) / 113]                                                                                [Stage 43:============================>                         (60 + 54) / 114][Stage 43:===================================>                  (74 + 40) / 114][Stage 43:============================================>         (93 + 21) / 114][Stage 43:====================================================> (110 + 4) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.065132952 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIn dex<=180", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=180,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4146481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:====================================>                 (77 + 36) / 113][Stage 44:=========================================>            (87 + 26) / 113][Stage 44:===============================================>     (101 + 12) / 113][Stage 44:====================================================> (109 + 4) / 113][Stage 44:=====================================================>(112 + 1) / 113]                                                                                [Stage 45:====================================>                 (77 + 37) / 114][Stage 45:=========================================>            (87 + 27) / 114][Stage 45:=============================================>        (96 + 18) / 114][Stage 45:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.028018623 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIn dex<=175", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437805843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:===============================>                      (68 + 47) / 115][Stage 46:======================================>               (82 + 33) / 115][Stage 46:===============================================>     (102 + 13) / 115][Stage 46:=================================================>    (106 + 9) / 115][Stage 46:=====================================================>(113 + 2) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:================================>                     (70 + 46) / 116][Stage 47:=======================================>              (84 + 32) / 116][Stage 47:=============================================>       (100 + 16) / 116][Stage 47:====================================================> (112 + 4) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.191415018 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIn dex<=116", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=116,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431453898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:==============================>                       (64 + 51) / 115][Stage 48:===============================>                      (68 + 47) / 115][Stage 48:===========================================>          (92 + 23) / 115][Stage 48:==================================================>   (107 + 8) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:===============================>                      (68 + 48) / 116][Stage 49:=======================================>              (85 + 31) / 116][Stage 49:===============================================>     (104 + 12) / 116][Stage 49:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.702574234 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZInd ex<=34", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=34,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456856542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:==========================>                           (60 + 61) / 121][Stage 50:============================>                         (63 + 58) / 121][Stage 50:=================================>                    (75 + 46) / 121][Stage 50:============================================>        (101 + 20) / 121][Stage 50:====================================================> (117 + 4) / 121][Stage 50:=====================================================>(120 + 1) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:=============================>                        (66 + 56) / 122][Stage 51:====================================>                 (82 + 40) / 122][Stage 51:==============================================>      (108 + 14) / 122][Stage 51:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.354020598 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZInd ex<=69", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=69,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447544314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:============================>                         (59 + 54) / 113][Stage 52:============================>                         (60 + 53) / 113][Stage 52:===================================>                  (74 + 39) / 113][Stage 52:=============================================>        (95 + 18) / 113][Stage 52:==================================================>   (105 + 8) / 113][Stage 52:====================================================> (109 + 4) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:=====================================>                (80 + 34) / 114][Stage 53:==============================================>       (99 + 15) / 114][Stage 53:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.29663439 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIn dex<=166", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=166,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464901691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:============================>                         (63 + 58) / 121][Stage 54:=====================================>                (84 + 37) / 121][Stage 54:==============================================>      (107 + 14) / 121][Stage 54:===================================================>  (116 + 5) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:============================>                         (64 + 58) / 122][Stage 55:==================================>                   (78 + 44) / 122][Stage 55:==========================================>           (97 + 25) / 122][Stage 55:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.156931365 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZInd ex<=88", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=88,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447988216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:===============================>                      (70 + 50) / 120][Stage 56:=====================================>                (84 + 36) / 120][Stage 56:============================================>        (100 + 20) / 120][Stage 56:====================================================> (116 + 4) / 120]                                                                                [Stage 57:============================>                         (63 + 58) / 121][Stage 57:================================>                     (72 + 49) / 121][Stage 57:========================================>             (91 + 30) / 121][Stage 57:===============================================>     (109 + 12) / 121][Stage 57:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.271298016 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIn dex<=119", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=119,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410711801 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:==============================>                       (66 + 49) / 115][Stage 58:======================================>               (81 + 34) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:===================================================>  (110 + 5) / 115]                                                                                [Stage 59:=================================>                    (73 + 43) / 116][Stage 59:========================================>             (86 + 30) / 116][Stage 59:================================================>    (106 + 10) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.863256381 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIn dex<=149", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39746071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:===================================>                  (74 + 39) / 113][Stage 60:===========================================>          (91 + 22) / 113][Stage 60:==============================================>       (98 + 15) / 113][Stage 60:====================================================> (110 + 3) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:=======================================>              (83 + 31) / 114][Stage 61:============================================>         (93 + 21) / 114][Stage 61:==============================================>      (101 + 13) / 114][Stage 61:===================================================>  (109 + 5) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.276428749 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIn dex<=105", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=105,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44022109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:==============================>                       (65 + 50) / 115][Stage 62:=====================================>                (80 + 35) / 115][Stage 62:===========================================>          (92 + 23) / 115][Stage 62:===============================================>     (103 + 12) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:===============================>                      (68 + 48) / 116][Stage 63:=====================================>                (80 + 36) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.836698344 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZInd ex<=99", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478422806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:===========================>                          (61 + 60) / 121][Stage 64:==============================>                       (69 + 52) / 121][Stage 64:=====================================>                (83 + 38) / 121][Stage 64:============================================>         (99 + 22) / 121][Stage 64:===================================================>  (116 + 5) / 121][Stage 64:=====================================================>(120 + 1) / 121]                                                                                [Stage 65:===========================>                          (61 + 61) / 122][Stage 65:=============================>                        (66 + 56) / 122][Stage 65:====================================>                 (82 + 40) / 122][Stage 65:==============================================>      (107 + 15) / 122][Stage 65:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.377492994 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIn dex<=138", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=138,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390588925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:======================================>               (81 + 34) / 115][Stage 66:=======================================>              (85 + 30) / 115][Stage 66:==============================================>       (99 + 16) / 115][Stage 66:==================================================>   (108 + 7) / 115][Stage 66:====================================================> (111 + 4) / 115]                                                                                [Stage 67:=======================================>              (85 + 31) / 116][Stage 67:=============================================>        (98 + 18) / 116][Stage 67:===================================================>  (110 + 6) / 116][Stage 67:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.416969455 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIn dex<=147", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=147,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40603408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:==============================>                       (66 + 49) / 115][Stage 68:======================================>               (81 + 34) / 115][Stage 68:============================================>         (95 + 20) / 115][Stage 68:===============================================>     (102 + 13) / 115][Stage 68:=====================================================>(113 + 2) / 115]                                                                                [Stage 69:=====================================>                (80 + 36) / 116][Stage 69:============================================>         (96 + 20) / 116][Stage 69:===================================================>  (110 + 6) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.922391956 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIn dex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43818107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:>                                                       (0 + 0) / 113][Stage 70:============================>                         (59 + 54) / 113][Stage 70:================================>                     (67 + 46) / 113][Stage 70:======================================>               (80 + 33) / 113][Stage 70:===============================================>      (99 + 14) / 113][Stage 70:===================================================>  (108 + 5) / 113]                                                                                [Stage 71:============================>                         (60 + 54) / 114][Stage 71:==================================>                   (72 + 42) / 114][Stage 71:========================================>             (86 + 28) / 114][Stage 71:===============================================>     (102 + 12) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.244495423 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIn dex<=117", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=117,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431080605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:============================>                         (59 + 54) / 113][Stage 72:==============================>                       (63 + 50) / 113][Stage 72:=======================================>              (82 + 31) / 113][Stage 72:============================================>         (94 + 19) / 113][Stage 72:===================================================>  (107 + 6) / 113][Stage 72:=====================================================>(111 + 2) / 113]                                                                                [Stage 73:============================>                         (61 + 53) / 114][Stage 73:===================================>                  (74 + 40) / 114][Stage 73:==========================================>           (90 + 24) / 114][Stage 73:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.333394031 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIn dex<=230", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=230 AND partitionZIndex<=230,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440596454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:===============================>                      (70 + 51) / 121][Stage 74:========================================>             (90 + 31) / 121][Stage 74:=================================================>    (112 + 9) / 121][Stage 74:=====================================================>(120 + 1) / 121]                                                                                [Stage 75:===========================>                          (61 + 61) / 122][Stage 75:============================>                         (65 + 57) / 122][Stage 75:==================================>                   (78 + 44) / 122][Stage 75:============================================>        (103 + 19) / 122][Stage 75:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.155106407 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZInd ex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.548136296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:===========================>                          (61 + 59) / 120][Stage 76:===============================>                      (71 + 49) / 120][Stage 76:===========================================>          (97 + 23) / 120][Stage 76:===================================================>  (115 + 5) / 120]                                                                                [Stage 77:=============================>                        (65 + 56) / 121][Stage 77:==================================>                   (77 + 44) / 121][Stage 77:============================================>        (101 + 20) / 121][Stage 77:===================================================>  (116 + 5) / 121][Stage 77:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.151292389 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIn dex<=178", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39291545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:==============================>                       (65 + 50) / 115][Stage 78:======================================>               (82 + 33) / 115][Stage 78:==============================================>      (100 + 15) / 115][Stage 78:===================================================>  (109 + 6) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:===============================>                      (68 + 48) / 116][Stage 79:======================================>               (82 + 34) / 116][Stage 79:===========================================>          (93 + 23) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.026010955 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIn dex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379370598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:=================================>                    (71 + 42) / 113][Stage 80:=======================================>              (83 + 30) / 113][Stage 80:=============================================>        (96 + 17) / 113][Stage 80:================================================>    (103 + 10) / 113][Stage 80:===================================================>  (108 + 5) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:====================================>                 (76 + 38) / 114][Stage 81:=========================================>            (88 + 26) / 114][Stage 81:==============================================>       (98 + 16) / 114][Stage 81:==================================================>   (107 + 7) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.169652174 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIn dex<=244", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353718935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:======================================>               (83 + 32) / 115][Stage 82:==============================================>      (101 + 14) / 115][Stage 82:=====================================================>(113 + 2) / 115]                                                                                [Stage 83:======================================>               (82 + 34) / 116][Stage 83:========================================>             (88 + 28) / 116][Stage 83:=================================================>    (107 + 9) / 116][Stage 83:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.573821215 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZInd ex<=56", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=56,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403348242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:==============================>                       (65 + 50) / 115][Stage 84:====================================>                 (77 + 38) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:===================================================>  (110 + 5) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:===============================>                      (67 + 49) / 116][Stage 85:====================================>                 (79 + 37) / 116][Stage 85:============================================>         (95 + 21) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:=====================================================>(114 + 2) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.322864468 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIn dex<=201", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=201,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373229754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:=====================================>                (79 + 34) / 113][Stage 86:============================================>         (93 + 20) / 113][Stage 86:================================================>    (103 + 10) / 113][Stage 86:=====================================================>(111 + 2) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:====================================>                 (76 + 38) / 114][Stage 87:=========================================>            (87 + 27) / 114][Stage 87:============================================>         (93 + 21) / 114][Stage 87:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.959870748 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIn dex<=228", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=228,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399305719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===============================>                      (68 + 47) / 115][Stage 88:========================================>             (87 + 28) / 115][Stage 88:==============================================>      (100 + 15) / 115][Stage 88:===================================================>  (109 + 6) / 115]                                                                                [Stage 89:========================================>             (86 + 30) / 116][Stage 89:==============================================>       (99 + 17) / 116][Stage 89:===================================================>  (111 + 5) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.972689124 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZInd ex<=76", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=76,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376471358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:=================================>                    (74 + 44) / 118][Stage 90:========================================>             (89 + 29) / 118][Stage 90:================================================>    (108 + 10) / 118][Stage 90:=====================================================>(117 + 1) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:===================================>                  (79 + 40) / 119][Stage 91:===========================================>          (95 + 24) / 119][Stage 91:===================================================>  (114 + 5) / 119][Stage 91:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.984323299 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIn dex<=107", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=107,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372304554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:=====================================>                (78 + 35) / 113][Stage 92:===========================================>          (92 + 21) / 113][Stage 92:===============================================>     (101 + 12) / 113][Stage 92:=====================================================>(111 + 2) / 113]                                                                                [Stage 93:====================================>                 (76 + 38) / 114][Stage 93:==========================================>           (90 + 24) / 114][Stage 93:================================================>    (104 + 10) / 114][Stage 93:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.735816766 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZInd ex<=66", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=66,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435689155 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:=================================>                    (75 + 45) / 120][Stage 94:============================================>         (98 + 22) / 120][Stage 94:===================================================>  (115 + 5) / 120]                                                                                [Stage 95:===========================>                          (61 + 60) / 121][Stage 95:================================>                     (73 + 48) / 121][Stage 95:=============================================>       (103 + 18) / 121][Stage 95:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.078050297 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZInd ex<=97", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373495037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:======================================>               (80 + 33) / 113][Stage 96:==========================================>           (89 + 24) / 113][Stage 96:==============================================>       (97 + 16) / 113][Stage 96:==================================================>   (105 + 8) / 113][Stage 96:====================================================> (110 + 3) / 113]                                                                                [Stage 97:=====================================>                (80 + 34) / 114][Stage 97:==========================================>           (90 + 24) / 114][Stage 97:==============================================>      (101 + 13) / 114][Stage 97:====================================================> (110 + 4) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.156948815 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZInd ex<=20", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=20,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396211419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (58 + 55) / 113][Stage 98:===============================>                      (66 + 47) / 113][Stage 98:========================================>             (85 + 28) / 113][Stage 98:=============================================>        (96 + 17) / 113][Stage 98:====================================================> (109 + 4) / 113]                                                                                [Stage 99:============================>                         (60 + 54) / 114][Stage 99:=================================>                    (70 + 44) / 114][Stage 99:==========================================>           (89 + 25) / 114][Stage 99:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.093374019 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZInd ex<=86", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=86,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410790394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:===========================>                         (62 + 59) / 121][Stage 100:=================================>                   (77 + 44) / 121][Stage 100:===========================================>         (99 + 22) / 121][Stage 100:====================================================>(120 + 1) / 121]                                                                                [Stage 101:==========================>                          (61 + 61) / 122][Stage 101:=============================>                       (68 + 54) / 122][Stage 101:===================================>                 (82 + 40) / 122][Stage 101:==========================================>          (97 + 25) / 122][Stage 101:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.985249919 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIn dex<=234", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=234,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386743951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:===================================>                 (78 + 37) / 115][Stage 102:==========================================>          (93 + 22) / 115][Stage 102:=============================================>      (100 + 15) / 115][Stage 102:===================================================> (111 + 4) / 115]                                                                                [Stage 103:================================>                    (72 + 44) / 116][Stage 103:========================================>            (88 + 28) / 116][Stage 103:=============================================>      (102 + 14) / 116][Stage 103:===================================================> (113 + 3) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.219404408 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIn dex<=218", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=218,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394171118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:===================================>                 (80 + 38) / 118][Stage 104:==========================================>          (94 + 24) / 118][Stage 104:==================================================>  (112 + 6) / 118][Stage 104:====================================================>(117 + 1) / 118]                                                                                [Stage 105:================================>                    (73 + 46) / 119][Stage 105:===================================>                 (79 + 40) / 119][Stage 105:==========================================>          (96 + 23) / 119][Stage 105:==============================================>     (106 + 13) / 119][Stage 105:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.226445199 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZInd ex<=72", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=72,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37427794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:================================>                    (73 + 45) / 118][Stage 106:=====================================>               (83 + 35) / 118][Stage 106:===========================================>         (97 + 21) / 118][Stage 106:===============================================>    (108 + 10) / 118][Stage 106:====================================================>(117 + 1) / 118]                                                                                [Stage 107:=================================>                   (75 + 44) / 119][Stage 107:====================================>                (83 + 36) / 119][Stage 107:=========================================>           (94 + 25) / 119][Stage 107:===============================================>    (109 + 10) / 119][Stage 107:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.333633827 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZInde x<=9", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=9,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359460066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (79 + 34) / 113][Stage 108:==========================================>          (91 + 22) / 113][Stage 108:==============================================>     (102 + 11) / 113]                                                                                [Stage 109:======================================>              (82 + 32) / 114][Stage 109:===========================================>         (93 + 21) / 114][Stage 109:==============================================>     (101 + 13) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:===================================================> (110 + 4) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.361820858 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIn dex<=112", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=112,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377126823 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:=================================>                   (74 + 44) / 118][Stage 110:======================================>              (85 + 33) / 118][Stage 110:=========================================>           (93 + 25) / 118][Stage 110:==================================================>  (112 + 6) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:=================================>                   (75 + 44) / 119][Stage 111:========================================>            (90 + 29) / 119][Stage 111:=============================================>      (104 + 15) / 119][Stage 111:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.219767806 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIn dex<=132", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376451923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:===================================>                 (78 + 40) / 118][Stage 112:=========================================>           (92 + 26) / 118][Stage 112:==============================================>     (105 + 13) / 118][Stage 112:====================================================>(117 + 1) / 118]                                                                                [Stage 113:==================================>                  (78 + 41) / 119][Stage 113:========================================>            (91 + 28) / 119][Stage 113:==============================================>     (107 + 12) / 119][Stage 113:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.931740092 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIn dex<=118", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340722809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:=====================================>               (81 + 34) / 115][Stage 114:=========================================>           (89 + 26) / 115][Stage 114:===============================================>    (104 + 11) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:====================================>                (80 + 36) / 116][Stage 115:=========================================>           (91 + 25) / 116][Stage 115:================================================>    (107 + 9) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.570508566 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIn dex<=158", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=158,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390549518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:===========================>                         (58 + 55) / 113][Stage 116:============================>                        (61 + 52) / 113][Stage 116:=================================>                   (72 + 41) / 113][Stage 116:===========================================>         (92 + 21) / 113][Stage 116:=================================================>   (105 + 8) / 113]                                                                                [Stage 117:============================>                        (62 + 52) / 114][Stage 117:=================================>                   (71 + 43) / 114][Stage 117:==========================================>          (92 + 22) / 114][Stage 117:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.034473959 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZInd ex<=67", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=67,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345130055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:=====================================>               (82 + 33) / 115][Stage 118:===========================================>         (95 + 20) / 115][Stage 118:================================================>    (106 + 9) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=====================================>               (82 + 34) / 116][Stage 119:========================================>            (89 + 27) / 116][Stage 119:===============================================>    (106 + 10) / 116][Stage 119:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.712669551 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZInd ex<=98", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=98,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359287588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:=================================>                   (72 + 41) / 113][Stage 120:=====================================>               (79 + 34) / 113][Stage 120:===========================================>         (93 + 20) / 113][Stage 120:==============================================>     (101 + 12) / 113][Stage 120:==================================================>  (107 + 6) / 113]                                                                                [Stage 121:====================================>                (78 + 36) / 114][Stage 121:========================================>            (88 + 26) / 114][Stage 121:============================================>        (96 + 18) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.20282395 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZInd ex<=77", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=77,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364374014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:====================================>                (82 + 36) / 118][Stage 122:==========================================>          (95 + 23) / 118][Stage 122:================================================>    (109 + 9) / 118][Stage 122:===================================================> (115 + 3) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:==================================>                  (77 + 42) / 119][Stage 123:========================================>            (91 + 28) / 119][Stage 123:=============================================>      (104 + 15) / 119][Stage 123:====================================================>(117 + 2) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.421457487 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIn dex<=206", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=206,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335639466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:=====================================>               (81 + 34) / 115][Stage 124:===========================================>         (94 + 21) / 115][Stage 124:===============================================>    (104 + 11) / 115][Stage 124:==================================================>  (109 + 6) / 115]                                                                                [Stage 125:======================================>              (84 + 32) / 116][Stage 125:==========================================>          (94 + 22) / 116][Stage 125:==============================================>     (103 + 13) / 116][Stage 125:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.010273131 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZInd ex<=73", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=73,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378315608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:================================>                    (70 + 45) / 115][Stage 126:======================================>              (83 + 32) / 115][Stage 126:============================================>        (96 + 19) / 115][Stage 126:===================================================> (111 + 4) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:=====================================>               (82 + 34) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.959774486 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZInd ex<=42", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=42,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407931418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:==============================>                      (68 + 52) / 120][Stage 128:=====================================>               (86 + 34) / 120][Stage 128:=============================================>      (104 + 16) / 120]                                                                                [Stage 129:============================>                        (66 + 55) / 121][Stage 129:==================================>                  (79 + 42) / 121][Stage 129:=============================================>      (106 + 15) / 121][Stage 129:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.774447868 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIn dex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400301311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:===========================>                         (59 + 54) / 113][Stage 130:============================>                        (61 + 52) / 113][Stage 130:=================================>                   (72 + 41) / 113][Stage 130:=============================================>       (97 + 16) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:===========================>                         (60 + 54) / 114][Stage 131:==============================>                      (66 + 48) / 114][Stage 131:=======================================>             (85 + 29) / 114][Stage 131:=================================================>   (107 + 7) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.24247699 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIn dex<=150", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=150,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354242567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:=====================================>               (80 + 33) / 113][Stage 132:===========================================>         (92 + 21) / 113][Stage 132:==============================================>     (100 + 13) / 113][Stage 132:==================================================>  (108 + 5) / 113]                                                                                [Stage 133:====================================>                (78 + 36) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:=============================================>       (98 + 16) / 114][Stage 133:===================================================> (110 + 4) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.134207268 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZInd ex<=35", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407808459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:===========================>                         (63 + 57) / 120][Stage 134:=================================>                   (75 + 45) / 120][Stage 134:===========================================>        (100 + 20) / 120][Stage 134:=================================================>   (112 + 8) / 120]                                                                                [Stage 135:===========================>                         (62 + 59) / 121][Stage 135:===============================>                     (72 + 49) / 121][Stage 135:========================================>            (93 + 28) / 121][Stage 135:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.149729867 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZInde x<=4", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=4,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386083078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:============================>                        (60 + 53) / 113][Stage 136:================================>                    (70 + 43) / 113][Stage 136:======================================>              (83 + 30) / 113][Stage 136:================================================>    (104 + 9) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:===========================>                         (59 + 55) / 114][Stage 137:===============================>                     (68 + 46) / 114][Stage 137:======================================>              (83 + 31) / 114][Stage 137:==============================================>      (99 + 15) / 114][Stage 137:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.101983704 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIn dex<=245", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=245,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336512711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:========================================>            (87 + 28) / 115][Stage 138:=============================================>       (99 + 16) / 115][Stage 138:===================================================> (111 + 4) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:=====================================>               (82 + 34) / 116][Stage 139:===========================================>         (95 + 21) / 116][Stage 139:=================================================>   (108 + 8) / 116][Stage 139:===================================================> (113 + 3) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.087392014 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIn dex<=189", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400340314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:==========================>                          (60 + 61) / 121][Stage 140:==============================>                      (69 + 52) / 121][Stage 140:==================================>                  (79 + 42) / 121][Stage 140:==========================================>          (98 + 23) / 121][Stage 140:==================================================>  (115 + 6) / 121]                                                                                [Stage 141:============================>                        (65 + 57) / 122][Stage 141:=================================>                   (77 + 45) / 122][Stage 141:=========================================>           (95 + 27) / 122][Stage 141:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.098504629 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZInd ex<=23", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=23,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359280313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:==================================>                  (76 + 42) / 118][Stage 142:=======================================>             (87 + 31) / 118][Stage 142:========================================>            (90 + 28) / 118][Stage 142:==============================================>     (105 + 13) / 118]                                                                                [Stage 143:================================>                    (73 + 46) / 119][Stage 143:===================================>                 (79 + 40) / 119][Stage 143:========================================>            (92 + 27) / 119][Stage 143:=============================================>      (104 + 15) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.231956445 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIn dex<=128", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=128,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49707449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (77 + 41) / 118][Stage 144:======================================>              (85 + 33) / 118][Stage 144:===========================================>         (96 + 22) / 118][Stage 144:=================================================>   (111 + 7) / 118]                                                                                [Stage 145:================================>                    (74 + 45) / 119][Stage 145:========================================>            (90 + 29) / 119][Stage 145:==============================================>     (106 + 13) / 119][Stage 145:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.061759141 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIn dex<=168", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=168,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350774426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:=====================================>               (79 + 34) / 113][Stage 146:==========================================>          (90 + 23) / 113][Stage 146:==============================================>     (101 + 12) / 113][Stage 146:===================================================> (109 + 4) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:=================================>                   (73 + 41) / 114][Stage 147:========================================>            (88 + 26) / 114][Stage 147:=============================================>       (97 + 17) / 114][Stage 147:==============================================>     (103 + 11) / 114][Stage 147:===================================================> (111 + 3) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.223668445 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZInd ex<=93", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=93,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399223035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:===========================>                         (63 + 57) / 120][Stage 148:==================================>                  (79 + 41) / 120][Stage 148:============================================>       (102 + 18) / 120][Stage 148:====================================================>(119 + 1) / 120]                                                                                [Stage 149:==========================>                          (61 + 60) / 121][Stage 149:==============================>                      (70 + 51) / 121][Stage 149:====================================>                (84 + 37) / 121][Stage 149:==============================================>     (108 + 13) / 121]                                                                                Time elapsed: 2.902609352 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIn dex<=141", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34317894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:=========================================>           (90 + 25) / 115][Stage 150:==============================================>     (102 + 13) / 115][Stage 150:=================================================>   (108 + 7) / 115]                                                                                [Stage 151:=======================================>             (86 + 30) / 116][Stage 151:=============================================>       (99 + 17) / 116][Stage 151:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.598786734 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIn dex<=226", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=226,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355940633 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:=================================>                   (71 + 42) / 113][Stage 152:========================================>            (87 + 26) / 113][Stage 152:============================================>        (95 + 18) / 113][Stage 152:================================================>    (104 + 9) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:==================================>                  (74 + 40) / 114][Stage 153:=======================================>             (85 + 29) / 114][Stage 153:===========================================>         (94 + 20) / 114][Stage 153:==============================================>     (103 + 11) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.121922715 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIn dex<=232", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=232,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337229354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:=====================================>               (82 + 33) / 115][Stage 154:==========================================>          (92 + 23) / 115][Stage 154:=============================================>      (101 + 14) / 115][Stage 154:==================================================>  (109 + 6) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:=====================================>               (82 + 34) / 116][Stage 155:=======================================>             (87 + 29) / 116][Stage 155:============================================>       (100 + 16) / 116][Stage 155:=================================================>   (108 + 8) / 116][Stage 155:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.066376764 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIn dex<=130", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=130,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556472813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:============================>                        (64 + 57) / 121][Stage 156:=================================>                   (76 + 45) / 121][Stage 156:==========================================>          (97 + 24) / 121][Stage 156:==================================================>  (115 + 6) / 121]                                                                                [Stage 157:==========================>                          (62 + 60) / 122][Stage 157:================================>                    (75 + 47) / 122][Stage 157:=======================================>             (92 + 30) / 122][Stage 157:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.044575327 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIn dex<=170", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=170,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390139528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:===========================>                         (58 + 55) / 113][Stage 158:==============================>                      (66 + 47) / 113][Stage 158:=====================================>               (80 + 33) / 113][Stage 158:================================================>    (104 + 9) / 113]                                                                                [Stage 159:============================>                        (61 + 53) / 114][Stage 159:==================================>                  (75 + 39) / 114][Stage 159:=================================================>   (106 + 8) / 114][Stage 159:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.858912766 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIn dex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353353292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:=================================>                   (71 + 42) / 113][Stage 160:======================================>              (82 + 31) / 113][Stage 160:============================================>        (94 + 19) / 113][Stage 160:=================================================>   (105 + 8) / 113][Stage 160:==================================================>  (107 + 6) / 113][Stage 160:====================================================>(112 + 1) / 113]                                                                                [Stage 161:===================================>                 (76 + 38) / 114][Stage 161:=========================================>           (90 + 24) / 114][Stage 161:=============================================>      (100 + 14) / 114][Stage 161:=================================================>   (107 + 7) / 114][Stage 161:===================================================> (110 + 4) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.560441729 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIn dex<=137", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=137,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357852237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:================================>                    (70 + 43) / 113][Stage 162:=====================================>               (80 + 33) / 113][Stage 162:============================================>        (94 + 19) / 113][Stage 162:================================================>    (104 + 9) / 113][Stage 162:====================================================>(111 + 2) / 113]                                                                                [Stage 163:====================================>                (78 + 36) / 114][Stage 163:=========================================>           (89 + 25) / 114][Stage 163:==============================================>      (99 + 15) / 114][Stage 163:=================================================>   (106 + 8) / 114][Stage 163:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.970021084 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIn dex<=220", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396646456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:==============================>                      (70 + 50) / 120][Stage 164:===========================================>         (99 + 21) / 120][Stage 164:==================================================>  (115 + 5) / 120]                                                                                [Stage 165:==========================>                          (61 + 60) / 121][Stage 165:================================>                    (74 + 47) / 121][Stage 165:===========================================>         (99 + 22) / 121][Stage 165:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.898363457 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIn dex<=103", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=103,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394340474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:============================>                        (64 + 56) / 120][Stage 166:==================================>                  (79 + 41) / 120][Stage 166:=============================================>      (105 + 15) / 120][Stage 166:====================================================>(119 + 1) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:=============================>                       (68 + 53) / 121][Stage 167:=======================================>             (91 + 30) / 121][Stage 167:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.79836518 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZInd ex<=87", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335551756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:====================================>                (80 + 35) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:=============================================>      (100 + 15) / 115][Stage 168:=================================================>   (108 + 7) / 115]                                                                                [Stage 169:=====================================>               (82 + 34) / 116][Stage 169:===========================================>         (95 + 21) / 116][Stage 169:===============================================>    (105 + 11) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.78485453 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIn dex<=131", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=131,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416345437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:=============================>                       (67 + 54) / 121][Stage 170:======================================>              (89 + 32) / 121][Stage 170:============================================>       (104 + 17) / 121][Stage 170:====================================================>(120 + 1) / 121]                                                                                [Stage 171:==========================>                          (61 + 61) / 122][Stage 171:================================>                    (74 + 48) / 122][Stage 171:=====================================>               (86 + 36) / 122][Stage 171:============================================>       (104 + 18) / 122][Stage 171:===================================================> (118 + 4) / 122][Stage 171:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.235010824 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIn dex<=171", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=171,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377597139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:===========================>                         (59 + 54) / 113][Stage 172:============================>                        (60 + 53) / 113][Stage 172:================================>                    (69 + 44) / 113][Stage 172:========================================>            (86 + 27) / 113][Stage 172:=================================================>   (106 + 7) / 113][Stage 172:====================================================>(111 + 2) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:===============================>                     (67 + 47) / 114][Stage 173:======================================>              (83 + 31) / 114][Stage 173:=============================================>       (98 + 16) / 114][Stage 173:====================================================>(112 + 2) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.345245299 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZInd ex<=89", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385241248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===========================>                         (58 + 55) / 113][Stage 174:=============================>                       (63 + 50) / 113][Stage 174:===================================>                 (75 + 38) / 113][Stage 174:==========================================>          (90 + 23) / 113][Stage 174:===================================================> (109 + 4) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:===========================>                         (59 + 55) / 114][Stage 175:================================>                    (70 + 44) / 114][Stage 175:=======================================>             (85 + 29) / 114][Stage 175:===============================================>    (104 + 10) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.158712877 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIn dex<=225", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=225,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353312935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:=================================>                   (72 + 41) / 113][Stage 176:====================================>                (78 + 35) / 113][Stage 176:============================================>        (95 + 18) / 113][Stage 176:==================================================>  (107 + 6) / 113][Stage 176:====================================================>(112 + 1) / 113]                                                                                [Stage 177:===================================>                 (77 + 37) / 114][Stage 177:===========================================>         (93 + 21) / 114][Stage 177:===============================================>    (104 + 10) / 114][Stage 177:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.944124704 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIn dex<=207", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=207,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412842796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:================================>                    (75 + 46) / 121][Stage 178:=========================================>           (94 + 27) / 121][Stage 178:=================================================>   (114 + 7) / 121]                                                                                [Stage 179:==========================>                          (61 + 61) / 122][Stage 179:==============================>                      (71 + 51) / 122][Stage 179:==========================================>          (98 + 24) / 122][Stage 179:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.036273781 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIn dex<=173", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=173,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375826519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:=============================>                       (64 + 51) / 115][Stage 180:===================================>                 (76 + 39) / 115][Stage 180:=======================================>             (86 + 29) / 115][Stage 180:============================================>        (97 + 18) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:===============================>                     (68 + 48) / 116][Stage 181:=====================================>               (83 + 33) / 116][Stage 181:============================================>       (100 + 16) / 116][Stage 181:==================================================>  (111 + 5) / 116][Stage 181:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.011036319 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIn dex<=202", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=202,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420207584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:================================>                    (70 + 43) / 113][Stage 182:========================================>            (86 + 27) / 113][Stage 182:==================================================>  (108 + 5) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (59 + 55) / 114][Stage 183:===============================>                     (68 + 46) / 114][Stage 183:=======================================>             (85 + 29) / 114][Stage 183:=================================================>   (107 + 7) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.18656276 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIn dex<=224", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=224,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333509958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:=====================================>               (81 + 34) / 115][Stage 184:==========================================>          (92 + 23) / 115][Stage 184:=================================================>   (107 + 8) / 115][Stage 184:===================================================> (112 + 3) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=======================================>             (86 + 30) / 116][Stage 185:=============================================>      (101 + 15) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.788771841 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIn dex<=153", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=153,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345781251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:===================================>                 (76 + 37) / 113][Stage 186:========================================>            (87 + 26) / 113][Stage 186:=============================================>       (98 + 15) / 113][Stage 186:=================================================>   (105 + 8) / 113][Stage 186:====================================================>(111 + 2) / 113]                                                                                [Stage 187:=======================================>             (84 + 30) / 114][Stage 187:============================================>        (95 + 19) / 114][Stage 187:================================================>    (105 + 9) / 114][Stage 187:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.071273751 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZInde x<=8", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=8,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398365704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:============================>                        (64 + 56) / 120][Stage 188:=====================================>               (86 + 34) / 120][Stage 188:===============================================>    (110 + 10) / 120][Stage 188:====================================================>(118 + 2) / 120]                                                                                [Stage 189:==========================>                          (61 + 60) / 121][Stage 189:=============================>                       (68 + 53) / 121][Stage 189:====================================>                (83 + 38) / 121][Stage 189:=============================================>      (105 + 16) / 121]                                                                                Time elapsed: 3.068920733 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIn dex<=195", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377145723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:====================================>                (82 + 36) / 118][Stage 190:============================================>       (100 + 18) / 118][Stage 190:==================================================>  (112 + 6) / 118][Stage 190:====================================================>(117 + 1) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:==================================>                  (78 + 41) / 119][Stage 191:======================================>              (86 + 33) / 119][Stage 191:=============================================>      (103 + 16) / 119][Stage 191:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.98403731 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZInd ex<=47", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378663605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:=============================>                       (63 + 50) / 113][Stage 192:=====================================>               (79 + 34) / 113][Stage 192:==============================================>     (101 + 12) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:===========================>                         (60 + 54) / 114][Stage 193:================================>                    (70 + 44) / 114][Stage 193:============================================>        (96 + 18) / 114][Stage 193:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.077396109 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIn dex<=176", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=176,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410162037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:==========================>                          (60 + 61) / 121][Stage 194:=============================>                       (67 + 54) / 121][Stage 194:===================================>                 (80 + 41) / 121][Stage 194:===============================================>    (111 + 10) / 121][Stage 194:====================================================>(119 + 2) / 121]                                                                                [Stage 195:==========================>                          (61 + 61) / 122][Stage 195:===========================>                         (63 + 59) / 122][Stage 195:====================================>                (83 + 39) / 122][Stage 195:===========================================>        (101 + 21) / 122][Stage 195:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.083001798 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZInd ex<=14", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=14,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330434177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:=====================================>               (81 + 34) / 115][Stage 196:=========================================>           (89 + 26) / 115][Stage 196:=============================================>      (100 + 15) / 115][Stage 196:===================================================> (111 + 4) / 115]                                                                                [Stage 197:======================================>              (84 + 32) / 116][Stage 197:===========================================>         (95 + 21) / 116][Stage 197:===============================================>    (106 + 10) / 116][Stage 197:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.92384442 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIn dex<=231", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=231,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407475636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:===========================>                         (58 + 55) / 113][Stage 198:=============================>                       (63 + 50) / 113][Stage 198:=======================================>             (84 + 29) / 113][Stage 198:===============================================>    (103 + 10) / 113][Stage 198:====================================================>(111 + 2) / 113]                                                                                [Stage 199:===========================>                         (60 + 54) / 114][Stage 199:===============================>                     (67 + 47) / 114][Stage 199:======================================>              (82 + 32) / 114][Stage 199:==============================================>     (101 + 13) / 114][Stage 199:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.100138483 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZInd ex<=28", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=28,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395644164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:==========================>                          (61 + 60) / 121][Stage 200:===============================>                     (71 + 50) / 121][Stage 200:==========================================>          (97 + 24) / 121][Stage 200:=================================================>   (113 + 8) / 121]                                                                                [Stage 201:==========================>                          (61 + 61) / 122][Stage 201:================================>                    (74 + 48) / 122][Stage 201:======================================>              (89 + 33) / 122][Stage 201:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.001564546 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m51.896s
user	11m19.884s
sys	0m26.984s
