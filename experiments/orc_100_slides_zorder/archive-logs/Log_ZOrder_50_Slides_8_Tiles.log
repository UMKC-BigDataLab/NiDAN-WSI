Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 22:04:15 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 22:04:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 22:04:29 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 22:04:30 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 22:04:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 22:04:42 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524220432-0600).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.442892341 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:================>                                      (34 + 81) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:===========================================>           (92 + 24) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 12.851586481 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 8 AND partitionZIndex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.768310745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (40 + 78) / 118][Stage 2:==========================>                            (57 + 61) / 118][Stage 2:================================>                      (69 + 49) / 118][Stage 2:==================================>                    (75 + 43) / 118][Stage 2:===================================>                   (77 + 41) / 118][Stage 2:=====================================>                 (80 + 38) / 118][Stage 2:========================================>              (87 + 31) / 118][Stage 2:==========================================>            (92 + 26) / 118][Stage 2:=============================================>        (100 + 18) / 118][Stage 2:===================================================>   (110 + 8) / 118][Stage 2:======================================================>(116 + 2) / 118]                                                                                [Stage 3:=================================>                     (73 + 46) / 119][Stage 3:==================================>                    (74 + 45) / 119][Stage 3:===================================>                   (76 + 43) / 119][Stage 3:=====================================>                 (82 + 37) / 119][Stage 3:========================================>              (87 + 32) / 119][Stage 3:==========================================>            (91 + 28) / 119][Stage 3:=============================================>        (100 + 19) / 119][Stage 3:=================================================>    (109 + 10) / 119][Stage 3:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 6.676557709 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 12 AND partitionZIndex<=119", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.662450883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==============================>                        (63 + 52) / 115][Stage 4:=================================>                     (69 + 46) / 115][Stage 4:======================================>                (81 + 34) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:==============================================>        (98 + 17) / 115][Stage 4:===================================================>   (108 + 7) / 115][Stage 4:====================================================>  (110 + 5) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:==============================>                        (64 + 52) / 116][Stage 5:=================================>                     (71 + 45) / 116][Stage 5:====================================>                  (78 + 38) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:=============================================>         (96 + 20) / 116][Stage 5:================================================>     (105 + 11) / 116][Stage 5:====================================================>  (111 + 5) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.016914966 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 9 AND partitionZIndex<=96", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.647972842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==============================>                        (64 + 51) / 115][Stage 6:================================>                      (67 + 48) / 115][Stage 6:===================================>                   (74 + 41) / 115][Stage 6:====================================>                  (77 + 38) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:==============================================>        (97 + 18) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:=====================================================> (112 + 3) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:============================>                          (61 + 55) / 116][Stage 7:=================================>                     (71 + 45) / 116][Stage 7:====================================>                  (78 + 38) / 116][Stage 7:======================================>                (82 + 34) / 116][Stage 7:===========================================>           (91 + 25) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:==================================================>    (107 + 9) / 116][Stage 7:====================================================>  (111 + 5) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.763915707 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 4 AND partitionZIndex<=41", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=41,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.522886687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:=====================================>                 (77 + 36) / 113][Stage 8:======================================>                (80 + 33) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:===============================================>      (100 + 13) / 113][Stage 8:====================================================>  (107 + 6) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:==================================>                    (72 + 42) / 114][Stage 9:===================================>                   (73 + 41) / 114][Stage 9:=====================================>                 (77 + 37) / 114][Stage 9:========================================>              (84 + 30) / 114][Stage 9:=============================================>         (94 + 20) / 114][Stage 9:==============================================>        (96 + 18) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.998671515 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3  AND partitionZIndex<=10", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=10,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.561230411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==============================>                       (66 + 49) / 115][Stage 10:===================================>                  (76 + 39) / 115][Stage 10:===========================================>          (92 + 23) / 115][Stage 10:=============================================>        (96 + 19) / 115][Stage 10:==============================================>      (101 + 14) / 115][Stage 10:===============================================>     (103 + 12) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:===================================================>  (109 + 6) / 115][Stage 10:====================================================> (112 + 3) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:===========================>                          (60 + 56) / 116][Stage 11:=============================>                        (64 + 52) / 116][Stage 11:====================================>                 (78 + 38) / 116][Stage 11:=========================================>            (90 + 26) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:===============================================>     (105 + 11) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:==================================================>   (109 + 7) / 116][Stage 11:====================================================> (112 + 4) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 9.679068215 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 03 AND partitionZIndex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.564099419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (71 + 42) / 113][Stage 12:======================================>               (81 + 32) / 113][Stage 12:===========================================>          (91 + 22) / 113][Stage 12:==============================================>       (98 + 15) / 113][Stage 12:==============================================>      (100 + 13) / 113][Stage 12:=================================================>    (104 + 9) / 113][Stage 12:===================================================>  (107 + 6) / 113][Stage 12:====================================================> (110 + 3) / 113]                                                                                [Stage 13:===================================>                  (75 + 39) / 114][Stage 13:=======================================>              (83 + 31) / 114][Stage 13:=============================================>        (95 + 19) / 114][Stage 13:================================================>    (104 + 10) / 114][Stage 13:==================================================>   (106 + 8) / 114][Stage 13:====================================================> (110 + 4) / 114][Stage 13:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.461594881 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 06 AND partitionZIndex<=213", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464023522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:======================================>               (83 + 32) / 115][Stage 14:===========================================>          (93 + 22) / 115][Stage 14:==============================================>      (100 + 15) / 115][Stage 14:=================================================>    (106 + 9) / 115][Stage 14:====================================================> (111 + 4) / 115]                                                                                [Stage 15:=======================================>              (84 + 32) / 116][Stage 15:==============================================>      (102 + 14) / 116][Stage 15:================================================>    (106 + 10) / 116][Stage 15:====================================================> (112 + 4) / 116][Stage 15:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.488859479 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 8 AND partitionZIndex<=95", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=95,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.440622065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (83 + 32) / 115][Stage 16:===========================================>          (93 + 22) / 115][Stage 16:===============================================>     (103 + 12) / 115][Stage 16:===================================================>  (110 + 5) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:========================================>             (88 + 28) / 116][Stage 17:=============================================>        (97 + 19) / 116][Stage 17:=================================================>    (107 + 9) / 116][Stage 17:===================================================>  (111 + 5) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.313060148 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 94 AND partitionZIndex<=201", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=201,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.479794669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (80 + 35) / 115][Stage 18:======================================>               (82 + 33) / 115][Stage 18:=========================================>            (89 + 26) / 115][Stage 18:===============================================>     (102 + 13) / 115][Stage 18:====================================================> (112 + 3) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:=======================================>              (85 + 31) / 116][Stage 19:=============================================>       (100 + 16) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.950668515 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 1 AND partitionZIndex<=38", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=38,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.563483605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==================================>                   (73 + 40) / 113][Stage 20:======================================>               (80 + 33) / 113][Stage 20:==========================================>           (88 + 25) / 113][Stage 20:=================================================>    (104 + 9) / 113][Stage 20:===================================================>  (108 + 5) / 113][Stage 20:====================================================> (110 + 3) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:====================================>                 (77 + 37) / 114][Stage 21:=======================================>              (83 + 31) / 114][Stage 21:=========================================>            (87 + 27) / 114][Stage 21:============================================>         (94 + 20) / 114][Stage 21:==============================================>       (98 + 16) / 114][Stage 21:==================================================>   (106 + 8) / 114][Stage 21:====================================================> (111 + 3) / 114][Stage 21:=====================================================>(112 + 2) / 114][Stage 21:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 9.541674373 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 08 AND partitionZIndex<=115", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=115,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.468815456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (67 + 46) / 113][Stage 22:========================================>             (84 + 29) / 113][Stage 22:============================================>         (94 + 19) / 113][Stage 22:==============================================>       (97 + 16) / 113][Stage 22:==================================================>   (106 + 7) / 113][Stage 22:=====================================================>(111 + 2) / 113][Stage 22:=====================================================>(112 + 1) / 113]                                                                                [Stage 23:===================================>                  (74 + 40) / 114][Stage 23:======================================>               (81 + 33) / 114][Stage 23:=========================================>            (87 + 27) / 114][Stage 23:=============================================>        (97 + 17) / 114][Stage 23:==================================================>   (106 + 8) / 114][Stage 23:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.9046782 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 26 AND partitionZIndex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.482255779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==============================>                       (66 + 49) / 115][Stage 24:========================================>             (86 + 29) / 115][Stage 24:============================================>         (95 + 20) / 115][Stage 24:=================================================>    (106 + 9) / 115][Stage 24:===================================================>  (110 + 5) / 115][Stage 24:====================================================> (112 + 3) / 115]                                                                                [Stage 25:=================================>                    (71 + 45) / 116][Stage 25:=========================================>            (89 + 27) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:===============================================>     (105 + 11) / 116][Stage 25:===================================================>  (110 + 6) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.770463995 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 21 AND partitionZIndex<=228", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.493764899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:==================================>                   (73 + 40) / 113][Stage 26:======================================>               (80 + 33) / 113][Stage 26:==============================================>      (100 + 13) / 113][Stage 26:====================================================> (109 + 4) / 113]                                                                                [Stage 27:============================>                         (61 + 53) / 114][Stage 27:===============================>                      (66 + 48) / 114][Stage 27:====================================>                 (77 + 37) / 114][Stage 27:=========================================>            (88 + 26) / 114][Stage 27:=================================================>    (105 + 9) / 114][Stage 27:==================================================>   (107 + 7) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.319299781 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 7 AND partitionZIndex<=24", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=24,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.502917554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:============================>                         (63 + 57) / 120][Stage 28:==================================>                   (76 + 44) / 120][Stage 28:========================================>             (91 + 29) / 120][Stage 28:===============================================>     (107 + 13) / 120][Stage 28:=====================================================>(118 + 2) / 120]                                                                                [Stage 29:===========================>                          (61 + 60) / 121][Stage 29:============================>                         (64 + 57) / 121][Stage 29:=================================>                    (75 + 46) / 121][Stage 29:==========================================>           (96 + 25) / 121][Stage 29:==================================================>   (113 + 8) / 121][Stage 29:====================================================> (118 + 3) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.99147208 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2  AND partitionZIndex<=9", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438394362 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=====================================>                (79 + 34) / 113][Stage 30:==========================================>           (89 + 24) / 113][Stage 30:=============================================>        (95 + 18) / 113][Stage 30:===============================================>     (102 + 11) / 113][Stage 30:====================================================> (110 + 3) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:===================================>                  (75 + 39) / 114][Stage 31:=======================================>              (83 + 31) / 114][Stage 31:==========================================>           (89 + 25) / 114][Stage 31:==============================================>       (98 + 16) / 114][Stage 31:===============================================>     (103 + 11) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:====================================================> (111 + 3) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 9.065835078 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 37 AND partitionZIndex<=244", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=244,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410837891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:======================================>               (83 + 32) / 115][Stage 32:=============================================>        (96 + 19) / 115][Stage 32:================================================>    (105 + 10) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:=======================================>              (85 + 31) / 116][Stage 33:=============================================>        (98 + 18) / 116][Stage 33:===================================================>  (110 + 6) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.079850973 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 19 AND partitionZIndex<=126", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=126,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409728434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=====================================>                (79 + 36) / 115][Stage 34:======================================>               (83 + 32) / 115][Stage 34:=============================================>        (96 + 19) / 115][Stage 34:==================================================>   (108 + 7) / 115][Stage 34:=====================================================>(113 + 2) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:=======================================>              (85 + 31) / 116][Stage 35:=============================================>        (98 + 18) / 116][Stage 35:=================================================>    (107 + 9) / 116][Stage 35:===================================================>  (111 + 5) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.147686137 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 28 AND partitionZIndex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.446157758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (72 + 46) / 118][Stage 36:=====================================>                (82 + 36) / 118][Stage 36:===========================================>          (94 + 24) / 118][Stage 36:==================================================>   (110 + 8) / 118]                                                                                [Stage 37:=================================>                    (74 + 45) / 119][Stage 37:====================================>                 (81 + 38) / 119][Stage 37:=========================================>            (92 + 27) / 119][Stage 37:==============================================>      (104 + 15) / 119][Stage 37:====================================================> (115 + 4) / 119][Stage 37:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.021721402 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 06 AND partitionZIndex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.424803595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (79 + 36) / 115][Stage 38:========================================>             (86 + 29) / 115][Stage 38:==============================================>       (98 + 17) / 115][Stage 38:==================================================>   (107 + 8) / 115][Stage 38:=====================================================>(113 + 2) / 115]                                                                                [Stage 39:========================================>             (87 + 29) / 116][Stage 39:===========================================>          (93 + 23) / 116][Stage 39:==================================================>   (108 + 8) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.922795391 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 35 AND partitionZIndex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.470055824 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=================================>                    (73 + 45) / 118][Stage 40:===================================>                  (78 + 40) / 118][Stage 40:===========================================>          (94 + 24) / 118][Stage 40:=================================================>    (109 + 9) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:=====================================>                (83 + 36) / 119][Stage 41:=============================================>       (103 + 16) / 119][Stage 41:====================================================> (116 + 3) / 119][Stage 41:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.599629718 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 33 AND partitionZIndex<=240", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=240,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.561447419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:=============================>                        (65 + 55) / 120][Stage 42:==================================>                   (76 + 44) / 120][Stage 42:=============================================>       (102 + 18) / 120][Stage 42:===================================================>  (114 + 6) / 120][Stage 42:===================================================>  (115 + 5) / 120][Stage 42:====================================================> (117 + 3) / 120][Stage 42:=====================================================>(119 + 1) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:=============================>                        (66 + 55) / 121][Stage 43:=====================================>                (84 + 37) / 121][Stage 43:=============================================>       (105 + 16) / 121][Stage 43:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.820344804 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 6 AND partitionZIndex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.500511021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 60) / 121][Stage 44:==============================>                       (69 + 52) / 121][Stage 44:=========================================>            (92 + 29) / 121][Stage 44:==============================================>      (106 + 15) / 121][Stage 44:===================================================>  (116 + 5) / 121][Stage 44:=====================================================>(119 + 2) / 121]                                                                                [Stage 45:============================>                         (65 + 57) / 122][Stage 45:==================================>                   (79 + 43) / 122][Stage 45:===========================================>         (100 + 22) / 122][Stage 45:================================================>    (111 + 11) / 122][Stage 45:==================================================>   (114 + 8) / 122][Stage 45:===================================================>  (117 + 5) / 122][Stage 45:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 5.94212235 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 40 AND partitionZIndex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.469897253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (66 + 49) / 115][Stage 46:===================================>                  (75 + 40) / 115][Stage 46:============================================>         (94 + 21) / 115][Stage 46:===================================================>  (110 + 5) / 115]                                                                                [Stage 47:=================================>                    (71 + 45) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:=============================================>        (97 + 19) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.973732537 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 66 AND partitionZIndex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418696436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (73 + 40) / 113][Stage 48:===========================================>          (90 + 23) / 113][Stage 48:============================================>         (94 + 19) / 113][Stage 48:==================================================>   (106 + 7) / 113][Stage 48:=====================================================>(111 + 2) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:=====================================>                (80 + 34) / 114][Stage 49:==========================================>           (90 + 24) / 114][Stage 49:==============================================>       (99 + 15) / 114][Stage 49:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.159125016 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 41 AND partitionZIndex<=148", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.460416192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:===========================>                          (61 + 59) / 120][Stage 50:=================================>                    (75 + 45) / 120][Stage 50:=============================================>       (102 + 18) / 120][Stage 50:====================================================> (117 + 3) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:============================>                         (64 + 57) / 121][Stage 51:================================>                     (73 + 48) / 121][Stage 51:===========================================>          (98 + 23) / 121][Stage 51:====================================================> (118 + 3) / 121][Stage 51:=====================================================>(119 + 2) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.322311395 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 9 AND partitionZIndex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407125939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:==================================>                   (76 + 42) / 118][Stage 52:===========================================>          (94 + 24) / 118][Stage 52:==================================================>   (110 + 8) / 118][Stage 52:=====================================================>(116 + 2) / 118]                                                                                [Stage 53:=================================>                    (74 + 45) / 119][Stage 53:========================================>             (90 + 29) / 119][Stage 53:============================================>        (100 + 19) / 119][Stage 53:================================================>    (109 + 10) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.980118 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 7 AND partitionZIndex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396623157 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (82 + 33) / 115][Stage 54:========================================>             (87 + 28) / 115][Stage 54:=============================================>        (97 + 18) / 115][Stage 54:==================================================>   (108 + 7) / 115]                                                                                [Stage 55:=======================================>              (84 + 32) / 116][Stage 55:============================================>         (96 + 20) / 116][Stage 55:=================================================>    (107 + 9) / 116][Stage 55:===================================================>  (111 + 5) / 116][Stage 55:====================================================> (112 + 4) / 116][Stage 55:====================================================> (113 + 3) / 116][Stage 55:=====================================================>(114 + 2) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.883900978 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 47 AND partitionZIndex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418037287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:>                                                       (0 + 0) / 113][Stage 56:====================================>                 (77 + 36) / 113][Stage 56:=========================================>            (87 + 26) / 113][Stage 56:==============================================>       (98 + 15) / 113][Stage 56:==================================================>   (105 + 8) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:==================================>                   (72 + 42) / 114][Stage 57:=======================================>              (83 + 31) / 114][Stage 57:=============================================>        (95 + 19) / 114][Stage 57:===============================================>     (102 + 12) / 114][Stage 57:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.134805529 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 00 AND partitionZIndex<=207", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=207,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.465428995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==========================>                           (60 + 61) / 121][Stage 58:============================>                         (64 + 57) / 121][Stage 58:==================================>                   (78 + 43) / 121][Stage 58:============================================>        (102 + 19) / 121][Stage 58:====================================================> (118 + 3) / 121]                                                                                [Stage 59:============================>                         (64 + 58) / 122][Stage 59:===============================>                      (72 + 50) / 122][Stage 59:=========================================>            (93 + 29) / 122][Stage 59:==================================================>   (114 + 8) / 122][Stage 59:====================================================> (119 + 3) / 122][Stage 59:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.126765607 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 69 AND partitionZIndex<=176", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418055071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:====================================>                 (79 + 39) / 118][Stage 60:===========================================>          (94 + 24) / 118][Stage 60:=================================================>    (109 + 9) / 118][Stage 60:=====================================================>(116 + 2) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:==================================>                   (77 + 42) / 119][Stage 61:=========================================>            (91 + 28) / 119][Stage 61:==================================================>   (112 + 7) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.789540467 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 19 AND partitionZIndex<=226", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=226,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.482819133 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:=============================>                        (66 + 54) / 120][Stage 62:=====================================>                (84 + 36) / 120][Stage 62:================================================>    (109 + 11) / 120][Stage 62:=====================================================>(119 + 1) / 120]                                                                                [Stage 63:===========================>                          (61 + 60) / 121][Stage 63:==============================>                       (69 + 52) / 121][Stage 63:======================================>               (87 + 34) / 121][Stage 63:================================================>    (110 + 11) / 121][Stage 63:=====================================================>(119 + 2) / 121][Stage 63:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.666711153 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 4 AND partitionZIndex<=81", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=81,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.435153309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:===========================>                          (62 + 59) / 121][Stage 64:=================================>                    (76 + 45) / 121][Stage 64:=============================================>       (103 + 18) / 121]                                                                                [Stage 65:===========================>                          (62 + 60) / 122][Stage 65:==============================>                       (70 + 52) / 122][Stage 65:======================================>               (87 + 35) / 122][Stage 65:==============================================>      (108 + 14) / 122][Stage 65:====================================================> (119 + 3) / 122][Stage 65:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.636286325 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 6 AND partitionZIndex<=43", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=43,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.388775603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=======================================>              (84 + 31) / 115][Stage 66:==============================================>       (98 + 17) / 115][Stage 66:==================================================>   (107 + 8) / 115]                                                                                [Stage 67:=======================================>              (84 + 32) / 116][Stage 67:============================================>         (96 + 20) / 116][Stage 67:=================================================>    (107 + 9) / 116][Stage 67:===================================================>  (111 + 5) / 116][Stage 67:=====================================================>(114 + 2) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.867363895 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7  AND partitionZIndex<=14", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=14,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.455634424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:============================>                         (63 + 58) / 121][Stage 68:=================================>                    (76 + 45) / 121][Stage 68:=========================================>            (93 + 28) / 121][Stage 68:===================================================>  (115 + 6) / 121]                                                                                [Stage 69:===========================>                          (61 + 61) / 122][Stage 69:===========================>                          (63 + 59) / 122][Stage 69:==================================>                   (77 + 45) / 122][Stage 69:=========================================>            (93 + 29) / 122][Stage 69:==================================================>   (115 + 7) / 122][Stage 69:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.718785103 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 6 AND partitionZIndex<=33", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427710129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:===================================>                  (77 + 41) / 118][Stage 70:========================================>             (88 + 30) / 118][Stage 70:==============================================>      (104 + 14) / 118][Stage 70:====================================================> (114 + 4) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:===================================>                  (79 + 40) / 119][Stage 71:=======================================>              (86 + 33) / 119][Stage 71:============================================>         (97 + 22) / 119][Stage 71:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.683669442 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 4 AND partitionZIndex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411976454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===============================>                      (67 + 48) / 115][Stage 72:=======================================>              (84 + 31) / 115][Stage 72:=============================================>        (96 + 19) / 115][Stage 72:==================================================>   (108 + 7) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:=====================================>                (81 + 35) / 116][Stage 73:=========================================>            (89 + 27) / 116][Stage 73:==============================================>      (102 + 14) / 116][Stage 73:==================================================>   (109 + 7) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.337777294 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 1 AND partitionZIndex<=88", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.414770854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (73 + 45) / 118][Stage 74:=======================================>              (86 + 32) / 118][Stage 74:===========================================>          (96 + 22) / 118][Stage 74:================================================>    (107 + 11) / 118]                                                                                [Stage 75:=================================>                    (74 + 45) / 119][Stage 75:====================================>                 (81 + 38) / 119][Stage 75:============================================>         (97 + 22) / 119][Stage 75:===============================================>     (107 + 12) / 119][Stage 75:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.631443346 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 10 AND partitionZIndex<=117", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=117,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386469398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (70 + 43) / 113][Stage 76:=========================================>            (87 + 26) / 113][Stage 76:=============================================>        (95 + 18) / 113][Stage 76:===============================================>     (102 + 11) / 113][Stage 76:=====================================================>(111 + 2) / 113]                                                                                [Stage 77:======================================>               (82 + 32) / 114][Stage 77:===========================================>          (91 + 23) / 114][Stage 77:==============================================>       (99 + 15) / 114][Stage 77:===================================================>  (108 + 6) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.115538417 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 1 AND partitionZIndex<=98", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418688232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (72 + 43) / 115][Stage 78:======================================>               (83 + 32) / 115][Stage 78:===============================================>     (103 + 12) / 115][Stage 78:====================================================> (111 + 4) / 115]                                                                                [Stage 79:====================================>                 (78 + 38) / 116][Stage 79:==========================================>           (92 + 24) / 116][Stage 79:================================================>    (106 + 10) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.84860517 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 17 AND partitionZIndex<=224", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.426618421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:==========================>                           (60 + 61) / 121][Stage 80:================================>                     (72 + 49) / 121][Stage 80:=====================================>                (85 + 36) / 121][Stage 80:===============================================>     (108 + 13) / 121][Stage 80:=====================================================>(120 + 1) / 121]                                                                                [Stage 81:===========================>                          (61 + 61) / 122][Stage 81:=============================>                        (66 + 56) / 122][Stage 81:==================================>                   (78 + 44) / 122][Stage 81:===========================================>         (101 + 21) / 122][Stage 81:====================================================> (118 + 4) / 122][Stage 81:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 5.262948576 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 4 AND partitionZIndex<=91", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400642603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (70 + 45) / 115][Stage 82:=========================================>            (89 + 26) / 115][Stage 82:==============================================>       (98 + 17) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:================================>                     (69 + 47) / 116][Stage 83:=======================================>              (85 + 31) / 116][Stage 83:===============================================>     (103 + 13) / 116][Stage 83:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.709077966 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 05 AND partitionZIndex<=112", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406130636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:============================>                         (59 + 54) / 113][Stage 84:==============================>                       (63 + 50) / 113][Stage 84:====================================>                 (76 + 37) / 113][Stage 84:==============================================>       (98 + 15) / 113][Stage 84:====================================================> (110 + 3) / 113]                                                                                [Stage 85:============================>                         (60 + 54) / 114][Stage 85:================================>                     (69 + 45) / 114][Stage 85:=========================================>            (88 + 26) / 114][Stage 85:===============================================>     (102 + 12) / 114][Stage 85:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.894873576 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 60 AND partitionZIndex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380534495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===================================>                  (74 + 39) / 113][Stage 86:=========================================>            (86 + 27) / 113][Stage 86:==============================================>       (98 + 15) / 113][Stage 86:===================================================>  (107 + 6) / 113]                                                                                [Stage 87:===================================>                  (74 + 40) / 114][Stage 87:========================================>             (86 + 28) / 114][Stage 87:============================================>         (93 + 21) / 114][Stage 87:===============================================>     (102 + 12) / 114][Stage 87:====================================================> (110 + 4) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.944526281 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 0 AND partitionZIndex<=17", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=17,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37209001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===================================>                  (74 + 39) / 113][Stage 88:=========================================>            (86 + 27) / 113][Stage 88:==============================================>       (98 + 15) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:====================================================> (110 + 3) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:==================================>                   (72 + 42) / 114][Stage 89:======================================>               (82 + 32) / 114][Stage 89:============================================>         (93 + 21) / 114][Stage 89:==============================================>       (99 + 15) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:==================================================>   (106 + 8) / 114][Stage 89:====================================================> (110 + 4) / 114][Stage 89:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 10.416663792 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 20 AND partitionZIndex<=127", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.420014243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:============================>                         (59 + 54) / 113][Stage 90:==============================>                       (64 + 49) / 113][Stage 90:=====================================>                (79 + 34) / 113][Stage 90:=============================================>        (96 + 17) / 113][Stage 90:====================================================> (110 + 3) / 113]                                                                                [Stage 91:=============================>                        (62 + 52) / 114][Stage 91:======================================>               (82 + 32) / 114][Stage 91:=============================================>        (97 + 17) / 114][Stage 91:====================================================> (111 + 3) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.918880335 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 2 AND partitionZIndex<=99", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=99,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438668058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==========================>                           (60 + 61) / 121][Stage 92:============================>                         (64 + 57) / 121][Stage 92:===================================>                  (80 + 41) / 121][Stage 92:================================================>    (110 + 11) / 121][Stage 92:=====================================================>(119 + 2) / 121]                                                                                [Stage 93:===========================>                          (61 + 61) / 122][Stage 93:==============================>                       (68 + 54) / 122][Stage 93:====================================>                 (83 + 39) / 122][Stage 93:===========================================>          (99 + 23) / 122][Stage 93:====================================================> (118 + 4) / 122][Stage 93:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.778870198 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 7 AND partitionZIndex<=44", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=44,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478673242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (70 + 45) / 115][Stage 94:========================================>             (87 + 28) / 115][Stage 94:===============================================>     (103 + 12) / 115][Stage 94:=====================================================>(113 + 2) / 115]                                                                                [Stage 95:===================================>                  (76 + 40) / 116][Stage 95:=========================================>            (90 + 26) / 116][Stage 95:===============================================>     (104 + 12) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:==================================================>   (109 + 7) / 116][Stage 95:=====================================================>(114 + 2) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.586191303 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 11 AND partitionZIndex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.435108329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:============================>                         (63 + 58) / 121][Stage 96:==================================>                   (78 + 43) / 121][Stage 96:============================================>         (99 + 22) / 121][Stage 96:===================================================>  (116 + 5) / 121]                                                                                [Stage 97:===========================>                          (63 + 59) / 122][Stage 97:===============================>                      (72 + 50) / 122][Stage 97:===========================================>         (100 + 22) / 122][Stage 97:====================================================> (118 + 4) / 122][Stage 97:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.222088165 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 39 AND partitionZIndex<=246", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=246,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42926882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:============================>                         (63 + 58) / 121][Stage 98:================================>                     (73 + 48) / 121][Stage 98:=========================================>            (92 + 29) / 121][Stage 98:=================================================>    (112 + 9) / 121]                                                                                [Stage 99:===========================>                          (62 + 60) / 122][Stage 99:===============================>                      (71 + 51) / 122][Stage 99:===========================================>          (99 + 23) / 122][Stage 99:===================================================>  (117 + 5) / 122][Stage 99:=====================================================>(120 + 2) / 122][Stage 99:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.145844256 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 0 AND partitionZIndex<=37", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=37,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399690884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===========================>                         (58 + 55) / 113][Stage 100:=============================>                       (62 + 51) / 113][Stage 100:=================================>                   (72 + 41) / 113][Stage 100:===========================================>         (93 + 20) / 113][Stage 100:===================================================> (110 + 3) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:===========================>                         (59 + 55) / 114][Stage 101:============================>                        (62 + 52) / 114][Stage 101:====================================>                (79 + 35) / 114][Stage 101:=============================================>       (98 + 16) / 114][Stage 101:===================================================> (110 + 4) / 114][Stage 101:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.242074101 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 7 AND partitionZIndex<=64", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=64,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394479753 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (81 + 34) / 115][Stage 102:==========================================>          (92 + 23) / 115][Stage 102:===============================================>    (104 + 11) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:================================>                    (71 + 45) / 116][Stage 103:========================================>            (88 + 28) / 116][Stage 103:===========================================>         (96 + 20) / 116][Stage 103:==================================================>  (110 + 6) / 116][Stage 103:===================================================> (113 + 3) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.508048941 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1  AND partitionZIndex<=8", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421128498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 61) / 121][Stage 104:==============================>                      (69 + 52) / 121][Stage 104:=====================================>               (86 + 35) / 121][Stage 104:=============================================>      (105 + 16) / 121][Stage 104:==================================================>  (116 + 5) / 121]                                                                                [Stage 105:===========================>                         (64 + 58) / 122][Stage 105:=================================>                   (77 + 45) / 122][Stage 105:==========================================>          (98 + 24) / 122][Stage 105:==================================================>  (117 + 5) / 122][Stage 105:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.464409476 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4  AND partitionZIndex<=11", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=11,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.401592628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:=====================================>               (81 + 34) / 115][Stage 106:=============================================>       (99 + 16) / 115][Stage 106:================================================>    (106 + 9) / 115][Stage 106:==================================================>  (110 + 5) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:==============================>                      (67 + 49) / 116][Stage 107:=====================================>               (81 + 35) / 116][Stage 107:===========================================>         (96 + 20) / 116][Stage 107:===============================================>    (106 + 10) / 116][Stage 107:===================================================> (112 + 4) / 116][Stage 107:===================================================> (113 + 3) / 116][Stage 107:====================================================>(114 + 2) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.594850438 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 24 AND partitionZIndex<=131", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427533055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (58 + 55) / 113][Stage 108:============================>                        (61 + 52) / 113][Stage 108:======================================>              (83 + 30) / 113][Stage 108:==============================================>      (99 + 14) / 113][Stage 108:====================================================>(111 + 2) / 113]                                                                                [Stage 109:===========================>                         (59 + 55) / 114][Stage 109:===============================>                     (67 + 47) / 114][Stage 109:=======================================>             (85 + 29) / 114][Stage 109:==============================================>     (101 + 13) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.605343906 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 04 AND partitionZIndex<=211", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=211,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38970945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===================================>                 (76 + 39) / 115][Stage 110:==========================================>          (92 + 23) / 115][Stage 110:==================================================>  (110 + 5) / 115]                                                                                [Stage 111:================================>                    (71 + 45) / 116][Stage 111:=======================================>             (86 + 30) / 116][Stage 111:=================================================>   (108 + 8) / 116][Stage 111:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.790781868 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 35 AND partitionZIndex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40518645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 61) / 121][Stage 112:=============================>                       (68 + 53) / 121][Stage 112:======================================>              (87 + 34) / 121][Stage 112:==============================================>     (109 + 12) / 121][Stage 112:===================================================> (118 + 3) / 121]                                                                                [Stage 113:===========================>                         (63 + 59) / 122][Stage 113:================================>                    (74 + 48) / 122][Stage 113:========================================>            (94 + 28) / 122][Stage 113:==============================================>     (110 + 12) / 122][Stage 113:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.903304377 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 77 AND partitionZIndex<=184", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=184,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406018011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:============================>                        (64 + 57) / 121][Stage 114:=================================>                   (76 + 45) / 121][Stage 114:===========================================>         (99 + 22) / 121][Stage 114:==================================================>  (115 + 6) / 121]                                                                                [Stage 115:==========================>                          (61 + 61) / 122][Stage 115:============================>                        (65 + 57) / 122][Stage 115:================================>                    (75 + 47) / 122][Stage 115:=========================================>           (95 + 27) / 122][Stage 115:===============================================>    (111 + 11) / 122][Stage 115:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.047212154 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 6 AND partitionZIndex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379606689 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:================================>                    (73 + 45) / 118][Stage 116:==================================>                  (76 + 42) / 118][Stage 116:=======================================>             (87 + 31) / 118][Stage 116:============================================>       (101 + 17) / 118][Stage 116:===============================================>    (108 + 10) / 118][Stage 116:===================================================> (115 + 3) / 118]                                                                                [Stage 117:================================>                    (74 + 45) / 119][Stage 117:====================================>                (81 + 38) / 119][Stage 117:========================================>            (90 + 29) / 119][Stage 117:=============================================>      (104 + 15) / 119][Stage 117:==================================================>  (114 + 5) / 119][Stage 117:===================================================> (116 + 3) / 119][Stage 117:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.860064801 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 92 AND partitionZIndex<=199", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=199,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382256628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:>                                                      (0 + 0) / 113][Stage 118:============================>                        (60 + 53) / 113][Stage 118:==============================>                      (64 + 49) / 113][Stage 118:====================================>                (77 + 36) / 113][Stage 118:===============================================>    (103 + 10) / 113]                                                                                [Stage 119:=============================>                       (63 + 51) / 114][Stage 119:=================================>                   (73 + 41) / 114][Stage 119:===========================================>         (94 + 20) / 114][Stage 119:===================================================> (110 + 4) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.709761429 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 9 AND partitionZIndex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389305221 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:================================>                    (70 + 43) / 113][Stage 120:=========================================>           (88 + 25) / 113][Stage 120:===============================================>    (103 + 10) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:================================>                    (69 + 45) / 114][Stage 121:=========================================>           (89 + 25) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.420600906 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 61 AND partitionZIndex<=168", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=168,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366121815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:==================================>                  (77 + 41) / 118][Stage 122:=======================================>             (88 + 30) / 118][Stage 122:============================================>       (100 + 18) / 118][Stage 122:====================================================>(116 + 2) / 118]                                                                                [Stage 123:================================>                    (74 + 45) / 119][Stage 123:=====================================>               (84 + 35) / 119][Stage 123:=========================================>           (94 + 25) / 119][Stage 123:==============================================>     (106 + 13) / 119][Stage 123:===================================================> (116 + 3) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.943961878 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 6 AND partitionZIndex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.477743142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=================================>                   (72 + 43) / 115][Stage 124:========================================>            (87 + 28) / 115][Stage 124:=============================================>      (101 + 14) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:===============================>                     (69 + 47) / 116][Stage 125:======================================>              (85 + 31) / 116][Stage 125:=============================================>      (102 + 14) / 116][Stage 125:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.734380299 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 97 AND partitionZIndex<=204", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=204,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376211103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===============================>                     (68 + 47) / 115][Stage 126:=========================================>           (90 + 25) / 115][Stage 126:===============================================>    (104 + 11) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:=================================>                   (73 + 43) / 116][Stage 127:=======================================>             (86 + 30) / 116][Stage 127:===========================================>         (95 + 21) / 116][Stage 127:==================================================>  (111 + 5) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.828085301 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 8 AND partitionZIndex<=55", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=55,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368773795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===================================>                 (75 + 38) / 113][Stage 128:======================================>              (83 + 30) / 113][Stage 128:=============================================>       (96 + 17) / 113][Stage 128:================================================>    (104 + 9) / 113][Stage 128:==================================================>  (108 + 5) / 113]                                                                                [Stage 129:====================================>                (78 + 36) / 114][Stage 129:=========================================>           (89 + 25) / 114][Stage 129:===========================================>         (94 + 20) / 114][Stage 129:=============================================>      (100 + 14) / 114][Stage 129:==================================================>  (108 + 6) / 114][Stage 129:====================================================>(112 + 2) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.915949162 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 6 AND partitionZIndex<=23", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393867904 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:============================>                        (60 + 53) / 113][Stage 130:==================================>                  (74 + 39) / 113][Stage 130:===========================================>         (92 + 21) / 113][Stage 130:===================================================> (110 + 3) / 113]                                                                                [Stage 131:=============================>                       (63 + 51) / 114][Stage 131:==================================>                  (74 + 40) / 114][Stage 131:========================================>            (88 + 26) / 114][Stage 131:==============================================>     (103 + 11) / 114][Stage 131:====================================================>(112 + 2) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.861467571 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 48 AND partitionZIndex<=155", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375210311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:=================================>                   (75 + 43) / 118][Stage 132:======================================>              (86 + 32) / 118][Stage 132:===========================================>         (96 + 22) / 118][Stage 132:==================================================>  (113 + 5) / 118]                                                                                [Stage 133:================================>                    (74 + 45) / 119][Stage 133:======================================>              (86 + 33) / 119][Stage 133:============================================>        (99 + 20) / 119][Stage 133:===============================================>    (109 + 10) / 119][Stage 133:====================================================>(117 + 2) / 119][Stage 133:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.1337863 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 8 AND partitionZIndex<=105", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=105,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405767672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:=============================>                       (66 + 54) / 120][Stage 134:===================================>                 (80 + 40) / 120][Stage 134:=============================================>      (106 + 14) / 120][Stage 134:==================================================>  (114 + 6) / 120][Stage 134:====================================================>(119 + 1) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:==============================>                      (70 + 51) / 121][Stage 135:=====================================>               (85 + 36) / 121][Stage 135:============================================>       (104 + 17) / 121][Stage 135:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.342642359 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 75 AND partitionZIndex<=182", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409276828 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 60) / 120][Stage 136:===========================>                         (62 + 58) / 120][Stage 136:=================================>                   (76 + 44) / 120][Stage 136:===========================================>         (98 + 22) / 120][Stage 136:===================================================> (116 + 4) / 120]                                                                                [Stage 137:===========================>                         (62 + 59) / 121][Stage 137:===============================>                     (72 + 49) / 121][Stage 137:==========================================>         (100 + 21) / 121][Stage 137:==================================================>  (116 + 5) / 121][Stage 137:====================================================>(119 + 2) / 121][Stage 137:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.239377079 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 0 AND partitionZIndex<=27", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=27,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397627247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (60 + 61) / 121][Stage 138:===============================>                     (71 + 50) / 121][Stage 138:=======================================>             (90 + 31) / 121][Stage 138:=================================================>   (113 + 8) / 121]                                                                                [Stage 139:==========================>                          (61 + 61) / 122][Stage 139:================================>                    (74 + 48) / 122][Stage 139:=======================================>             (92 + 30) / 122][Stage 139:=================================================>   (113 + 9) / 122][Stage 139:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.814383672 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 0 AND partitionZIndex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397606428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 60) / 120][Stage 140:=============================>                       (66 + 54) / 120][Stage 140:====================================>                (82 + 38) / 120][Stage 140:==============================================>     (108 + 12) / 120][Stage 140:====================================================>(118 + 2) / 120]                                                                                [Stage 141:=============================>                       (68 + 53) / 121][Stage 141:==================================>                  (79 + 42) / 121][Stage 141:=============================================>      (107 + 14) / 121][Stage 141:===================================================> (117 + 4) / 121][Stage 141:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.618677329 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 30 AND partitionZIndex<=137", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=130 AND partitionZIndex<=137,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385331146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (58 + 55) / 113][Stage 142:=============================>                       (62 + 51) / 113][Stage 142:===================================>                 (75 + 38) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:====================================================>(111 + 2) / 113]                                                                                [Stage 143:===========================>                         (60 + 54) / 114][Stage 143:==============================>                      (65 + 49) / 114][Stage 143:====================================>                (79 + 35) / 114][Stage 143:=================================================>   (107 + 7) / 114][Stage 143:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.726124103 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 3 AND partitionZIndex<=40", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=40,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366757493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (77 + 41) / 118][Stage 144:========================================>            (91 + 27) / 118][Stage 144:==============================================>     (105 + 13) / 118][Stage 144:===================================================> (115 + 3) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:===================================>                 (79 + 40) / 119][Stage 145:========================================>            (90 + 29) / 119][Stage 145:===========================================>        (100 + 19) / 119][Stage 145:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.411520535 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 5 AND partitionZIndex<=22", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.334695757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=====================================>               (82 + 33) / 115][Stage 146:========================================>            (87 + 28) / 115][Stage 146:============================================>        (96 + 19) / 115][Stage 146:================================================>    (106 + 9) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=====================================>               (82 + 34) / 116][Stage 147:=======================================>             (87 + 29) / 116][Stage 147:============================================>        (97 + 19) / 116][Stage 147:=============================================>      (102 + 14) / 116][Stage 147:=================================================>   (109 + 7) / 116][Stage 147:==================================================>  (111 + 5) / 116][Stage 147:===================================================> (112 + 4) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.445431346 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 33 AND partitionZIndex<=140", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=140,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365067319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (74 + 44) / 118][Stage 148:===================================>                 (79 + 39) / 118][Stage 148:=======================================>             (89 + 29) / 118][Stage 148:==================================================>  (113 + 5) / 118][Stage 148:====================================================>(116 + 2) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:===================================>                 (80 + 39) / 119][Stage 149:========================================>            (91 + 28) / 119][Stage 149:=============================================>      (104 + 15) / 119][Stage 149:===================================================> (116 + 3) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.066221151 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 08 AND partitionZIndex<=215", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=215,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366147499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:===================================>                 (80 + 38) / 118][Stage 150:========================================>            (90 + 28) / 118][Stage 150:=============================================>      (104 + 14) / 118][Stage 150:===================================================> (115 + 3) / 118]                                                                                [Stage 151:================================>                    (73 + 46) / 119][Stage 151:==================================>                  (78 + 41) / 119][Stage 151:========================================>            (91 + 28) / 119][Stage 151:==============================================>     (107 + 12) / 119][Stage 151:====================================================>(117 + 2) / 119][Stage 151:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.672684565 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 5 AND partitionZIndex<=102", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=102,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368872717 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:===================================>                 (79 + 39) / 118][Stage 152:=========================================>           (93 + 25) / 118][Stage 152:==================================================>  (113 + 5) / 118]                                                                                [Stage 153:=================================>                   (75 + 44) / 119][Stage 153:=====================================>               (84 + 35) / 119][Stage 153:============================================>       (102 + 17) / 119][Stage 153:===================================================> (115 + 4) / 119][Stage 153:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.933256561 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 91 AND partitionZIndex<=198", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=198,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400483058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:==============================>                      (70 + 50) / 120][Stage 154:======================================>              (88 + 32) / 120][Stage 154:===========================================>        (101 + 19) / 120][Stage 154:===================================================> (117 + 3) / 120]                                                                                [Stage 155:============================>                        (64 + 57) / 121][Stage 155:==================================>                  (79 + 42) / 121][Stage 155:===========================================>         (99 + 22) / 121][Stage 155:=================================================>   (112 + 9) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.385471351 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 6 AND partitionZIndex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396802504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:============================>                        (65 + 56) / 121][Stage 156:==================================>                  (78 + 43) / 121][Stage 156:============================================>       (103 + 18) / 121][Stage 156:==================================================>  (116 + 5) / 121][Stage 156:====================================================>(120 + 1) / 121]                                                                                [Stage 157:==========================>                          (62 + 60) / 122][Stage 157:==============================>                      (70 + 52) / 122][Stage 157:======================================>              (88 + 34) / 122][Stage 157:===========================================>        (103 + 19) / 122][Stage 157:===================================================> (118 + 4) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.080934167 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 16 AND partitionZIndex<=223", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394801688 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 61) / 121][Stage 158:==============================>                      (70 + 51) / 121][Stage 158:=====================================>               (86 + 35) / 121][Stage 158:===============================================>    (111 + 10) / 121]                                                                                [Stage 159:==========================>                          (61 + 61) / 122][Stage 159:===============================>                     (73 + 49) / 122][Stage 159:====================================>                (84 + 38) / 122][Stage 159:==============================================>     (110 + 12) / 122][Stage 159:===================================================> (118 + 4) / 122][Stage 159:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 5.129552934 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 8 AND partitionZIndex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394885251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:===============================>                     (71 + 50) / 121][Stage 160:=======================================>             (90 + 31) / 121][Stage 160:=============================================>      (107 + 14) / 121][Stage 160:===================================================> (118 + 3) / 121]                                                                                [Stage 161:============================>                        (66 + 56) / 122][Stage 161:==================================>                  (79 + 43) / 122][Stage 161:==========================================>          (97 + 25) / 122][Stage 161:=================================================>   (114 + 8) / 122][Stage 161:===================================================> (119 + 3) / 122][Stage 161:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.96264532 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 81 AND partitionZIndex<=188", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.344311657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:=======================================>             (85 + 30) / 115][Stage 162:===========================================>         (94 + 21) / 115][Stage 162:=================================================>   (108 + 7) / 115][Stage 162:===================================================> (112 + 3) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:=====================================>               (83 + 33) / 116][Stage 163:========================================>            (89 + 27) / 116][Stage 163:===============================================>    (105 + 11) / 116][Stage 163:==================================================>  (111 + 5) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.060588133 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5  AND partitionZIndex<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379742174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (58 + 55) / 113][Stage 164:=============================>                       (63 + 50) / 113][Stage 164:===================================>                 (76 + 37) / 113][Stage 164:=============================================>       (96 + 17) / 113][Stage 164:==================================================>  (107 + 6) / 113]                                                                                [Stage 165:===========================>                         (60 + 54) / 114][Stage 165:=================================>                   (73 + 41) / 114][Stage 165:========================================>            (87 + 27) / 114][Stage 165:==============================================>     (102 + 12) / 114][Stage 165:==================================================>  (108 + 6) / 114][Stage 165:===================================================> (111 + 3) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.547130573 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 2 AND partitionZIndex<=49", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404377345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 61) / 121][Stage 166:=============================>                       (67 + 54) / 121][Stage 166:========================================>            (92 + 29) / 121][Stage 166:=================================================>   (112 + 9) / 121][Stage 166:====================================================>(120 + 1) / 121]                                                                                [Stage 167:==========================>                          (61 + 61) / 122][Stage 167:================================>                    (75 + 47) / 122][Stage 167:==========================================>         (100 + 22) / 122][Stage 167:===================================================> (118 + 4) / 122][Stage 167:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.275405363 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 80 AND partitionZIndex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413114796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:==================================>                  (78 + 43) / 121][Stage 168:==========================================>          (96 + 25) / 121][Stage 168:==================================================>  (116 + 5) / 121]                                                                                [Stage 169:===========================>                         (63 + 59) / 122][Stage 169:================================>                    (74 + 48) / 122][Stage 169:==========================================>          (97 + 25) / 122][Stage 169:==================================================>  (116 + 6) / 122][Stage 169:===================================================> (119 + 3) / 122][Stage 169:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.326806518 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 01 AND partitionZIndex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376546584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===================================>                 (77 + 38) / 115][Stage 170:============================================>        (97 + 18) / 115][Stage 170:===================================================> (111 + 4) / 115]                                                                                [Stage 171:==================================>                  (75 + 41) / 116][Stage 171:==========================================>          (94 + 22) / 116][Stage 171:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.544461607 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 13 AND partitionZIndex<=220", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=220,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402318793 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (61 + 59) / 120][Stage 172:=================================>                   (76 + 44) / 120][Stage 172:===========================================>         (98 + 22) / 120][Stage 172:==================================================>  (115 + 5) / 120][Stage 172:====================================================>(119 + 1) / 120]                                                                                [Stage 173:==========================>                          (61 + 60) / 121][Stage 173:=============================>                       (67 + 54) / 121][Stage 173:==================================>                  (79 + 42) / 121][Stage 173:==========================================>          (97 + 24) / 121][Stage 173:===============================================>    (111 + 10) / 121][Stage 173:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.112397382 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 62 AND partitionZIndex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.336276377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=====================================>               (81 + 34) / 115][Stage 174:==========================================>          (93 + 22) / 115][Stage 174:===============================================>    (104 + 11) / 115]                                                                                [Stage 175:======================================>              (84 + 32) / 116][Stage 175:============================================>        (97 + 19) / 116][Stage 175:=================================================>   (109 + 7) / 116][Stage 175:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.57438469 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 02 AND partitionZIndex<=209", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=209,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37535565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:==============================>                      (64 + 49) / 113][Stage 176:====================================>                (77 + 36) / 113][Stage 176:=============================================>       (97 + 16) / 113][Stage 176:=================================================>   (106 + 7) / 113]                                                                                [Stage 177:===========================>                         (60 + 54) / 114][Stage 177:=============================>                       (64 + 50) / 114][Stage 177:=========================================>           (90 + 24) / 114][Stage 177:=================================================>   (107 + 7) / 114][Stage 177:===================================================> (111 + 3) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.894655507 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 5 AND partitionZIndex<=42", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.370794997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (70 + 45) / 115][Stage 178:====================================>                (79 + 36) / 115][Stage 178:===========================================>         (94 + 21) / 115][Stage 178:================================================>    (106 + 9) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:================================>                    (71 + 45) / 116][Stage 179:=====================================>               (83 + 33) / 116][Stage 179:===========================================>         (95 + 21) / 116][Stage 179:===============================================>    (106 + 10) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:===================================================> (112 + 4) / 116][Stage 179:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.479085424 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 8 AND partitionZIndex<=65", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415985064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:=============================>                       (66 + 54) / 120][Stage 180:===================================>                 (80 + 40) / 120][Stage 180:==========================================>          (97 + 23) / 120][Stage 180:=================================================>   (112 + 8) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:=============================>                       (68 + 53) / 121][Stage 181:====================================>                (84 + 37) / 121][Stage 181:==========================================>          (98 + 23) / 121][Stage 181:=================================================>   (114 + 7) / 121][Stage 181:====================================================>(119 + 2) / 121][Stage 181:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.524032837 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 5 AND partitionZIndex<=82", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=82,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.496885006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=====================================>               (79 + 34) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:===============================================>    (103 + 10) / 113][Stage 182:===================================================> (110 + 3) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:====================================>                (79 + 35) / 114][Stage 183:=========================================>           (89 + 25) / 114][Stage 183:=============================================>       (98 + 16) / 114][Stage 183:==================================================>  (109 + 5) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.241626659 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 38 AND partitionZIndex<=245", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.331455192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=======================================>             (85 + 30) / 115][Stage 184:===========================================>         (94 + 21) / 115][Stage 184:==================================================>  (109 + 6) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:=======================================>             (87 + 29) / 116][Stage 185:============================================>       (100 + 16) / 116][Stage 185:==================================================>  (111 + 5) / 116][Stage 185:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.999788909 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 55 AND partitionZIndex<=162", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393388857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:============================>                        (65 + 55) / 120][Stage 186:==================================>                  (79 + 41) / 120][Stage 186:===========================================>         (99 + 21) / 120][Stage 186:=================================================>   (111 + 9) / 120]                                                                                [Stage 187:===========================>                         (62 + 59) / 121][Stage 187:================================>                    (74 + 47) / 121][Stage 187:=========================================>           (95 + 26) / 121][Stage 187:==================================================>  (115 + 6) / 121][Stage 187:===================================================> (118 + 3) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.253906003 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 9 AND partitionZIndex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38350457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (59 + 54) / 113][Stage 188:=============================>                       (63 + 50) / 113][Stage 188:======================================>              (82 + 31) / 113][Stage 188:================================================>    (104 + 9) / 113][Stage 188:====================================================>(111 + 2) / 113]                                                                                [Stage 189:===========================>                         (60 + 54) / 114][Stage 189:============================>                        (62 + 52) / 114][Stage 189:===================================>                 (76 + 38) / 114][Stage 189:=============================================>      (100 + 14) / 114][Stage 189:===================================================> (111 + 3) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.155452143 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 20 AND partitionZIndex<=227", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.355080487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:=================================>                   (75 + 43) / 118][Stage 190:=====================================>               (83 + 35) / 118][Stage 190:===========================================>         (96 + 22) / 118][Stage 190:================================================>    (109 + 9) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:=================================>                   (75 + 44) / 119][Stage 191:===================================>                 (80 + 39) / 119][Stage 191:=========================================>           (94 + 25) / 119][Stage 191:=============================================>      (105 + 14) / 119][Stage 191:===================================================> (115 + 4) / 119][Stage 191:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.958410102 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 2 AND partitionZIndex<=69", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.373323066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:============================>                        (60 + 53) / 113][Stage 192:================================>                    (70 + 43) / 113][Stage 192:=======================================>             (84 + 29) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:===========================>                         (59 + 55) / 114][Stage 193:===============================>                     (67 + 47) / 114][Stage 193:===================================>                 (77 + 37) / 114][Stage 193:==========================================>          (91 + 23) / 114][Stage 193:==================================================>  (108 + 6) / 114][Stage 193:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.697829575 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 51 AND partitionZIndex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411554602 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (63 + 57) / 120][Stage 194:==============================>                      (69 + 51) / 120][Stage 194:=========================================>           (95 + 25) / 120][Stage 194:===================================================> (116 + 4) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:================================>                    (74 + 47) / 121][Stage 195:==========================================>          (97 + 24) / 121][Stage 195:=================================================>   (114 + 7) / 121][Stage 195:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.359845012 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 45 AND partitionZIndex<=152", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39046111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==============================>                      (67 + 48) / 115][Stage 196:====================================>                (79 + 36) / 115][Stage 196:=============================================>      (101 + 14) / 115][Stage 196:===================================================> (111 + 4) / 115]                                                                                [Stage 197:=================================>                   (74 + 42) / 116][Stage 197:=========================================>           (90 + 26) / 116][Stage 197:=============================================>      (101 + 15) / 116][Stage 197:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.824002359 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 05 AND partitionZIndex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.388815053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=============================>                       (64 + 51) / 115][Stage 198:===================================>                 (78 + 37) / 115][Stage 198:=========================================>           (91 + 24) / 115][Stage 198:=================================================>   (107 + 8) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:===============================>                     (70 + 46) / 116][Stage 199:====================================>                (80 + 36) / 116][Stage 199:==========================================>          (93 + 23) / 116][Stage 199:================================================>    (107 + 9) / 116][Stage 199:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.010510805 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 2 AND partitionZIndex<=79", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=79,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394160308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (63 + 57) / 120][Stage 200:==================================>                  (77 + 43) / 120][Stage 200:========================================>            (91 + 29) / 120][Stage 200:=================================================>   (112 + 8) / 120][Stage 200:===================================================> (117 + 3) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:=============================>                       (68 + 53) / 121][Stage 201:======================================>              (88 + 33) / 121][Stage 201:=============================================>      (105 + 16) / 121][Stage 201:==================================================>  (116 + 5) / 121][Stage 201:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.897028336 seconds
res203: Int = 0

scala> 

scala> :quit

real	12m13.831s
user	12m5.424s
sys	1m40.048s
