Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 01:26:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:26:54 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:26:54 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:26:54 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 01:26:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:27:07 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525012656-0619).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.503267242 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======================>                               (49 + 66) / 115][Stage 0:=========================>                             (54 + 61) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=====================>                                 (45 + 71) / 116][Stage 1:==========================>                            (55 + 61) / 116][Stage 1:============================>                          (61 + 55) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.87514975 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.795184075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (46 + 67) / 113][Stage 2:============================>                          (58 + 55) / 113][Stage 2:=============================>                         (60 + 53) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:=======================================>               (81 + 32) / 113][Stage 2:===============================================>      (100 + 13) / 113][Stage 2:====================================================>  (107 + 6) / 113][Stage 2:=====================================================> (109 + 4) / 113]                                                                                [Stage 3:============================>                          (59 + 55) / 114][Stage 3:==============================>                        (63 + 51) / 114][Stage 3:=================================>                     (70 + 44) / 114][Stage 3:======================================>                (79 + 35) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:===================================================>   (107 + 7) / 114][Stage 3:=====================================================> (111 + 3) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.033769825 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  5 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.780829533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==========================>                            (58 + 63) / 121][Stage 4:===========================>                           (60 + 61) / 121][Stage 4:=============================>                         (65 + 56) / 121][Stage 4:=================================>                     (73 + 48) / 121][Stage 4:======================================>                (85 + 36) / 121][Stage 4:============================================>          (98 + 23) / 121][Stage 4:=====================================================> (118 + 3) / 121]                                                                                [Stage 5:===========================>                           (60 + 62) / 122][Stage 5:=============================>                         (65 + 57) / 122][Stage 5:================================>                      (72 + 50) / 122][Stage 5:===================================>                   (79 + 43) / 122][Stage 5:==========================================>            (95 + 27) / 122][Stage 5:================================================>     (110 + 12) / 122][Stage 5:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.247248956 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  99 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.736613251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (57 + 56) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==================================>                    (70 + 43) / 113][Stage 6:======================================>                (79 + 34) / 113][Stage 6:=============================================>         (93 + 20) / 113][Stage 6:===================================================>   (106 + 7) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:=============================>                         (61 + 53) / 114][Stage 7:=================================>                     (69 + 45) / 114][Stage 7:==========================================>            (89 + 25) / 114][Stage 7:===============================================>       (99 + 15) / 114][Stage 7:=====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.927146064 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  44 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.544032354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:============================================>          (92 + 23) / 115][Stage 8:================================================>     (103 + 12) / 115][Stage 8:====================================================>  (109 + 6) / 115][Stage 8:=====================================================> (111 + 4) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:=======================================>               (83 + 33) / 116][Stage 9:==========================================>            (90 + 26) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:==================================================>    (107 + 9) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.344972805 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  17 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.556399325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==================================>                   (72 + 41) / 113][Stage 10:=====================================>                (79 + 34) / 113][Stage 10:===========================================>          (91 + 22) / 113][Stage 10:=============================================>        (95 + 18) / 113][Stage 10:===============================================>     (102 + 11) / 113][Stage 10:================================================>    (103 + 10) / 113][Stage 10:===================================================>  (107 + 6) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:====================================>                 (77 + 37) / 114][Stage 11:=========================================>            (87 + 27) / 114][Stage 11:===========================================>          (92 + 22) / 114][Stage 11:=============================================>        (96 + 18) / 114][Stage 11:=================================================>    (105 + 9) / 114][Stage 11:===================================================>  (109 + 5) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.572716816 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.618550428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:==============================>                       (68 + 52) / 120][Stage 12:=================================>                    (75 + 45) / 120][Stage 12:========================================>             (91 + 29) / 120][Stage 12:=============================================>       (104 + 16) / 120][Stage 12:================================================>    (109 + 11) / 120][Stage 12:===================================================>  (115 + 5) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:===============================>                      (71 + 50) / 121][Stage 13:====================================>                 (81 + 40) / 121][Stage 13:=========================================>            (94 + 27) / 121][Stage 13:===============================================>     (108 + 13) / 121][Stage 13:====================================================> (118 + 3) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.275291327 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.451743903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:======================================>               (82 + 33) / 115][Stage 14:=======================================>              (84 + 31) / 115][Stage 14:=============================================>        (97 + 18) / 115][Stage 14:==================================================>   (107 + 8) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:======================================>               (82 + 34) / 116][Stage 15:=======================================>              (85 + 31) / 116][Stage 15:==========================================>           (91 + 25) / 116][Stage 15:==============================================>      (102 + 14) / 116][Stage 15:=================================================>    (107 + 9) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.801438032 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.569388274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (58 + 55) / 113][Stage 16:==============================>                       (64 + 49) / 113][Stage 16:=====================================>                (78 + 35) / 113][Stage 16:============================================>         (94 + 19) / 113][Stage 16:===================================================>  (107 + 6) / 113]                                                                                [Stage 17:=============================>                        (63 + 51) / 114][Stage 17:==================================>                   (72 + 42) / 114][Stage 17:=========================================>            (88 + 26) / 114][Stage 17:==============================================>      (100 + 14) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.685494851 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.516238071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:===============================>                      (65 + 48) / 113][Stage 18:========================================>             (85 + 28) / 113][Stage 18:===============================================>      (99 + 14) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:===========================>                          (59 + 55) / 114][Stage 19:==============================>                       (64 + 50) / 114][Stage 19:====================================>                 (76 + 38) / 114][Stage 19:==============================================>       (99 + 15) / 114][Stage 19:=================================================>    (105 + 9) / 114][Stage 19:===================================================>  (108 + 6) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.671664284 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.588469961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==========================>                           (60 + 61) / 121][Stage 20:=============================>                        (66 + 55) / 121][Stage 20:==================================>                   (77 + 44) / 121][Stage 20:============================================>        (102 + 19) / 121][Stage 20:====================================================> (118 + 3) / 121]                                                                                [Stage 21:===========================>                          (62 + 60) / 122][Stage 21:================================>                     (73 + 49) / 122][Stage 21:=====================================>                (85 + 37) / 122][Stage 21:==============================================>      (107 + 15) / 122][Stage 21:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.480528826 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.533528954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:==============================>                       (67 + 53) / 120][Stage 22:===================================>                  (78 + 42) / 120][Stage 22:===========================================>          (97 + 23) / 120][Stage 22:==============================================>      (106 + 14) / 120][Stage 22:====================================================> (117 + 3) / 120]                                                                                [Stage 23:============================>                         (63 + 58) / 121][Stage 23:==============================>                       (69 + 52) / 121][Stage 23:=======================================>              (88 + 33) / 121][Stage 23:===============================================>     (108 + 13) / 121][Stage 23:===================================================>  (115 + 6) / 121][Stage 23:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.763546864 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.521812881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:===========================>                          (61 + 59) / 120][Stage 24:===================================>                  (79 + 41) / 120][Stage 24:===========================================>          (96 + 24) / 120][Stage 24:=================================================>    (111 + 9) / 120][Stage 24:=====================================================>(118 + 2) / 120]                                                                                [Stage 25:===========================>                          (61 + 60) / 121][Stage 25:==================================>                   (77 + 44) / 121][Stage 25:===========================================>          (98 + 23) / 121][Stage 25:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.332232272 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.51845425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:==============================>                       (68 + 52) / 120][Stage 26:========================================>             (90 + 30) / 120][Stage 26:=============================================>       (103 + 17) / 120][Stage 26:====================================================> (117 + 3) / 120]                                                                                [Stage 27:===========================>                          (62 + 59) / 121][Stage 27:=================================>                    (75 + 46) / 121][Stage 27:============================================>        (101 + 20) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.416089205 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.508486083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:=============================>                        (65 + 56) / 121][Stage 28:====================================>                 (82 + 39) / 121][Stage 28:===========================================>          (97 + 24) / 121][Stage 28:===================================================>  (116 + 5) / 121]                                                                                [Stage 29:===========================>                          (61 + 61) / 122][Stage 29:================================>                     (74 + 48) / 122][Stage 29:==========================================>           (96 + 26) / 122][Stage 29:===================================================>  (117 + 5) / 122][Stage 29:====================================================> (119 + 3) / 122][Stage 29:=====================================================>(120 + 2) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.788903158 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  124 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.469227157 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:==================================>                   (75 + 43) / 118][Stage 30:======================================>               (84 + 34) / 118][Stage 30:============================================>         (97 + 21) / 118][Stage 30:==================================================>   (111 + 7) / 118][Stage 30:====================================================> (114 + 4) / 118][Stage 30:=====================================================>(116 + 2) / 118][Stage 30:=====================================================>(117 + 1) / 118]                                                                                [Stage 31:=================================>                    (74 + 45) / 119][Stage 31:===================================>                  (79 + 40) / 119][Stage 31:=======================================>              (87 + 32) / 119][Stage 31:============================================>        (101 + 18) / 119][Stage 31:===================================================>  (113 + 6) / 119][Stage 31:====================================================> (115 + 4) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.267561408 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  46 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.548301264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (71 + 47) / 118][Stage 32:==================================>                   (75 + 43) / 118][Stage 32:=========================================>            (90 + 28) / 118][Stage 32:=============================================>        (99 + 19) / 118][Stage 32:==================================================>   (110 + 8) / 118][Stage 32:=====================================================>(117 + 1) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:==================================>                   (76 + 43) / 119][Stage 33:=======================================>              (86 + 33) / 119][Stage 33:============================================>        (100 + 19) / 119][Stage 33:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.363773035 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  86 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.518063223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:====================================>                 (76 + 37) / 113][Stage 34:===============================================>      (99 + 14) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:============================>                         (60 + 54) / 114][Stage 35:===============================>                      (67 + 47) / 114][Stage 35:========================================>             (85 + 29) / 114][Stage 35:==============================================>       (99 + 15) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.067059727 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  206 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418964801 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (83 + 32) / 115][Stage 36:===========================================>          (93 + 22) / 115][Stage 36:=================================================>    (106 + 9) / 115][Stage 36:===================================================>  (110 + 5) / 115][Stage 36:====================================================> (111 + 4) / 115]                                                                                [Stage 37:========================================>             (86 + 30) / 116][Stage 37:============================================>         (96 + 20) / 116][Stage 37:===============================================>     (105 + 11) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.121920062 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  63 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.495555201 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (70 + 45) / 115][Stage 38:=======================================>              (85 + 30) / 115][Stage 38:===============================================>     (103 + 12) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:=====================================>                (81 + 35) / 116][Stage 39:=============================================>        (97 + 19) / 116][Stage 39:==================================================>   (108 + 8) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.215128879 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  149 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459202065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:===================================>                  (77 + 41) / 118][Stage 40:======================================>               (85 + 33) / 118][Stage 40:=============================================>        (99 + 19) / 118][Stage 40:==================================================>   (111 + 7) / 118][Stage 40:====================================================> (115 + 3) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:======================================>               (84 + 35) / 119][Stage 41:============================================>         (97 + 22) / 119][Stage 41:=================================================>    (110 + 9) / 119][Stage 41:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.654259261 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.544460426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==========================>                           (60 + 61) / 121][Stage 42:=============================>                        (65 + 56) / 121][Stage 42:=====================================>                (83 + 38) / 121][Stage 42:============================================>        (101 + 20) / 121][Stage 42:===================================================>  (115 + 6) / 121]                                                                                [Stage 43:===========================>                          (61 + 61) / 122][Stage 43:=============================>                        (67 + 55) / 122][Stage 43:===================================>                  (81 + 41) / 122][Stage 43:===============================================>     (110 + 12) / 122][Stage 43:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.271216988 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.547848974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (70 + 45) / 115][Stage 44:========================================>             (86 + 29) / 115][Stage 44:==============================================>      (100 + 15) / 115][Stage 44:===================================================>  (109 + 6) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:===============================>                      (68 + 48) / 116][Stage 45:======================================>               (83 + 33) / 116][Stage 45:=============================================>        (97 + 19) / 116][Stage 45:===============================================>     (105 + 11) / 116][Stage 45:===================================================>  (111 + 5) / 116][Stage 45:====================================================> (112 + 4) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.996365575 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  42 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.440778472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (58 + 55) / 113][Stage 46:=============================>                        (62 + 51) / 113][Stage 46:===================================>                  (75 + 38) / 113][Stage 46:===============================================>      (99 + 14) / 113][Stage 46:====================================================> (109 + 4) / 113]                                                                                [Stage 47:=============================>                        (62 + 52) / 114][Stage 47:====================================>                 (77 + 37) / 114][Stage 47:==========================================>           (90 + 24) / 114][Stage 47:===============================================>     (103 + 11) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.335434716 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.441096712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:================================>                     (72 + 46) / 118][Stage 48:=================================>                    (74 + 44) / 118][Stage 48:======================================>               (85 + 33) / 118][Stage 48:==============================================>      (103 + 15) / 118][Stage 48:====================================================> (115 + 3) / 118]                                                                                [Stage 49:===============================>                      (70 + 49) / 119][Stage 49:==================================>                   (75 + 44) / 119][Stage 49:=======================================>              (88 + 31) / 119][Stage 49:==============================================>      (104 + 15) / 119][Stage 49:==================================================>   (111 + 8) / 119][Stage 49:====================================================> (116 + 3) / 119][Stage 49:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.336827291 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  18 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.474108038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (60 + 53) / 113][Stage 50:==================================>                   (72 + 41) / 113][Stage 50:==========================================>           (88 + 25) / 113][Stage 50:==================================================>   (106 + 7) / 113][Stage 50:=====================================================>(112 + 1) / 113]                                                                                [Stage 51:===========================>                          (59 + 55) / 114][Stage 51:=============================>                        (63 + 51) / 114][Stage 51:=====================================>                (80 + 34) / 114][Stage 51:==================================================>   (106 + 8) / 114][Stage 51:===================================================>  (109 + 5) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.403288796 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  203 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.476245921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==========================>                           (60 + 61) / 121][Stage 52:=============================>                        (65 + 56) / 121][Stage 52:===================================>                  (80 + 41) / 121][Stage 52:============================================>        (102 + 19) / 121][Stage 52:====================================================> (118 + 3) / 121]                                                                                [Stage 53:===========================>                          (61 + 61) / 122][Stage 53:================================>                     (73 + 49) / 122][Stage 53:========================================>             (91 + 31) / 122][Stage 53:==============================================>      (107 + 15) / 122][Stage 53:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.230215676 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.446872944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:============================>                         (59 + 54) / 113][Stage 54:=============================>                        (61 + 52) / 113][Stage 54:===================================>                  (75 + 38) / 113][Stage 54:=============================================>        (96 + 17) / 113][Stage 54:==================================================>   (106 + 7) / 113]                                                                                [Stage 55:===========================>                          (59 + 55) / 114][Stage 55:===============================>                      (67 + 47) / 114][Stage 55:==========================================>           (89 + 25) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.13932169 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.425778588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==============================>                       (65 + 50) / 115][Stage 56:====================================>                 (78 + 37) / 115][Stage 56:==========================================>           (90 + 25) / 115][Stage 56:===============================================>     (102 + 13) / 115][Stage 56:====================================================> (111 + 4) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:================================>                     (69 + 47) / 116][Stage 57:====================================>                 (78 + 38) / 116][Stage 57:========================================>             (86 + 30) / 116][Stage 57:=============================================>        (98 + 18) / 116][Stage 57:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.293795203 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  189 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37325691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (83 + 32) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:=================================================>    (106 + 9) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:========================================>             (86 + 30) / 116][Stage 59:=============================================>        (97 + 19) / 116][Stage 59:==================================================>   (109 + 7) / 116][Stage 59:===================================================>  (110 + 6) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.082594407 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  234 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.486181002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:===============================>                      (69 + 51) / 120][Stage 60:=====================================>                (83 + 37) / 120][Stage 60:===============================================>     (107 + 13) / 120][Stage 60:=====================================================>(119 + 1) / 120]                                                                                [Stage 61:============================>                         (63 + 58) / 121][Stage 61:=================================>                    (75 + 46) / 121][Stage 61:============================================>        (101 + 20) / 121][Stage 61:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.070040847 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  118 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.455595022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:===============================>                      (70 + 50) / 120][Stage 62:====================================>                 (82 + 38) / 120][Stage 62:============================================>        (100 + 20) / 120][Stage 62:===================================================>  (115 + 5) / 120]                                                                                [Stage 63:==========================>                           (60 + 61) / 121][Stage 63:==============================>                       (68 + 53) / 121][Stage 63:====================================>                 (82 + 39) / 121][Stage 63:============================================>        (101 + 20) / 121][Stage 63:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.366900488 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  171 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.41299065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=================================>                    (73 + 45) / 118][Stage 64:===================================>                  (78 + 40) / 118][Stage 64:========================================>             (89 + 29) / 118][Stage 64:=============================================>        (99 + 19) / 118][Stage 64:==================================================>   (110 + 8) / 118]                                                                                [Stage 65:==================================>                   (76 + 43) / 119][Stage 65:===================================>                  (79 + 40) / 119][Stage 65:===========================================>          (95 + 24) / 119][Stage 65:==================================================>   (111 + 8) / 119][Stage 65:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.368501664 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  162 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453119912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===============================>                      (67 + 48) / 115][Stage 66:======================================>               (81 + 34) / 115][Stage 66:==============================================>       (99 + 16) / 115][Stage 66:=====================================================>(113 + 2) / 115]                                                                                [Stage 67:===============================>                      (67 + 49) / 116][Stage 67:======================================>               (83 + 33) / 116][Stage 67:============================================>         (96 + 20) / 116][Stage 67:==================================================>   (108 + 8) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.839340846 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  58 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.473052743 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (60 + 60) / 120][Stage 68:==============================>                       (67 + 53) / 120][Stage 68:====================================>                 (80 + 40) / 120][Stage 68:================================================>    (110 + 10) / 120][Stage 68:=====================================================>(119 + 1) / 120]                                                                                [Stage 69:============================>                         (63 + 58) / 121][Stage 69:===================================>                  (80 + 41) / 121][Stage 69:============================================>        (102 + 19) / 121][Stage 69:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.064602341 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  79 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.583056206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==========================>                           (60 + 61) / 121][Stage 70:=============================>                        (66 + 55) / 121][Stage 70:===================================>                  (80 + 41) / 121][Stage 70:============================================>         (99 + 22) / 121][Stage 70:===================================================>  (115 + 6) / 121]                                                                                [Stage 71:============================>                         (64 + 58) / 122][Stage 71:==================================>                   (78 + 44) / 122][Stage 71:==========================================>           (97 + 25) / 122][Stage 71:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.184329622 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.443172884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (61 + 59) / 120][Stage 72:===============================>                      (69 + 51) / 120][Stage 72:======================================>               (85 + 35) / 120][Stage 72:==============================================>      (105 + 15) / 120][Stage 72:====================================================> (117 + 3) / 120]                                                                                [Stage 73:=============================>                        (65 + 56) / 121][Stage 73:=================================>                    (75 + 46) / 121][Stage 73:============================================>         (99 + 22) / 121][Stage 73:====================================================> (117 + 4) / 121][Stage 73:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.409994836 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  104 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415834692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=============================>                        (62 + 51) / 113][Stage 74:==================================>                   (72 + 41) / 113][Stage 74:============================================>         (93 + 20) / 113][Stage 74:===============================================>     (102 + 11) / 113][Stage 74:====================================================> (110 + 3) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:=============================>                        (63 + 51) / 114][Stage 75:====================================>                 (78 + 36) / 114][Stage 75:==============================================>       (98 + 16) / 114][Stage 75:====================================================> (111 + 3) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.303537693 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42343077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (58 + 55) / 113][Stage 76:============================>                         (60 + 53) / 113][Stage 76:====================================>                 (76 + 37) / 113][Stage 76:===============================================>      (99 + 14) / 113]                                                                                [Stage 77:============================>                         (61 + 53) / 114][Stage 77:===================================>                  (74 + 40) / 114][Stage 77:==========================================>           (89 + 25) / 114][Stage 77:==================================================>   (106 + 8) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.074085694 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.44702737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:============================>                         (63 + 57) / 120][Stage 78:========================================>             (89 + 31) / 120][Stage 78:================================================>    (110 + 10) / 120]                                                                                [Stage 79:===========================>                          (62 + 59) / 121][Stage 79:===============================>                      (71 + 50) / 121][Stage 79:=======================================>              (88 + 33) / 121][Stage 79:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 2.930494058 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  232 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379696596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=================================>                    (70 + 43) / 113][Stage 80:======================================>               (81 + 32) / 113][Stage 80:============================================>         (93 + 20) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:===================================================>  (108 + 5) / 113]                                                                                [Stage 81:======================================>               (81 + 33) / 114][Stage 81:===========================================>          (91 + 23) / 114][Stage 81:===============================================>     (102 + 12) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.068619825 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  174 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.362510491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:======================================>               (81 + 34) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:===============================================>     (102 + 13) / 115][Stage 82:====================================================> (112 + 3) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:=======================================>              (84 + 32) / 116][Stage 83:===========================================>          (94 + 22) / 116][Stage 83:=================================================>    (107 + 9) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.834429336 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400106787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (72 + 46) / 118][Stage 84:==================================>                   (75 + 43) / 118][Stage 84:=====================================>                (83 + 35) / 118][Stage 84:===========================================>          (96 + 22) / 118][Stage 84:===============================================>     (105 + 13) / 118][Stage 84:=====================================================>(116 + 2) / 118]                                                                                [Stage 85:=================================>                    (73 + 46) / 119][Stage 85:===================================>                  (79 + 40) / 119][Stage 85:=======================================>              (88 + 31) / 119][Stage 85:============================================>         (99 + 20) / 119][Stage 85:================================================>    (109 + 10) / 119][Stage 85:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.317243368 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.431934927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==========================>                           (60 + 61) / 121][Stage 86:=============================>                        (66 + 55) / 121][Stage 86:==================================>                   (78 + 43) / 121][Stage 86:===========================================>         (100 + 21) / 121][Stage 86:====================================================> (117 + 4) / 121]                                                                                [Stage 87:===========================>                          (61 + 61) / 122][Stage 87:============================>                         (64 + 58) / 122][Stage 87:=====================================>                (84 + 38) / 122][Stage 87:===============================================>     (109 + 13) / 122][Stage 87:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.075222579 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  53 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365754277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (83 + 32) / 115][Stage 88:===========================================>          (93 + 22) / 115][Stage 88:===============================================>     (102 + 13) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:========================================>             (88 + 28) / 116][Stage 89:===============================================>     (103 + 13) / 116][Stage 89:===================================================>  (111 + 5) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.884493664 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  27 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415928444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=============================>                        (61 + 52) / 113][Stage 90:===================================>                  (75 + 38) / 113][Stage 90:============================================>         (93 + 20) / 113][Stage 90:===================================================>  (108 + 5) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:============================>                         (60 + 54) / 114][Stage 91:==============================>                       (64 + 50) / 114][Stage 91:======================================>               (82 + 32) / 114][Stage 91:===============================================>     (103 + 11) / 114][Stage 91:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.232443087 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.432339845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (60 + 60) / 120][Stage 92:=============================>                        (65 + 55) / 120][Stage 92:===================================>                  (79 + 41) / 120][Stage 92:===========================================>          (96 + 24) / 120][Stage 92:==================================================>   (113 + 7) / 120]                                                                                [Stage 93:===========================>                          (62 + 59) / 121][Stage 93:=================================>                    (74 + 47) / 121][Stage 93:===========================================>         (100 + 21) / 121][Stage 93:===================================================>  (115 + 6) / 121][Stage 93:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.196801608 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405638216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===============================>                      (68 + 47) / 115][Stage 94:=====================================>                (79 + 36) / 115][Stage 94:===========================================>          (93 + 22) / 115][Stage 94:================================================>    (105 + 10) / 115][Stage 94:===================================================>  (109 + 6) / 115]                                                                                [Stage 95:==================================>                   (75 + 41) / 116][Stage 95:========================================>             (86 + 30) / 116][Stage 95:=============================================>       (100 + 16) / 116][Stage 95:===================================================>  (110 + 6) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.266398898 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  117 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.424039162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:============================>                         (64 + 57) / 121][Stage 96:=====================================>                (84 + 37) / 121][Stage 96:==============================================>      (106 + 15) / 121][Stage 96:====================================================> (118 + 3) / 121]                                                                                [Stage 97:===========================>                          (61 + 61) / 122][Stage 97:===========================>                          (63 + 59) / 122][Stage 97:================================>                     (74 + 48) / 122][Stage 97:===========================================>          (99 + 23) / 122][Stage 97:===================================================>  (116 + 6) / 122][Stage 97:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.385753114 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  78 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392906441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:===================================>                  (78 + 40) / 118][Stage 98:==========================================>           (92 + 26) / 118][Stage 98:===================================================>  (112 + 6) / 118][Stage 98:=====================================================>(117 + 1) / 118]                                                                                [Stage 99:==================================>                   (77 + 42) / 119][Stage 99:=======================================>              (88 + 31) / 119][Stage 99:=============================================>       (102 + 17) / 119][Stage 99:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.086762604 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  56 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386594564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (74 + 44) / 118][Stage 100:======================================>              (85 + 33) / 118][Stage 100:==============================================>     (105 + 13) / 118][Stage 100:==================================================>  (113 + 5) / 118]                                                                                [Stage 101:================================>                    (73 + 46) / 119][Stage 101:====================================>                (83 + 36) / 119][Stage 101:=============================================>      (103 + 16) / 119][Stage 101:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.947993123 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  61 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.44418009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 61) / 121][Stage 102:==========================>                          (61 + 60) / 121][Stage 102:==================================>                  (79 + 42) / 121][Stage 102:==========================================>          (96 + 25) / 121][Stage 102:==================================================>  (115 + 6) / 121][Stage 102:===================================================> (118 + 3) / 121]                                                                                [Stage 103:==========================>                          (61 + 61) / 122][Stage 103:============================>                        (66 + 56) / 122][Stage 103:=================================>                   (78 + 44) / 122][Stage 103:=========================================>           (95 + 27) / 122][Stage 103:==================================================>  (117 + 5) / 122][Stage 103:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.346585409 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406027752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===============================>                     (69 + 46) / 115][Stage 104:==========================================>          (92 + 23) / 115][Stage 104:================================================>    (106 + 9) / 115]                                                                                [Stage 105:================================>                    (72 + 44) / 116][Stage 105:=======================================>             (87 + 29) / 116][Stage 105:=============================================>      (101 + 15) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.739376739 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  194 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.477767013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:==================================>                  (76 + 42) / 118][Stage 106:=====================================>               (83 + 35) / 118][Stage 106:==========================================>          (95 + 23) / 118][Stage 106:===============================================>    (107 + 11) / 118][Stage 106:====================================================>(116 + 2) / 118]                                                                                [Stage 107:=================================>                   (75 + 44) / 119][Stage 107:===================================>                 (79 + 40) / 119][Stage 107:====================================>                (81 + 38) / 119][Stage 107:=========================================>           (94 + 25) / 119][Stage 107:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.503456331 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  166 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364115503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:========================================>            (87 + 28) / 115][Stage 108:============================================>        (97 + 18) / 115][Stage 108:==================================================>  (109 + 6) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:========================================>            (89 + 27) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.774327514 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  131 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36663983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:====================================>                (78 + 35) / 113][Stage 110:=======================================>             (85 + 28) / 113][Stage 110:=============================================>       (97 + 16) / 113][Stage 110:==================================================>  (108 + 5) / 113][Stage 110:====================================================>(111 + 2) / 113]                                                                                [Stage 111:====================================>                (78 + 36) / 114][Stage 111:===========================================>         (93 + 21) / 114][Stage 111:==============================================>     (102 + 12) / 114][Stage 111:===================================================> (110 + 4) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.209699611 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  233 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413472467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:============================>                        (65 + 55) / 120][Stage 112:====================================>                (82 + 38) / 120][Stage 112:=============================================>      (105 + 15) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:================================>                    (75 + 46) / 121][Stage 113:=========================================>           (95 + 26) / 121][Stage 113:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 2.870691465 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382497367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==================================>                  (75 + 40) / 115][Stage 114:===========================================>         (94 + 21) / 115][Stage 114:==================================================>  (110 + 5) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:=====================================>               (83 + 33) / 116][Stage 115:===========================================>         (96 + 20) / 116][Stage 115:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.828243172 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408042971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 61) / 121][Stage 116:=============================>                       (67 + 54) / 121][Stage 116:===================================>                 (82 + 39) / 121][Stage 116:=================================================>   (113 + 8) / 121][Stage 116:====================================================>(120 + 1) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:=============================>                       (69 + 53) / 122][Stage 117:=======================================>             (92 + 30) / 122][Stage 117:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 2.965897872 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409923775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:===========================>                         (63 + 57) / 120][Stage 118:==================================>                  (78 + 42) / 120][Stage 118:===========================================>        (101 + 19) / 120][Stage 118:====================================================>(118 + 2) / 120]                                                                                [Stage 119:===========================>                         (62 + 59) / 121][Stage 119:=================================>                   (77 + 44) / 121][Stage 119:=============================================>      (105 + 16) / 121][Stage 119:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.010219878 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391417348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:===============================>                     (68 + 45) / 113][Stage 120:=========================================>           (88 + 25) / 113][Stage 120:================================================>    (104 + 9) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (59 + 55) / 114][Stage 121:==============================>                      (65 + 49) / 114][Stage 121:========================================>            (88 + 26) / 114][Stage 121:==============================================>     (102 + 12) / 114][Stage 121:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.14111 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.419954778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (62 + 58) / 120][Stage 122:=================================>                   (76 + 44) / 120][Stage 122:==========================================>          (96 + 24) / 120][Stage 122:==================================================>  (114 + 6) / 120]                                                                                [Stage 123:===========================>                         (63 + 58) / 121][Stage 123:==================================>                  (78 + 43) / 121][Stage 123:============================================>       (104 + 17) / 121][Stage 123:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 2.97310707 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  200 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394455334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (59 + 54) / 113][Stage 124:=============================>                       (62 + 51) / 113][Stage 124:=====================================>               (80 + 33) / 113][Stage 124:=============================================>       (98 + 15) / 113][Stage 124:==================================================>  (108 + 5) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:================================>                    (69 + 45) / 114][Stage 125:========================================>            (88 + 26) / 114][Stage 125:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.092042942 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.420989859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:=============================>                       (67 + 53) / 120][Stage 126:=====================================>               (85 + 35) / 120][Stage 126:===============================================>    (110 + 10) / 120]                                                                                [Stage 127:============================>                        (65 + 56) / 121][Stage 127:===================================>                 (80 + 41) / 121][Stage 127:==========================================>          (96 + 25) / 121][Stage 127:=================================================>   (112 + 9) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.989280836 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.346981152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (80 + 35) / 115][Stage 128:=====================================>               (81 + 34) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:=================================================>   (108 + 7) / 115]                                                                                [Stage 129:======================================>              (85 + 31) / 116][Stage 129:============================================>       (100 + 16) / 116][Stage 129:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.59919135 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  231 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.488101286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (58 + 55) / 113][Stage 130:==============================>                      (66 + 47) / 113][Stage 130:====================================>                (78 + 35) / 113][Stage 130:============================================>        (95 + 18) / 113][Stage 130:==============================================>     (102 + 11) / 113][Stage 130:===================================================> (110 + 3) / 113]                                                                                [Stage 131:==============================>                      (65 + 49) / 114][Stage 131:===================================>                 (77 + 37) / 114][Stage 131:=========================================>           (89 + 25) / 114][Stage 131:==============================================>     (101 + 13) / 114][Stage 131:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.543551174 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359940623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=================================>                   (71 + 42) / 113][Stage 132:======================================>              (83 + 30) / 113][Stage 132:=============================================>       (97 + 16) / 113][Stage 132:==================================================>  (107 + 6) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:=====================================>               (80 + 34) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:==============================================>      (99 + 15) / 114][Stage 133:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.040015243 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  226 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364248653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (80 + 33) / 113][Stage 134:==========================================>          (91 + 22) / 113][Stage 134:===============================================>    (103 + 10) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:=====================================>               (80 + 34) / 114][Stage 135:========================================>            (88 + 26) / 114][Stage 135:==============================================>     (103 + 11) / 114][Stage 135:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.927150493 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  110 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.350038156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (82 + 33) / 115][Stage 136:============================================>        (96 + 19) / 115][Stage 136:==================================================>  (110 + 5) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:=====================================>               (82 + 34) / 116][Stage 137:========================================>            (89 + 27) / 116][Stage 137:============================================>       (100 + 16) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.821624702 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  112 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405981856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (60 + 60) / 120][Stage 138:============================>                        (64 + 56) / 120][Stage 138:====================================>                (83 + 37) / 120][Stage 138:============================================>       (103 + 17) / 120][Stage 138:====================================================>(118 + 2) / 120]                                                                                [Stage 139:==========================>                          (61 + 60) / 121][Stage 139:===========================>                         (63 + 58) / 121][Stage 139:=================================>                   (76 + 45) / 121][Stage 139:============================================>       (103 + 18) / 121][Stage 139:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.07512127 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381202233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (72 + 46) / 118][Stage 140:==================================>                  (77 + 41) / 118][Stage 140:============================================>        (99 + 19) / 118][Stage 140:==================================================>  (112 + 6) / 118]                                                                                [Stage 141:================================>                    (73 + 46) / 119][Stage 141:======================================>              (86 + 33) / 119][Stage 141:=============================================>      (103 + 16) / 119][Stage 141:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.887977815 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  158 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40830934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 61) / 121][Stage 142:============================>                        (64 + 57) / 121][Stage 142:===================================>                 (80 + 41) / 121][Stage 142:==========================================>         (100 + 21) / 121][Stage 142:====================================================>(119 + 2) / 121]                                                                                [Stage 143:==========================>                          (61 + 61) / 122][Stage 143:=============================>                       (67 + 55) / 122][Stage 143:=======================================>             (90 + 32) / 122][Stage 143:=============================================>      (107 + 15) / 122][Stage 143:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 2.989767203 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  84 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390872656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:============================>                        (61 + 52) / 113][Stage 144:================================>                    (70 + 43) / 113][Stage 144:=============================================>       (96 + 17) / 113][Stage 144:==================================================>  (108 + 5) / 113]                                                                                [Stage 145:============================>                        (61 + 53) / 114][Stage 145:=================================>                   (72 + 42) / 114][Stage 145:=======================================>             (86 + 28) / 114][Stage 145:==============================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.077795856 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408081017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (61 + 60) / 121][Stage 146:================================>                    (75 + 46) / 121][Stage 146:===========================================>        (101 + 20) / 121][Stage 146:==================================================>  (116 + 5) / 121]                                                                                [Stage 147:==========================>                          (62 + 60) / 122][Stage 147:===============================>                     (72 + 50) / 122][Stage 147:=======================================>             (92 + 30) / 122][Stage 147:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.085018766 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403808586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 60) / 120][Stage 148:==============================>                      (69 + 51) / 120][Stage 148:=====================================>               (84 + 36) / 120][Stage 148:==================================================>  (115 + 5) / 120]                                                                                [Stage 149:==========================>                          (61 + 60) / 121][Stage 149:=============================>                       (67 + 54) / 121][Stage 149:===================================>                 (80 + 41) / 121][Stage 149:==========================================>         (100 + 21) / 121][Stage 149:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.93663497 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  157 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410709902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:============================>                        (64 + 56) / 120][Stage 150:=====================================>               (84 + 36) / 120][Stage 150:=============================================>      (106 + 14) / 120][Stage 150:====================================================>(119 + 1) / 120]                                                                                [Stage 151:============================>                        (64 + 57) / 121][Stage 151:====================================>                (84 + 37) / 121][Stage 151:===========================================>        (101 + 20) / 121][Stage 151:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.010792567 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384908357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:================================>                    (73 + 45) / 118][Stage 152:====================================>                (81 + 37) / 118][Stage 152:=======================================>             (88 + 30) / 118][Stage 152:===============================================>    (107 + 11) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:===================================>                 (79 + 40) / 119][Stage 153:=======================================>             (89 + 30) / 119][Stage 153:============================================>       (102 + 17) / 119][Stage 153:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.381787682 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459651762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (73 + 45) / 118][Stage 154:===================================>                 (78 + 40) / 118][Stage 154:========================================>            (91 + 27) / 118][Stage 154:============================================>       (102 + 16) / 118][Stage 154:===================================================> (114 + 4) / 118][Stage 154:====================================================>(117 + 1) / 118]                                                                                [Stage 155:=================================>                   (75 + 44) / 119][Stage 155:=====================================>               (85 + 34) / 119][Stage 155:=========================================>           (93 + 26) / 119][Stage 155:============================================>       (101 + 18) / 119][Stage 155:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.572104747 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  15 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375528851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (73 + 45) / 118][Stage 156:==================================>                  (77 + 41) / 118][Stage 156:=======================================>             (88 + 30) / 118][Stage 156:==========================================>          (94 + 24) / 118][Stage 156:===============================================>    (107 + 11) / 118][Stage 156:===================================================> (115 + 3) / 118]                                                                                [Stage 157:================================>                    (74 + 45) / 119][Stage 157:===================================>                 (79 + 40) / 119][Stage 157:=====================================>               (84 + 35) / 119][Stage 157:============================================>        (99 + 20) / 119][Stage 157:=================================================>   (111 + 8) / 119][Stage 157:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.678423721 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  43 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385068014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:============================>                        (60 + 53) / 113][Stage 158:=================================>                   (72 + 41) / 113][Stage 158:=============================================>       (96 + 17) / 113][Stage 158:==================================================>  (108 + 5) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:===========================>                         (60 + 54) / 114][Stage 159:============================>                        (62 + 52) / 114][Stage 159:==================================>                  (75 + 39) / 114][Stage 159:==========================================>          (92 + 22) / 114][Stage 159:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.171663617 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385090994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (69 + 46) / 115][Stage 160:=========================================>           (91 + 24) / 115][Stage 160:===============================================>    (104 + 11) / 115][Stage 160:===================================================> (112 + 3) / 115]                                                                                [Stage 161:================================>                    (71 + 45) / 116][Stage 161:=====================================>               (82 + 34) / 116][Stage 161:============================================>       (100 + 16) / 116][Stage 161:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.630809271 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  151 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418498655 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 61) / 121][Stage 162:==============================>                      (69 + 52) / 121][Stage 162:=======================================>             (91 + 30) / 121][Stage 162:===============================================>    (111 + 10) / 121][Stage 162:====================================================>(119 + 2) / 121]                                                                                [Stage 163:==========================>                          (61 + 61) / 122][Stage 163:=============================>                       (68 + 54) / 122][Stage 163:====================================>                (83 + 39) / 122][Stage 163:===========================================>        (101 + 21) / 122][Stage 163:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.127031752 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  52 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381434383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=================================>                   (73 + 42) / 115][Stage 164:=========================================>           (89 + 26) / 115][Stage 164:================================================>    (106 + 9) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:===============================>                     (70 + 46) / 116][Stage 165:==================================>                  (75 + 41) / 116][Stage 165:============================================>        (98 + 18) / 116][Stage 165:==================================================>  (110 + 6) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.938074159 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  199 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.338057435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:======================================>              (84 + 31) / 115][Stage 166:============================================>        (96 + 19) / 115][Stage 166:==================================================>  (110 + 5) / 115][Stage 166:===================================================> (112 + 3) / 115]                                                                                [Stage 167:=======================================>             (86 + 30) / 116][Stage 167:===========================================>         (95 + 21) / 116][Stage 167:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.766993749 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  37 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406374103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:==============================>                      (65 + 48) / 113][Stage 168:=====================================>               (79 + 34) / 113][Stage 168:=============================================>       (97 + 16) / 113][Stage 168:===================================================> (110 + 3) / 113]                                                                                [Stage 169:============================>                        (61 + 53) / 114][Stage 169:===============================>                     (68 + 46) / 114][Stage 169:=========================================>           (90 + 24) / 114][Stage 169:=================================================>   (106 + 8) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.211549799 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  156 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.350783724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=======================================>             (86 + 29) / 115][Stage 170:=============================================>       (99 + 16) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:====================================================>(113 + 2) / 115]                                                                                [Stage 171:====================================>                (80 + 36) / 116][Stage 171:==========================================>          (93 + 23) / 116][Stage 171:==============================================>     (104 + 12) / 116][Stage 171:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.806015993 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  122 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375795685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (71 + 44) / 115][Stage 172:=======================================>             (85 + 30) / 115][Stage 172:===============================================>    (104 + 11) / 115][Stage 172:===================================================> (112 + 3) / 115]                                                                                [Stage 173:==================================>                  (75 + 41) / 116][Stage 173:=========================================>           (90 + 26) / 116][Stage 173:==============================================>     (104 + 12) / 116][Stage 173:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.830323007 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  230 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403937414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (58 + 55) / 113][Stage 174:=============================>                       (62 + 51) / 113][Stage 174:=================================>                   (71 + 42) / 113][Stage 174:========================================>            (87 + 26) / 113][Stage 174:===============================================>    (103 + 10) / 113][Stage 174:===================================================> (109 + 4) / 113]                                                                                [Stage 175:============================>                        (61 + 53) / 114][Stage 175:===================================>                 (76 + 38) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:==================================================>  (109 + 5) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.662454086 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.342247101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:======================================>              (83 + 32) / 115][Stage 176:==========================================>          (92 + 23) / 115][Stage 176:================================================>    (106 + 9) / 115]                                                                                [Stage 177:======================================>              (85 + 31) / 116][Stage 177:===========================================>         (96 + 20) / 116][Stage 177:==================================================>  (110 + 6) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.650980273 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.378873371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (71 + 44) / 115][Stage 178:====================================>                (80 + 35) / 115][Stage 178:============================================>        (96 + 19) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:================================>                    (71 + 45) / 116][Stage 179:====================================>                (79 + 37) / 116][Stage 179:==========================================>          (94 + 22) / 116][Stage 179:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.790001268 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  173 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402287387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (62 + 58) / 120][Stage 180:==================================>                  (77 + 43) / 120][Stage 180:===========================================>        (101 + 19) / 120][Stage 180:====================================================>(119 + 1) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:==============================>                      (69 + 52) / 121][Stage 181:===================================>                 (82 + 39) / 121][Stage 181:============================================>       (103 + 18) / 121][Stage 181:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.987461707 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  7 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391044298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (77 + 36) / 113][Stage 182:=======================================>             (85 + 28) / 113][Stage 182:=============================================>       (97 + 16) / 113][Stage 182:===================================================> (109 + 4) / 113][Stage 182:===================================================> (110 + 3) / 113]                                                                                [Stage 183:===================================>                 (77 + 37) / 114][Stage 183:=========================================>           (90 + 24) / 114][Stage 183:==============================================>     (102 + 12) / 114][Stage 183:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.223165437 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  210 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.35953198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=======================================>             (85 + 30) / 115][Stage 184:==========================================>          (93 + 22) / 115][Stage 184:=================================================>   (107 + 8) / 115][Stage 184:====================================================>(113 + 2) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:=====================================>               (83 + 33) / 116][Stage 185:==========================================>          (92 + 24) / 116][Stage 185:=============================================>      (102 + 14) / 116][Stage 185:==================================================>  (110 + 6) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.015690702 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  218 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.33923051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (84 + 31) / 115][Stage 186:=========================================>           (89 + 26) / 115][Stage 186:===============================================>    (104 + 11) / 115][Stage 186:===================================================> (111 + 4) / 115][Stage 186:====================================================>(113 + 2) / 115]                                                                                [Stage 187:====================================>                (80 + 36) / 116][Stage 187:=====================================>               (83 + 33) / 116][Stage 187:=========================================>           (91 + 25) / 116][Stage 187:============================================>        (98 + 18) / 116][Stage 187:================================================>    (107 + 9) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.192798169 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.363717349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===================================>                 (75 + 38) / 113][Stage 188:=========================================>           (88 + 25) / 113][Stage 188:=============================================>       (98 + 15) / 113][Stage 188:==============================================>     (102 + 11) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:==================================>                  (74 + 40) / 114][Stage 189:======================================>              (83 + 31) / 114][Stage 189:============================================>        (95 + 19) / 114][Stage 189:================================================>    (105 + 9) / 114][Stage 189:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.135701002 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382340233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (74 + 41) / 115][Stage 190:===========================================>         (95 + 20) / 115][Stage 190:==================================================>  (109 + 6) / 115][Stage 190:===================================================> (112 + 3) / 115]                                                                                [Stage 191:===================================>                 (78 + 38) / 116][Stage 191:===========================================>         (95 + 21) / 116][Stage 191:=================================================>   (108 + 8) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.827878123 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386234203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (58 + 55) / 113][Stage 192:===============================>                     (67 + 46) / 113][Stage 192:=======================================>             (84 + 29) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:============================>                        (61 + 53) / 114][Stage 193:================================>                    (70 + 44) / 114][Stage 193:=========================================>           (89 + 25) / 114][Stage 193:=================================================>   (106 + 8) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.215594862 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364283128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (76 + 37) / 113][Stage 194:=========================================>           (89 + 24) / 113][Stage 194:==============================================>     (100 + 13) / 113][Stage 194:=================================================>   (106 + 7) / 113][Stage 194:====================================================>(111 + 2) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:===================================>                 (77 + 37) / 114][Stage 195:=======================================>             (86 + 28) / 114][Stage 195:============================================>        (95 + 19) / 114][Stage 195:=================================================>   (106 + 8) / 114][Stage 195:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.237164487 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  35 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.488319649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:============================>                        (60 + 53) / 113][Stage 196:=================================>                   (72 + 41) / 113][Stage 196:===========================================>         (92 + 21) / 113][Stage 196:==================================================>  (108 + 5) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:===========================>                         (60 + 54) / 114][Stage 197:=================================>                   (72 + 42) / 114][Stage 197:=======================================>             (86 + 28) / 114][Stage 197:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.028493312 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  119 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.373780409 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==================================>                  (73 + 40) / 113][Stage 198:======================================>              (83 + 30) / 113][Stage 198:============================================>        (94 + 19) / 113][Stage 198:==================================================>  (107 + 6) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:==================================>                  (74 + 40) / 114][Stage 199:========================================>            (88 + 26) / 114][Stage 199:=============================================>       (98 + 16) / 114][Stage 199:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.773369705 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  191 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399842752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (62 + 58) / 120][Stage 200:=================================>                   (75 + 45) / 120][Stage 200:==========================================>          (96 + 24) / 120][Stage 200:=================================================>   (112 + 8) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:================================>                    (74 + 47) / 121][Stage 201:======================================>              (89 + 32) / 121][Stage 201:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.054482182 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 01:36:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:58708) dropped. RpcEnv already stopped.
17/05/25 01:36:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:58708) dropped. RpcEnv already stopped.

real	9m59.593s
user	11m49.396s
sys	0m28.748s
