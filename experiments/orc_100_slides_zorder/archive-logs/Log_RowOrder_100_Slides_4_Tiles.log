Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 04:55:59 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:56:14 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:56:14 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:56:15 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 04:56:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:56:27 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525045616-0639).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.386422791 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========>                                            (22 + 93) / 115][Stage 0:=========================>                             (54 + 61) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=========================>                             (54 + 62) / 116][Stage 1:===========================>                           (59 + 57) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.46511205 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.762924307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:======================>                                (46 + 69) / 115][Stage 2:============================>                          (60 + 55) / 115][Stage 2:==============================>                        (64 + 51) / 115][Stage 2:===================================>                   (75 + 40) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:=============================================>         (95 + 20) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:============================>                          (61 + 55) / 116][Stage 3:===============================>                       (67 + 49) / 116][Stage 3:==================================>                    (73 + 43) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:=========================================>             (88 + 28) / 116][Stage 3:=============================================>         (97 + 19) / 116][Stage 3:=================================================>    (106 + 10) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.200162902 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIn dex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609158994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=============================>                         (64 + 54) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:=====================================>                 (81 + 37) / 118][Stage 4:========================================>              (86 + 32) / 118][Stage 4:============================================>          (95 + 23) / 118][Stage 4:===============================================>      (104 + 14) / 118][Stage 4:======================================================>(116 + 2) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:===================================>                   (77 + 42) / 119][Stage 5:===========================================>           (94 + 25) / 119][Stage 5:==============================================>       (103 + 16) / 119][Stage 5:===================================================>   (111 + 8) / 119][Stage 5:=====================================================> (116 + 3) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.668719636 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.707165898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=========================>                             (55 + 66) / 121][Stage 6:===========================>                           (60 + 61) / 121][Stage 6:============================>                          (63 + 58) / 121][Stage 6:=================================>                     (74 + 47) / 121][Stage 6:========================================>              (88 + 33) / 121][Stage 6:==============================================>       (105 + 16) / 121][Stage 6:=====================================================> (118 + 3) / 121]                                                                                [Stage 7:===========================>                           (61 + 61) / 122][Stage 7:==============================>                        (68 + 54) / 122][Stage 7:====================================>                  (82 + 40) / 122][Stage 7:========================================>              (90 + 32) / 122][Stage 7:===============================================>      (108 + 14) / 122][Stage 7:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.293422602 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.62411334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:=========================>                             (57 + 64) / 121][Stage 8:============================>                          (62 + 59) / 121][Stage 8:==============================>                        (68 + 53) / 121][Stage 8:========================================>              (88 + 33) / 121][Stage 8:==========================================>            (94 + 27) / 121][Stage 8:==============================================>       (104 + 17) / 121][Stage 8:======================================================>(120 + 1) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:==============================>                        (67 + 55) / 122][Stage 9:=======================================>               (87 + 35) / 122][Stage 9:==============================================>       (105 + 17) / 122][Stage 9:==================================================>    (113 + 9) / 122]                                                                                Time elapsed: 4.089412165 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIn dex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.583066512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:================================>                     (68 + 45) / 113][Stage 10:======================================>               (81 + 32) / 113][Stage 10:==============================================>       (97 + 16) / 113][Stage 10:===================================================>  (107 + 6) / 113]                                                                                [Stage 11:============================>                         (60 + 54) / 114][Stage 11:==============================>                       (64 + 50) / 114][Stage 11:====================================>                 (77 + 37) / 114][Stage 11:===========================================>          (92 + 22) / 114][Stage 11:==================================================>   (106 + 8) / 114][Stage 11:=====================================================>(112 + 2) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.283908518 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIn dex = 32  OR  partitionIndex = 45  OR  partitionIndex = 46 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 45  OR  partitionIndex = 46 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467154427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:========================================>             (86 + 29) / 115][Stage 12:===========================================>          (92 + 23) / 115][Stage 12:==============================================>      (101 + 14) / 115][Stage 12:===================================================>  (109 + 6) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:========================================>             (86 + 30) / 116][Stage 13:=========================================>            (90 + 26) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 5.349517453 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionI ndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456144325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:=====================================>                (79 + 36) / 115][Stage 14:======================================>               (82 + 33) / 115][Stage 14:==============================================>       (98 + 17) / 115][Stage 14:================================================>    (105 + 10) / 115][Stage 14:==================================================>   (108 + 7) / 115][Stage 14:===================================================>  (110 + 5) / 115]                                                                                [Stage 15:=====================================>                (80 + 36) / 116][Stage 15:=========================================>            (89 + 27) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:===================================================>  (111 + 5) / 116][Stage 15:====================================================> (113 + 3) / 116][Stage 15:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.557258167 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIn dex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.662190435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:==========================>                           (59 + 61) / 120][Stage 16:===========================>                          (60 + 60) / 120][Stage 16:=================================>                    (75 + 45) / 120][Stage 16:========================================>             (91 + 29) / 120][Stage 16:=============================================>       (104 + 16) / 120][Stage 16:====================================================> (116 + 4) / 120][Stage 16:=====================================================>(119 + 1) / 120]                                                                                [Stage 17:============================>                         (63 + 58) / 121][Stage 17:==============================>                       (69 + 52) / 121][Stage 17:========================================>             (91 + 30) / 121][Stage 17:=================================================>    (112 + 9) / 121][Stage 17:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.961008847 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556931391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:===============================>                      (71 + 49) / 120][Stage 18:==========================================>           (95 + 25) / 120][Stage 18:===============================================>     (108 + 12) / 120][Stage 18:=====================================================>(118 + 2) / 120]                                                                                [Stage 19:===========================>                          (61 + 60) / 121][Stage 19:=============================>                        (66 + 55) / 121][Stage 19:==================================>                   (78 + 43) / 121][Stage 19:===========================================>          (98 + 23) / 121][Stage 19:================================================>    (111 + 10) / 121][Stage 19:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.710132975 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483134855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:====================================>                 (76 + 37) / 113][Stage 20:===========================================>          (90 + 23) / 113][Stage 20:==============================================>       (98 + 15) / 113][Stage 20:====================================================> (109 + 4) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:====================================>                 (76 + 38) / 114][Stage 21:=======================================>              (84 + 30) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:===============================================>     (102 + 12) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.300834125 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIn dex = 41  OR  partitionIndex = 54  OR  partitionIndex = 55 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 54  OR  partitionIndex = 55 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525932286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:==========================>                           (60 + 61) / 121][Stage 22:=============================>                        (67 + 54) / 121][Stage 22:=====================================>                (83 + 38) / 121][Stage 22:=============================================>       (105 + 16) / 121]                                                                                [Stage 23:===========================>                          (61 + 61) / 122][Stage 23:=============================>                        (66 + 56) / 122][Stage 23:==================================>                   (79 + 43) / 122][Stage 23:============================================>        (103 + 19) / 122][Stage 23:===================================================>  (116 + 6) / 122][Stage 23:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.693693705 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIn dex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482667696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:===============================>                      (68 + 47) / 115][Stage 24:=====================================>                (79 + 36) / 115][Stage 24:============================================>         (95 + 20) / 115][Stage 24:===============================================>     (103 + 12) / 115][Stage 24:==================================================>   (107 + 8) / 115][Stage 24:=====================================================>(113 + 2) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:===================================>                  (76 + 40) / 116][Stage 25:========================================>             (88 + 28) / 116][Stage 25:==============================================>      (101 + 15) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 5.527696234 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionI ndex = 121  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135  OR  partitionIndex = 136 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458574771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:====================================>                 (79 + 39) / 118][Stage 26:========================================>             (89 + 29) / 118][Stage 26:=============================================>       (102 + 16) / 118][Stage 26:=================================================>    (109 + 9) / 118][Stage 26:====================================================> (115 + 3) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:===================================>                  (78 + 41) / 119][Stage 27:========================================>             (90 + 29) / 119][Stage 27:==============================================>      (104 + 15) / 119][Stage 27:===================================================>  (113 + 6) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.159978252 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511205325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:===========================>                          (62 + 59) / 121][Stage 28:=================================>                    (76 + 45) / 121][Stage 28:===========================================>         (100 + 21) / 121][Stage 28:===============================================>     (109 + 12) / 121][Stage 28:===================================================>  (115 + 6) / 121][Stage 28:=====================================================>(120 + 1) / 121]                                                                                [Stage 29:===========================>                          (61 + 61) / 122][Stage 29:==============================>                       (70 + 52) / 122][Stage 29:=======================================>              (90 + 32) / 122][Stage 29:==============================================>      (106 + 16) / 122][Stage 29:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.969779074 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506640005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:==========================>                           (60 + 61) / 121][Stage 30:=============================>                        (66 + 55) / 121][Stage 30:=====================================>                (85 + 36) / 121][Stage 30:==================================================>   (114 + 7) / 121][Stage 30:=====================================================>(119 + 2) / 121]                                                                                [Stage 31:===========================>                          (61 + 61) / 122][Stage 31:===========================>                          (62 + 60) / 122][Stage 31:====================================>                 (82 + 40) / 122][Stage 31:===============================================>     (109 + 13) / 122][Stage 31:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.295275753 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542552635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:==================================>                   (72 + 41) / 113][Stage 32:=======================================>              (83 + 30) / 113][Stage 32:=============================================>        (95 + 18) / 113][Stage 32:==================================================>   (105 + 8) / 113][Stage 32:=====================================================>(111 + 2) / 113]                                                                                [Stage 33:==================================>                   (73 + 41) / 114][Stage 33:========================================>             (85 + 29) / 114][Stage 33:==============================================>       (98 + 16) / 114][Stage 33:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.024126712 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526840632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:=============================>                        (66 + 54) / 120][Stage 34:====================================>                 (81 + 39) / 120][Stage 34:============================================>        (100 + 20) / 120][Stage 34:=====================================================>(118 + 2) / 120]                                                                                [Stage 35:===========================>                          (62 + 59) / 121][Stage 35:=================================>                    (74 + 47) / 121][Stage 35:=============================================>       (103 + 18) / 121][Stage 35:===================================================>  (116 + 5) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.858453864 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionI ndex = 164  OR  partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547197697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:============================>                         (64 + 56) / 120][Stage 36:====================================>                 (81 + 39) / 120][Stage 36:============================================>        (101 + 19) / 120][Stage 36:=====================================================>(118 + 2) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:===============================>                      (70 + 51) / 121][Stage 37:==========================================>           (96 + 25) / 121][Stage 37:===================================================>  (115 + 6) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.37609585 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444180452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:==================================>                   (73 + 40) / 113][Stage 38:=======================================>              (82 + 31) / 113][Stage 38:=============================================>        (96 + 17) / 113][Stage 38:=================================================>    (104 + 9) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===================================>                  (75 + 39) / 114][Stage 39:========================================>             (85 + 29) / 114][Stage 39:=============================================>        (97 + 17) / 114][Stage 39:===============================================>     (103 + 11) / 114][Stage 39:====================================================> (111 + 3) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.530960454 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 13  OR  partitionIndex = 27  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 27  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484812903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:==========================>                           (60 + 61) / 121][Stage 40:=============================>                        (66 + 55) / 121][Stage 40:=====================================>                (85 + 36) / 121][Stage 40:=============================================>       (104 + 17) / 121][Stage 40:====================================================> (118 + 3) / 121]                                                                                [Stage 41:===========================>                          (62 + 60) / 122][Stage 41:==================================>                   (78 + 44) / 122][Stage 41:==========================================>           (97 + 25) / 122][Stage 41:================================================>    (112 + 10) / 122][Stage 41:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.528648259 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIn dex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538503638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:==============================>                       (68 + 52) / 120][Stage 42:=======================================>              (87 + 33) / 120][Stage 42:=============================================>       (104 + 16) / 120][Stage 42:=====================================================>(119 + 1) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:===============================>                      (71 + 50) / 121][Stage 43:====================================>                 (82 + 39) / 121][Stage 43:===============================================>     (108 + 13) / 121][Stage 43:====================================================> (118 + 3) / 121][Stage 43:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.660035439 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIn dex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437514372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:===========================>                          (58 + 55) / 113][Stage 44:===============================>                      (65 + 48) / 113][Stage 44:=======================================>              (83 + 30) / 113][Stage 44:============================================>         (94 + 19) / 113][Stage 44:===================================================>  (108 + 5) / 113]                                                                                [Stage 45:=============================>                        (62 + 52) / 114][Stage 45:===================================>                  (74 + 40) / 114][Stage 45:===========================================>          (92 + 22) / 114][Stage 45:=================================================>    (105 + 9) / 114][Stage 45:====================================================> (110 + 4) / 114][Stage 45:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.667151546 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIn dex = 100  OR  partitionIndex = 113  OR  partitionIndex = 114 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 113  OR  partitionIndex = 114 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376002217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:=======================================>              (85 + 30) / 115][Stage 46:=========================================>            (89 + 26) / 115][Stage 46:==============================================>      (101 + 14) / 115][Stage 46:====================================================> (111 + 4) / 115]                                                                                [Stage 47:=======================================>              (85 + 31) / 116][Stage 47:==============================================>      (102 + 14) / 116][Stage 47:==================================================>   (108 + 8) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.988229736 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionI ndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494405489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:==========================>                           (60 + 61) / 121][Stage 48:=============================>                        (67 + 54) / 121][Stage 48:======================================>               (86 + 35) / 121][Stage 48:============================================>        (102 + 19) / 121][Stage 48:====================================================> (117 + 4) / 121][Stage 48:=====================================================>(120 + 1) / 121]                                                                                [Stage 49:==========================>                           (60 + 62) / 122][Stage 49:============================>                         (64 + 58) / 122][Stage 49:==================================>                   (77 + 45) / 122][Stage 49:===========================================>         (101 + 21) / 122][Stage 49:====================================================> (118 + 4) / 122][Stage 49:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.757625021 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45937648 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:===============================>                      (70 + 50) / 120][Stage 50:=====================================>                (84 + 36) / 120][Stage 50:============================================>         (98 + 22) / 120][Stage 50:================================================>    (110 + 10) / 120][Stage 50:====================================================> (117 + 3) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:=============================>                        (67 + 54) / 121][Stage 51:=======================================>              (88 + 33) / 121][Stage 51:=============================================>       (103 + 18) / 121][Stage 51:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.869584797 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41591981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:==================================>                   (74 + 41) / 115][Stage 52:==========================================>           (91 + 24) / 115][Stage 52:===============================================>     (104 + 11) / 115][Stage 52:===================================================>  (110 + 5) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:====================================>                 (78 + 38) / 116][Stage 53:===========================================>          (93 + 23) / 116][Stage 53:===================================================>  (110 + 6) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.262806922 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 101  OR  partitionIndex = 115  OR  partitionIndex = 116 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 101  OR  partitionIndex = 115  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442681218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:=============================>                        (65 + 56) / 121][Stage 54:===================================>                  (79 + 42) / 121][Stage 54:============================================>        (101 + 20) / 121][Stage 54:===================================================>  (115 + 6) / 121]                                                                                [Stage 55:===========================>                          (63 + 59) / 122][Stage 55:================================>                     (73 + 49) / 122][Stage 55:========================================>             (92 + 30) / 122][Stage 55:====================================================> (118 + 4) / 122][Stage 55:=====================================================>(120 + 2) / 122][Stage 55:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.717554989 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionI ndex = 216  OR  partitionIndex = 229  OR  partitionIndex = 230 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 229  OR  partitionIndex = 230 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405052508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:=================================>                    (73 + 45) / 118][Stage 56:====================================>                 (79 + 39) / 118][Stage 56:==========================================>           (93 + 25) / 118][Stage 56:==================================================>   (110 + 8) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:====================================>                 (80 + 39) / 119][Stage 57:==========================================>           (94 + 25) / 119][Stage 57:================================================>    (108 + 11) / 119][Stage 57:====================================================> (116 + 3) / 119][Stage 57:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.519418062 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIn dex = 93  OR  partitionIndex = 106  OR  partitionIndex = 107 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 106  OR  partitionIndex = 107 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44733156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:================================>                     (70 + 45) / 115][Stage 58:======================================>               (82 + 33) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:===================================================>  (109 + 6) / 115]                                                                                [Stage 59:===================================>                  (76 + 40) / 116][Stage 59:==========================================>           (92 + 24) / 116][Stage 59:===============================================>     (103 + 13) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.041590178 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIn dex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379990143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:=========================================>            (89 + 26) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:=======================================>              (85 + 31) / 116][Stage 61:============================================>         (95 + 21) / 116][Stage 61:===================================================>  (110 + 6) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.785964473 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIn dex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470669707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:================================>                     (69 + 44) / 113][Stage 62:========================================>             (85 + 28) / 113][Stage 62:==================================================>   (105 + 8) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:=============================>                        (62 + 52) / 114][Stage 63:===================================>                  (74 + 40) / 114][Stage 63:===========================================>          (91 + 23) / 114][Stage 63:===============================================>     (102 + 12) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.519183496 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIn dex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36742562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:=====================================>                (80 + 35) / 115][Stage 64:=========================================>            (89 + 26) / 115][Stage 64:==============================================>       (98 + 17) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:====================================================> (112 + 3) / 115]                                                                                [Stage 65:========================================>             (86 + 30) / 116][Stage 65:============================================>         (95 + 21) / 116][Stage 65:===================================================>  (111 + 5) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.250123508 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIn dex = 40  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398442829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:==================================>                   (75 + 43) / 118][Stage 66:====================================>                 (80 + 38) / 118][Stage 66:=========================================>            (90 + 28) / 118][Stage 66:==============================================>      (103 + 15) / 118][Stage 66:==================================================>   (111 + 7) / 118][Stage 66:=====================================================>(117 + 1) / 118]                                                                                [Stage 67:=================================>                    (73 + 46) / 119][Stage 67:==================================>                   (75 + 44) / 119][Stage 67:==================================>                   (77 + 42) / 119][Stage 67:=======================================>              (86 + 33) / 119][Stage 67:==============================================>      (105 + 14) / 119][Stage 67:==================================================>   (112 + 7) / 119][Stage 67:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.125621273 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467847529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:=============================>                        (65 + 56) / 121][Stage 68:=================================>                    (74 + 47) / 121][Stage 68:=============================================>       (105 + 16) / 121][Stage 68:====================================================> (117 + 4) / 121]                                                                                [Stage 69:===========================>                          (61 + 61) / 122][Stage 69:==============================>                       (68 + 54) / 122][Stage 69:=====================================>                (85 + 37) / 122][Stage 69:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.193237722 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 88  OR  partitionIndex = 89 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424230958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:================================>                     (70 + 45) / 115][Stage 70:=======================================>              (84 + 31) / 115][Stage 70:===============================================>     (104 + 11) / 115]                                                                                [Stage 71:=================================>                    (71 + 45) / 116][Stage 71:========================================>             (87 + 29) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.640575873 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419967257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:============================>                         (60 + 53) / 113][Stage 72:================================>                     (69 + 44) / 113][Stage 72:==========================================>           (89 + 24) / 113][Stage 72:==================================================>   (105 + 8) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:============================>                         (60 + 54) / 114][Stage 73:=============================>                        (63 + 51) / 114][Stage 73:========================================>             (85 + 29) / 114][Stage 73:==============================================>      (100 + 14) / 114]                                                                                Time elapsed: 3.163938823 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIn dex = 69  OR  partitionIndex = 83  OR  partitionIndex = 84 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 83  OR  partitionIndex = 84 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370321683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:=================================>                    (71 + 42) / 113][Stage 74:======================================>               (81 + 32) / 113][Stage 74:=============================================>        (95 + 18) / 113][Stage 74:================================================>    (103 + 10) / 113][Stage 74:=====================================================>(111 + 2) / 113]                                                                                [Stage 75:===================================>                  (74 + 40) / 114][Stage 75:=======================================>              (84 + 30) / 114][Stage 75:============================================>         (94 + 20) / 114][Stage 75:====================================================> (110 + 4) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.901981253 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365266303 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=======================================>              (85 + 30) / 115][Stage 76:==============================================>       (98 + 17) / 115][Stage 76:==================================================>   (108 + 7) / 115][Stage 76:===================================================>  (110 + 5) / 115][Stage 76:=====================================================>(113 + 2) / 115]                                                                                [Stage 77:=======================================>              (85 + 31) / 116][Stage 77:==========================================>           (91 + 25) / 116][Stage 77:===============================================>     (103 + 13) / 116][Stage 77:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.961186214 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 201 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551244175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:===========================>                          (58 + 55) / 113][Stage 78:=============================>                        (62 + 51) / 113][Stage 78:=======================================>              (82 + 31) / 113][Stage 78:===============================================>      (99 + 14) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:==============================>                       (64 + 50) / 114][Stage 79:======================================>               (81 + 33) / 114][Stage 79:=============================================>        (95 + 19) / 114][Stage 79:===============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.283902929 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionI ndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418045158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:===========================>                          (62 + 58) / 120][Stage 80:=================================>                    (74 + 46) / 120][Stage 80:===========================================>          (96 + 24) / 120][Stage 80:==================================================>   (113 + 7) / 120][Stage 80:=====================================================>(119 + 1) / 120]                                                                                [Stage 81:===========================>                          (61 + 60) / 121][Stage 81:=============================>                        (67 + 54) / 121][Stage 81:===================================>                  (80 + 41) / 121][Stage 81:==========================================>           (96 + 25) / 121][Stage 81:===============================================>     (109 + 12) / 121]                                                                                Time elapsed: 3.467981286 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63  OR  partitionIndex = 77  OR  partitionIndex = 78 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 77  OR  partitionIndex = 78 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363172284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:======================================>               (81 + 34) / 115][Stage 82:=======================================>              (84 + 31) / 115][Stage 82:==============================================>       (99 + 16) / 115][Stage 82:================================================>    (105 + 10) / 115][Stage 82:====================================================> (112 + 3) / 115]                                                                                [Stage 83:=======================================>              (84 + 32) / 116][Stage 83:============================================>         (96 + 20) / 116][Stage 83:==============================================>      (102 + 14) / 116][Stage 83:===================================================>  (111 + 5) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.307407166 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351832901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:======================================>               (81 + 34) / 115][Stage 84:=========================================>            (88 + 27) / 115][Stage 84:===============================================>     (104 + 11) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:======================================>               (83 + 33) / 116][Stage 85:============================================>         (96 + 20) / 116][Stage 85:================================================>    (106 + 10) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.60954257 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368587006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:========================================>             (84 + 29) / 113][Stage 86:============================================>         (94 + 19) / 113][Stage 86:=================================================>    (104 + 9) / 113][Stage 86:====================================================> (109 + 4) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:=======================================>              (84 + 30) / 114][Stage 87:===========================================>          (91 + 23) / 114][Stage 87:==================================================>   (106 + 8) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.309817314 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 107  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41541412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:=============================>                        (65 + 55) / 120][Stage 88:====================================>                 (82 + 38) / 120][Stage 88:==============================================>      (106 + 14) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:===============================>                      (71 + 50) / 121][Stage 89:======================================>               (86 + 35) / 121][Stage 89:================================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.131882507 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIn dex = 31  OR  partitionIndex = 45  OR  partitionIndex = 46 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 45  OR  partitionIndex = 46 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376825989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:=================================>                    (74 + 44) / 118][Stage 90:====================================>                 (80 + 38) / 118][Stage 90:===========================================>          (94 + 24) / 118][Stage 90:================================================>    (107 + 11) / 118][Stage 90:=====================================================>(117 + 1) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:==================================>                   (77 + 42) / 119][Stage 91:======================================>               (84 + 35) / 119][Stage 91:========================================>             (90 + 29) / 119][Stage 91:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.428471719 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionI ndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388225094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:==================================>                   (76 + 42) / 118][Stage 92:========================================>             (88 + 30) / 118][Stage 92:===============================================>     (106 + 12) / 118][Stage 92:=====================================================>(117 + 1) / 118]                                                                                [Stage 93:=================================>                    (73 + 46) / 119][Stage 93:===================================>                  (78 + 41) / 119][Stage 93:=======================================>              (88 + 31) / 119][Stage 93:=============================================>       (102 + 17) / 119][Stage 93:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.28053696 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362512106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:=================================>                    (71 + 42) / 113][Stage 94:========================================>             (84 + 29) / 113][Stage 94:===========================================>          (92 + 21) / 113][Stage 94:====================================================> (109 + 4) / 113][Stage 94:====================================================> (110 + 3) / 113]                                                                                [Stage 95:=====================================>                (80 + 34) / 114][Stage 95:==========================================>           (90 + 24) / 114][Stage 95:==============================================>      (100 + 14) / 114][Stage 95:===================================================>  (108 + 6) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.134041621 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394178876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:===========================>                          (58 + 55) / 113][Stage 96:================================>                     (67 + 46) / 113][Stage 96:============================================>         (94 + 19) / 113][Stage 96:====================================================> (110 + 3) / 113]                                                                                [Stage 97:=============================>                        (62 + 52) / 114][Stage 97:====================================>                 (78 + 36) / 114][Stage 97:=============================================>        (97 + 17) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.18507796 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 141 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 141 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415450123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:===========================>                          (62 + 58) / 120][Stage 98:===================================>                  (78 + 42) / 120][Stage 98:=============================================>       (104 + 16) / 120][Stage 98:====================================================> (117 + 3) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:=============================>                        (67 + 54) / 121][Stage 99:===================================>                  (80 + 41) / 121][Stage 99:============================================>        (102 + 19) / 121][Stage 99:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.326715527 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionI ndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374074652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:================================>                    (72 + 46) / 118][Stage 100:====================================>                (81 + 37) / 118][Stage 100:============================================>       (101 + 17) / 118][Stage 100:===================================================> (114 + 4) / 118]                                                                                [Stage 101:=================================>                   (76 + 43) / 119][Stage 101:======================================>              (86 + 33) / 119][Stage 101:=============================================>      (103 + 16) / 119][Stage 101:==================================================>  (113 + 6) / 119][Stage 101:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.18656073 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421467726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:===========================>                         (58 + 55) / 113][Stage 102:==============================>                      (64 + 49) / 113][Stage 102:==================================>                  (74 + 39) / 113][Stage 102:============================================>        (95 + 18) / 113][Stage 102:==================================================>  (107 + 6) / 113]                                                                                [Stage 103:=============================>                       (63 + 51) / 114][Stage 103:==================================>                  (74 + 40) / 114][Stage 103:========================================>            (87 + 27) / 114][Stage 103:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.179905752 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionI ndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397238039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:=============================>                       (65 + 50) / 115][Stage 104:=================================>                   (73 + 42) / 115][Stage 104:=======================================>             (85 + 30) / 115][Stage 104:=============================================>       (99 + 16) / 115][Stage 104:===================================================> (111 + 4) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:====================================>                (80 + 36) / 116][Stage 105:===========================================>         (96 + 20) / 116][Stage 105:===============================================>    (106 + 10) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.203598244 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionI ndex = 126  OR  partitionIndex = 139  OR  partitionIndex = 140 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385089376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:===============================>                     (68 + 47) / 115][Stage 106:====================================>                (80 + 35) / 115][Stage 106:===========================================>         (94 + 21) / 115][Stage 106:=================================================>   (108 + 7) / 115]                                                                                [Stage 107:=================================>                   (74 + 42) / 116][Stage 107:=========================================>           (91 + 25) / 116][Stage 107:==============================================>     (103 + 13) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.878065629 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionInd ex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520823898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:===========================>                         (59 + 54) / 113][Stage 108:==============================>                      (66 + 47) / 113][Stage 108:=====================================>               (79 + 34) / 113][Stage 108:=============================================>       (98 + 15) / 113][Stage 108:====================================================>(112 + 1) / 113]                                                                                [Stage 109:===========================>                         (59 + 55) / 114][Stage 109:============================>                        (61 + 53) / 114][Stage 109:======================================>              (83 + 31) / 114][Stage 109:==============================================>     (101 + 13) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.565861122 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372247434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:=================================>                   (74 + 44) / 118][Stage 110:=====================================>               (83 + 35) / 118][Stage 110:========================================>            (90 + 28) / 118][Stage 110:============================================>       (102 + 16) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:================================>                    (74 + 45) / 119][Stage 111:=================================>                   (76 + 43) / 119][Stage 111:====================================>                (81 + 38) / 119][Stage 111:==========================================>          (96 + 23) / 119][Stage 111:=============================================>      (104 + 15) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.857518337 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionI ndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384875417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:===============================>                     (68 + 45) / 113][Stage 112:==========================================>          (90 + 23) / 113][Stage 112:==============================================>     (102 + 11) / 113]                                                                                [Stage 113:===========================>                         (59 + 55) / 114][Stage 113:=================================>                   (71 + 43) / 114][Stage 113:=======================================>             (84 + 30) / 114][Stage 113:==============================================>     (102 + 12) / 114][Stage 113:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.22868765 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionI ndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336952784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:====================================>                (80 + 35) / 115][Stage 114:=====================================>               (82 + 33) / 115][Stage 114:=========================================>           (90 + 25) / 115][Stage 114:==============================================>     (103 + 12) / 115][Stage 114:==================================================>  (110 + 5) / 115]                                                                                [Stage 115:=======================================>             (86 + 30) / 116][Stage 115:==========================================>          (92 + 24) / 116][Stage 115:=================================================>   (109 + 7) / 116][Stage 115:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.024387691 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionInd ex = 10  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400369284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:=============================>                       (67 + 53) / 120][Stage 116:=================================>                   (76 + 44) / 120][Stage 116:===========================================>         (98 + 22) / 120][Stage 116:==================================================>  (114 + 6) / 120]                                                                                [Stage 117:===========================>                         (63 + 58) / 121][Stage 117:================================>                    (74 + 47) / 121][Stage 117:======================================>              (87 + 34) / 121][Stage 117:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.357012398 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionI ndex = 194  OR  partitionIndex = 207  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363682773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:=================================>                   (75 + 43) / 118][Stage 118:====================================>                (82 + 36) / 118][Stage 118:========================================>            (90 + 28) / 118][Stage 118:=============================================>      (104 + 14) / 118][Stage 118:===================================================> (115 + 3) / 118]                                                                                [Stage 119:================================>                    (74 + 45) / 119][Stage 119:====================================>                (82 + 37) / 119][Stage 119:=======================================>             (89 + 30) / 119][Stage 119:=============================================>      (103 + 16) / 119][Stage 119:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.47723014 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionI ndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365652154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:================================>                    (72 + 46) / 118][Stage 120:===================================>                 (80 + 38) / 118][Stage 120:========================================>            (90 + 28) / 118][Stage 120:================================================>    (109 + 9) / 118][Stage 120:====================================================>(117 + 1) / 118]                                                                                [Stage 121:================================>                    (74 + 45) / 119][Stage 121:====================================>                (82 + 37) / 119][Stage 121:==========================================>          (96 + 23) / 119][Stage 121:===============================================>    (109 + 10) / 119][Stage 121:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.253891175 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIn dex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431191095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:===================================>                 (76 + 37) / 113][Stage 122:========================================>            (87 + 26) / 113][Stage 122:==============================================>      (99 + 14) / 113][Stage 122:==============================================>     (102 + 11) / 113]                                                                                [Stage 123:=======================================>             (84 + 30) / 114][Stage 123:==========================================>          (92 + 22) / 114][Stage 123:=============================================>      (100 + 14) / 114][Stage 123:==================================================>  (108 + 6) / 114][Stage 123:====================================================>(112 + 2) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.143721679 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357837513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:==================================>                  (74 + 39) / 113][Stage 124:=====================================>               (81 + 32) / 113][Stage 124:===========================================>         (92 + 21) / 113][Stage 124:==============================================>     (102 + 11) / 113][Stage 124:===================================================> (109 + 4) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:=================================>                   (72 + 42) / 114][Stage 125:=======================================>             (86 + 28) / 114][Stage 125:==========================================>          (92 + 22) / 114][Stage 125:=============================================>      (100 + 14) / 114][Stage 125:===================================================> (111 + 3) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.374281043 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionI ndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37882136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:=================================>                   (72 + 43) / 115][Stage 126:======================================>              (84 + 31) / 115][Stage 126:=================================================>   (107 + 8) / 115][Stage 126:==================================================>  (110 + 5) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:=================================>                   (74 + 42) / 116][Stage 127:==========================================>          (93 + 23) / 116][Stage 127:===============================================>    (105 + 11) / 116][Stage 127:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.195880151 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionI ndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407825629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:==============================>                      (69 + 51) / 120][Stage 128:===================================>                 (81 + 39) / 120][Stage 128:===========================================>         (99 + 21) / 120][Stage 128:===============================================>    (110 + 10) / 120][Stage 128:====================================================>(119 + 1) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:==============================>                      (69 + 52) / 121][Stage 129:=====================================>               (86 + 35) / 121][Stage 129:============================================>       (103 + 18) / 121][Stage 129:=================================================>   (112 + 9) / 121][Stage 129:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.599422023 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402369288 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:==========================>                          (61 + 59) / 120][Stage 130:===============================>                     (71 + 49) / 120][Stage 130:===========================================>         (99 + 21) / 120][Stage 130:====================================================>(119 + 1) / 120]                                                                                [Stage 131:==========================>                          (61 + 60) / 121][Stage 131:============================>                        (64 + 57) / 121][Stage 131:==================================>                  (79 + 42) / 121][Stage 131:============================================>       (104 + 17) / 121][Stage 131:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.286991709 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390522525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:===========================>                         (58 + 55) / 113][Stage 132:=============================>                       (63 + 50) / 113][Stage 132:======================================>              (82 + 31) / 113][Stage 132:================================================>    (104 + 9) / 113][Stage 132:===================================================> (110 + 3) / 113]                                                                                [Stage 133:===========================>                         (59 + 55) / 114][Stage 133:=============================>                       (63 + 51) / 114][Stage 133:====================================>                (78 + 36) / 114][Stage 133:===============================================>    (104 + 10) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.407747411 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIn dex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392375886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==========================>                          (61 + 59) / 120][Stage 134:===============================>                     (72 + 48) / 120][Stage 134:=====================================>               (85 + 35) / 120][Stage 134:==============================================>     (108 + 12) / 120][Stage 134:====================================================>(119 + 1) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (65 + 56) / 121][Stage 135:====================================>                (83 + 38) / 121][Stage 135:============================================>       (103 + 18) / 121][Stage 135:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.272654513 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331975287 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:======================================>              (84 + 31) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:=================================================>   (108 + 7) / 115]                                                                                [Stage 137:=====================================>               (83 + 33) / 116][Stage 137:==========================================>          (92 + 24) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.950268593 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 181  OR  partitionIndex = 195  OR  partitionIndex = 196 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 195  OR  partitionIndex = 196 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40280551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:==========================>                          (60 + 60) / 120][Stage 138:===============================>                     (71 + 49) / 120][Stage 138:======================================>              (88 + 32) / 120][Stage 138:==============================================>     (108 + 12) / 120]                                                                                [Stage 139:==========================>                          (61 + 60) / 121][Stage 139:==============================>                      (70 + 51) / 121][Stage 139:=====================================>               (86 + 35) / 121][Stage 139:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.086118801 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIn dex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349723034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:====================================>                (77 + 36) / 113][Stage 140:========================================>            (87 + 26) / 113][Stage 140:==============================================>     (102 + 11) / 113][Stage 140:===================================================> (110 + 3) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:====================================>                (78 + 36) / 114][Stage 141:========================================>            (87 + 27) / 114][Stage 141:============================================>        (95 + 19) / 114][Stage 141:=================================================>   (107 + 7) / 114][Stage 141:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.751937302 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356270696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:==================================>                  (73 + 40) / 113][Stage 142:=======================================>             (84 + 29) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:=================================================>   (106 + 7) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:====================================>                (78 + 36) / 114][Stage 143:=======================================>             (85 + 29) / 114][Stage 143:============================================>        (95 + 19) / 114][Stage 143:==================================================>  (109 + 5) / 114][Stage 143:===================================================> (111 + 3) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.324483375 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionI ndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383985746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:==================================>                  (76 + 42) / 118][Stage 144:========================================>            (90 + 28) / 118][Stage 144:=============================================>      (103 + 15) / 118][Stage 144:==================================================>  (113 + 5) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:==================================>                  (78 + 41) / 119][Stage 145:=======================================>             (89 + 30) / 119][Stage 145:=============================================>      (103 + 16) / 119][Stage 145:===================================================> (115 + 4) / 119][Stage 145:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.612809407 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionI ndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378467585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 109)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120
-------------------------------------------------------------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369484342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:=============================>                       (63 + 50) / 113][Stage 146:=====================================>               (80 + 33) / 113][Stage 146:===============================================>    (103 + 10) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:==============================>                      (65 + 49) / 114][Stage 147:======================================>              (83 + 31) / 114][Stage 147:=============================================>      (100 + 14) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.503993218 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIn dex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42229762 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:=====================================>               (81 + 34) / 115][Stage 148:=======================================>             (86 + 29) / 115][Stage 148:===============================================>    (104 + 11) / 115][Stage 148:==================================================>  (110 + 5) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:==========================================>          (94 + 22) / 116][Stage 149:===============================================>    (105 + 11) / 116][Stage 149:=====================================================(116 + 0) / 116]                                                                                Time elapsed: 3.593036514 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366361842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:================================>                    (73 + 45) / 118][Stage 150:===================================>                 (80 + 38) / 118][Stage 150:========================================>            (90 + 28) / 118][Stage 150:===============================================>    (107 + 11) / 118]                                                                                [Stage 151:================================>                    (74 + 45) / 119][Stage 151:====================================>                (83 + 36) / 119][Stage 151:============================================>       (101 + 18) / 119][Stage 151:=================================================>   (112 + 7) / 119][Stage 151:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.273379552 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIn dex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363957242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:=================================>                   (74 + 44) / 118][Stage 152:=====================================>               (84 + 34) / 118][Stage 152:=============================================>      (104 + 14) / 118][Stage 152:===================================================> (114 + 4) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:==================================>                  (77 + 42) / 119][Stage 153:=======================================>             (89 + 30) / 119][Stage 153:===============================================>    (108 + 11) / 119][Stage 153:===================================================> (115 + 4) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.49205259 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionI ndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332489591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:=======================================>             (85 + 30) / 115][Stage 154:===========================================>         (94 + 21) / 115][Stage 154:================================================>    (106 + 9) / 115][Stage 154:===================================================> (112 + 3) / 115]                                                                                [Stage 155:=======================================>             (86 + 30) / 116][Stage 155:==========================================>          (93 + 23) / 116][Stage 155:================================================>    (107 + 9) / 116][Stage 155:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.97467316 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390818531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:==============================>                      (68 + 52) / 120][Stage 156:========================================>            (91 + 29) / 120][Stage 156:=================================================>   (113 + 7) / 120][Stage 156:====================================================>(119 + 1) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:============================>                        (66 + 55) / 121][Stage 157:===================================>                 (81 + 40) / 121][Stage 157:=============================================>      (106 + 15) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.311507238 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionI ndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348645578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=====================================>               (80 + 33) / 113][Stage 158:=========================================>           (89 + 24) / 113][Stage 158:===========================================>         (93 + 20) / 113][Stage 158:==================================================>  (108 + 5) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:======================================>              (82 + 32) / 114][Stage 159:==========================================>          (91 + 23) / 114][Stage 159:==============================================>     (101 + 13) / 114][Stage 159:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.058737436 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375763947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:====================================>                (79 + 36) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:==============================================>     (102 + 13) / 115][Stage 160:==================================================>  (110 + 5) / 115]                                                                                [Stage 161:================================>                    (72 + 44) / 116][Stage 161:========================================>            (89 + 27) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:=================================================>   (108 + 8) / 116][Stage 161:====================================================>(114 + 2) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.26214353 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionI ndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35364528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:===================================>                 (76 + 37) / 113][Stage 162:========================================>            (87 + 26) / 113][Stage 162:==============================================>     (102 + 11) / 113][Stage 162:==================================================>  (107 + 6) / 113]                                                                                [Stage 163:=====================================>               (80 + 34) / 114][Stage 163:=========================================>           (90 + 24) / 114][Stage 163:=============================================>      (100 + 14) / 114][Stage 163:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.876623563 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357403782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:================================>                    (70 + 43) / 113][Stage 164:======================================>              (82 + 31) / 113][Stage 164:============================================>        (94 + 19) / 113][Stage 164:==================================================>  (108 + 5) / 113][Stage 164:====================================================>(111 + 2) / 113]                                                                                [Stage 165:==================================>                  (75 + 39) / 114][Stage 165:=======================================>             (86 + 28) / 114][Stage 165:=============================================>       (97 + 17) / 114][Stage 165:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.03263092 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399349457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:=============================>                       (62 + 51) / 113][Stage 166:=====================================>               (80 + 33) / 113][Stage 166:============================================>        (94 + 19) / 113][Stage 166:===============================================>    (103 + 10) / 113][Stage 166:===================================================> (110 + 3) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===========================>                         (60 + 54) / 114][Stage 167:==============================>                      (66 + 48) / 114][Stage 167:===================================>                 (77 + 37) / 114][Stage 167:==========================================>          (91 + 23) / 114][Stage 167:=================================================>   (106 + 8) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.795605967 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359357184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:================================>                    (72 + 46) / 118][Stage 168:===================================>                 (79 + 39) / 118][Stage 168:=========================================>           (92 + 26) / 118][Stage 168:==============================================>     (106 + 12) / 118][Stage 168:====================================================>(116 + 2) / 118]                                                                                [Stage 169:================================>                    (73 + 46) / 119][Stage 169:=================================>                   (76 + 43) / 119][Stage 169:====================================>                (83 + 36) / 119][Stage 169:========================================>            (90 + 29) / 119][Stage 169:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.330445851 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionI ndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352318862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:=====================================>               (79 + 34) / 113][Stage 170:==========================================>          (90 + 23) / 113][Stage 170:==============================================>     (101 + 12) / 113][Stage 170:===================================================> (109 + 4) / 113][Stage 170:====================================================>(111 + 2) / 113]                                                                                [Stage 171:=====================================>               (81 + 33) / 114][Stage 171:============================================>        (95 + 19) / 114][Stage 171:================================================>    (105 + 9) / 114][Stage 171:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.074606527 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398374259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:==========================>                          (61 + 59) / 120][Stage 172:===============================>                     (71 + 49) / 120][Stage 172:=========================================>           (95 + 25) / 120][Stage 172:===================================================> (116 + 4) / 120]                                                                                [Stage 173:==========================>                          (61 + 60) / 121][Stage 173:================================>                    (75 + 46) / 121][Stage 173:=======================================>             (91 + 30) / 121][Stage 173:==============================================>     (109 + 12) / 121][Stage 173:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.398329943 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37127751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:==============================>                      (66 + 49) / 115][Stage 174:====================================>                (80 + 35) / 115][Stage 174:============================================>        (96 + 19) / 115][Stage 174:=================================================>   (108 + 7) / 115][Stage 174:===================================================> (112 + 3) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:================================>                    (71 + 45) / 116][Stage 175:=====================================>               (82 + 34) / 116][Stage 175:=============================================>       (99 + 17) / 116][Stage 175:=================================================>   (108 + 8) / 116][Stage 175:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.278101265 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406262782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:============================>                        (65 + 56) / 121][Stage 176:=================================>                   (77 + 44) / 121][Stage 176:==========================================>         (100 + 21) / 121][Stage 176:====================================================>(119 + 2) / 121]                                                                                [Stage 177:==========================>                          (61 + 61) / 122][Stage 177:==============================>                      (70 + 52) / 122][Stage 177:====================================>                (83 + 39) / 122][Stage 177:==============================================>     (110 + 12) / 122][Stage 177:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.342058592 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344461742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:================================>                    (70 + 43) / 113][Stage 178:=====================================>               (81 + 32) / 113][Stage 178:==========================================>          (91 + 22) / 113][Stage 178:==============================================>     (100 + 13) / 113][Stage 178:===================================================> (110 + 3) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:========================================>            (87 + 27) / 114][Stage 179:============================================>        (96 + 18) / 114][Stage 179:===============================================>    (104 + 10) / 114][Stage 179:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.168874555 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIn dex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386847356 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:==================================>                  (74 + 39) / 113][Stage 180:====================================>                (78 + 35) / 113][Stage 180:============================================>        (94 + 19) / 113][Stage 180:==============================================>     (102 + 11) / 113][Stage 180:====================================================>(111 + 2) / 113]                                                                                [Stage 181:===================================>                 (77 + 37) / 114][Stage 181:=========================================>           (89 + 25) / 114][Stage 181:=============================================>       (97 + 17) / 114][Stage 181:================================================>    (105 + 9) / 114][Stage 181:==================================================>  (109 + 5) / 114][Stage 181:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.288674331 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390839758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:=============================>                       (67 + 53) / 120][Stage 182:==================================>                  (79 + 41) / 120][Stage 182:==========================================>          (97 + 23) / 120][Stage 182:====================================================>(119 + 1) / 120]                                                                                [Stage 183:===========================>                         (62 + 59) / 121][Stage 183:===============================>                     (73 + 48) / 121][Stage 183:=======================================>             (91 + 30) / 121][Stage 183:=================================================>   (114 + 7) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.332572243 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIn dex = 99  OR  partitionIndex = 113  OR  partitionIndex = 114 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113  OR  partitionIndex = 114 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354644486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:=================================>                   (74 + 44) / 118][Stage 184:======================================>              (86 + 32) / 118][Stage 184:=================================================>   (111 + 7) / 118]                                                                                [Stage 185:================================>                    (73 + 46) / 119][Stage 185:===================================>                 (80 + 39) / 119][Stage 185:==========================================>          (95 + 24) / 119][Stage 185:================================================>    (110 + 9) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.255965481 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386395838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==========================>                          (60 + 61) / 121][Stage 186:============================>                        (66 + 55) / 121][Stage 186:====================================>                (83 + 38) / 121][Stage 186:===============================================>    (111 + 10) / 121][Stage 186:====================================================>(120 + 1) / 121]                                                                                [Stage 187:==========================>                          (61 + 61) / 122][Stage 187:===========================>                         (64 + 58) / 122][Stage 187:=================================>                   (76 + 46) / 122][Stage 187:=========================================>           (95 + 27) / 122][Stage 187:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.312306745 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionI ndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370853453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:>                                                      (0 + 0) / 115][Stage 188:===============================>                     (69 + 46) / 115][Stage 188:====================================>                (80 + 35) / 115][Stage 188:==============================================>     (103 + 12) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:===============================>                     (68 + 48) / 116][Stage 189:=====================================>               (83 + 33) / 116][Stage 189:==============================================>     (103 + 13) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.64566067 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionI ndex = 159  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345186565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:=================================>                   (72 + 41) / 113][Stage 190:=====================================>               (81 + 32) / 113][Stage 190:===========================================>         (93 + 20) / 113][Stage 190:==============================================>     (102 + 11) / 113][Stage 190:===================================================> (109 + 4) / 113]                                                                                [Stage 191:====================================>                (79 + 35) / 114][Stage 191:=========================================>           (89 + 25) / 114][Stage 191:============================================>        (96 + 18) / 114][Stage 191:==================================================>  (109 + 5) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.19145975 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344159404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:====================================>                (77 + 36) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:=============================================>       (98 + 15) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:==================================>                  (75 + 39) / 114][Stage 193:=======================================>             (84 + 30) / 114][Stage 193:===========================================>         (93 + 21) / 114][Stage 193:=============================================>      (100 + 14) / 114][Stage 193:==================================================>  (108 + 6) / 114][Stage 193:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.052135385 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376916037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:===============================>                     (68 + 47) / 115][Stage 194:=======================================>             (86 + 29) / 115][Stage 194:=============================================>      (100 + 15) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:=================================>                   (73 + 43) / 116][Stage 195:=======================================>             (86 + 30) / 116][Stage 195:============================================>       (100 + 16) / 116][Stage 195:===============================================>    (105 + 11) / 116][Stage 195:==================================================>  (111 + 5) / 116][Stage 195:====================================================>(114 + 2) / 116][Stage 195:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.641492789 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400561466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:==========================>                          (61 + 59) / 120][Stage 196:=============================>                       (67 + 53) / 120][Stage 196:===================================>                 (81 + 39) / 120][Stage 196:==============================================>     (107 + 13) / 120][Stage 196:===================================================> (117 + 3) / 120]                                                                                [Stage 197:============================>                        (65 + 56) / 121][Stage 197:==================================>                  (79 + 42) / 121][Stage 197:=========================================>           (95 + 26) / 121][Stage 197:=================================================>   (112 + 9) / 121][Stage 197:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.529742849 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350816908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:=====================================>               (79 + 34) / 113][Stage 198:=========================================>           (89 + 24) / 113][Stage 198:==============================================>      (99 + 14) / 113][Stage 198:===================================================> (109 + 4) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:=======================================>             (84 + 30) / 114][Stage 199:============================================>        (95 + 19) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:==================================================>  (109 + 5) / 114][Stage 199:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.624870995 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m30.057s
user	12m10.308s
sys	0m54.800s
