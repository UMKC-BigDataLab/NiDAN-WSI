Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 02:51:19 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:51:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:51:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:51:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 02:51:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:51:47 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525025136-0627).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.368560187 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=================>                                     (36 + 79) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (109 + 6) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 12.86684395 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.652421086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=================================>                     (69 + 46) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:===========================================>           (91 + 24) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:====================================================>  (110 + 5) / 115]                                                                                [Stage 3:======================================>                (82 + 34) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:==============================================>        (98 + 18) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.050576376 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.619761584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:==================================>                    (73 + 42) / 115][Stage 4:=======================================>               (83 + 32) / 115][Stage 4:=========================================>             (86 + 29) / 115][Stage 4:===========================================>           (91 + 24) / 115][Stage 4:==============================================>       (100 + 15) / 115][Stage 4:====================================================>  (109 + 6) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:=======================================>               (84 + 32) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:===========================================>           (92 + 24) / 116][Stage 5:==============================================>        (99 + 17) / 116][Stage 5:=================================================>    (106 + 10) / 116][Stage 5:====================================================>  (111 + 5) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.583222032 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.644238607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=========================>                             (52 + 61) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==============================>                        (63 + 50) / 113][Stage 6:====================================>                  (76 + 37) / 113][Stage 6:==========================================>            (87 + 26) / 113][Stage 6:================================================>     (101 + 12) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:==============================>                        (63 + 51) / 114][Stage 7:===================================>                   (73 + 41) / 114][Stage 7:=========================================>             (86 + 28) / 114][Stage 7:==============================================>        (97 + 17) / 114][Stage 7:=====================================================> (110 + 4) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.045839172 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.768435958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:===========================>                           (60 + 61) / 121][Stage 8:===============================>                       (69 + 52) / 121][Stage 8:===================================>                   (77 + 44) / 121][Stage 8:=========================================>             (92 + 29) / 121][Stage 8:===============================================>      (106 + 15) / 121][Stage 8:=====================================================> (118 + 3) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:=============================>                         (65 + 57) / 122][Stage 9:==================================>                    (76 + 46) / 122][Stage 9:==========================================>            (94 + 28) / 122][Stage 9:===============================================>      (107 + 15) / 122][Stage 9:=====================================================> (118 + 4) / 122][Stage 9:======================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.151645555 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552080488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=================================>                    (72 + 43) / 115][Stage 10:=====================================>                (80 + 35) / 115][Stage 10:=========================================>            (89 + 26) / 115][Stage 10:============================================>         (94 + 21) / 115][Stage 10:===============================================>     (103 + 12) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:===============================>                      (68 + 48) / 116][Stage 11:===================================>                  (77 + 39) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:=============================================>        (97 + 19) / 116][Stage 11:==============================================>      (101 + 15) / 116][Stage 11:=================================================>    (107 + 9) / 116][Stage 11:=====================================================>(114 + 2) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.017269626 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537320324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=================================>                    (70 + 43) / 113][Stage 12:====================================>                 (76 + 37) / 113][Stage 12:========================================>             (84 + 29) / 113][Stage 12:=============================================>        (96 + 17) / 113][Stage 12:===============================================>     (102 + 11) / 113][Stage 12:==================================================>   (105 + 8) / 113][Stage 12:====================================================> (110 + 3) / 113][Stage 12:=====================================================>(111 + 2) / 113]                                                                                [Stage 13:=====================================>                (79 + 35) / 114][Stage 13:========================================>             (86 + 28) / 114][Stage 13:==========================================>           (90 + 24) / 114][Stage 13:==============================================>      (100 + 14) / 114][Stage 13:==================================================>   (106 + 8) / 114][Stage 13:===================================================>  (108 + 6) / 114][Stage 13:=====================================================>(112 + 2) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.555099461 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494379018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:================================>                     (71 + 47) / 118][Stage 14:=================================>                    (73 + 45) / 118][Stage 14:====================================>                 (80 + 38) / 118][Stage 14:==========================================>           (92 + 26) / 118][Stage 14:==================================================>   (111 + 7) / 118][Stage 14:====================================================> (114 + 4) / 118][Stage 14:=====================================================>(117 + 1) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:===================================>                  (78 + 41) / 119][Stage 15:==========================================>           (93 + 26) / 119][Stage 15:=============================================>       (102 + 17) / 119][Stage 15:==================================================>   (111 + 8) / 119][Stage 15:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.173011292 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.584748463 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:===========================>                          (61 + 60) / 121][Stage 16:=============================>                        (67 + 54) / 121][Stage 16:====================================>                 (82 + 39) / 121][Stage 16:============================================>         (99 + 22) / 121][Stage 16:================================================>    (110 + 11) / 121][Stage 16:====================================================> (117 + 4) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:=============================>                        (67 + 55) / 122][Stage 17:===================================>                  (80 + 42) / 122][Stage 17:===========================================>          (98 + 24) / 122][Stage 17:==================================================>   (113 + 9) / 122][Stage 17:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.875736229 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.637161227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:============================>                         (59 + 54) / 113][Stage 18:=============================>                        (61 + 52) / 113][Stage 18:===================================>                  (75 + 38) / 113][Stage 18:==========================================>           (89 + 24) / 113][Stage 18:===============================================>     (101 + 12) / 113][Stage 18:===================================================>  (108 + 5) / 113][Stage 18:====================================================> (109 + 4) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:===============================>                      (67 + 47) / 114][Stage 19:========================================>             (86 + 28) / 114][Stage 19:================================================>    (104 + 10) / 114][Stage 19:==================================================>   (107 + 7) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.034132817 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485378876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:=================================>                    (74 + 44) / 118][Stage 20:=======================================>              (87 + 31) / 118][Stage 20:============================================>         (98 + 20) / 118][Stage 20:==================================================>   (111 + 7) / 118][Stage 20:====================================================> (114 + 4) / 118]                                                                                [Stage 21:=================================>                    (74 + 45) / 119][Stage 21:======================================>               (85 + 34) / 119][Stage 21:=============================================>       (102 + 17) / 119][Stage 21:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.475081977 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423813352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:=====================================>                (80 + 35) / 115][Stage 22:======================================>               (81 + 34) / 115][Stage 22:=============================================>        (97 + 18) / 115][Stage 22:================================================>    (105 + 10) / 115][Stage 22:====================================================> (112 + 3) / 115]                                                                                [Stage 23:=======================================>              (85 + 31) / 116][Stage 23:=============================================>        (97 + 19) / 116][Stage 23:==================================================>   (108 + 8) / 116][Stage 23:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.033057961 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450500164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:===================================>                  (75 + 38) / 113][Stage 24:==========================================>           (88 + 25) / 113][Stage 24:==============================================>       (97 + 16) / 113][Stage 24:================================================>    (103 + 10) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:=====================================>                (80 + 34) / 114][Stage 25:==========================================>           (89 + 25) / 114][Stage 25:==============================================>       (99 + 15) / 114][Stage 25:===================================================>  (108 + 6) / 114][Stage 25:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.520206995 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.550525631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:=================================>                    (71 + 42) / 113][Stage 26:========================================>             (84 + 29) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:================================================>    (103 + 10) / 113][Stage 26:====================================================> (110 + 3) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:===================================>                  (74 + 40) / 114][Stage 27:=========================================>            (87 + 27) / 114][Stage 27:===============================================>     (102 + 12) / 114][Stage 27:=================================================>    (105 + 9) / 114][Stage 27:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.204757881 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414893651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:======================================>               (83 + 32) / 115][Stage 28:==========================================>           (91 + 24) / 115][Stage 28:===================================================>  (110 + 5) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:=========================================>            (89 + 27) / 116][Stage 29:=============================================>       (100 + 16) / 116][Stage 29:==================================================>   (109 + 7) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.286239343 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448690794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:===================================>                  (77 + 41) / 118][Stage 30:======================================>               (84 + 34) / 118][Stage 30:============================================>        (100 + 18) / 118][Stage 30:=================================================>    (109 + 9) / 118][Stage 30:==================================================>   (110 + 8) / 118][Stage 30:====================================================> (115 + 3) / 118]                                                                                [Stage 31:==================================>                   (77 + 42) / 119][Stage 31:=========================================>            (91 + 28) / 119][Stage 31:===============================================>     (107 + 12) / 119]                                                                                Time elapsed: 3.39053866 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421791778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:=======================================>              (84 + 31) / 115][Stage 32:===========================================>          (93 + 22) / 115][Stage 32:==================================================>   (108 + 7) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:======================================>               (83 + 33) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:===============================================>     (104 + 12) / 116][Stage 33:===================================================>  (110 + 6) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.292912917 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.583258726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:============================>                         (64 + 57) / 121][Stage 34:================================>                     (73 + 48) / 121][Stage 34:=========================================>            (92 + 29) / 121][Stage 34:=============================================>       (105 + 16) / 121][Stage 34:===================================================>  (116 + 5) / 121]                                                                                [Stage 35:===========================>                          (63 + 59) / 122][Stage 35:=================================>                    (75 + 47) / 122][Stage 35:=========================================>            (94 + 28) / 122][Stage 35:===================================================>  (117 + 5) / 122][Stage 35:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.389540022 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500540992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:============================>                         (63 + 58) / 121][Stage 36:=====================================>                (83 + 38) / 121][Stage 36:===============================================>     (108 + 13) / 121][Stage 36:=====================================================>(119 + 2) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:============================>                         (64 + 58) / 122][Stage 37:==================================>                   (79 + 43) / 122][Stage 37:=============================================>       (105 + 17) / 122][Stage 37:====================================================> (118 + 4) / 122][Stage 37:====================================================> (119 + 3) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.42607643 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473150274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:===============================>                      (67 + 48) / 115][Stage 38:=================================>                    (72 + 43) / 115][Stage 38:==========================================>           (91 + 24) / 115][Stage 38:===============================================>     (102 + 13) / 115][Stage 38:===================================================>  (109 + 6) / 115][Stage 38:===================================================>  (110 + 5) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:===================================>                  (77 + 39) / 116][Stage 39:=============================================>        (98 + 18) / 116][Stage 39:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.221680813 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47706187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:============================>                         (60 + 53) / 113][Stage 40:=====================================>                (79 + 34) / 113][Stage 40:==============================================>       (98 + 15) / 113][Stage 40:====================================================> (109 + 4) / 113]                                                                                [Stage 41:===========================>                          (59 + 55) / 114][Stage 41:=============================>                        (63 + 51) / 114][Stage 41:======================================>               (81 + 33) / 114][Stage 41:==============================================>      (100 + 14) / 114][Stage 41:==================================================>   (107 + 7) / 114][Stage 41:===================================================>  (109 + 5) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.496364675 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.637588711 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:==========================>                           (60 + 61) / 121][Stage 42:=============================>                        (67 + 54) / 121][Stage 42:=====================================>                (83 + 38) / 121][Stage 42:===============================================>     (109 + 12) / 121][Stage 42:====================================================> (117 + 4) / 121][Stage 42:=====================================================>(120 + 1) / 121]                                                                                [Stage 43:===========================>                          (61 + 61) / 122][Stage 43:============================>                         (64 + 58) / 122][Stage 43:======================================>               (86 + 36) / 122][Stage 43:===============================================>     (109 + 13) / 122][Stage 43:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.40301935 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.500115926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:===============================>                      (69 + 51) / 120][Stage 44:========================================>             (90 + 30) / 120][Stage 44:===================================================>  (114 + 6) / 120]                                                                                [Stage 45:============================>                         (63 + 58) / 121][Stage 45:================================>                     (72 + 49) / 121][Stage 45:=========================================>            (93 + 28) / 121][Stage 45:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 2.991076932 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465196957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (65 + 56) / 121][Stage 46:=================================>                    (76 + 45) / 121][Stage 46:========================================>             (90 + 31) / 121][Stage 46:===================================================>  (116 + 5) / 121]                                                                                [Stage 47:===========================>                          (61 + 61) / 122][Stage 47:==================================>                   (77 + 45) / 122][Stage 47:=========================================>            (94 + 28) / 122][Stage 47:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.113012645 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389240953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:======================================>               (82 + 33) / 115][Stage 48:============================================>         (94 + 21) / 115][Stage 48:===============================================>     (103 + 12) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:======================================>               (83 + 33) / 116][Stage 49:=========================================>            (90 + 26) / 116][Stage 49:==============================================>      (102 + 14) / 116][Stage 49:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.892431682 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435043147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:================================>                     (69 + 46) / 115][Stage 50:======================================>               (83 + 32) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:===================================================>  (109 + 6) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:==============================>                       (66 + 50) / 116][Stage 51:=======================================>              (85 + 31) / 116][Stage 51:==============================================>      (102 + 14) / 116][Stage 51:===================================================>  (111 + 5) / 116][Stage 51:====================================================> (113 + 3) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.451872654 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390767038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:=====================================>                (80 + 35) / 115][Stage 52:========================================>             (87 + 28) / 115][Stage 52:===============================================>     (104 + 11) / 115][Stage 52:=====================================================>(113 + 2) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:=====================================>                (81 + 35) / 116][Stage 53:===========================================>          (93 + 23) / 116][Stage 53:==============================================>      (101 + 15) / 116][Stage 53:====================================================> (112 + 4) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.073191916 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472070582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:================================>                     (73 + 48) / 121][Stage 54:===========================================>         (100 + 21) / 121][Stage 54:====================================================> (118 + 3) / 121]                                                                                [Stage 55:===========================>                          (63 + 59) / 122][Stage 55:====================================>                 (83 + 39) / 122][Stage 55:===========================================>          (99 + 23) / 122][Stage 55:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.071934405 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373529123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:======================================>               (81 + 34) / 115][Stage 56:=======================================>              (85 + 30) / 115][Stage 56:==============================================>       (98 + 17) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:========================================>             (86 + 30) / 116][Stage 57:==============================================>      (101 + 15) / 116][Stage 57:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.670661699 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389688191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:==================================>                   (73 + 40) / 113][Stage 58:=======================================>              (83 + 30) / 113][Stage 58:===========================================>          (92 + 21) / 113][Stage 58:==================================================>   (105 + 8) / 113]                                                                                [Stage 59:=======================================>              (84 + 30) / 114][Stage 59:============================================>         (93 + 21) / 114][Stage 59:===============================================>     (102 + 12) / 114][Stage 59:==================================================>   (107 + 7) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.965909065 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408659251 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:==================================>                   (75 + 43) / 118][Stage 60:====================================>                 (80 + 38) / 118][Stage 60:========================================>             (89 + 29) / 118][Stage 60:==============================================>      (104 + 14) / 118]                                                                                [Stage 61:=================================>                    (74 + 45) / 119][Stage 61:==================================>                   (77 + 42) / 119][Stage 61:====================================>                 (81 + 38) / 119][Stage 61:===========================================>          (96 + 23) / 119][Stage 61:================================================>    (108 + 11) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.52136007 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414245554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:===============================>                      (67 + 48) / 115][Stage 62:=======================================>              (85 + 30) / 115][Stage 62:==============================================>       (98 + 17) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:====================================================> (111 + 4) / 115]                                                                                [Stage 63:=================================>                    (73 + 43) / 116][Stage 63:=========================================>            (89 + 27) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.986128978 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408262067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:==============================>                       (64 + 51) / 115][Stage 64:=====================================>                (79 + 36) / 115][Stage 64:============================================>         (95 + 20) / 115][Stage 64:================================================>    (105 + 10) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:====================================>                 (79 + 37) / 116][Stage 65:===========================================>          (93 + 23) / 116][Stage 65:===============================================>     (103 + 13) / 116][Stage 65:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.108775012 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460268726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:==============================>                       (63 + 50) / 113][Stage 66:===================================>                  (75 + 38) / 113][Stage 66:=============================================>        (95 + 18) / 113][Stage 66:==================================================>   (106 + 7) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:===============================>                      (67 + 47) / 114][Stage 67:========================================>             (86 + 28) / 114][Stage 67:===================================================>  (108 + 6) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.259564803 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394526508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:=================================>                    (73 + 45) / 118][Stage 68:====================================>                 (80 + 38) / 118][Stage 68:===========================================>          (95 + 23) / 118][Stage 68:===================================================>  (113 + 5) / 118]                                                                                [Stage 69:==================================>                   (75 + 44) / 119][Stage 69:========================================>             (90 + 29) / 119][Stage 69:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.929714303 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420150615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:===================================>                  (77 + 41) / 118][Stage 70:=======================================>              (87 + 31) / 118][Stage 70:============================================>         (98 + 20) / 118][Stage 70:===================================================>  (112 + 6) / 118]                                                                                [Stage 71:==================================>                   (75 + 44) / 119][Stage 71:=====================================>                (82 + 37) / 119][Stage 71:===========================================>          (95 + 24) / 119][Stage 71:=================================================>    (110 + 9) / 119][Stage 71:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.400965488 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408810026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===================================>                  (74 + 39) / 113][Stage 72:=========================================>            (86 + 27) / 113][Stage 72:==============================================>       (97 + 16) / 113][Stage 72:================================================>    (103 + 10) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:=======================================>              (83 + 31) / 114][Stage 73:===========================================>          (92 + 22) / 114][Stage 73:==============================================>      (101 + 13) / 114][Stage 73:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.113310967 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390531029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:=====================================>                (81 + 37) / 118][Stage 74:==========================================>           (92 + 26) / 118][Stage 74:===================================================>  (113 + 5) / 118]                                                                                [Stage 75:==================================>                   (75 + 44) / 119][Stage 75:===================================>                  (78 + 41) / 119][Stage 75:===========================================>          (96 + 23) / 119][Stage 75:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.032871661 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419232309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=================================>                    (73 + 45) / 118][Stage 76:=======================================>              (86 + 32) / 118][Stage 76:===============================================>     (105 + 13) / 118][Stage 76:====================================================> (114 + 4) / 118]                                                                                [Stage 77:=================================>                    (74 + 45) / 119][Stage 77:====================================>                 (81 + 38) / 119][Stage 77:============================================>         (98 + 21) / 119][Stage 77:================================================>    (109 + 10) / 119][Stage 77:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.096498845 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370958325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:======================================>               (82 + 33) / 115][Stage 78:===========================================>          (92 + 23) / 115][Stage 78:===================================================>  (110 + 5) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:=======================================>              (84 + 32) / 116][Stage 79:===========================================>          (94 + 22) / 116][Stage 79:===============================================>     (105 + 11) / 116][Stage 79:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.992866881 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39837336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===================================>                  (76 + 39) / 115][Stage 80:============================================>         (94 + 21) / 115][Stage 80:==================================================>   (107 + 8) / 115][Stage 80:====================================================> (112 + 3) / 115]                                                                                [Stage 81:===================================>                  (77 + 39) / 116][Stage 81:========================================>             (86 + 30) / 116][Stage 81:==============================================>       (99 + 17) / 116][Stage 81:==================================================>   (109 + 7) / 116][Stage 81:===================================================>  (110 + 6) / 116][Stage 81:=====================================================>(114 + 2) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.265181973 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411222093 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:================================>                     (69 + 44) / 113][Stage 82:===========================================>          (90 + 23) / 113][Stage 82:===================================================>  (108 + 5) / 113]                                                                                [Stage 83:============================>                         (60 + 54) / 114][Stage 83:=================================>                    (70 + 44) / 114][Stage 83:=======================================>              (84 + 30) / 114][Stage 83:===============================================>     (102 + 12) / 114][Stage 83:===================================================>  (108 + 6) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.481509067 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408081959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:================================>                     (67 + 46) / 113][Stage 84:=========================================>            (87 + 26) / 113][Stage 84:===============================================>     (101 + 12) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:===========================>                          (59 + 55) / 114][Stage 85:===============================>                      (67 + 47) / 114][Stage 85:========================================>             (86 + 28) / 114][Stage 85:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.925518519 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389733541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:======================================>               (81 + 32) / 113][Stage 86:==========================================>           (88 + 25) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:==================================================>   (106 + 7) / 113][Stage 86:=====================================================>(111 + 2) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:===================================>                  (75 + 39) / 114][Stage 87:=========================================>            (87 + 27) / 114][Stage 87:=============================================>        (96 + 18) / 114][Stage 87:==================================================>   (107 + 7) / 114][Stage 87:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.273827959 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487641292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===================================>                  (74 + 39) / 113][Stage 88:========================================>             (84 + 29) / 113][Stage 88:============================================>         (94 + 19) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:=====================================>                (80 + 34) / 114][Stage 89:===========================================>          (91 + 23) / 114][Stage 89:=============================================>        (97 + 17) / 114][Stage 89:====================================================> (110 + 4) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.181756186 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378222391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:===================================>                  (75 + 38) / 113][Stage 90:==========================================>           (88 + 25) / 113][Stage 90:===============================================>     (102 + 11) / 113][Stage 90:====================================================> (109 + 4) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:===================================>                  (74 + 40) / 114][Stage 91:=======================================>              (84 + 30) / 114][Stage 91:=============================================>        (95 + 19) / 114][Stage 91:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.075262592 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364055571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:======================================>               (81 + 32) / 113][Stage 92:=========================================>            (87 + 26) / 113][Stage 92:===============================================>     (102 + 11) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:======================================>               (81 + 33) / 114][Stage 93:==========================================>           (90 + 24) / 114][Stage 93:==============================================>      (101 + 13) / 114][Stage 93:===================================================>  (108 + 6) / 114][Stage 93:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.362910156 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39008598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:===============================>                      (67 + 48) / 115][Stage 94:=====================================>                (80 + 35) / 115][Stage 94:===========================================>          (92 + 23) / 115][Stage 94:=================================================>    (106 + 9) / 115]                                                                                [Stage 95:==================================>                   (75 + 41) / 116][Stage 95:==========================================>           (91 + 25) / 116][Stage 95:===============================================>     (104 + 12) / 116][Stage 95:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.745363595 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396036383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==============================>                       (66 + 49) / 115][Stage 96:====================================>                 (78 + 37) / 115][Stage 96:==============================================>      (101 + 14) / 115][Stage 96:====================================================> (111 + 4) / 115]                                                                                [Stage 97:===================================>                  (77 + 39) / 116][Stage 97:==========================================>           (91 + 25) / 116][Stage 97:================================================>    (106 + 10) / 116][Stage 97:===================================================>  (110 + 6) / 116][Stage 97:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.14047871 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400246641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===============================>                      (68 + 47) / 115][Stage 98:======================================>               (81 + 34) / 115][Stage 98:=============================================>        (97 + 18) / 115][Stage 98:===================================================>  (110 + 5) / 115]                                                                                [Stage 99:=================================>                    (73 + 43) / 116][Stage 99:========================================>             (87 + 29) / 116][Stage 99:================================================>    (106 + 10) / 116][Stage 99:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.869132845 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393340971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:===========================>                         (59 + 54) / 113][Stage 100:===============================>                     (67 + 46) / 113][Stage 100:======================================>              (83 + 30) / 113][Stage 100:=============================================>       (98 + 15) / 113][Stage 100:==================================================>  (107 + 6) / 113]                                                                                [Stage 101:============================>                        (62 + 52) / 114][Stage 101:===================================>                 (76 + 38) / 114][Stage 101:=============================================>       (97 + 17) / 114][Stage 101:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.156397905 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385742259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=============================>                       (65 + 50) / 115][Stage 102:===================================>                 (78 + 37) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>       (99 + 16) / 115][Stage 102:==================================================>  (109 + 6) / 115][Stage 102:===================================================> (111 + 4) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:====================================>                (79 + 37) / 116][Stage 103:========================================>            (89 + 27) / 116][Stage 103:===============================================>    (106 + 10) / 116][Stage 103:==================================================>  (111 + 5) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.898543691 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358527083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:======================================>              (83 + 32) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:================================================>    (106 + 9) / 115][Stage 104:===================================================> (111 + 4) / 115][Stage 104:====================================================>(113 + 2) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:======================================>              (84 + 32) / 116][Stage 105:==========================================>          (93 + 23) / 116][Stage 105:===============================================>    (106 + 10) / 116][Stage 105:==================================================>  (111 + 5) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.724373454 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409214815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:==========================>                          (60 + 60) / 120][Stage 106:=============================>                       (66 + 54) / 120][Stage 106:===================================>                 (81 + 39) / 120][Stage 106:===========================================>        (100 + 20) / 120][Stage 106:===================================================> (117 + 3) / 120]                                                                                [Stage 107:==========================>                          (61 + 60) / 121][Stage 107:============================>                        (64 + 57) / 121][Stage 107:===============================>                     (73 + 48) / 121][Stage 107:==========================================>          (97 + 24) / 121][Stage 107:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.117734164 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387509923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (82 + 33) / 115][Stage 108:========================================>            (87 + 28) / 115][Stage 108:=============================================>      (101 + 14) / 115][Stage 108:===================================================> (112 + 3) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:======================================>              (85 + 31) / 116][Stage 109:============================================>       (100 + 16) / 116][Stage 109:==================================================>  (110 + 6) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.882525974 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390783137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:==================================>                  (76 + 42) / 118][Stage 110:========================================>            (90 + 28) / 118][Stage 110:================================================>    (109 + 9) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:===================================>                 (80 + 39) / 119][Stage 111:===========================================>        (100 + 19) / 119][Stage 111:=================================================>   (112 + 7) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.840659393 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38677798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:==============================>                      (66 + 49) / 115][Stage 112:====================================>                (80 + 35) / 115][Stage 112:============================================>        (96 + 19) / 115][Stage 112:==================================================>  (110 + 5) / 115]                                                                                [Stage 113:==================================>                  (76 + 40) / 116][Stage 113:==========================================>          (94 + 22) / 116][Stage 113:==============================================>     (103 + 13) / 116][Stage 113:====================================================>(114 + 2) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.988313147 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432617371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:==============================>                      (69 + 51) / 120][Stage 114:=======================================>             (90 + 30) / 120][Stage 114:=================================================>   (113 + 7) / 120][Stage 114:====================================================>(118 + 2) / 120]                                                                                [Stage 115:============================>                        (64 + 57) / 121][Stage 115:=================================>                   (77 + 44) / 121][Stage 115:===========================================>        (102 + 19) / 121][Stage 115:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.164570838 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405614216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (61 + 60) / 121][Stage 116:===============================>                     (73 + 48) / 121][Stage 116:=========================================>           (94 + 27) / 121][Stage 116:=================================================>   (114 + 7) / 121]                                                                                [Stage 117:==========================>                          (62 + 60) / 122][Stage 117:==============================>                      (71 + 51) / 122][Stage 117:=======================================>             (90 + 32) / 122][Stage 117:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.983485415 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512239761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:===========================>                         (59 + 54) / 113][Stage 118:==============================>                      (64 + 49) / 113][Stage 118:=========================================>           (89 + 24) / 113][Stage 118:================================================>    (104 + 9) / 113]                                                                                [Stage 119:===========================>                         (60 + 54) / 114][Stage 119:=================================>                   (72 + 42) / 114][Stage 119:===========================================>         (94 + 20) / 114][Stage 119:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.013482916 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383217362 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:==============================>                      (64 + 49) / 113][Stage 120:===================================>                 (75 + 38) / 113][Stage 120:===========================================>         (93 + 20) / 113][Stage 120:==================================================>  (108 + 5) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:=============================>                       (63 + 51) / 114][Stage 121:====================================>                (79 + 35) / 114][Stage 121:=============================================>      (100 + 14) / 114][Stage 121:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.972682599 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353251216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:==================================>                  (74 + 39) / 113][Stage 122:=======================================>             (84 + 29) / 113][Stage 122:=============================================>       (98 + 15) / 113][Stage 122:=================================================>   (105 + 8) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:=====================================>               (81 + 33) / 114][Stage 123:=========================================>           (90 + 24) / 114][Stage 123:==============================================>     (102 + 12) / 114][Stage 123:===================================================> (111 + 3) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.159779335 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34985602 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:==================================>                  (74 + 39) / 113][Stage 124:=========================================>           (89 + 24) / 113][Stage 124:============================================>        (95 + 18) / 113][Stage 124:=================================================>   (105 + 8) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===================================>                 (76 + 38) / 114][Stage 125:=======================================>             (86 + 28) / 114][Stage 125:==============================================>      (99 + 15) / 114][Stage 125:=================================================>   (106 + 8) / 114][Stage 125:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.009381122 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408581805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:==========================>                          (60 + 61) / 121][Stage 126:=============================>                       (68 + 53) / 121][Stage 126:===================================>                 (81 + 40) / 121][Stage 126:=============================================>      (105 + 16) / 121][Stage 126:==================================================>  (116 + 5) / 121]                                                                                [Stage 127:==========================>                          (61 + 61) / 122][Stage 127:==============================>                      (70 + 52) / 122][Stage 127:======================================>              (89 + 33) / 122][Stage 127:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.160671428 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352674212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:===================================>                 (75 + 38) / 113][Stage 128:=======================================>             (85 + 28) / 113][Stage 128:============================================>        (95 + 18) / 113][Stage 128:===============================================>    (103 + 10) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:=================================>                   (72 + 42) / 114][Stage 129:========================================>            (87 + 27) / 114][Stage 129:==========================================>          (92 + 22) / 114][Stage 129:=============================================>      (100 + 14) / 114][Stage 129:===================================================> (110 + 4) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.204208544 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35472556 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:=====================================>               (80 + 33) / 113][Stage 130:===========================================>         (92 + 21) / 113][Stage 130:==============================================>      (99 + 14) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:=================================>                   (73 + 41) / 114][Stage 131:=======================================>             (86 + 28) / 114][Stage 131:==============================================>     (101 + 13) / 114][Stage 131:=================================================>   (107 + 7) / 114][Stage 131:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.905131072 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406931156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:================================>                    (71 + 44) / 115][Stage 132:=====================================>               (82 + 33) / 115][Stage 132:===========================================>         (95 + 20) / 115][Stage 132:==============================================>     (103 + 12) / 115][Stage 132:=================================================>   (108 + 7) / 115][Stage 132:==================================================>  (110 + 5) / 115]                                                                                [Stage 133:================================>                    (71 + 45) / 116][Stage 133:=======================================>             (86 + 30) / 116][Stage 133:==========================================>          (94 + 22) / 116][Stage 133:==================================================>  (111 + 5) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.58746075 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387210333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:============================>                        (61 + 52) / 113][Stage 134:=====================================>               (80 + 33) / 113][Stage 134:=============================================>       (96 + 17) / 113][Stage 134:===================================================> (110 + 3) / 113]                                                                                [Stage 135:=============================>                       (64 + 50) / 114][Stage 135:=================================>                   (71 + 43) / 114][Stage 135:========================================>            (87 + 27) / 114][Stage 135:=================================================>   (106 + 8) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.167198353 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368082193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:=================================>                   (74 + 44) / 118][Stage 136:=======================================>             (88 + 30) / 118][Stage 136:==================================================>  (112 + 6) / 118][Stage 136:====================================================>(117 + 1) / 118]                                                                                [Stage 137:================================>                    (73 + 46) / 119][Stage 137:=====================================>               (84 + 35) / 119][Stage 137:==========================================>          (96 + 23) / 119][Stage 137:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.774805673 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356562044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:===================================>                 (76 + 37) / 113][Stage 138:=======================================>             (85 + 28) / 113][Stage 138:===========================================>         (93 + 20) / 113][Stage 138:================================================>    (104 + 9) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:===================================>                 (76 + 38) / 114][Stage 139:========================================>            (87 + 27) / 114][Stage 139:==============================================>      (99 + 15) / 114][Stage 139:=================================================>   (107 + 7) / 114][Stage 139:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.189477735 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396844051 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:===========================>                         (63 + 57) / 120][Stage 140:==================================>                  (77 + 43) / 120][Stage 140:==========================================>          (97 + 23) / 120][Stage 140:==================================================>  (115 + 5) / 120]                                                                                [Stage 141:===========================>                         (63 + 58) / 121][Stage 141:================================>                    (74 + 47) / 121][Stage 141:=========================================>           (94 + 27) / 121][Stage 141:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 2.969654554 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368535873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:===============================>                     (68 + 47) / 115][Stage 142:=====================================>               (82 + 33) / 115][Stage 142:============================================>        (96 + 19) / 115][Stage 142:==================================================>  (110 + 5) / 115]                                                                                [Stage 143:=================================>                   (74 + 42) / 116][Stage 143:=========================================>           (90 + 26) / 116][Stage 143:================================================>    (107 + 9) / 116][Stage 143:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.947416656 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373076111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:==============================>                      (67 + 48) / 115][Stage 144:===================================>                 (77 + 38) / 115][Stage 144:========================================>            (88 + 27) / 115][Stage 144:===============================================>    (105 + 10) / 115][Stage 144:====================================================>(113 + 2) / 115]                                                                                [Stage 145:================================>                    (71 + 45) / 116][Stage 145:=======================================>             (86 + 30) / 116][Stage 145:=============================================>      (102 + 14) / 116][Stage 145:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.719598644 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374880338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:=================================>                   (74 + 44) / 118][Stage 146:===================================>                 (78 + 40) / 118][Stage 146:======================================>              (86 + 32) / 118][Stage 146:===========================================>         (96 + 22) / 118][Stage 146:==================================================>  (112 + 6) / 118]                                                                                [Stage 147:=================================>                   (76 + 43) / 119][Stage 147:====================================>                (81 + 38) / 119][Stage 147:=======================================>             (89 + 30) / 119][Stage 147:==============================================>     (106 + 13) / 119]                                                                                Time elapsed: 3.228774815 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375820521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:=============================>                       (65 + 50) / 115][Stage 148:=================================>                   (73 + 42) / 115][Stage 148:=========================================>           (90 + 25) / 115][Stage 148:================================================>    (106 + 9) / 115]                                                                                [Stage 149:===================================>                 (78 + 38) / 116][Stage 149:===========================================>         (95 + 21) / 116][Stage 149:==============================================>     (104 + 12) / 116][Stage 149:==================================================>  (111 + 5) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.071809378 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338505105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:=======================================>             (85 + 30) / 115][Stage 150:==========================================>          (92 + 23) / 115][Stage 150:=================================================>   (108 + 7) / 115][Stage 150:====================================================>(113 + 2) / 115]                                                                                [Stage 151:=======================================>             (86 + 30) / 116][Stage 151:============================================>        (98 + 18) / 116][Stage 151:=================================================>   (108 + 8) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.070986209 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382649789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==================================>                  (74 + 41) / 115][Stage 152:=======================================>             (85 + 30) / 115][Stage 152:============================================>        (96 + 19) / 115][Stage 152:===================================================> (111 + 4) / 115][Stage 152:====================================================>(113 + 2) / 115]                                                                                [Stage 153:==================================>                  (75 + 41) / 116][Stage 153:=========================================>           (91 + 25) / 116][Stage 153:===============================================>    (106 + 10) / 116][Stage 153:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.35215483 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369887374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==================================>                  (74 + 41) / 115][Stage 154:=========================================>           (90 + 25) / 115][Stage 154:==============================================>     (103 + 12) / 115][Stage 154:====================================================>(114 + 1) / 115]                                                                                [Stage 155:===============================>                     (68 + 48) / 116][Stage 155:=====================================>               (82 + 34) / 116][Stage 155:===========================================>         (95 + 21) / 116][Stage 155:=================================================>   (109 + 7) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.952580307 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411343246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:============================>                        (64 + 57) / 121][Stage 156:===================================>                 (82 + 39) / 121][Stage 156:==============================================>     (108 + 13) / 121][Stage 156:====================================================>(119 + 2) / 121]                                                                                [Stage 157:=============================>                       (69 + 53) / 122][Stage 157:==================================>                  (79 + 43) / 122][Stage 157:===========================================>         (99 + 23) / 122][Stage 157:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.091386458 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362037601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:==================================>                  (77 + 41) / 118][Stage 158:=========================================>           (93 + 25) / 118][Stage 158:===================================================> (114 + 4) / 118]                                                                                [Stage 159:==================================>                  (77 + 42) / 119][Stage 159:========================================>            (90 + 29) / 119][Stage 159:==================================================>  (113 + 6) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.902380589 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350689173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:====================================>                (77 + 36) / 113][Stage 160:=======================================>             (84 + 29) / 113][Stage 160:==============================================>      (99 + 14) / 113][Stage 160:=================================================>   (105 + 8) / 113][Stage 160:====================================================>(111 + 2) / 113]                                                                                [Stage 161:==================================>                  (74 + 40) / 114][Stage 161:=======================================>             (84 + 30) / 114][Stage 161:===========================================>         (93 + 21) / 114][Stage 161:==================================================>  (109 + 5) / 114][Stage 161:====================================================>(112 + 2) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.179749353 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414997299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:============================>                        (65 + 55) / 120][Stage 162:==================================>                  (77 + 43) / 120][Stage 162:=============================================>      (106 + 14) / 120][Stage 162:====================================================>(119 + 1) / 120]                                                                                [Stage 163:===========================>                         (63 + 58) / 121][Stage 163:==================================>                  (79 + 42) / 121][Stage 163:============================================>       (103 + 18) / 121][Stage 163:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.98227711 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400495878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==========================>                          (61 + 60) / 121][Stage 164:===============================>                     (72 + 49) / 121][Stage 164:========================================>            (93 + 28) / 121][Stage 164:===============================================>    (110 + 11) / 121]                                                                                [Stage 165:============================>                        (65 + 57) / 122][Stage 165:=================================>                   (76 + 46) / 122][Stage 165:=======================================>             (91 + 31) / 122][Stage 165:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 2.933844224 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335390208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:======================================>              (84 + 31) / 115][Stage 166:=============================================>       (98 + 17) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:======================================>              (84 + 32) / 116][Stage 167:===========================================>         (95 + 21) / 116][Stage 167:===============================================>    (105 + 11) / 116][Stage 167:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.662627277 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388851928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:=============================>                       (67 + 53) / 120][Stage 168:==================================>                  (77 + 43) / 120][Stage 168:=============================================>      (104 + 16) / 120][Stage 168:====================================================>(118 + 2) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:============================>                        (66 + 55) / 121][Stage 169:===================================>                 (81 + 40) / 121][Stage 169:============================================>       (104 + 17) / 121][Stage 169:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.116025368 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390302353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:===========================>                         (59 + 54) / 113][Stage 170:================================>                    (70 + 43) / 113][Stage 170:=========================================>           (88 + 25) / 113][Stage 170:===============================================>    (103 + 10) / 113][Stage 170:===================================================> (110 + 3) / 113]                                                                                [Stage 171:============================>                        (62 + 52) / 114][Stage 171:==================================>                  (74 + 40) / 114][Stage 171:========================================>            (88 + 26) / 114][Stage 171:================================================>    (105 + 9) / 114][Stage 171:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.527549663 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367266338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:=============================>                       (65 + 50) / 115][Stage 172:===================================>                 (76 + 39) / 115][Stage 172:=============================================>       (99 + 16) / 115][Stage 172:=================================================>   (107 + 8) / 115][Stage 172:====================================================>(114 + 1) / 115]                                                                                [Stage 173:===================================>                 (78 + 38) / 116][Stage 173:=========================================>           (91 + 25) / 116][Stage 173:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.887693074 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352224875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===================================>                 (76 + 37) / 113][Stage 174:========================================>            (86 + 27) / 113][Stage 174:=============================================>       (98 + 15) / 113][Stage 174:=================================================>   (106 + 7) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:=====================================>               (81 + 33) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:================================================>    (105 + 9) / 114][Stage 175:===================================================> (111 + 3) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.212266989 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395691214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 60) / 120][Stage 176:===========================>                         (62 + 58) / 120][Stage 176:=================================>                   (75 + 45) / 120][Stage 176:===========================================>         (98 + 22) / 120][Stage 176:=================================================>   (113 + 7) / 120]                                                                                [Stage 177:===========================>                         (62 + 59) / 121][Stage 177:================================>                    (74 + 47) / 121][Stage 177:==========================================>          (97 + 24) / 121][Stage 177:==================================================>  (116 + 5) / 121][Stage 177:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.275460065 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387362099 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:===========================>                         (58 + 55) / 113][Stage 178:============================>                        (60 + 53) / 113][Stage 178:===================================>                 (75 + 38) / 113][Stage 178:===========================================>         (93 + 20) / 113][Stage 178:===================================================> (109 + 4) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:===============================>                     (68 + 46) / 114][Stage 179:===========================================>         (94 + 20) / 114][Stage 179:==================================================>  (108 + 6) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.122782309 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394636768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:===========================>                         (63 + 57) / 120][Stage 180:================================>                    (74 + 46) / 120][Stage 180:=========================================>           (93 + 27) / 120][Stage 180:===============================================>    (109 + 11) / 120]                                                                                [Stage 181:===========================>                         (62 + 59) / 121][Stage 181:===============================>                     (73 + 48) / 121][Stage 181:=====================================>               (85 + 36) / 121][Stage 181:===========================================>        (102 + 19) / 121]                                                                                Time elapsed: 3.036962169 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518260657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:=====================================>               (82 + 33) / 115][Stage 182:==========================================>          (92 + 23) / 115][Stage 182:==============================================>     (102 + 13) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:====================================>                (80 + 36) / 116][Stage 183:==========================================>          (92 + 24) / 116][Stage 183:=============================================>      (101 + 15) / 116][Stage 183:==============================================>     (103 + 13) / 116][Stage 183:===================================================> (112 + 4) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.063654174 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409686289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:==========================>                          (60 + 61) / 121][Stage 184:============================>                        (65 + 56) / 121][Stage 184:=====================================>               (85 + 36) / 121][Stage 184:===========================================>        (102 + 19) / 121][Stage 184:===================================================> (118 + 3) / 121]                                                                                [Stage 185:===========================>                         (63 + 59) / 122][Stage 185:================================>                    (75 + 47) / 122][Stage 185:========================================>            (93 + 29) / 122][Stage 185:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.171516933 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394003864 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:===========================>                         (62 + 58) / 120][Stage 186:===============================>                     (72 + 48) / 120][Stage 186:==========================================>          (97 + 23) / 120][Stage 186:=================================================>   (113 + 7) / 120]                                                                                [Stage 187:==========================>                          (61 + 60) / 121][Stage 187:===============================>                     (73 + 48) / 121][Stage 187:=======================================>             (91 + 30) / 121][Stage 187:=================================================>   (112 + 9) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.297811448 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376572071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:================================>                    (72 + 46) / 118][Stage 188:=================================>                   (74 + 44) / 118][Stage 188:=======================================>             (89 + 29) / 118][Stage 188:===============================================>    (107 + 11) / 118][Stage 188:===================================================> (114 + 4) / 118]                                                                                [Stage 189:================================>                    (74 + 45) / 119][Stage 189:=====================================>               (85 + 34) / 119][Stage 189:============================================>       (101 + 18) / 119][Stage 189:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.021731285 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34251995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:======================================>              (84 + 31) / 115][Stage 190:==========================================>          (92 + 23) / 115][Stage 190:=================================================>   (107 + 8) / 115][Stage 190:====================================================>(113 + 2) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:=====================================>               (82 + 34) / 116][Stage 191:==========================================>          (92 + 24) / 116][Stage 191:==============================================>     (104 + 12) / 116][Stage 191:==================================================>  (111 + 5) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.823855017 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330157899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:=====================================>               (82 + 33) / 115][Stage 192:=========================================>           (91 + 24) / 115][Stage 192:==============================================>     (102 + 13) / 115][Stage 192:===================================================> (112 + 3) / 115]                                                                                [Stage 193:=======================================>             (86 + 30) / 116][Stage 193:==========================================>          (94 + 22) / 116][Stage 193:=================================================>   (108 + 8) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.764808157 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367387211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:===================================>                 (75 + 38) / 113][Stage 194:========================================>            (87 + 26) / 113][Stage 194:===============================================>    (103 + 10) / 113][Stage 194:===================================================> (110 + 3) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:====================================>                (79 + 35) / 114][Stage 195:========================================>            (88 + 26) / 114][Stage 195:==============================================>     (101 + 13) / 114][Stage 195:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.160479619 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378356636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:================================>                    (71 + 44) / 115][Stage 196:=======================================>             (86 + 29) / 115][Stage 196:==============================================>     (103 + 12) / 115][Stage 196:==================================================>  (110 + 5) / 115]                                                                                [Stage 197:================================>                    (71 + 45) / 116][Stage 197:=====================================>               (81 + 35) / 116][Stage 197:============================================>        (97 + 19) / 116][Stage 197:===================================================> (112 + 4) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.781541015 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392223872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:===========================>                         (59 + 54) / 113][Stage 198:============================>                        (61 + 52) / 113][Stage 198:========================================>            (87 + 26) / 113][Stage 198:=================================================>   (105 + 8) / 113]                                                                                [Stage 199:===========================>                         (60 + 54) / 114][Stage 199:=================================>                   (72 + 42) / 114][Stage 199:========================================>            (87 + 27) / 114][Stage 199:===============================================>    (104 + 10) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.927820693 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352570749 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:==================================>                  (76 + 42) / 118][Stage 200:=======================================>             (88 + 30) / 118][Stage 200:=============================================>      (104 + 14) / 118][Stage 200:====================================================>(116 + 2) / 118]                                                                                [Stage 201:================================>                    (73 + 46) / 119][Stage 201:====================================>                (82 + 37) / 119][Stage 201:==========================================>          (96 + 23) / 119][Stage 201:================================================>    (110 + 9) / 119][Stage 201:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.19625827 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 03:01:18 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:54560) dropped. RpcEnv already stopped.
17/05/25 03:01:18 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:54560) dropped. RpcEnv already stopped.
17/05/25 03:01:18 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:54836) dropped. RpcEnv already stopped.
17/05/25 03:01:18 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:54836) dropped. RpcEnv already stopped.

real	10m1.754s
user	11m29.096s
sys	0m28.036s
