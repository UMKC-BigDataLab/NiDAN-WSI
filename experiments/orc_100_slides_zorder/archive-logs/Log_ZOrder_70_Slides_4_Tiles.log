Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 00:32:16 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:32:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:32:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:32:31 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 00:32:33 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:32:45 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525003233-0614).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@158cb50a

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.453614284 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========>                                            (22 + 93) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (59 + 57) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.795898674 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 48 AND partitionZIndex<=151", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=151,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.755803282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (47 + 66) / 113][Stage 2:============================>                          (58 + 55) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:==============================>                        (62 + 51) / 113][Stage 2:=================================>                     (68 + 45) / 113][Stage 2:=========================================>             (85 + 28) / 113][Stage 2:==============================================>        (95 + 18) / 113][Stage 2:================================================>     (102 + 11) / 113][Stage 2:=====================================================> (109 + 4) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:============================>                          (59 + 55) / 114][Stage 3:===============================>                       (66 + 48) / 114][Stage 3:==================================>                    (72 + 42) / 114][Stage 3:===========================================>           (90 + 24) / 114][Stage 3:================================================>     (103 + 11) / 114][Stage 3:====================================================>  (109 + 5) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.340717786 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 09 AND partitionZIndex<=212", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=212,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.610515441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (69 + 49) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (75 + 43) / 118][Stage 4:=====================================>                 (81 + 37) / 118][Stage 4:===========================================>           (93 + 25) / 118][Stage 4:===================================================>   (110 + 8) / 118][Stage 4:======================================================>(116 + 2) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:==================================>                    (74 + 45) / 119][Stage 5:===================================>                   (76 + 43) / 119][Stage 5:=======================================>               (86 + 33) / 119][Stage 5:=============================================>        (100 + 19) / 119][Stage 5:====================================================>  (114 + 5) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.4048149 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 3 AND partitionZIndex<=76", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=76,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.582889275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (71 + 47) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:====================================>                  (79 + 39) / 118][Stage 6:============================================>          (95 + 23) / 118][Stage 6:===============================================>      (104 + 14) / 118][Stage 6:===================================================>   (110 + 8) / 118][Stage 6:=====================================================> (115 + 3) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:===================================>                   (76 + 43) / 119][Stage 7:========================================>              (87 + 32) / 119][Stage 7:==============================================>       (103 + 16) / 119][Stage 7:=====================================================> (116 + 3) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.215946122 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 28 AND partitionZIndex<=231", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=231,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.536902678 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:=====================================>                 (77 + 36) / 113][Stage 8:========================================>              (84 + 29) / 113][Stage 8:============================================>          (91 + 22) / 113][Stage 8:===============================================>      (100 + 13) / 113][Stage 8:===================================================>   (106 + 7) / 113][Stage 8:======================================================>(111 + 2) / 113]                                                                                [Stage 9:==================================>                    (71 + 43) / 114][Stage 9:========================================>              (83 + 31) / 114][Stage 9:==========================================>            (89 + 25) / 114][Stage 9:==============================================>        (96 + 18) / 114][Stage 9:===================================================>   (106 + 8) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.884808291 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 51 AND partitionZIndex<=154", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=154,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.580564929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:===========================>                          (61 + 59) / 120][Stage 10:===============================>                      (71 + 49) / 120][Stage 10:===================================>                  (78 + 42) / 120][Stage 10:======================================>               (86 + 34) / 120][Stage 10:============================================>        (100 + 20) / 120][Stage 10:==================================================>   (113 + 7) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:==============================>                       (68 + 53) / 121][Stage 11:=====================================>                (83 + 38) / 121][Stage 11:===========================================>          (98 + 23) / 121][Stage 11:==============================================>      (107 + 14) / 121][Stage 11:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 4.389925028 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 72 AND partitionZIndex<=175", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=175,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.552699562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (70 + 43) / 113][Stage 12:=====================================>                (79 + 34) / 113][Stage 12:=========================================>            (86 + 27) / 113][Stage 12:=============================================>        (95 + 18) / 113][Stage 12:==================================================>   (105 + 8) / 113][Stage 12:====================================================> (109 + 4) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:=====================================>                (79 + 35) / 114][Stage 13:=======================================>              (84 + 30) / 114][Stage 13:=============================================>        (97 + 17) / 114][Stage 13:==================================================>   (106 + 8) / 114][Stage 13:=====================================================>(112 + 2) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.935399499 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 0 AND partitionZIndex<=43", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=43,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.549047255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (60 + 60) / 120][Stage 14:============================>                         (63 + 57) / 120][Stage 14:===================================>                  (79 + 41) / 120][Stage 14:==========================================>           (95 + 25) / 120][Stage 14:==================================================>   (113 + 7) / 120][Stage 14:===================================================>  (115 + 5) / 120][Stage 14:=====================================================>(119 + 1) / 120]                                                                                [Stage 15:===========================>                          (61 + 60) / 121][Stage 15:============================>                         (63 + 58) / 121][Stage 15:===============================>                      (71 + 50) / 121][Stage 15:==========================================>           (96 + 25) / 121][Stage 15:=================================================>    (112 + 9) / 121][Stage 15:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.0021534 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1  AND partitionZIndex<=4", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=4,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.59556333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:============================>                         (64 + 57) / 121][Stage 16:=====================================>                (83 + 38) / 121][Stage 16:============================================>         (99 + 22) / 121][Stage 16:====================================================> (117 + 4) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:==========================>                           (60 + 62) / 122][Stage 17:============================>                         (64 + 58) / 122][Stage 17:=======================================>              (89 + 33) / 122][Stage 17:===========================================>         (101 + 21) / 122][Stage 17:===============================================>     (110 + 12) / 122][Stage 17:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.887687367 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 32 AND partitionZIndex<=135", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=135,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.483297366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:===================================>                  (77 + 41) / 118][Stage 18:======================================>               (85 + 33) / 118][Stage 18:==============================================>      (104 + 14) / 118][Stage 18:=====================================================>(116 + 2) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:====================================>                 (81 + 38) / 119][Stage 19:=========================================>            (91 + 28) / 119][Stage 19:===============================================>     (107 + 12) / 119][Stage 19:====================================================> (115 + 4) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.089253267 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 32 AND partitionZIndex<=235", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=235,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.566086039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:============================>                         (64 + 56) / 120][Stage 20:===================================>                  (79 + 41) / 120][Stage 20:===========================================>          (97 + 23) / 120][Stage 20:====================================================> (116 + 4) / 120]                                                                                [Stage 21:==========================>                           (60 + 61) / 121][Stage 21:===============================>                      (70 + 51) / 121][Stage 21:=======================================>              (88 + 33) / 121][Stage 21:==============================================>      (106 + 15) / 121][Stage 21:===================================================>  (116 + 5) / 121][Stage 21:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.914178335 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 62 AND partitionZIndex<=165", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=165,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459593205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:======================================>               (81 + 34) / 115][Stage 22:========================================>             (87 + 28) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:===================================================>  (109 + 6) / 115]                                                                                [Stage 23:======================================>               (82 + 34) / 116][Stage 23:===========================================>          (93 + 23) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:===================================================>  (111 + 5) / 116][Stage 23:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.094235679 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 5 AND partitionZIndex<=78", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=78,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.455037837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===================================>                  (74 + 39) / 113][Stage 24:=========================================>            (87 + 26) / 113][Stage 24:==============================================>       (98 + 15) / 113][Stage 24:===================================================>  (108 + 5) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:=====================================>                (79 + 35) / 114][Stage 25:===========================================>          (92 + 22) / 114][Stage 25:==============================================>       (99 + 15) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.328165653 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 63 AND partitionZIndex<=166", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=166,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.48749137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:============================>                         (60 + 53) / 113][Stage 26:===============================>                      (66 + 47) / 113][Stage 26:========================================>             (85 + 28) / 113][Stage 26:=============================================>        (95 + 18) / 113][Stage 26:==================================================>   (105 + 8) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:============================>                         (60 + 54) / 114][Stage 27:===============================>                      (66 + 48) / 114][Stage 27:==========================================>           (90 + 24) / 114][Stage 27:====================================================> (111 + 3) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.620520901 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 9 AND partitionZIndex<=32", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=29 AND partitionZIndex<=32,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.454966656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (73 + 45) / 118][Stage 28:=====================================>                (82 + 36) / 118][Stage 28:========================================>             (89 + 29) / 118][Stage 28:===========================================>          (94 + 24) / 118][Stage 28:================================================>    (108 + 10) / 118][Stage 28:====================================================> (114 + 4) / 118]                                                                                [Stage 29:=================================>                    (74 + 45) / 119][Stage 29:====================================>                 (80 + 39) / 119][Stage 29:========================================>             (89 + 30) / 119][Stage 29:===========================================>          (95 + 24) / 119][Stage 29:=====================================================>(117 + 2) / 119][Stage 29:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.073393047 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 60 AND partitionZIndex<=163", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=163,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.480878957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (58 + 55) / 113][Stage 30:==============================>                       (64 + 49) / 113][Stage 30:======================================>               (81 + 32) / 113][Stage 30:=============================================>        (96 + 17) / 113][Stage 30:=================================================>    (104 + 9) / 113][Stage 30:====================================================> (109 + 4) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:===========================>                          (59 + 55) / 114][Stage 31:==============================>                       (65 + 49) / 114][Stage 31:========================================>             (86 + 28) / 114][Stage 31:===============================================>     (102 + 12) / 114][Stage 31:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.713056558 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 6 AND partitionZIndex<=49", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=49,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.469517358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (58 + 55) / 113][Stage 32:============================>                         (60 + 53) / 113][Stage 32:================================>                     (67 + 46) / 113][Stage 32:========================================>             (84 + 29) / 113][Stage 32:=================================================>    (104 + 9) / 113][Stage 32:====================================================> (109 + 4) / 113]                                                                                [Stage 33:=============================>                        (63 + 51) / 114][Stage 33:==================================>                   (72 + 42) / 114][Stage 33:==========================================>           (90 + 24) / 114][Stage 33:==================================================>   (106 + 8) / 114][Stage 33:=====================================================>(112 + 2) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.868890804 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 8 AND partitionZIndex<=71", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=71,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.485753143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:===============================>                      (65 + 48) / 113][Stage 34:=========================================>            (87 + 26) / 113][Stage 34:=================================================>    (104 + 9) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:=============================>                        (63 + 51) / 114][Stage 35:=======================================>              (84 + 30) / 114][Stage 35:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.125209278 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 57 AND partitionZIndex<=160", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=160,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.4344047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (70 + 43) / 113][Stage 36:=======================================>              (82 + 31) / 113][Stage 36:============================================>         (93 + 20) / 113][Stage 36:==================================================>   (106 + 7) / 113][Stage 36:====================================================> (110 + 3) / 113]                                                                                [Stage 37:=======================================>              (84 + 30) / 114][Stage 37:==============================================>       (99 + 15) / 114][Stage 37:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.914771435 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 59 AND partitionZIndex<=162", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=162,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42872453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:======================================>               (81 + 32) / 113][Stage 38:=============================================>        (95 + 18) / 113][Stage 38:===============================================>     (102 + 11) / 113][Stage 38:=====================================================>(111 + 2) / 113]                                                                                [Stage 39:===================================>                  (74 + 40) / 114][Stage 39:=======================================>              (84 + 30) / 114][Stage 39:=============================================>        (97 + 17) / 114][Stage 39:==================================================>   (106 + 8) / 114][Stage 39:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.01398989 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 12 AND partitionZIndex<=115", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=115,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.461468742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==============================>                       (65 + 50) / 115][Stage 40:==================================>                   (74 + 41) / 115][Stage 40:=========================================>            (88 + 27) / 115][Stage 40:==============================================>       (99 + 16) / 115][Stage 40:==================================================>   (107 + 8) / 115][Stage 40:====================================================> (112 + 3) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:==============================>                       (66 + 50) / 116][Stage 41:====================================>                 (79 + 37) / 116][Stage 41:===========================================>          (94 + 22) / 116][Stage 41:================================================>    (106 + 10) / 116][Stage 41:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.332878458 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 0 AND partitionZIndex<=53", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=53,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.462453903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=================================>                    (70 + 43) / 113][Stage 42:====================================>                 (76 + 37) / 113][Stage 42:=========================================>            (87 + 26) / 113][Stage 42:===============================================>     (101 + 12) / 113][Stage 42:=================================================>    (104 + 9) / 113][Stage 42:====================================================> (110 + 3) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:==================================>                   (73 + 41) / 114][Stage 43:=======================================>              (84 + 30) / 114][Stage 43:===========================================>          (92 + 22) / 114][Stage 43:===============================================>     (102 + 12) / 114][Stage 43:=================================================>    (105 + 9) / 114][Stage 43:====================================================> (111 + 3) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.288175973 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 01 AND partitionZIndex<=104", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=104,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.470228034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:=================================>                    (74 + 44) / 118][Stage 44:=====================================>                (83 + 35) / 118][Stage 44:===========================================>          (94 + 24) / 118][Stage 44:===================================================>  (112 + 6) / 118][Stage 44:====================================================> (115 + 3) / 118][Stage 44:=====================================================>(117 + 1) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:=================================>                    (74 + 45) / 119][Stage 45:=====================================>                (83 + 36) / 119][Stage 45:============================================>         (99 + 20) / 119][Stage 45:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 4.018634106 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 92 AND partitionZIndex<=195", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=195,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.452724666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (69 + 46) / 115][Stage 46:=====================================>                (80 + 35) / 115][Stage 46:==============================================>       (98 + 17) / 115][Stage 46:===================================================>  (109 + 6) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:=================================>                    (71 + 45) / 116][Stage 47:========================================>             (87 + 29) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.977175351 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 7 AND partitionZIndex<=90", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=90,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.461030139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=============================>                        (61 + 52) / 113][Stage 48:=================================>                    (70 + 43) / 113][Stage 48:========================================>             (85 + 28) / 113][Stage 48:================================================>    (103 + 10) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:============================>                         (61 + 53) / 114][Stage 49:=================================>                    (70 + 44) / 114][Stage 49:==========================================>           (89 + 25) / 114][Stage 49:================================================>    (104 + 10) / 114][Stage 49:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.387498944 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 73 AND partitionZIndex<=176", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=176,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.501394223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:============================>                         (64 + 56) / 120][Stage 50:====================================>                 (82 + 38) / 120][Stage 50:================================================>    (110 + 10) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:============================>                         (64 + 57) / 121][Stage 51:=====================================>                (85 + 36) / 121][Stage 51:=============================================>       (103 + 18) / 121][Stage 51:==================================================>   (113 + 8) / 121][Stage 51:===================================================>  (116 + 5) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.56970577 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5  AND partitionZIndex<=8", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=8,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.461232897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:===============================>                      (70 + 50) / 120][Stage 52:========================================>             (90 + 30) / 120][Stage 52:==================================================>   (112 + 8) / 120][Stage 52:====================================================> (117 + 3) / 120][Stage 52:=====================================================>(119 + 1) / 120]                                                                                [Stage 53:============================>                         (64 + 57) / 121][Stage 53:=====================================>                (85 + 36) / 121][Stage 53:=============================================>       (103 + 18) / 121][Stage 53:====================================================> (118 + 3) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.559582305 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 8 AND partitionZIndex<=51", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=51,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418367188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=================================>                    (73 + 45) / 118][Stage 54:==================================>                   (76 + 42) / 118][Stage 54:=====================================>                (83 + 35) / 118][Stage 54:===========================================>          (96 + 22) / 118][Stage 54:===============================================>     (106 + 12) / 118][Stage 54:===================================================>  (112 + 6) / 118][Stage 54:=====================================================>(117 + 1) / 118]                                                                                [Stage 55:=================================>                    (73 + 46) / 119][Stage 55:==================================>                   (76 + 43) / 119][Stage 55:======================================>               (85 + 34) / 119][Stage 55:=========================================>            (92 + 27) / 119][Stage 55:==============================================>      (105 + 14) / 119][Stage 55:===================================================>  (114 + 5) / 119][Stage 55:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.327387127 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 7 AND partitionZIndex<=80", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=80,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413142459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:=================================>                    (73 + 45) / 118][Stage 56:=====================================>                (83 + 35) / 118][Stage 56:==============================================>      (104 + 14) / 118][Stage 56:=====================================================>(116 + 2) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:==================================>                   (75 + 44) / 119][Stage 57:========================================>             (90 + 29) / 119][Stage 57:============================================>         (99 + 20) / 119]                                                                                Time elapsed: 3.103321668 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 02 AND partitionZIndex<=205", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=205,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.441403484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (58 + 55) / 113][Stage 58:============================>                         (59 + 54) / 113][Stage 58:===================================>                  (74 + 39) / 113][Stage 58:==========================================>           (89 + 24) / 113][Stage 58:===================================================>  (108 + 5) / 113]                                                                                [Stage 59:===========================>                          (59 + 55) / 114][Stage 59:================================>                     (68 + 46) / 114][Stage 59:========================================>             (86 + 28) / 114][Stage 59:==================================================>   (106 + 8) / 114][Stage 59:====================================================> (111 + 3) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.828547839 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 35 AND partitionZIndex<=138", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=138,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.455837906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:===========================>                          (61 + 59) / 120][Stage 60:====================================>                 (81 + 39) / 120][Stage 60:=============================================>       (103 + 17) / 120][Stage 60:=================================================>    (111 + 9) / 120][Stage 60:=====================================================>(119 + 1) / 120]                                                                                [Stage 61:===========================>                          (61 + 60) / 121][Stage 61:=============================>                        (65 + 56) / 121][Stage 61:====================================>                 (82 + 39) / 121][Stage 61:===========================================>         (100 + 21) / 121][Stage 61:==================================================>   (113 + 8) / 121][Stage 61:====================================================> (117 + 4) / 121][Stage 61:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.922132361 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 97 AND partitionZIndex<=200", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=200,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42123461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (69 + 46) / 115][Stage 62:======================================>               (82 + 33) / 115][Stage 62:==============================================>      (100 + 15) / 115][Stage 62:===================================================>  (110 + 5) / 115][Stage 62:=====================================================>(113 + 2) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:====================================>                 (78 + 38) / 116][Stage 63:===========================================>          (93 + 23) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:===================================================>  (110 + 6) / 116][Stage 63:===================================================>  (111 + 5) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.630296231 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 4 AND partitionZIndex<=37", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=37,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405916345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (72 + 46) / 118][Stage 64:===================================>                  (77 + 41) / 118][Stage 64:===========================================>          (94 + 24) / 118][Stage 64:=================================================>    (109 + 9) / 118]                                                                                [Stage 65:=================================>                    (74 + 45) / 119][Stage 65:======================================>               (85 + 34) / 119][Stage 65:=============================================>       (102 + 17) / 119][Stage 65:==================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.130209372 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 44 AND partitionZIndex<=247", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=247,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427507218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (74 + 41) / 115][Stage 66:==========================================>           (91 + 24) / 115][Stage 66:===============================================>     (104 + 11) / 115]                                                                                [Stage 67:=================================>                    (72 + 44) / 116][Stage 67:==========================================>           (91 + 25) / 116][Stage 67:=============================================>       (100 + 16) / 116][Stage 67:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.801010665 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 81 AND partitionZIndex<=184", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=184,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384882571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:=====================================>                (79 + 34) / 113][Stage 68:===========================================>          (92 + 21) / 113][Stage 68:=============================================>        (96 + 17) / 113][Stage 68:=================================================>    (104 + 9) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:====================================>                 (76 + 38) / 114][Stage 69:=======================================>              (84 + 30) / 114][Stage 69:============================================>         (93 + 21) / 114][Stage 69:================================================>    (104 + 10) / 114][Stage 69:====================================================> (111 + 3) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.329141919 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 27 AND partitionZIndex<=130", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=130,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415939759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=======================================>              (83 + 30) / 113][Stage 70:===========================================>          (90 + 23) / 113][Stage 70:=================================================>    (104 + 9) / 113]                                                                                [Stage 71:=====================================>                (80 + 34) / 114][Stage 71:==========================================>           (90 + 24) / 114][Stage 71:==============================================>       (98 + 16) / 114][Stage 71:================================================>    (104 + 10) / 114][Stage 71:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.011939091 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 91 AND partitionZIndex<=194", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=191 AND partitionZIndex<=194,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.46085033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==========================>                           (60 + 61) / 121][Stage 72:=============================>                        (67 + 54) / 121][Stage 72:=======================================>              (89 + 32) / 121][Stage 72:===============================================>     (109 + 12) / 121][Stage 72:====================================================> (117 + 4) / 121]                                                                                [Stage 73:===========================>                          (61 + 61) / 122][Stage 73:=============================>                        (67 + 55) / 122][Stage 73:======================================>               (88 + 34) / 122][Stage 73:==============================================>      (106 + 16) / 122][Stage 73:====================================================> (118 + 4) / 122][Stage 73:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.7783882 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 15 AND partitionZIndex<=218", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=215 AND partitionZIndex<=218,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.435603069 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:===========================>                          (61 + 60) / 121][Stage 74:================================>                     (73 + 48) / 121][Stage 74:======================================>               (87 + 34) / 121][Stage 74:==============================================>      (106 + 15) / 121][Stage 74:=====================================================>(119 + 2) / 121]                                                                                [Stage 75:===========================>                          (61 + 61) / 122][Stage 75:============================>                         (64 + 58) / 122][Stage 75:==================================>                   (77 + 45) / 122][Stage 75:=========================================>            (93 + 29) / 122][Stage 75:===================================================>  (117 + 5) / 122][Stage 75:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.722780306 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 41 AND partitionZIndex<=244", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=244,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438595513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:==============================>                       (68 + 52) / 120][Stage 76:=====================================>                (84 + 36) / 120][Stage 76:============================================>         (99 + 21) / 120][Stage 76:===================================================>  (115 + 5) / 120]                                                                                [Stage 77:===========================>                          (61 + 60) / 121][Stage 77:=============================>                        (65 + 56) / 121][Stage 77:====================================>                 (81 + 40) / 121][Stage 77:============================================>         (99 + 22) / 121][Stage 77:===================================================>  (115 + 6) / 121][Stage 77:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.17877462 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 4 AND partitionZIndex<=97", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=97,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395318004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==================================>                   (75 + 43) / 118][Stage 78:===================================>                  (78 + 40) / 118][Stage 78:===========================================>          (94 + 24) / 118][Stage 78:================================================>    (107 + 11) / 118][Stage 78:====================================================> (114 + 4) / 118]                                                                                [Stage 79:=================================>                    (74 + 45) / 119][Stage 79:====================================>                 (81 + 38) / 119][Stage 79:=========================================>            (91 + 28) / 119][Stage 79:============================================>        (100 + 19) / 119][Stage 79:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.552975107 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 5 AND partitionZIndex<=98", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=98,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383556525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=====================================>                (81 + 37) / 118][Stage 80:==========================================>           (92 + 26) / 118][Stage 80:================================================>    (108 + 10) / 118][Stage 80:=====================================================>(116 + 2) / 118]                                                                                [Stage 81:==================================>                   (76 + 43) / 119][Stage 81:=======================================>              (88 + 31) / 119][Stage 81:============================================>        (101 + 18) / 119][Stage 81:====================================================> (115 + 4) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.408336013 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 20 AND partitionZIndex<=223", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=223,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383703105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:=================================>                    (73 + 45) / 118][Stage 82:===================================>                  (77 + 41) / 118][Stage 82:=====================================>                (83 + 35) / 118][Stage 82:==========================================>           (92 + 26) / 118][Stage 82:==================================================>   (111 + 7) / 118][Stage 82:=====================================================>(116 + 2) / 118]                                                                                [Stage 83:==================================>                   (75 + 44) / 119][Stage 83:====================================>                 (81 + 38) / 119][Stage 83:=======================================>              (88 + 31) / 119][Stage 83:==============================================>      (105 + 14) / 119][Stage 83:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.610134006 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 00 AND partitionZIndex<=203", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=203,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.423619167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:==================================>                   (76 + 44) / 120][Stage 84:========================================>             (89 + 31) / 120][Stage 84:===============================================>     (108 + 12) / 120]                                                                                [Stage 85:===========================>                          (62 + 59) / 121][Stage 85:==============================>                       (68 + 53) / 121][Stage 85:====================================>                 (82 + 39) / 121][Stage 85:=============================================>       (104 + 17) / 121][Stage 85:=====================================================>(119 + 2) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.608967378 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 11 AND partitionZIndex<=214", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=214,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421380642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 59) / 120][Stage 86:==================================>                   (77 + 43) / 120][Stage 86:===========================================>          (97 + 23) / 120][Stage 86:===================================================>  (115 + 5) / 120]                                                                                [Stage 87:===========================>                          (62 + 59) / 121][Stage 87:=============================>                        (66 + 55) / 121][Stage 87:=========================================>            (92 + 29) / 121][Stage 87:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.227862555 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 47 AND partitionZIndex<=150", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=150,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391783636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==================================>                   (73 + 42) / 115][Stage 88:==========================================>           (90 + 25) / 115][Stage 88:==================================================>   (108 + 7) / 115][Stage 88:=====================================================>(114 + 1) / 115]                                                                                [Stage 89:=================================>                    (71 + 45) / 116][Stage 89:======================================>               (83 + 33) / 116][Stage 89:==============================================>      (102 + 14) / 116][Stage 89:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.708787714 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 25 AND partitionZIndex<=228", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=228,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365984774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (71 + 42) / 113][Stage 90:========================================>             (84 + 29) / 113][Stage 90:===========================================>          (92 + 21) / 113][Stage 90:===============================================>     (102 + 11) / 113][Stage 90:====================================================> (109 + 4) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:========================================>             (85 + 29) / 114][Stage 91:============================================>         (93 + 21) / 114][Stage 91:=================================================>    (105 + 9) / 114][Stage 91:===================================================>  (109 + 5) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.327643142 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 1 AND partitionZIndex<=14", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=14,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.425924468 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (61 + 60) / 121][Stage 92:=============================>                        (65 + 56) / 121][Stage 92:=======================================>              (88 + 33) / 121][Stage 92:================================================>    (110 + 11) / 121]                                                                                [Stage 93:===========================>                          (61 + 61) / 122][Stage 93:=============================>                        (67 + 55) / 122][Stage 93:====================================>                 (83 + 39) / 122][Stage 93:==============================================>      (106 + 16) / 122][Stage 93:====================================================> (119 + 3) / 122][Stage 93:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.594222395 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 3 AND partitionZIndex<=86", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=86,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382378279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (72 + 46) / 118][Stage 94:==================================>                   (75 + 43) / 118][Stage 94:======================================>               (85 + 33) / 118][Stage 94:==============================================>      (104 + 14) / 118][Stage 94:====================================================> (114 + 4) / 118]                                                                                [Stage 95:=================================>                    (73 + 46) / 119][Stage 95:==================================>                   (76 + 43) / 119][Stage 95:===========================================>          (96 + 23) / 119][Stage 95:================================================>    (108 + 11) / 119][Stage 95:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.147784011 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 1 AND partitionZIndex<=54", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=54,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383735921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (73 + 42) / 115][Stage 96:=======================================>              (84 + 31) / 115][Stage 96:==============================================>      (101 + 14) / 115][Stage 96:====================================================> (111 + 4) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:================================>                     (70 + 46) / 116][Stage 97:========================================>             (87 + 29) / 116][Stage 97:==============================================>       (99 + 17) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:====================================================> (112 + 4) / 116][Stage 97:=====================================================>(114 + 2) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.967530074 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 08 AND partitionZIndex<=211", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=211,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.355350976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (82 + 33) / 115][Stage 98:=========================================>            (88 + 27) / 115][Stage 98:================================================>    (105 + 10) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=====================================>                (81 + 35) / 116][Stage 99:==========================================>           (92 + 24) / 116][Stage 99:================================================>    (106 + 10) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.569963778 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 28 AND partitionZIndex<=131", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=131,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382083677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==============================>                      (66 + 49) / 115][Stage 100:=================================>                   (73 + 42) / 115][Stage 100:===========================================>         (95 + 20) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:===============================>                     (69 + 47) / 116][Stage 101:=======================================>             (86 + 30) / 116][Stage 101:==========================================>          (92 + 24) / 116][Stage 101:==============================================>     (104 + 12) / 116][Stage 101:==================================================>  (111 + 5) / 116][Stage 101:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.208396152 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 99 AND partitionZIndex<=202", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=202,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42893571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 61) / 121][Stage 102:============================>                        (66 + 55) / 121][Stage 102:=================================>                   (77 + 44) / 121][Stage 102:==========================================>          (98 + 23) / 121][Stage 102:=================================================>   (113 + 8) / 121]                                                                                [Stage 103:==========================>                          (61 + 61) / 122][Stage 103:===============================>                     (73 + 49) / 122][Stage 103:=========================================>           (95 + 27) / 122][Stage 103:==============================================>     (110 + 12) / 122][Stage 103:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.661830295 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 98 AND partitionZIndex<=201", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=201,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.378455891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:===================================>                 (79 + 39) / 118][Stage 104:===========================================>         (97 + 21) / 118][Stage 104:=================================================>   (110 + 8) / 118]                                                                                [Stage 105:=================================>                   (75 + 44) / 119][Stage 105:===================================>                 (80 + 39) / 119][Stage 105:============================================>       (101 + 18) / 119][Stage 105:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.091586181 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9  AND partitionZIndex<=12", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=12,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387283744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (73 + 45) / 118][Stage 106:=================================>                   (75 + 43) / 118][Stage 106:====================================>                (81 + 37) / 118][Stage 106:============================================>        (99 + 19) / 118][Stage 106:=================================================>   (110 + 8) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:==================================>                  (77 + 42) / 119][Stage 107:=======================================>             (89 + 30) / 119][Stage 107:===============================================>    (109 + 10) / 119][Stage 107:===================================================> (116 + 3) / 119][Stage 107:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.668526175 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 7 AND partitionZIndex<=100", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=100,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360663841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:====================================>                (77 + 36) / 113][Stage 108:=======================================>             (84 + 29) / 113][Stage 108:============================================>        (95 + 18) / 113][Stage 108:==================================================>  (108 + 5) / 113]                                                                                [Stage 109:===================================>                 (76 + 38) / 114][Stage 109:=======================================>             (86 + 28) / 114][Stage 109:==============================================>     (101 + 13) / 114][Stage 109:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.938646754 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 2 AND partitionZIndex<=35", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=35,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407584054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:============================>                        (65 + 55) / 120][Stage 110:=======================================>             (89 + 31) / 120][Stage 110:=================================================>   (111 + 9) / 120][Stage 110:====================================================>(118 + 2) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:==============================>                      (70 + 51) / 121][Stage 111:======================================>              (89 + 32) / 121][Stage 111:===============================================>    (111 + 10) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.366375516 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 8 AND partitionZIndex<=81", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=81,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.337389164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:====================================>                (80 + 35) / 115][Stage 112:======================================>              (83 + 32) / 115][Stage 112:============================================>        (96 + 19) / 115][Stage 112:===================================================> (111 + 4) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:=====================================>               (82 + 34) / 116][Stage 113:=========================================>           (90 + 26) / 116][Stage 113:===============================================>    (105 + 11) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.84462006 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 11 AND partitionZIndex<=114", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=114,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409257156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=====================================>               (81 + 34) / 115][Stage 114:=========================================>           (89 + 26) / 115][Stage 114:==============================================>     (102 + 13) / 115][Stage 114:===================================================> (111 + 4) / 115]                                                                                [Stage 115:=======================================>             (86 + 30) / 116][Stage 115:==============================================>     (104 + 12) / 116][Stage 115:=================================================>   (109 + 7) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.745929043 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 7 AND partitionZIndex<=70", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=70,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.374930321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=============================>                       (64 + 51) / 115][Stage 116:====================================>                (79 + 36) / 115][Stage 116:============================================>        (96 + 19) / 115][Stage 116:=================================================>   (107 + 8) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:=====================================>               (81 + 35) / 116][Stage 117:============================================>        (98 + 18) / 116][Stage 117:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.822485999 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 70 AND partitionZIndex<=173", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=173,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366584209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:===================================>                 (80 + 38) / 118][Stage 118:============================================>        (98 + 20) / 118][Stage 118:==================================================>  (112 + 6) / 118]                                                                                [Stage 119:================================>                    (74 + 45) / 119][Stage 119:====================================>                (82 + 37) / 119][Stage 119:=========================================>           (94 + 25) / 119][Stage 119:===============================================>    (109 + 10) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.206623571 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 31 AND partitionZIndex<=134", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=134,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.363417523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:================================>                    (72 + 46) / 118][Stage 120:=================================>                   (75 + 43) / 118][Stage 120:===================================>                 (80 + 38) / 118][Stage 120:===========================================>         (96 + 22) / 118][Stage 120:==============================================>     (106 + 12) / 118][Stage 120:===================================================> (114 + 4) / 118]                                                                                [Stage 121:=================================>                   (75 + 44) / 119][Stage 121:===================================>                 (79 + 40) / 119][Stage 121:=====================================>               (85 + 34) / 119][Stage 121:=============================================>      (104 + 15) / 119][Stage 121:==================================================>  (113 + 6) / 119][Stage 121:====================================================>(117 + 2) / 119][Stage 121:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.98384333 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 09 AND partitionZIndex<=112", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=112,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.335058038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=======================================>             (86 + 29) / 115][Stage 122:=============================================>       (99 + 16) / 115][Stage 122:=================================================>   (108 + 7) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=======================================>             (87 + 29) / 116][Stage 123:=============================================>      (101 + 15) / 116][Stage 123:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.749327794 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 9 AND partitionZIndex<=92", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=92,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396701974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 61) / 121][Stage 124:=============================>                       (68 + 53) / 121][Stage 124:=====================================>               (85 + 36) / 121][Stage 124:============================================>       (104 + 17) / 121][Stage 124:====================================================>(119 + 2) / 121]                                                                                [Stage 125:==========================>                          (61 + 61) / 122][Stage 125:============================>                        (66 + 56) / 122][Stage 125:===================================>                 (81 + 41) / 122][Stage 125:============================================>       (104 + 18) / 122][Stage 125:====================================================>(120 + 2) / 122][Stage 125:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.336539478 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 67 AND partitionZIndex<=170", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=170,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390434543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=============================>                       (64 + 51) / 115][Stage 126:==================================>                  (75 + 40) / 115][Stage 126:==========================================>          (93 + 22) / 115][Stage 126:==============================================>     (103 + 12) / 115][Stage 126:===================================================> (111 + 4) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:====================================>                (80 + 36) / 116][Stage 127:==========================================>          (93 + 23) / 116][Stage 127:===============================================>    (106 + 10) / 116][Stage 127:==================================================>  (111 + 5) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.305911827 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 6 AND partitionZIndex<=89", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=89,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383364552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (72 + 46) / 118][Stage 128:==================================>                  (76 + 42) / 118][Stage 128:===================================>                 (78 + 40) / 118][Stage 128:======================================>              (85 + 33) / 118][Stage 128:=============================================>      (104 + 14) / 118][Stage 128:====================================================>(117 + 1) / 118]                                                                                [Stage 129:================================>                    (74 + 45) / 119][Stage 129:==================================>                  (77 + 42) / 119][Stage 129:======================================>              (87 + 32) / 119][Stage 129:========================================>            (90 + 29) / 119][Stage 129:=============================================>      (104 + 15) / 119][Stage 129:===================================================> (116 + 3) / 119][Stage 129:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.794707836 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 42 AND partitionZIndex<=145", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=145,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413434338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 61) / 121][Stage 130:=============================>                       (67 + 54) / 121][Stage 130:======================================>              (89 + 32) / 121][Stage 130:=============================================>      (107 + 14) / 121][Stage 130:====================================================>(119 + 2) / 121]                                                                                [Stage 131:==========================>                          (61 + 61) / 122][Stage 131:==========================>                          (62 + 60) / 122][Stage 131:===============================>                     (73 + 49) / 122][Stage 131:=========================================>           (95 + 27) / 122][Stage 131:=================================================>   (113 + 9) / 122][Stage 131:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.473166935 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7  AND partitionZIndex<=10", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=10,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377750062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (58 + 55) / 113][Stage 132:=================================>                   (72 + 41) / 113][Stage 132:============================================>        (94 + 19) / 113]                                                                                [Stage 133:============================>                        (62 + 52) / 114][Stage 133:===============================>                     (68 + 46) / 114][Stage 133:=======================================>             (86 + 28) / 114][Stage 133:==============================================>      (99 + 15) / 114][Stage 133:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 4.413337218 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 8 AND partitionZIndex<=21", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=21,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39641001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 61) / 121][Stage 134:============================>                        (64 + 57) / 121][Stage 134:==================================>                  (78 + 43) / 121][Stage 134:==============================================>     (108 + 13) / 121]                                                                                [Stage 135:==========================>                          (61 + 61) / 122][Stage 135:=============================>                       (67 + 55) / 122][Stage 135:======================================>              (88 + 34) / 122][Stage 135:==============================================>     (109 + 13) / 122][Stage 135:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.244122432 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 14 AND partitionZIndex<=117", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=117,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358863672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (73 + 45) / 118][Stage 136:==================================>                  (77 + 41) / 118][Stage 136:======================================>              (85 + 33) / 118][Stage 136:=========================================>           (93 + 25) / 118][Stage 136:=================================================>   (111 + 7) / 118]                                                                                [Stage 137:================================>                    (74 + 45) / 119][Stage 137:====================================>                (81 + 38) / 119][Stage 137:=========================================>           (94 + 25) / 119][Stage 137:============================================>       (101 + 18) / 119][Stage 137:=================================================>   (112 + 7) / 119][Stage 137:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.938830035 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 5 AND partitionZIndex<=68", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=68,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404273341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (82 + 33) / 115][Stage 138:===========================================>         (95 + 20) / 115][Stage 138:==================================================>  (109 + 6) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:======================================>              (84 + 32) / 116][Stage 139:==========================================>          (92 + 24) / 116][Stage 139:==============================================>     (103 + 13) / 116][Stage 139:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.890584499 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 15 AND partitionZIndex<=118", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=118,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380698245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:============================>                        (61 + 52) / 113][Stage 140:==================================>                  (74 + 39) / 113][Stage 140:==========================================>          (91 + 22) / 113][Stage 140:==================================================>  (107 + 6) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:===========================>                         (59 + 55) / 114][Stage 141:================================>                    (69 + 45) / 114][Stage 141:======================================>              (83 + 31) / 114][Stage 141:===============================================>    (104 + 10) / 114][Stage 141:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.274140325 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 7 AND partitionZIndex<=20", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=20,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391718561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (62 + 58) / 120][Stage 142:================================>                    (73 + 47) / 120][Stage 142:==========================================>          (96 + 24) / 120][Stage 142:=================================================>   (111 + 9) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:=============================>                       (68 + 53) / 121][Stage 143:===================================>                 (81 + 40) / 121][Stage 143:===========================================>        (102 + 19) / 121][Stage 143:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.20867106 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 4 AND partitionZIndex<=77", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=77,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396394708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:=============================>                       (66 + 54) / 120][Stage 144:==================================>                  (78 + 42) / 120][Stage 144:===========================================>        (101 + 19) / 120][Stage 144:====================================================>(119 + 1) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:=============================>                       (68 + 53) / 121][Stage 145:======================================>              (87 + 34) / 121][Stage 145:==================================================>  (116 + 5) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.425889788 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 3 AND partitionZIndex<=46", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=46,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394794944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:==============================>                      (70 + 51) / 121][Stage 146:========================================>            (92 + 29) / 121][Stage 146:=================================================>   (113 + 8) / 121][Stage 146:===================================================> (118 + 3) / 121]                                                                                [Stage 147:==========================>                          (61 + 61) / 122][Stage 147:============================>                        (66 + 56) / 122][Stage 147:==================================>                  (79 + 43) / 122][Stage 147:============================================>       (105 + 17) / 122][Stage 147:===================================================> (119 + 3) / 122][Stage 147:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.553437099 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 0 AND partitionZIndex<=73", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=73,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.336955396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=======================================>             (85 + 30) / 115][Stage 148:============================================>        (97 + 18) / 115][Stage 148:===================================================> (111 + 4) / 115]                                                                                [Stage 149:=====================================>               (81 + 35) / 116][Stage 149:=========================================>           (90 + 26) / 116][Stage 149:=============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.403435736 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 9 AND partitionZIndex<=72", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=72,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36591426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:===================================>                 (78 + 40) / 118][Stage 150:==========================================>          (95 + 23) / 118][Stage 150:==================================================>  (112 + 6) / 118][Stage 150:====================================================>(117 + 1) / 118]                                                                                [Stage 151:================================>                    (73 + 46) / 119][Stage 151:===================================>                 (79 + 40) / 119][Stage 151:==========================================>          (96 + 23) / 119][Stage 151:=================================================>   (111 + 8) / 119][Stage 151:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.114217419 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 35 AND partitionZIndex<=238", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=238,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.357653906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=================================>                   (72 + 41) / 113][Stage 152:======================================>              (83 + 30) / 113][Stage 152:===========================================>         (93 + 20) / 113][Stage 152:===============================================>    (103 + 10) / 113][Stage 152:===================================================> (110 + 3) / 113]                                                                                [Stage 153:======================================>              (83 + 31) / 114][Stage 153:==========================================>          (91 + 23) / 114][Stage 153:==============================================>     (101 + 13) / 114][Stage 153:=================================================>   (106 + 8) / 114][Stage 153:===================================================> (110 + 4) / 114][Stage 153:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.397852448 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 6 AND partitionZIndex<=29", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=29,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381184442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (58 + 55) / 113][Stage 154:=================================>                   (71 + 42) / 113][Stage 154:===========================================>         (92 + 21) / 113][Stage 154:====================================================>(111 + 2) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:===============================>                     (68 + 46) / 114][Stage 155:=======================================>             (85 + 29) / 114][Stage 155:============================================>        (95 + 19) / 114][Stage 155:================================================>    (105 + 9) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.573239511 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 55 AND partitionZIndex<=158", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=158,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392768679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:===========================>                         (63 + 57) / 120][Stage 156:==================================>                  (79 + 41) / 120][Stage 156:===========================================>        (100 + 20) / 120][Stage 156:===================================================> (116 + 4) / 120]                                                                                [Stage 157:=============================>                       (67 + 54) / 121][Stage 157:================================>                    (75 + 46) / 121][Stage 157:==============================================>     (109 + 12) / 121][Stage 157:====================================================>(119 + 2) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.551760153 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 75 AND partitionZIndex<=178", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=178,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.352048197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:===================================>                 (75 + 38) / 113][Stage 158:======================================>              (83 + 30) / 113][Stage 158:=============================================>       (96 + 17) / 113][Stage 158:===============================================>    (103 + 10) / 113][Stage 158:===================================================> (109 + 4) / 113]                                                                                [Stage 159:====================================>                (78 + 36) / 114][Stage 159:==========================================>          (92 + 22) / 114][Stage 159:==============================================>     (103 + 11) / 114][Stage 159:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.993405298 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 14 AND partitionZIndex<=217", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=217,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395994123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 59) / 120][Stage 160:===============================>                     (71 + 49) / 120][Stage 160:========================================>            (92 + 28) / 120][Stage 160:=================================================>   (112 + 8) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:==============================>                      (69 + 52) / 121][Stage 161:======================================>              (89 + 32) / 121][Stage 161:===============================================>    (111 + 10) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.627726439 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 04 AND partitionZIndex<=207", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=207,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353083937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:>                                                      (0 + 0) / 113][Stage 162:==================================>                  (74 + 39) / 113][Stage 162:=======================================>             (84 + 29) / 113][Stage 162:===========================================>         (92 + 21) / 113][Stage 162:=============================================>       (98 + 15) / 113][Stage 162:===================================================> (109 + 4) / 113]                                                                                [Stage 163:==================================>                  (74 + 40) / 114][Stage 163:=======================================>             (85 + 29) / 114][Stage 163:=============================================>       (98 + 16) / 114][Stage 163:================================================>    (105 + 9) / 114][Stage 163:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.305634065 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 66 AND partitionZIndex<=169", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=169,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391795535 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:==============================>                      (68 + 52) / 120][Stage 164:======================================>              (87 + 33) / 120][Stage 164:===============================================>    (110 + 10) / 120][Stage 164:====================================================>(119 + 1) / 120]                                                                                [Stage 165:==========================>                          (61 + 60) / 121][Stage 165:==============================>                      (70 + 51) / 121][Stage 165:===================================>                 (82 + 39) / 121][Stage 165:=============================================>      (105 + 16) / 121][Stage 165:====================================================>(119 + 2) / 121][Stage 165:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.395932978 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 01 AND partitionZIndex<=204", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=204,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.340474617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:====================================>                (80 + 35) / 115][Stage 166:=========================================>           (90 + 25) / 115][Stage 166:==============================================>     (103 + 12) / 115][Stage 166:===================================================> (112 + 3) / 115]                                                                                [Stage 167:=====================================>               (81 + 35) / 116][Stage 167:========================================>            (89 + 27) / 116][Stage 167:=============================================>      (102 + 14) / 116][Stage 167:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.552353093 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 03 AND partitionZIndex<=206", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=206,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381128039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:============================>                        (61 + 52) / 113][Stage 168:=====================================>               (80 + 33) / 113][Stage 168:===============================================>    (103 + 10) / 113][Stage 168:==================================================>  (108 + 5) / 113]                                                                                [Stage 169:=============================>                       (63 + 51) / 114][Stage 169:=================================>                   (73 + 41) / 114][Stage 169:=======================================>             (85 + 29) / 114][Stage 169:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.188468654 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 7 AND partitionZIndex<=60", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=60,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406363316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:============================>                        (64 + 56) / 120][Stage 170:================================>                    (74 + 46) / 120][Stage 170:======================================>              (88 + 32) / 120][Stage 170:===============================================>    (110 + 10) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:==========================>                          (61 + 60) / 121][Stage 171:===========================>                         (63 + 58) / 121][Stage 171:==================================>                  (78 + 43) / 121][Stage 171:========================================>            (92 + 29) / 121][Stage 171:==============================================>     (108 + 13) / 121][Stage 171:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.55834709 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 38 AND partitionZIndex<=241", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=241,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380063696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (58 + 55) / 113][Stage 172:==============================>                      (65 + 48) / 113][Stage 172:====================================>                (78 + 35) / 113][Stage 172:============================================>        (94 + 19) / 113][Stage 172:===================================================> (110 + 3) / 113]                                                                                [Stage 173:============================>                        (62 + 52) / 114][Stage 173:=====================================>               (80 + 34) / 114][Stage 173:=============================================>       (97 + 17) / 114][Stage 173:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.290818581 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 19 AND partitionZIndex<=222", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=222,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39648594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (58 + 55) / 113][Stage 174:===============================>                     (67 + 46) / 113][Stage 174:=====================================>               (79 + 34) / 113][Stage 174:=============================================>       (96 + 17) / 113][Stage 174:===================================================> (110 + 3) / 113]                                                                                [Stage 175:=============================>                       (63 + 51) / 114][Stage 175:======================================>              (82 + 32) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:===================================================> (110 + 4) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.412590721 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 40 AND partitionZIndex<=143", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=143,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404789032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:======================================>              (83 + 32) / 115][Stage 176:=============================================>       (98 + 17) / 115][Stage 176:==================================================>  (109 + 6) / 115][Stage 176:====================================================>(113 + 2) / 115]                                                                                [Stage 177:=====================================>               (81 + 35) / 116][Stage 177:=======================================>             (87 + 29) / 116][Stage 177:=============================================>      (102 + 14) / 116][Stage 177:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.794570802 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 20 AND partitionZIndex<=123", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=123,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393104253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (58 + 55) / 113][Stage 178:===============================>                     (68 + 45) / 113][Stage 178:======================================>              (82 + 31) / 113][Stage 178:============================================>        (95 + 18) / 113][Stage 178:===================================================> (109 + 4) / 113]                                                                                [Stage 179:===========================>                         (60 + 54) / 114][Stage 179:================================>                    (70 + 44) / 114][Stage 179:=====================================>               (80 + 34) / 114][Stage 179:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.369615527 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 24 AND partitionZIndex<=127", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=127,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.35121833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 43) / 113][Stage 180:=====================================>               (80 + 33) / 113][Stage 180:==========================================>          (90 + 23) / 113][Stage 180:==============================================>     (101 + 12) / 113][Stage 180:===================================================> (110 + 3) / 113]                                                                                [Stage 181:=====================================>               (81 + 33) / 114][Stage 181:==========================================>          (91 + 23) / 114][Stage 181:==============================================>     (101 + 13) / 114][Stage 181:==================================================>  (108 + 6) / 114][Stage 181:=====================================================(114 + 0) / 114]                                                                                Time elapsed: 3.059410335 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 8 AND partitionZIndex<=31", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=31,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365633671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=====================================>               (82 + 33) / 115][Stage 182:=========================================>           (89 + 26) / 115][Stage 182:==============================================>     (103 + 12) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=====================================>               (83 + 33) / 116][Stage 183:==========================================>          (94 + 22) / 116][Stage 183:============================================>       (100 + 16) / 116][Stage 183:===================================================> (112 + 4) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.580401396 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 29 AND partitionZIndex<=232", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=232,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399916703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===================================>                 (77 + 38) / 115][Stage 184:=========================================>           (91 + 24) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:====================================================>(113 + 2) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:===============================>                     (68 + 48) / 116][Stage 185:======================================>              (84 + 32) / 116][Stage 185:============================================>        (97 + 19) / 116][Stage 185:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.952437366 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 82 AND partitionZIndex<=185", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=185,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.333115622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:=======================================>             (86 + 29) / 115][Stage 186:============================================>        (97 + 18) / 115][Stage 186:===============================================>    (104 + 11) / 115][Stage 186:===================================================> (111 + 4) / 115]                                                                                [Stage 187:=====================================>               (82 + 34) / 116][Stage 187:==========================================>          (92 + 24) / 116][Stage 187:=============================================>      (102 + 14) / 116][Stage 187:===============================================>    (106 + 10) / 116][Stage 187:==================================================>  (111 + 5) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.506106135 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 39 AND partitionZIndex<=242", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=242,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383244696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (58 + 55) / 113][Stage 188:=============================>                       (62 + 51) / 113][Stage 188:===================================>                 (76 + 37) / 113][Stage 188:============================================>        (94 + 19) / 113][Stage 188:===================================================> (109 + 4) / 113]                                                                                [Stage 189:===========================>                         (59 + 55) / 114][Stage 189:==============================>                      (65 + 49) / 114][Stage 189:======================================>              (82 + 32) / 114][Stage 189:=============================================>       (97 + 17) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.131914228 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 2 AND partitionZIndex<=25", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=25,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.460680152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==================================>                  (75 + 40) / 115][Stage 190:======================================>              (84 + 31) / 115][Stage 190:=============================================>      (101 + 14) / 115][Stage 190:=================================================>   (108 + 7) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:================================>                    (72 + 44) / 116][Stage 191:========================================>            (89 + 27) / 116][Stage 191:============================================>       (100 + 16) / 116][Stage 191:=================================================>   (108 + 8) / 116][Stage 191:==================================================>  (111 + 5) / 116][Stage 191:===================================================> (112 + 4) / 116][Stage 191:====================================================>(114 + 2) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.332207507 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 89 AND partitionZIndex<=192", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=192,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364475847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=================================>                   (74 + 44) / 118][Stage 192:=======================================>             (88 + 30) / 118][Stage 192:============================================>       (101 + 17) / 118][Stage 192:===================================================> (115 + 3) / 118]                                                                                [Stage 193:=================================>                   (75 + 44) / 119][Stage 193:====================================>                (82 + 37) / 119][Stage 193:===========================================>        (100 + 19) / 119][Stage 193:================================================>    (110 + 9) / 119][Stage 193:====================================================>(117 + 2) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.534286802 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 58 AND partitionZIndex<=161", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=161,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402193623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (62 + 58) / 120][Stage 194:=================================>                   (75 + 45) / 120][Stage 194:=======================================>             (89 + 31) / 120][Stage 194:==================================================>  (114 + 6) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:==================================>                  (79 + 42) / 121][Stage 195:==========================================>          (96 + 25) / 121][Stage 195:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.249970251 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 24 AND partitionZIndex<=227", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=227,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407807791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (58 + 55) / 113][Stage 196:==============================>                      (64 + 49) / 113][Stage 196:========================================>            (86 + 27) / 113][Stage 196:==============================================>     (100 + 13) / 113][Stage 196:==================================================>  (108 + 5) / 113]                                                                                [Stage 197:============================>                        (62 + 52) / 114][Stage 197:====================================>                (78 + 36) / 114][Stage 197:==============================================>     (101 + 13) / 114][Stage 197:===================================================> (111 + 3) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.449347865 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 0 AND partitionZIndex<=63", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=63,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36094676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:======================================>              (83 + 32) / 115][Stage 198:==========================================>          (92 + 23) / 115][Stage 198:==============================================>     (103 + 12) / 115][Stage 198:===================================================> (112 + 3) / 115]                                                                                [Stage 199:========================================>            (88 + 28) / 116][Stage 199:============================================>        (97 + 19) / 116][Stage 199:=================================================>   (108 + 8) / 116][Stage 199:====================================================>(114 + 2) / 116][Stage 199:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.715375358 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 44 AND partitionZIndex<=147", 4))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=147,4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.3742578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (70 + 45) / 115][Stage 200:============================================>        (96 + 19) / 115][Stage 200:===================================================> (112 + 3) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:=====================================>               (81 + 35) / 116][Stage 201:===========================================>         (96 + 20) / 116][Stage 201:================================================>    (107 + 9) / 116][Stage 201:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.840562706 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 00:42:37 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:52274) dropped. RpcEnv already stopped.
17/05/25 00:42:37 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:52274) dropped. RpcEnv already stopped.

real	10m23.887s
user	11m32.740s
sys	0m50.272s
