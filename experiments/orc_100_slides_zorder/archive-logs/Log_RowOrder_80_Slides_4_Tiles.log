Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 02:07:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:07:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:07:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:07:32 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 02:07:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:07:45 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525020734-0623).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.342221519 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:====================>                                  (42 + 73) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.664661275 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionI ndex = 122  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 135  OR  partitionIndex = 136 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.698665941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:====================>                                  (43 + 70) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:=================================>                     (68 + 45) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:======================================>                (79 + 34) / 113][Stage 2:=========================================>             (85 + 28) / 113][Stage 2:===========================================>           (90 + 23) / 113][Stage 2:============================================>          (91 + 22) / 113][Stage 2:================================================>      (99 + 14) / 113][Stage 2:====================================================>  (108 + 5) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:==================================>                    (71 + 43) / 114][Stage 3:======================================>                (79 + 35) / 114][Stage 3:======================================>                (80 + 34) / 114][Stage 3:========================================>              (84 + 30) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:================================================>     (102 + 12) / 114][Stage 3:=====================================================> (110 + 4) / 114][Stage 3:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.358491227 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573814228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:====================================>                  (77 + 38) / 115][Stage 4:=======================================>               (82 + 33) / 115][Stage 4:==========================================>            (89 + 26) / 115][Stage 4:============================================>          (93 + 22) / 115][Stage 4:==============================================>        (97 + 18) / 115][Stage 4:===================================================>   (107 + 8) / 115]                                                                                [Stage 5:======================================>                (82 + 34) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:=============================================>         (95 + 21) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.157863343 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63  OR  partitionIndex = 77  OR  partitionIndex = 78 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 77  OR  partitionIndex = 78 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.80478159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=========================>                             (53 + 60) / 113][Stage 6:===========================>                           (57 + 56) / 113][Stage 6:=============================>                         (61 + 52) / 113][Stage 6:=================================>                     (68 + 45) / 113][Stage 6:===================================>                   (73 + 40) / 113][Stage 6:===========================================>           (89 + 24) / 113][Stage 6:================================================>     (102 + 11) / 113][Stage 6:=====================================================> (110 + 3) / 113]                                                                                [Stage 7:===========================>                           (58 + 56) / 114][Stage 7:==============================>                        (63 + 51) / 114][Stage 7:==================================>                    (72 + 42) / 114][Stage 7:========================================>              (84 + 30) / 114][Stage 7:============================================>          (92 + 22) / 114][Stage 7:=================================================>    (104 + 10) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.461877836 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 148  OR  partitionIndex = 149 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.668441293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:>                                                        (0 + 0) / 113][Stage 8:============================>                          (58 + 55) / 113][Stage 8:===============================>                       (65 + 48) / 113][Stage 8:======================================>                (79 + 34) / 113][Stage 8:============================================>          (92 + 21) / 113][Stage 8:==================================================>    (104 + 9) / 113][Stage 8:=====================================================> (109 + 4) / 113][Stage 8:======================================================>(111 + 2) / 113]                                                                                [Stage 9:===========================>                           (58 + 56) / 114][Stage 9:=============================>                         (61 + 53) / 114][Stage 9:================================>                      (67 + 47) / 114][Stage 9:======================================>                (79 + 35) / 114][Stage 9:==============================================>        (96 + 18) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.415618938 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIn dex = 32  OR  partitionIndex = 45  OR  partitionIndex = 46 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 45  OR  partitionIndex = 46 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573895662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:==============================>                       (64 + 51) / 115][Stage 10:================================>                     (69 + 46) / 115][Stage 10:====================================>                 (77 + 38) / 115][Stage 10:==========================================>           (90 + 25) / 115][Stage 10:===============================================>     (104 + 11) / 115][Stage 10:===================================================>  (109 + 6) / 115][Stage 10:===================================================>  (110 + 5) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:==============================>                       (66 + 50) / 116][Stage 11:===================================>                  (76 + 40) / 116][Stage 11:========================================>             (87 + 29) / 116][Stage 11:==========================================>           (92 + 24) / 116][Stage 11:============================================>         (96 + 20) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.210773547 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.605580703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:============================>                         (59 + 54) / 113][Stage 12:==============================>                       (63 + 50) / 113][Stage 12:===================================>                  (75 + 38) / 113][Stage 12:===========================================>          (90 + 23) / 113][Stage 12:==============================================>      (100 + 13) / 113][Stage 12:================================================>    (103 + 10) / 113][Stage 12:=====================================================>(111 + 2) / 113]                                                                                [Stage 13:===========================>                          (59 + 55) / 114][Stage 13:================================>                     (69 + 45) / 114][Stage 13:=======================================>              (83 + 31) / 114][Stage 13:============================================>         (93 + 21) / 114][Stage 13:=============================================>        (96 + 18) / 114][Stage 13:================================================>    (104 + 10) / 114][Stage 13:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.502169698 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562188531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:========================>                             (56 + 65) / 121][Stage 14:==========================>                           (60 + 61) / 121][Stage 14:=============================>                        (66 + 55) / 121][Stage 14:====================================>                 (81 + 40) / 121][Stage 14:=============================================>       (105 + 16) / 121][Stage 14:====================================================> (117 + 4) / 121]                                                                                [Stage 15:===========================>                          (62 + 60) / 122][Stage 15:==============================>                       (69 + 53) / 122][Stage 15:======================================>               (87 + 35) / 122][Stage 15:==========================================>           (96 + 26) / 122][Stage 15:================================================>    (112 + 10) / 122][Stage 15:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.773782544 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionI ndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.602780728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:===========================>                          (61 + 59) / 120][Stage 16:==================================>                   (77 + 43) / 120][Stage 16:=========================================>            (93 + 27) / 120][Stage 16:==================================================>   (112 + 8) / 120][Stage 16:====================================================> (117 + 3) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:==============================>                       (68 + 53) / 121][Stage 17:==================================>                   (78 + 43) / 121][Stage 17:===========================================>          (97 + 24) / 121][Stage 17:==================================================>   (113 + 8) / 121][Stage 17:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.880566487 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 231  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505485127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:==================================>                   (75 + 43) / 118][Stage 18:======================================>               (85 + 33) / 118][Stage 18:===========================================>          (96 + 22) / 118][Stage 18:================================================>    (108 + 10) / 118][Stage 18:====================================================> (114 + 4) / 118][Stage 18:=====================================================>(117 + 1) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:==================================>                   (75 + 44) / 119][Stage 19:====================================>                 (80 + 39) / 119][Stage 19:=========================================>            (92 + 27) / 119][Stage 19:===============================================>     (107 + 12) / 119][Stage 19:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.075424474 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionI ndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442853742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:======================================>               (81 + 34) / 115][Stage 20:=========================================>            (89 + 26) / 115][Stage 20:==============================================>       (98 + 17) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:======================================>               (83 + 33) / 116][Stage 21:===========================================>          (93 + 23) / 116][Stage 21:=================================================>    (107 + 9) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.910539333 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.547054206 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:===========================>                          (61 + 60) / 121][Stage 22:==============================>                       (69 + 52) / 121][Stage 22:=====================================>                (84 + 37) / 121][Stage 22:===========================================>         (100 + 21) / 121][Stage 22:====================================================> (118 + 3) / 121]                                                                                [Stage 23:============================>                         (64 + 58) / 122][Stage 23:================================>                     (74 + 48) / 122][Stage 23:=========================================>            (93 + 29) / 122][Stage 23:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.495721598 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionI ndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483439637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:===============================>                      (69 + 49) / 118][Stage 24:================================>                     (72 + 46) / 118][Stage 24:=====================================>                (83 + 35) / 118][Stage 24:============================================>         (98 + 20) / 118][Stage 24:====================================================> (114 + 4) / 118][Stage 24:=====================================================>(116 + 2) / 118]                                                                                [Stage 25:=================================>                    (74 + 45) / 119][Stage 25:=====================================>                (83 + 36) / 119][Stage 25:==============================================>      (104 + 15) / 119][Stage 25:====================================================> (115 + 4) / 119][Stage 25:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.648491981 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIn dex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511683745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:===========================>                          (61 + 59) / 120][Stage 26:===============================>                      (71 + 49) / 120][Stage 26:========================================>             (89 + 31) / 120][Stage 26:====================================================> (116 + 4) / 120][Stage 26:=====================================================>(119 + 1) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:===============================>                      (71 + 50) / 121][Stage 27:=========================================>            (93 + 28) / 121][Stage 27:==================================================>   (114 + 7) / 121][Stage 27:====================================================> (118 + 3) / 121][Stage 27:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.764043718 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIn dex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430344429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:=================================>                    (71 + 42) / 113][Stage 28:=========================================>            (87 + 26) / 113][Stage 28:=============================================>        (96 + 17) / 113][Stage 28:===================================================>  (107 + 6) / 113]                                                                                [Stage 29:====================================>                 (77 + 37) / 114][Stage 29:========================================>             (86 + 28) / 114][Stage 29:============================================>         (93 + 21) / 114][Stage 29:=============================================>        (97 + 17) / 114][Stage 29:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 5.476071959 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470415962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:=====================================>                (82 + 36) / 118][Stage 30:==============================================>      (103 + 15) / 118][Stage 30:==================================================>   (110 + 8) / 118]                                                                                [Stage 31:===============================>                      (70 + 49) / 119][Stage 31:===================================>                  (79 + 40) / 119][Stage 31:==========================================>           (94 + 25) / 119][Stage 31:===============================================>     (107 + 12) / 119][Stage 31:===================================================>  (114 + 5) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.732682452 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483529611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:>                                                       (0 + 0) / 115][Stage 32:======================================>               (81 + 34) / 115][Stage 32:========================================>             (86 + 29) / 115][Stage 32:=============================================>        (97 + 18) / 115][Stage 32:===================================================>  (109 + 6) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:========================================>             (86 + 30) / 116][Stage 33:===========================================>          (94 + 22) / 116][Stage 33:===============================================>     (103 + 13) / 116][Stage 33:==================================================>   (108 + 8) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.152319263 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionI ndex = 215  OR  partitionIndex = 229  OR  partitionIndex = 230 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229  OR  partitionIndex = 230 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508104444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:=============================>                        (66 + 55) / 121][Stage 34:=================================>                    (76 + 45) / 121][Stage 34:============================================>        (101 + 20) / 121][Stage 34:===================================================>  (115 + 6) / 121][Stage 34:=====================================================>(120 + 1) / 121]                                                                                [Stage 35:===========================>                          (61 + 61) / 122][Stage 35:=============================>                        (67 + 55) / 122][Stage 35:================================>                     (73 + 49) / 122][Stage 35:===========================================>         (100 + 22) / 122][Stage 35:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.643690744 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionI ndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531473834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:============================>                         (63 + 57) / 120][Stage 36:==================================>                   (76 + 44) / 120][Stage 36:==========================================>           (95 + 25) / 120][Stage 36:====================================================> (116 + 4) / 120]                                                                                [Stage 37:============================>                         (63 + 58) / 121][Stage 37:=================================>                    (75 + 46) / 121][Stage 37:===========================================>         (100 + 21) / 121][Stage 37:====================================================> (118 + 3) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.398919668 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497455001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:===============================>                      (66 + 47) / 113][Stage 38:======================================>               (81 + 32) / 113][Stage 38:===================================================>  (108 + 5) / 113]                                                                                [Stage 39:============================>                         (60 + 54) / 114][Stage 39:================================>                     (69 + 45) / 114][Stage 39:==========================================>           (89 + 25) / 114][Stage 39:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.174605752 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionI ndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492976042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===============================>                      (69 + 51) / 120][Stage 40:=======================================>              (87 + 33) / 120][Stage 40:===============================================>     (108 + 12) / 120][Stage 40:=====================================================>(118 + 2) / 120]                                                                                [Stage 41:============================>                         (64 + 57) / 121][Stage 41:====================================>                 (81 + 40) / 121][Stage 41:=============================================>       (104 + 17) / 121]                                                                                Time elapsed: 3.261050437 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIn dex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511574832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===========================>                          (61 + 59) / 120][Stage 42:===============================>                      (69 + 51) / 120][Stage 42:========================================>             (89 + 31) / 120][Stage 42:================================================>    (110 + 10) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:===============================>                      (70 + 51) / 121][Stage 43:=======================================>              (88 + 33) / 121][Stage 43:=================================================>    (112 + 9) / 121][Stage 43:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.506632495 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIn dex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472491261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:=============================>                        (67 + 54) / 121][Stage 44:=====================================>                (85 + 36) / 121][Stage 44:===============================================>     (109 + 12) / 121][Stage 44:=====================================================>(120 + 1) / 121]                                                                                [Stage 45:===========================>                          (61 + 61) / 122][Stage 45:============================>                         (65 + 57) / 122][Stage 45:================================>                     (74 + 48) / 122][Stage 45:==========================================>           (97 + 25) / 122][Stage 45:================================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.344796162 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401297785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:=================================>                    (70 + 43) / 113][Stage 46:=======================================>              (82 + 31) / 113][Stage 46:===========================================>          (90 + 23) / 113][Stage 46:==================================================>   (106 + 7) / 113][Stage 46:====================================================> (110 + 3) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:====================================>                 (78 + 36) / 114][Stage 47:========================================>             (86 + 28) / 114][Stage 47:=============================================>        (96 + 18) / 114][Stage 47:===================================================>  (108 + 6) / 114][Stage 47:====================================================> (110 + 4) / 114][Stage 47:=====================================================>(112 + 2) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.210370983 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437449443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:================================>                     (72 + 46) / 118][Stage 48:=================================>                    (74 + 44) / 118][Stage 48:======================================>               (84 + 34) / 118][Stage 48:============================================>         (97 + 21) / 118][Stage 48:====================================================> (115 + 3) / 118]                                                                                [Stage 49:=================================>                    (73 + 46) / 119][Stage 49:===================================>                  (78 + 41) / 119][Stage 49:==========================================>           (93 + 26) / 119][Stage 49:===============================================>     (107 + 12) / 119][Stage 49:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.36765249 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionI ndex = 152  OR  partitionIndex = 165  OR  partitionIndex = 166 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 152  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413968371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:======================================>               (83 + 32) / 115][Stage 50:==========================================>           (90 + 25) / 115][Stage 50:=============================================>        (97 + 18) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:======================================>               (83 + 33) / 116][Stage 51:=============================================>        (98 + 18) / 116][Stage 51:===================================================>  (111 + 5) / 116][Stage 51:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.897277654 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionI ndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408295408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:=================================>                    (71 + 42) / 113][Stage 52:====================================>                 (76 + 37) / 113][Stage 52:==========================================>           (89 + 24) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:===================================>                  (74 + 40) / 114][Stage 53:========================================>             (85 + 29) / 114][Stage 53:============================================>         (93 + 21) / 114][Stage 53:==============================================>      (101 + 13) / 114][Stage 53:===================================================>  (109 + 5) / 114][Stage 53:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.172876445 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionI ndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432037399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:============================>                         (60 + 53) / 113][Stage 54:===================================>                  (74 + 39) / 113][Stage 54:===========================================>          (90 + 23) / 113][Stage 54:=================================================>    (104 + 9) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:============================>                         (61 + 53) / 114][Stage 55:==============================>                       (64 + 50) / 114][Stage 55:==========================================>           (89 + 25) / 114][Stage 55:===============================================>     (103 + 11) / 114][Stage 55:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.62183952 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426364836 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:==============================>                       (64 + 49) / 113][Stage 56:=====================================>                (79 + 34) / 113][Stage 56:=========================================>            (87 + 26) / 113][Stage 56:===============================================>     (102 + 11) / 113][Stage 56:==================================================>   (105 + 8) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:===========================>                          (59 + 55) / 114][Stage 57:=============================>                        (62 + 52) / 114][Stage 57:====================================>                 (77 + 37) / 114][Stage 57:=============================================>        (95 + 19) / 114][Stage 57:================================================>    (104 + 10) / 114][Stage 57:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.926414938 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474449399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:=============================>                        (66 + 54) / 120][Stage 58:===================================>                  (79 + 41) / 120][Stage 58:=============================================>       (103 + 17) / 120][Stage 58:===================================================>  (115 + 5) / 120][Stage 58:=====================================================>(119 + 1) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:================================>                     (72 + 49) / 121][Stage 59:=======================================>              (89 + 32) / 121][Stage 59:==================================================>   (113 + 8) / 121][Stage 59:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.317989135 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIn dex = 39  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369780197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:=======================================>              (84 + 31) / 115][Stage 60:==============================================>       (98 + 17) / 115][Stage 60:===============================================>     (104 + 11) / 115]                                                                                [Stage 61:=======================================>              (84 + 32) / 116][Stage 61:==============================================>       (99 + 17) / 116][Stage 61:==================================================>   (108 + 8) / 116][Stage 61:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.690838614 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399414788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:======================================>               (82 + 33) / 115][Stage 62:==========================================>           (91 + 24) / 115][Stage 62:==============================================>       (99 + 16) / 115][Stage 62:====================================================> (111 + 4) / 115][Stage 62:=====================================================>(113 + 2) / 115]                                                                                [Stage 63:=========================================>            (89 + 27) / 116][Stage 63:============================================>         (95 + 21) / 116][Stage 63:===================================================>  (111 + 5) / 116][Stage 63:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.118036852 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionI ndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37401557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:>                                                       (0 + 0) / 115][Stage 64:======================================>               (82 + 33) / 115][Stage 64:==========================================>           (90 + 25) / 115][Stage 64:=============================================>        (97 + 18) / 115][Stage 64:=================================================>    (106 + 9) / 115][Stage 64:===================================================>  (110 + 5) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:======================================>               (83 + 33) / 116][Stage 65:=========================================>            (89 + 27) / 116][Stage 65:=============================================>        (98 + 18) / 116][Stage 65:==================================================>   (109 + 7) / 116][Stage 65:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.218074487 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432774395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:==============================>                       (63 + 50) / 113][Stage 66:========================================>             (84 + 29) / 113][Stage 66:=================================================>    (104 + 9) / 113][Stage 66:====================================================> (110 + 3) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:=================================>                    (71 + 43) / 114][Stage 67:========================================>             (86 + 28) / 114][Stage 67:================================================>    (104 + 10) / 114][Stage 67:=====================================================>(112 + 2) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.667028394 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391642156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:==================================>                   (76 + 42) / 118][Stage 68:====================================>                 (80 + 38) / 118][Stage 68:========================================>             (89 + 29) / 118][Stage 68:=============================================>       (102 + 16) / 118][Stage 68:=====================================================>(117 + 1) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (75 + 44) / 119][Stage 69:=====================================>                (82 + 37) / 119][Stage 69:========================================>             (89 + 30) / 119][Stage 69:===============================================>     (107 + 12) / 119][Stage 69:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.710192009 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionI ndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446287243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:================================>                     (67 + 46) / 113][Stage 70:========================================>             (85 + 28) / 113][Stage 70:==============================================>       (97 + 16) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:============================>                         (60 + 54) / 114][Stage 71:===============================>                      (66 + 48) / 114][Stage 71:====================================>                 (78 + 36) / 114][Stage 71:=============================================>        (96 + 18) / 114][Stage 71:====================================================> (111 + 3) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.389397954 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIn dex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439139175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:==========================>                           (60 + 61) / 121][Stage 72:=============================>                        (66 + 55) / 121][Stage 72:===================================>                  (80 + 41) / 121][Stage 72:============================================>         (99 + 22) / 121][Stage 72:===================================================>  (116 + 5) / 121]                                                                                [Stage 73:===========================>                          (61 + 61) / 122][Stage 73:===============================>                      (71 + 51) / 122][Stage 73:======================================>               (88 + 34) / 122][Stage 73:================================================>    (111 + 11) / 122][Stage 73:=====================================================>(120 + 2) / 122][Stage 73:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.681176717 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionInd ex = 2  OR  partitionIndex = 15  OR  partitionIndex = 16 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  partitionIndex = 15  OR  partitionIndex = 16 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440202918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:===========================>                          (61 + 60) / 121][Stage 74:===================================>                  (79 + 42) / 121][Stage 74:============================================>        (102 + 19) / 121][Stage 74:====================================================> (117 + 4) / 121]                                                                                [Stage 75:============================>                         (64 + 58) / 122][Stage 75:=================================>                    (75 + 47) / 122][Stage 75:===========================================>          (98 + 24) / 122][Stage 75:================================================>    (112 + 10) / 122][Stage 75:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.507627316 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionInd ex = 6  OR  partitionIndex = 19  OR  partitionIndex = 20 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 19  OR  partitionIndex = 20 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376545814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=====================================>                (78 + 35) / 113][Stage 76:===========================================>          (91 + 22) / 113][Stage 76:===============================================>      (99 + 14) / 113][Stage 76:=================================================>    (104 + 9) / 113][Stage 76:====================================================> (109 + 4) / 113]                                                                                [Stage 77:========================================>             (86 + 28) / 114][Stage 77:===========================================>          (91 + 23) / 114][Stage 77:==============================================>      (100 + 14) / 114][Stage 77:===================================================>  (109 + 5) / 114][Stage 77:====================================================> (111 + 3) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.187414343 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379778425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:=====================================>                (80 + 35) / 115][Stage 78:=========================================>            (89 + 26) / 115][Stage 78:===============================================>     (102 + 13) / 115][Stage 78:====================================================> (111 + 4) / 115]                                                                                [Stage 79:=======================================>              (85 + 31) / 116][Stage 79:============================================>         (95 + 21) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:====================================================> (113 + 3) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.793127091 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIn dex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363029421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:=====================================>                (80 + 35) / 115][Stage 80:==========================================>           (90 + 25) / 115][Stage 80:=============================================>        (96 + 19) / 115][Stage 80:================================================>    (105 + 10) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:========================================>             (88 + 28) / 116][Stage 81:===========================================>          (94 + 22) / 116][Stage 81:==============================================>      (102 + 14) / 116][Stage 81:==================================================>   (109 + 7) / 116][Stage 81:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.806672493 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionI ndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40521724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:=================================>                    (71 + 42) / 113][Stage 82:=========================================>            (86 + 27) / 113][Stage 82:===============================================>      (99 + 14) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:==============================>                       (64 + 50) / 114][Stage 83:===================================>                  (75 + 39) / 114][Stage 83:==============================================>       (99 + 15) / 114][Stage 83:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.437913397 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionI ndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40303841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===============================>                      (67 + 48) / 115][Stage 84:=======================================>              (84 + 31) / 115][Stage 84:============================================>         (94 + 21) / 115][Stage 84:===================================================>  (110 + 5) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:===============================>                      (68 + 48) / 116][Stage 85:=====================================>                (81 + 35) / 116][Stage 85:===========================================>          (94 + 22) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.011084189 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 118  OR  partitionIndex = 119 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 118  OR  partitionIndex = 119 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376525448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:========================================>             (86 + 29) / 115][Stage 86:=============================================>        (96 + 19) / 115][Stage 86:==================================================>   (108 + 7) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:======================================>               (82 + 34) / 116][Stage 87:==========================================>           (91 + 25) / 116][Stage 87:==============================================>      (101 + 15) / 116][Stage 87:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.721116782 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIn dex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438448562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:=====================================>                (80 + 35) / 115][Stage 88:==========================================>           (90 + 25) / 115][Stage 88:===============================================>     (103 + 12) / 115][Stage 88:====================================================> (111 + 4) / 115][Stage 88:=====================================================>(113 + 2) / 115]                                                                                [Stage 89:========================================>             (86 + 30) / 116][Stage 89:==============================================>       (99 + 17) / 116][Stage 89:====================================================> (112 + 4) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.156399165 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378032852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:=================================>                    (73 + 45) / 118][Stage 90:=====================================>                (82 + 36) / 118][Stage 90:===========================================>          (95 + 23) / 118][Stage 90:================================================>    (108 + 10) / 118][Stage 90:=====================================================>(116 + 2) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:=====================================>                (83 + 36) / 119][Stage 91:=========================================>            (92 + 27) / 119][Stage 91:=============================================>       (102 + 17) / 119][Stage 91:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.398746436 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionI ndex = 221  OR  partitionIndex = 234  OR  partitionIndex = 235 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 234  OR  partitionIndex = 235 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403668949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:==================================>                   (73 + 42) / 115][Stage 92:===========================================>          (93 + 22) / 115][Stage 92:===============================================>     (102 + 13) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:================================>                     (69 + 47) / 116][Stage 93:=====================================>                (81 + 35) / 116][Stage 93:==============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.606363287 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420447911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:==========================>                           (60 + 61) / 121][Stage 94:============================>                         (63 + 58) / 121][Stage 94:=================================>                    (74 + 47) / 121][Stage 94:============================================>         (99 + 22) / 121][Stage 94:====================================================> (117 + 4) / 121]                                                                                [Stage 95:===========================>                          (63 + 59) / 122][Stage 95:===============================>                      (71 + 51) / 122][Stage 95:=======================================>              (90 + 32) / 122][Stage 95:==============================================>      (108 + 14) / 122][Stage 95:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.638604367 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionI ndex = 104  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421445554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:=============================>                        (61 + 52) / 113][Stage 96:====================================>                 (76 + 37) / 113][Stage 96:============================================>         (94 + 19) / 113][Stage 96:===================================================>  (107 + 6) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:===========================>                          (59 + 55) / 114][Stage 97:==============================>                       (65 + 49) / 114][Stage 97:=====================================>                (79 + 35) / 114][Stage 97:============================================>         (94 + 20) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.423498345 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413997325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:============================>                         (64 + 56) / 120][Stage 98:=================================>                    (75 + 45) / 120][Stage 98:=============================================>       (102 + 18) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:===============================>                      (70 + 51) / 121][Stage 99:=======================================>              (89 + 32) / 121][Stage 99:================================================>    (110 + 11) / 121][Stage 99:=====================================================>(119 + 2) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.372012001 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionInd ex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3865315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==================================>                  (74 + 41) / 115][Stage 100:========================================>            (87 + 28) / 115][Stage 100:==============================================>     (102 + 13) / 115][Stage 100:=================================================>   (107 + 8) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:===============================>                     (69 + 47) / 116][Stage 101:=======================================>             (86 + 30) / 116][Stage 101:=============================================>       (99 + 17) / 116][Stage 101:=================================================>   (109 + 7) / 116][Stage 101:===================================================> (112 + 4) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.795771727 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359407297 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:====================================>                (80 + 35) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:============================================>        (96 + 19) / 115][Stage 102:=================================================>   (107 + 8) / 115][Stage 102:==================================================>  (109 + 6) / 115]                                                                                [Stage 103:=======================================>             (86 + 30) / 116][Stage 103:============================================>        (98 + 18) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.874290324 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionI ndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48254448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:================================>                    (71 + 44) / 115][Stage 104:=====================================>               (82 + 33) / 115][Stage 104:==============================================>     (102 + 13) / 115][Stage 104:===================================================> (111 + 4) / 115]                                                                                [Stage 105:====================================>                (80 + 36) / 116][Stage 105:===========================================>         (95 + 21) / 116][Stage 105:=================================================>   (108 + 8) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.791125064 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionI ndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409740545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:================================>                    (71 + 44) / 115][Stage 106:======================================>              (83 + 32) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:==================================================>  (110 + 5) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:===============================>                     (69 + 47) / 116][Stage 107:=======================================>             (87 + 29) / 116][Stage 107:=============================================>       (99 + 17) / 116][Stage 107:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.148603625 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIn dex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383722545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:===============================>                     (68 + 47) / 115][Stage 108:=====================================>               (81 + 34) / 115][Stage 108:=========================================>           (90 + 25) / 115][Stage 108:=================================================>   (108 + 7) / 115]                                                                                [Stage 109:====================================>                (80 + 36) / 116][Stage 109:============================================>        (98 + 18) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:==================================================>  (110 + 6) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.660220788 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionI ndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422072049 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:============================>                        (60 + 53) / 113][Stage 110:==================================>                  (74 + 39) / 113][Stage 110:=========================================>           (89 + 24) / 113][Stage 110:==================================================>  (108 + 5) / 113][Stage 110:====================================================>(111 + 2) / 113]                                                                                [Stage 111:===========================>                         (60 + 54) / 114][Stage 111:============================>                        (62 + 52) / 114][Stage 111:=====================================>               (81 + 33) / 114][Stage 111:==============================================>     (103 + 11) / 114][Stage 111:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.486500139 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionI ndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38266956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:==============================>                      (66 + 49) / 115][Stage 112:==================================>                  (74 + 41) / 115][Stage 112:=======================================>             (86 + 29) / 115][Stage 112:=================================================>   (107 + 8) / 115]                                                                                [Stage 113:===============================>                     (70 + 46) / 116][Stage 113:=======================================>             (86 + 30) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:====================================================>(114 + 2) / 116][Stage 113:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.91996292 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 171 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 171 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338620713 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:=====================================>               (81 + 34) / 115][Stage 114:=======================================>             (86 + 29) / 115][Stage 114:==============================================>     (102 + 13) / 115][Stage 114:===================================================> (112 + 3) / 115]                                                                                [Stage 115:======================================>              (84 + 32) / 116][Stage 115:========================================>            (89 + 27) / 116][Stage 115:==============================================>     (103 + 13) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.846064316 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIn dex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371874497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==============================>                      (66 + 49) / 115][Stage 116:=====================================>               (81 + 34) / 115][Stage 116:=============================================>       (99 + 16) / 115][Stage 116:==================================================>  (109 + 6) / 115]                                                                                [Stage 117:===============================>                     (70 + 46) / 116][Stage 117:=======================================>             (87 + 29) / 116][Stage 117:=============================================>      (101 + 15) / 116][Stage 117:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.87542094 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337847869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:======================================>              (83 + 32) / 115][Stage 118:=============================================>      (101 + 14) / 115][Stage 118:==================================================>  (110 + 5) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=====================================>               (83 + 33) / 116][Stage 119:=========================================>           (90 + 26) / 116][Stage 119:=================================================>   (108 + 8) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.619702134 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionI ndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380647608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:===============================>                     (68 + 47) / 115][Stage 120:====================================>                (80 + 35) / 115][Stage 120:===========================================>         (94 + 21) / 115][Stage 120:===============================================>    (105 + 10) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:================================>                    (71 + 45) / 116][Stage 121:==========================================>          (92 + 24) / 116][Stage 121:=============================================>      (102 + 14) / 116][Stage 121:===================================================> (112 + 4) / 116][Stage 121:====================================================>(114 + 2) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.38802361 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIn dex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339600774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:======================================>              (84 + 31) / 115][Stage 122:===========================================>         (95 + 20) / 115][Stage 122:==================================================>  (109 + 6) / 115]                                                                                [Stage 123:=====================================>               (83 + 33) / 116][Stage 123:============================================>        (97 + 19) / 116][Stage 123:===============================================>    (105 + 11) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.626283526 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIn dex = 74  OR  partitionIndex = 87  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 87  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405010978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:==========================>                          (60 + 60) / 120][Stage 124:===========================>                         (63 + 57) / 120][Stage 124:==================================>                  (78 + 42) / 120][Stage 124:=============================================>      (104 + 16) / 120][Stage 124:====================================================>(118 + 2) / 120]                                                                                [Stage 125:=============================>                       (68 + 53) / 121][Stage 125:===================================>                 (82 + 39) / 121][Stage 125:==========================================>          (97 + 24) / 121][Stage 125:=================================================>   (114 + 7) / 121][Stage 125:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.428183845 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40065862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:=============================>                       (63 + 50) / 113][Stage 126:=======================================>             (85 + 28) / 113][Stage 126:===============================================>    (103 + 10) / 113][Stage 126:==================================================>  (108 + 5) / 113]                                                                                [Stage 127:============================>                        (62 + 52) / 114][Stage 127:=================================>                   (73 + 41) / 114][Stage 127:==========================================>          (91 + 23) / 114][Stage 127:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.292647429 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionI ndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37667957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==============================>                      (66 + 49) / 115][Stage 128:===================================>                 (77 + 38) / 115][Stage 128:=========================================>           (91 + 24) / 115][Stage 128:===============================================>    (105 + 10) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:===============================>                     (68 + 48) / 116][Stage 129:=====================================>               (82 + 34) / 116][Stage 129:============================================>        (98 + 18) / 116][Stage 129:================================================>    (107 + 9) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.878758851 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385863743 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:=====================================>               (80 + 33) / 113][Stage 130:==========================================>          (90 + 23) / 113][Stage 130:==============================================>      (99 + 14) / 113][Stage 130:=================================================>   (106 + 7) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:=======================================>             (84 + 30) / 114][Stage 131:===========================================>         (93 + 21) / 114][Stage 131:=============================================>      (100 + 14) / 114][Stage 131:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.197560717 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionI ndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354271044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:===================================>                 (76 + 37) / 113][Stage 132:========================================>            (87 + 26) / 113][Stage 132:=============================================>       (98 + 15) / 113][Stage 132:==============================================>     (101 + 12) / 113][Stage 132:===================================================> (109 + 4) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:===================================>                 (77 + 37) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:==============================================>     (102 + 12) / 114][Stage 133:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.338894258 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionI ndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369848062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:================================>                    (72 + 46) / 118][Stage 134:=================================>                   (74 + 44) / 118][Stage 134:====================================>                (81 + 37) / 118][Stage 134:=========================================>           (92 + 26) / 118][Stage 134:===============================================>    (108 + 10) / 118][Stage 134:====================================================>(117 + 1) / 118]                                                                                [Stage 135:================================>                    (73 + 46) / 119][Stage 135:==================================>                  (78 + 41) / 119][Stage 135:=======================================>             (88 + 31) / 119][Stage 135:=============================================>      (103 + 16) / 119][Stage 135:=================================================>   (112 + 7) / 119][Stage 135:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.571885199 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIn dex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339115826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:======================================>              (83 + 32) / 115][Stage 136:==========================================>          (93 + 22) / 115][Stage 136:===================================================> (111 + 4) / 115]                                                                                [Stage 137:======================================>              (85 + 31) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:===================================================> (112 + 4) / 116][Stage 137:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.080917298 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 73  OR  partitionIndex = 115  OR  partitionIndex = 116 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 115  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335331351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:====================================>                (80 + 35) / 115][Stage 138:=======================================>             (85 + 30) / 115][Stage 138:=============================================>      (100 + 15) / 115][Stage 138:===================================================> (111 + 4) / 115]                                                                                [Stage 139:=======================================>             (86 + 30) / 116][Stage 139:=============================================>       (99 + 17) / 116][Stage 139:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.638229463 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionI ndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365624175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:================================>                    (72 + 46) / 118][Stage 140:=================================>                   (74 + 44) / 118][Stage 140:=====================================>               (84 + 34) / 118][Stage 140:============================================>        (99 + 19) / 118][Stage 140:==================================================>  (113 + 5) / 118][Stage 140:====================================================>(117 + 1) / 118]                                                                                [Stage 141:=================================>                   (75 + 44) / 119][Stage 141:===================================>                 (80 + 39) / 119][Stage 141:==========================================>          (96 + 23) / 119][Stage 141:=================================================>   (111 + 8) / 119][Stage 141:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.464873837 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIn dex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401191714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:==========================>                          (60 + 61) / 121][Stage 142:===============================>                     (73 + 48) / 121][Stage 142:========================================>            (92 + 29) / 121][Stage 142:==================================================>  (115 + 6) / 121]                                                                                [Stage 143:===========================>                         (63 + 59) / 122][Stage 143:================================>                    (75 + 47) / 122][Stage 143:===========================================>        (103 + 19) / 122][Stage 143:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.0855948 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358432825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:=================================>                   (75 + 43) / 118][Stage 144:========================================>            (90 + 28) / 118][Stage 144:===============================================>    (108 + 10) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:==================================>                  (78 + 41) / 119][Stage 145:========================================>            (91 + 28) / 119][Stage 145:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.032522105 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412731197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:===========================>                         (62 + 59) / 121][Stage 146:==================================>                  (78 + 43) / 121][Stage 146:===========================================>         (99 + 22) / 121][Stage 146:=================================================>   (114 + 7) / 121]                                                                                [Stage 147:===========================>                         (63 + 59) / 122][Stage 147:================================>                    (75 + 47) / 122][Stage 147:========================================>            (94 + 28) / 122][Stage 147:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.330720145 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337741282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:=====================================>               (81 + 34) / 115][Stage 148:========================================>            (88 + 27) / 115][Stage 148:===========================================>         (95 + 20) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:=======================================>             (87 + 29) / 116][Stage 149:============================================>       (100 + 16) / 116][Stage 149:=================================================>   (108 + 8) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(114 + 2) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.490832396 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionI ndex = 151  OR  partitionIndex = 165  OR  partitionIndex = 166 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405037604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:==========================>                          (61 + 60) / 121][Stage 150:===============================>                     (72 + 49) / 121][Stage 150:=======================================>             (91 + 30) / 121][Stage 150:==================================================>  (115 + 6) / 121]                                                                                [Stage 151:==========================>                          (61 + 61) / 122][Stage 151:===============================>                     (72 + 50) / 122][Stage 151:=======================================>             (91 + 31) / 122][Stage 151:===================================================> (118 + 4) / 122][Stage 151:====================================================>(120 + 2) / 122][Stage 151:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.60036896 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349539687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:=====================================>               (82 + 33) / 115][Stage 152:=========================================>           (89 + 26) / 115][Stage 152:==============================================>     (103 + 12) / 115][Stage 152:==================================================>  (110 + 5) / 115][Stage 152:====================================================>(114 + 1) / 115]                                                                                [Stage 153:====================================>                (80 + 36) / 116][Stage 153:==========================================>          (93 + 23) / 116][Stage 153:=============================================>      (102 + 14) / 116][Stage 153:==================================================>  (111 + 5) / 116][Stage 153:===================================================> (112 + 4) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.454002378 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408006074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==========================>                          (60 + 61) / 121][Stage 154:=============================>                       (67 + 54) / 121][Stage 154:======================================>              (89 + 32) / 121][Stage 154:=================================================>   (114 + 7) / 121][Stage 154:====================================================>(120 + 1) / 121]                                                                                [Stage 155:==========================>                          (61 + 61) / 122][Stage 155:=============================>                       (67 + 55) / 122][Stage 155:===================================>                 (81 + 41) / 122][Stage 155:===========================================>         (99 + 23) / 122][Stage 155:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.314933586 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionI ndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384815382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:==============================>                      (66 + 47) / 113][Stage 156:=======================================>             (85 + 28) / 113][Stage 156:==================================================>  (108 + 5) / 113][Stage 156:===================================================> (110 + 3) / 113]                                                                                [Stage 157:===========================>                         (59 + 55) / 114][Stage 157:================================>                    (69 + 45) / 114][Stage 157:=======================================>             (84 + 30) / 114][Stage 157:=============================================>      (100 + 14) / 114][Stage 157:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.276856389 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 91  OR  partitionIndex = 105  OR  partitionIndex = 106 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105  OR  partitionIndex = 106 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337772397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=======================================>             (85 + 30) / 115][Stage 158:=============================================>       (99 + 16) / 115][Stage 158:==================================================>  (109 + 6) / 115]                                                                                [Stage 159:=====================================>               (81 + 35) / 116][Stage 159:=======================================>             (86 + 30) / 116][Stage 159:============================================>        (98 + 18) / 116][Stage 159:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.59205103 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionI ndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391091085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:==========================>                          (61 + 59) / 120][Stage 160:==============================>                      (70 + 50) / 120][Stage 160:===================================>                 (81 + 39) / 120][Stage 160:===================================================> (116 + 4) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:============================>                        (66 + 55) / 121][Stage 161:===================================>                 (81 + 40) / 121][Stage 161:=============================================>      (106 + 15) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.050871793 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionInd ex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41044084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 61) / 121][Stage 162:===============================>                     (72 + 49) / 121][Stage 162:======================================>              (87 + 34) / 121][Stage 162:==================================================>  (115 + 6) / 121][Stage 162:====================================================>(120 + 1) / 121]                                                                                [Stage 163:==========================>                          (61 + 61) / 122][Stage 163:============================>                        (66 + 56) / 122][Stage 163:====================================>                (84 + 38) / 122][Stage 163:=============================================>      (106 + 16) / 122][Stage 163:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.260590982 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351039348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:================================>                    (70 + 43) / 113][Stage 164:=====================================>               (80 + 33) / 113][Stage 164:============================================>        (95 + 18) / 113][Stage 164:==================================================>  (108 + 5) / 113]                                                                                [Stage 165:===================================>                 (77 + 37) / 114][Stage 165:=======================================>             (86 + 28) / 114][Stage 165:=============================================>       (98 + 16) / 114][Stage 165:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.739517406 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496514732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:============================>                        (65 + 55) / 120][Stage 166:=======================================>             (90 + 30) / 120][Stage 166:=================================================>   (111 + 9) / 120]                                                                                [Stage 167:===========================>                         (63 + 58) / 121][Stage 167:================================>                    (75 + 46) / 121][Stage 167:=======================================>             (90 + 31) / 121][Stage 167:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.012443461 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396413922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:==========================>                          (61 + 59) / 120][Stage 168:================================>                    (73 + 47) / 120][Stage 168:===========================================>         (98 + 22) / 120][Stage 168:====================================================>(119 + 1) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:=============================>                       (68 + 53) / 121][Stage 169:=====================================>               (86 + 35) / 121][Stage 169:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 3.044212337 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411196578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (61 + 59) / 120][Stage 170:===============================>                     (72 + 48) / 120][Stage 170:==========================================>          (96 + 24) / 120][Stage 170:=================================================>   (111 + 9) / 120][Stage 170:====================================================>(118 + 2) / 120]                                                                                [Stage 171:==========================>                          (61 + 60) / 121][Stage 171:===============================>                     (71 + 50) / 121][Stage 171:======================================>              (87 + 34) / 121][Stage 171:===============================================>    (110 + 11) / 121][Stage 171:====================================================>(119 + 2) / 121][Stage 171:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.493667236 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIn dex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362833829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:==================================>                  (76 + 42) / 118][Stage 172:=====================================>               (84 + 34) / 118][Stage 172:==========================================>          (94 + 24) / 118][Stage 172:================================================>    (109 + 9) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (74 + 45) / 119][Stage 173:==================================>                  (77 + 42) / 119][Stage 173:======================================>              (87 + 32) / 119][Stage 173:===========================================>         (98 + 21) / 119][Stage 173:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.371884974 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 111  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 111  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346914266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:=====================================>               (80 + 33) / 113][Stage 174:=========================================>           (88 + 25) / 113][Stage 174:===============================================>    (103 + 10) / 113][Stage 174:===================================================> (109 + 4) / 113][Stage 174:====================================================>(111 + 2) / 113]                                                                                [Stage 175:===================================>                 (76 + 38) / 114][Stage 175:=========================================>           (90 + 24) / 114][Stage 175:==============================================>     (102 + 12) / 114][Stage 175:===================================================> (110 + 4) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.50443598 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionI ndex = 195  OR  partitionIndex = 207  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3403623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:=====================================>               (81 + 34) / 115][Stage 176:========================================>            (87 + 28) / 115][Stage 176:=============================================>      (100 + 15) / 115][Stage 176:==================================================>  (109 + 6) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:=====================================>               (83 + 33) / 116][Stage 177:============================================>        (97 + 19) / 116][Stage 177:================================================>    (107 + 9) / 116][Stage 177:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.721137874 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434150003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:====================================>                (78 + 35) / 113][Stage 178:=======================================>             (85 + 28) / 113][Stage 178:==============================================>      (99 + 14) / 113][Stage 178:====================================================>(111 + 2) / 113]                                                                                [Stage 179:===================================>                 (76 + 38) / 114][Stage 179:=======================================>             (85 + 29) / 114][Stage 179:==============================================>      (99 + 15) / 114][Stage 179:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.617478526 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionI ndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36375247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:=================================>                   (72 + 41) / 113][Stage 180:=====================================>               (81 + 32) / 113][Stage 180:=============================================>       (97 + 16) / 113][Stage 180:==================================================>  (107 + 6) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:===================================>                 (77 + 37) / 114][Stage 181:=======================================>             (86 + 28) / 114][Stage 181:=============================================>       (98 + 16) / 114][Stage 181:==================================================>  (108 + 6) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.885161236 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionI ndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 169 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 169 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420241427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:============================>                        (61 + 52) / 113][Stage 182:===================================>                 (75 + 38) / 113][Stage 182:==============================================>     (101 + 12) / 113][Stage 182:====================================================>(111 + 2) / 113]                                                                                [Stage 183:============================>                        (61 + 53) / 114][Stage 183:===================================>                 (76 + 38) / 114][Stage 183:============================================>        (96 + 18) / 114][Stage 183:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.252202471 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345832258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===================================>                 (75 + 38) / 113][Stage 184:=========================================>           (88 + 25) / 113][Stage 184:=============================================>       (96 + 17) / 113][Stage 184:================================================>    (104 + 9) / 113][Stage 184:====================================================>(111 + 2) / 113]                                                                                [Stage 185:======================================>              (83 + 31) / 114][Stage 185:==========================================>          (92 + 22) / 114][Stage 185:===============================================>    (104 + 10) / 114][Stage 185:==================================================>  (109 + 5) / 114][Stage 185:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.240490957 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383379223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:============================>                        (61 + 52) / 113][Stage 186:=================================>                   (72 + 41) / 113][Stage 186:=============================================>       (96 + 17) / 113][Stage 186:===================================================> (109 + 4) / 113]                                                                                [Stage 187:===========================>                         (59 + 55) / 114][Stage 187:===============================>                     (67 + 47) / 114][Stage 187:=====================================>               (80 + 34) / 114][Stage 187:================================================>    (105 + 9) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.006279623 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348859288 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:====================================>                (77 + 36) / 113][Stage 188:==========================================>          (90 + 23) / 113][Stage 188:================================================>    (104 + 9) / 113][Stage 188:==================================================>  (108 + 5) / 113][Stage 188:===================================================> (110 + 3) / 113]                                                                                [Stage 189:=====================================>               (80 + 34) / 114][Stage 189:=========================================>           (90 + 24) / 114][Stage 189:================================================>    (105 + 9) / 114][Stage 189:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.13403421 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389210143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:============================>                        (65 + 55) / 120][Stage 190:======================================>              (87 + 33) / 120][Stage 190:=================================================>   (111 + 9) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:================================>                    (75 + 46) / 121][Stage 191:=======================================>             (91 + 30) / 121][Stage 191:=============================================>      (105 + 16) / 121][Stage 191:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.264663186 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332531923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:======================================>              (83 + 32) / 115][Stage 192:==========================================>          (92 + 23) / 115][Stage 192:===============================================>    (104 + 11) / 115][Stage 192:===================================================> (112 + 3) / 115]                                                                                [Stage 193:========================================>            (88 + 28) / 116][Stage 193:============================================>        (98 + 18) / 116][Stage 193:===================================================> (112 + 4) / 116][Stage 193:====================================================>(114 + 2) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.363051858 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397729335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:==========================>                          (60 + 61) / 121][Stage 194:============================>                        (64 + 57) / 121][Stage 194:===================================>                 (82 + 39) / 121][Stage 194:==============================================>     (109 + 12) / 121][Stage 194:====================================================>(119 + 2) / 121]                                                                                [Stage 195:=============================>                       (68 + 54) / 122][Stage 195:==================================>                  (79 + 43) / 122][Stage 195:===========================================>         (99 + 23) / 122][Stage 195:=================================================>   (114 + 8) / 122][Stage 195:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.336844886 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383404498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:==============================>                      (67 + 48) / 115][Stage 196:====================================>                (79 + 36) / 115][Stage 196:===========================================>         (95 + 20) / 115][Stage 196:=================================================>   (108 + 7) / 115]                                                                                [Stage 197:==================================>                  (76 + 40) / 116][Stage 197:=========================================>           (91 + 25) / 116][Stage 197:============================================>        (97 + 19) / 116][Stage 197:===================================================> (112 + 4) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.873056351 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionI ndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404008037 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:=================================>                   (73 + 42) / 115][Stage 198:==========================================>          (92 + 23) / 115][Stage 198:===============================================>    (104 + 11) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:==================================>                  (76 + 40) / 116][Stage 199:========================================>            (88 + 28) / 116][Stage 199:===============================================>    (105 + 11) / 116][Stage 199:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.934938944 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 138 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 138 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479353205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:===========================>                         (62 + 58) / 120][Stage 200:==============================>                      (70 + 50) / 120][Stage 200:=========================================>           (95 + 25) / 120][Stage 200:==================================================>  (114 + 6) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:============================>                        (65 + 56) / 121][Stage 201:===================================>                 (81 + 40) / 121][Stage 201:===========================================>         (99 + 22) / 121][Stage 201:===================================================> (118 + 3) / 121][Stage 201:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.786799114 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m24.563s
user	11m57.232s
sys	0m55.076s
