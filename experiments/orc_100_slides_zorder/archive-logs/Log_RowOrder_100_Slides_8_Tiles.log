Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 05:18:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 05:18:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 05:18:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 05:18:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 05:18:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 05:18:53 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525051842-0641).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.383729896 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (46 + 69) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:======================================>                (81 + 34) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (109 + 6) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.567152052 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 95  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionI ndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.826017721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=============>                                         (30 + 90) / 120][Stage 2:===============>                                       (33 + 87) / 120][Stage 2:======================>                                (49 + 71) / 120][Stage 2:==========================>                            (57 + 63) / 120][Stage 2:============================>                          (63 + 57) / 120][Stage 2:=============================>                         (65 + 55) / 120][Stage 2:===================================>                   (78 + 42) / 120][Stage 2:=========================================>             (90 + 30) / 120][Stage 2:===============================================>      (106 + 14) / 120][Stage 2:=================================================>    (109 + 11) / 120][Stage 2:===================================================>   (113 + 7) / 120]                                                                                [Stage 3:===========================>                           (61 + 60) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (67 + 54) / 121][Stage 3:===================================>                   (78 + 43) / 121][Stage 3:======================================>                (84 + 37) / 121][Stage 3:===========================================>           (96 + 25) / 121][Stage 3:=================================================>    (110 + 11) / 121][Stage 3:====================================================>  (116 + 5) / 121][Stage 3:=====================================================> (118 + 3) / 121]                                                                                Time elapsed: 5.980863918 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionI ndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  parti tionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.691835735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:======================>                                (47 + 66) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:=================================>                     (68 + 45) / 113][Stage 4:===================================>                   (72 + 41) / 113][Stage 4:===========================================>           (90 + 23) / 113][Stage 4:=================================================>    (103 + 10) / 113][Stage 4:=====================================================> (109 + 4) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:============================>                          (60 + 54) / 114][Stage 5:==================================>                    (71 + 43) / 114][Stage 5:======================================>                (80 + 34) / 114][Stage 5:========================================>              (84 + 30) / 114][Stage 5:=============================================>         (94 + 20) / 114][Stage 5:====================================================>  (108 + 6) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.211857076 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  parti tionIndex = 148  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562035333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:======================================>                (80 + 35) / 115][Stage 6:========================================>              (84 + 31) / 115][Stage 6:===========================================>           (91 + 24) / 115][Stage 6:===============================================>      (101 + 14) / 115][Stage 6:====================================================>  (109 + 6) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:===========================================>           (91 + 25) / 116][Stage 7:=============================================>         (96 + 20) / 116][Stage 7:=================================================>    (106 + 10) / 116][Stage 7:====================================================>  (110 + 6) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.843863463 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionI ndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  parti tionIndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.568443619 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:================================>                      (70 + 48) / 118][Stage 8:====================================>                  (78 + 40) / 118][Stage 8:=========================================>             (90 + 28) / 118][Stage 8:==============================================>       (102 + 16) / 118][Stage 8:=====================================================> (114 + 4) / 118][Stage 8:======================================================>(117 + 1) / 118]                                                                                [Stage 9:=================================>                     (73 + 46) / 119][Stage 9:======================================>                (84 + 35) / 119][Stage 9:============================================>          (96 + 23) / 119][Stage 9:================================================>     (106 + 13) / 119][Stage 9:====================================================>  (113 + 6) / 119][Stage 9:======================================================>(117 + 2) / 119][Stage 9:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.546048041 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionI ndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.561751893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:===========================>                          (58 + 55) / 113][Stage 10:============================>                         (60 + 53) / 113][Stage 10:================================>                     (68 + 45) / 113][Stage 10:=======================================>              (82 + 31) / 113][Stage 10:==============================================>      (100 + 13) / 113]                                                                                [Stage 11:===========================>                          (59 + 55) / 114][Stage 11:===============================>                      (67 + 47) / 114][Stage 11:======================================>               (81 + 33) / 114][Stage 11:================================================>    (104 + 10) / 114][Stage 11:====================================================> (110 + 4) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.308617651 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIn dex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionI ndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.569172341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:===========================>                          (57 + 56) / 113][Stage 12:=============================>                        (62 + 51) / 113][Stage 12:==================================>                   (73 + 40) / 113][Stage 12:==========================================>           (88 + 25) / 113][Stage 12:===============================================>      (99 + 14) / 113][Stage 12:===================================================>  (107 + 6) / 113]                                                                                [Stage 13:============================>                         (61 + 53) / 114][Stage 13:================================>                     (68 + 46) / 114][Stage 13:=====================================>                (79 + 35) / 114][Stage 13:===========================================>          (91 + 23) / 114][Stage 13:==================================================>   (106 + 8) / 114][Stage 13:===================================================>  (109 + 5) / 114][Stage 13:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.964915779 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  parti tionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517484792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:=================================>                    (74 + 44) / 118][Stage 14:========================================>             (88 + 30) / 118][Stage 14:============================================>        (100 + 18) / 118][Stage 14:==================================================>   (111 + 7) / 118][Stage 14:====================================================> (115 + 3) / 118]                                                                                [Stage 15:=================================>                    (74 + 45) / 119][Stage 15:=====================================>                (82 + 37) / 119][Stage 15:===========================================>          (96 + 23) / 119][Stage 15:===============================================>     (106 + 13) / 119][Stage 15:====================================================> (115 + 4) / 119][Stage 15:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.101234621 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionI ndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  parti tionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511612827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:=================================>                    (71 + 42) / 113][Stage 16:=====================================>                (79 + 34) / 113][Stage 16:==========================================>           (88 + 25) / 113][Stage 16:==============================================>      (100 + 13) / 113][Stage 16:====================================================> (109 + 4) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:=====================================>                (79 + 35) / 114][Stage 17:===========================================>          (91 + 23) / 114][Stage 17:=============================================>        (97 + 17) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.600908447 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionInd ex = 24  OR  partitionIndex = 25  OR  partitionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449032207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:=================================>                    (71 + 42) / 113][Stage 18:=======================================>              (82 + 31) / 113][Stage 18:===========================================>          (91 + 22) / 113][Stage 18:===============================================>     (101 + 12) / 113][Stage 18:====================================================> (110 + 3) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:==================================>                   (73 + 41) / 114][Stage 19:========================================>             (85 + 29) / 114][Stage 19:===========================================>          (91 + 23) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:===============================================>     (102 + 12) / 114][Stage 19:====================================================> (111 + 3) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.255800712 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  parti tionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.551654246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:===================================>                  (74 + 39) / 113][Stage 20:=======================================>              (83 + 30) / 113][Stage 20:==========================================>           (89 + 24) / 113][Stage 20:==============================================>       (98 + 15) / 113][Stage 20:==================================================>   (105 + 8) / 113][Stage 20:====================================================> (109 + 4) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:===================================>                  (74 + 40) / 114][Stage 21:========================================>             (85 + 29) / 114][Stage 21:=============================================>        (97 + 17) / 114][Stage 21:===============================================>     (103 + 11) / 114][Stage 21:==================================================>   (106 + 8) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.998789953 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionI ndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  parti tionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479914638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:==============================>                       (65 + 50) / 115][Stage 22:===================================>                  (76 + 39) / 115][Stage 22:=========================================>            (88 + 27) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:===============================================>     (102 + 13) / 115][Stage 22:====================================================> (111 + 4) / 115][Stage 22:====================================================> (112 + 3) / 115]                                                                                [Stage 23:===================================>                  (77 + 39) / 116][Stage 23:=========================================>            (89 + 27) / 116][Stage 23:=============================================>       (100 + 16) / 116][Stage 23:================================================>    (106 + 10) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.831768716 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 32  OR  partitionInd ex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488445987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:==================================>                   (75 + 43) / 118][Stage 24:=====================================>                (82 + 36) / 118][Stage 24:===========================================>          (94 + 24) / 118][Stage 24:=================================================>    (109 + 9) / 118][Stage 24:==================================================>   (110 + 8) / 118][Stage 24:=====================================================>(117 + 1) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:==================================>                   (77 + 42) / 119][Stage 25:====================================>                 (81 + 38) / 119][Stage 25:============================================>         (97 + 22) / 119][Stage 25:==============================================>      (105 + 14) / 119][Stage 25:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.855126535 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  parti tionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 173 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 173 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50307774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:==========================>                           (56 + 57) / 113][Stage 26:===============================>                      (65 + 48) / 113][Stage 26:======================================>               (81 + 32) / 113][Stage 26:==============================================>       (98 + 15) / 113][Stage 26:===================================================>  (107 + 6) / 113][Stage 26:====================================================> (109 + 4) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:============================>                         (61 + 53) / 114][Stage 27:===================================>                  (75 + 39) / 114][Stage 27:==============================================>       (98 + 16) / 114][Stage 27:================================================>    (104 + 10) / 114][Stage 27:==================================================>   (107 + 7) / 114][Stage 27:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 4.696370767 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionI ndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 177  OR  parti tionIndex = 178  OR  partitionIndex = 179  OR  partitionIndex = 180 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 177  OR  partitionIndex = 178  OR  partitionIndex = 179  OR  partitionIndex = 180 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.590473024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:============================>                         (63 + 58) / 121][Stage 28:===============================>                      (70 + 51) / 121][Stage 28:=========================================>            (93 + 28) / 121]                                                                                [Stage 29:===========================>                          (61 + 61) / 122][Stage 29:===========================>                          (63 + 59) / 122][Stage 29:================================>                     (74 + 48) / 122][Stage 29:=========================================>            (93 + 29) / 122][Stage 29:===============================================>     (109 + 13) / 122][Stage 29:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.85949001 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 37  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionI ndex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412747075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:======================================>               (82 + 33) / 115][Stage 30:===========================================>          (92 + 23) / 115][Stage 30:===============================================>     (103 + 12) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:========================================>             (86 + 30) / 116][Stage 31:==============================================>       (99 + 17) / 116][Stage 31:==================================================>   (108 + 8) / 116][Stage 31:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.909910595 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIn dex = 46  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426409448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:=================================>                    (70 + 43) / 113][Stage 32:=====================================>                (79 + 34) / 113][Stage 32:==========================================>           (89 + 24) / 113][Stage 32:================================================>    (103 + 10) / 113][Stage 32:====================================================> (110 + 3) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:====================================>                 (78 + 36) / 114][Stage 33:========================================>             (85 + 29) / 114][Stage 33:==============================================>       (99 + 15) / 114][Stage 33:==================================================>   (106 + 8) / 114][Stage 33:===================================================>  (108 + 6) / 114][Stage 33:====================================================> (110 + 4) / 114][Stage 33:=====================================================>(112 + 2) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.477172919 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionI ndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  parti tionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505162624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:==========================>                           (59 + 61) / 120][Stage 34:============================>                         (64 + 56) / 120][Stage 34:===================================>                  (79 + 41) / 120][Stage 34:============================================>         (99 + 21) / 120][Stage 34:===================================================>  (114 + 6) / 120]                                                                                [Stage 35:============================>                         (64 + 57) / 121][Stage 35:=================================>                    (75 + 46) / 121][Stage 35:==========================================>           (96 + 25) / 121][Stage 35:===================================================>  (116 + 5) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.057554149 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  parti tionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403203446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:=====================================>                (80 + 35) / 115][Stage 36:========================================>             (87 + 28) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:====================================================> (111 + 4) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:======================================>               (83 + 33) / 116][Stage 37:===========================================>          (93 + 23) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.85694462 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  parti tionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440436183 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=====================================>                (79 + 34) / 113][Stage 38:===========================================>          (91 + 22) / 113][Stage 38:===============================================>     (102 + 11) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===================================>                  (74 + 40) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:==============================================>       (98 + 16) / 114][Stage 39:===================================================>  (108 + 6) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.225518316 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionInd ex = 3  OR  partitionIndex = 15  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionInd ex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 15  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421777405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:=================================>                    (70 + 43) / 113][Stage 40:=====================================>                (78 + 35) / 113][Stage 40:==========================================>           (88 + 25) / 113][Stage 40:===============================================>     (102 + 11) / 113][Stage 40:=====================================================>(111 + 2) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:==================================>                   (73 + 41) / 114][Stage 41:======================================>               (82 + 32) / 114][Stage 41:============================================>         (93 + 21) / 114][Stage 41:==============================================>       (99 + 15) / 114][Stage 41:=================================================>    (105 + 9) / 114][Stage 41:==================================================>   (106 + 8) / 114][Stage 41:===================================================>  (108 + 6) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 8.695302772 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionI ndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421487645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:======================================>               (81 + 34) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:===============================================>     (104 + 11) / 115][Stage 42:====================================================> (111 + 4) / 115]                                                                                [Stage 43:========================================>             (86 + 30) / 116][Stage 43:=============================================>        (97 + 19) / 116][Stage 43:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.763500677 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 216  OR  parti tionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472536415 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:============================>                         (59 + 54) / 113][Stage 44:===============================>                      (66 + 47) / 113][Stage 44:=========================================>            (87 + 26) / 113][Stage 44:==============================================>      (100 + 13) / 113][Stage 44:====================================================> (109 + 4) / 113]                                                                                [Stage 45:============================>                         (60 + 54) / 114][Stage 45:==============================>                       (65 + 49) / 114][Stage 45:=======================================>              (83 + 31) / 114][Stage 45:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.530209296 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  parti tionIndex = 200  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 227  OR  partitionIndex = 228 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429129433 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:===================================>                  (74 + 39) / 113][Stage 46:========================================>             (85 + 28) / 113][Stage 46:============================================>         (94 + 19) / 113][Stage 46:===================================================>  (108 + 5) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:========================================>             (85 + 29) / 114][Stage 47:=============================================>        (95 + 19) / 114][Stage 47:===============================================>     (103 + 11) / 114][Stage 47:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.122305565 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionI ndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197  OR  parti tionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408125933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:======================================>               (81 + 34) / 115][Stage 48:==========================================>           (90 + 25) / 115][Stage 48:===================================================>  (109 + 6) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:=======================================>              (85 + 31) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.68931025 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionI ndex = 95  OR  partitionIndex = 109  OR  partitionIndex = 110 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109  OR  partitionIndex = 110 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393901299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:=======================================>              (85 + 30) / 115][Stage 50:===========================================>          (92 + 23) / 115][Stage 50:==============================================>      (100 + 15) / 115][Stage 50:=====================================================>(113 + 2) / 115]                                                                                [Stage 51:=======================================>              (84 + 32) / 116][Stage 51:========================================>             (88 + 28) / 116][Stage 51:============================================>         (95 + 21) / 116][Stage 51:===============================================>     (103 + 13) / 116][Stage 51:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.021837591 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionI ndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  parti tionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413950539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:=================================>                    (74 + 44) / 118][Stage 52:=========================================>            (90 + 28) / 118][Stage 52:===============================================>     (105 + 13) / 118][Stage 52:====================================================> (114 + 4) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:=================================>                    (74 + 45) / 119][Stage 53:=====================================>                (82 + 37) / 119][Stage 53:==========================================>           (94 + 25) / 119][Stage 53:===============================================>     (107 + 12) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.80800319 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIn dex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 92  OR  partitionI ndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466075649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==================================>                   (74 + 41) / 115][Stage 54:==========================================>           (90 + 25) / 115][Stage 54:===============================================>     (102 + 13) / 115][Stage 54:====================================================> (111 + 4) / 115][Stage 54:=====================================================>(113 + 2) / 115]                                                                                [Stage 55:==============================>                       (66 + 50) / 116][Stage 55:===================================>                  (76 + 40) / 116][Stage 55:============================================>         (95 + 21) / 116][Stage 55:=================================================>    (107 + 9) / 116][Stage 55:===================================================>  (111 + 5) / 116][Stage 55:====================================================> (113 + 3) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.512105628 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionI ndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  parti tionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419554945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:=====================================>                (83 + 35) / 118][Stage 56:=================================================>    (109 + 9) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:===================================>                  (78 + 41) / 119][Stage 57:==========================================>           (93 + 26) / 119][Stage 57:==============================================>      (105 + 14) / 119][Stage 57:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.359788443 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  parti tionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472626996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:==========================>                           (60 + 61) / 121][Stage 58:===========================>                          (61 + 60) / 121][Stage 58:=================================>                    (76 + 45) / 121][Stage 58:============================================>        (101 + 20) / 121][Stage 58:====================================================> (118 + 3) / 121]                                                                                [Stage 59:===========================>                          (61 + 61) / 122][Stage 59:===========================>                          (63 + 59) / 122][Stage 59:================================>                     (73 + 49) / 122][Stage 59:========================================>             (91 + 31) / 122][Stage 59:==================================================>   (113 + 9) / 122][Stage 59:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.259979274 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  parti tionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431590137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:============================>                         (59 + 54) / 113][Stage 60:===============================>                      (65 + 48) / 113][Stage 60:==========================================>           (88 + 25) / 113][Stage 60:===================================================>  (107 + 6) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:===============================>                      (67 + 47) / 114][Stage 61:===================================>                  (74 + 40) / 114][Stage 61:============================================>         (93 + 21) / 114][Stage 61:===================================================>  (109 + 5) / 114][Stage 61:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.480634444 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  parti tionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467057752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:===========================>                          (61 + 59) / 120][Stage 62:==================================>                   (76 + 44) / 120][Stage 62:============================================>        (101 + 19) / 120][Stage 62:====================================================> (116 + 4) / 120]                                                                                [Stage 63:===========================>                          (61 + 60) / 121][Stage 63:=============================>                        (66 + 55) / 121][Stage 63:=================================>                    (75 + 46) / 121][Stage 63:===========================================>         (100 + 21) / 121][Stage 63:===================================================>  (116 + 5) / 121][Stage 63:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.171145153 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  parti tionIndex = 155  OR  partitionIndex = 169  OR  partitionIndex = 170 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 169  OR  partitionIndex = 170 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416715763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:================================>                     (70 + 45) / 115][Stage 64:=======================================>              (85 + 30) / 115][Stage 64:===============================================>     (103 + 12) / 115][Stage 64:====================================================> (111 + 4) / 115]                                                                                [Stage 65:================================>                     (69 + 47) / 116][Stage 65:=====================================>                (81 + 35) / 116][Stage 65:==============================================>      (101 + 15) / 116][Stage 65:===================================================>  (111 + 5) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.804469874 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionI ndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456770802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:==========================>                           (60 + 61) / 121][Stage 66:===========================>                          (61 + 60) / 121][Stage 66:==================================>                   (78 + 43) / 121][Stage 66:==============================================>      (106 + 15) / 121][Stage 66:=====================================================>(120 + 1) / 121]                                                                                [Stage 67:===========================>                          (61 + 61) / 122][Stage 67:============================>                         (65 + 57) / 122][Stage 67:====================================>                 (83 + 39) / 122][Stage 67:============================================>        (103 + 19) / 122][Stage 67:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.011108123 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex  = 20  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49642488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:============================>                         (59 + 54) / 113][Stage 68:=============================>                        (61 + 52) / 113][Stage 68:=======================================>              (83 + 30) / 113][Stage 68:==============================================>      (100 + 13) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:===========================>                          (59 + 55) / 114][Stage 69:==============================>                       (65 + 49) / 114][Stage 69:====================================>                 (77 + 37) / 114][Stage 69:==============================================>      (101 + 13) / 114][Stage 69:===================================================>  (108 + 6) / 114][Stage 69:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.595420121 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionI ndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410920118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:====================================>                 (79 + 39) / 118][Stage 70:========================================>             (88 + 30) / 118][Stage 70:=============================================>        (99 + 19) / 118][Stage 70:==================================================>   (111 + 7) / 118][Stage 70:=====================================================>(117 + 1) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:==================================>                   (75 + 44) / 119][Stage 71:=======================================>              (87 + 32) / 119][Stage 71:==============================================>      (104 + 15) / 119][Stage 71:==================================================>   (111 + 8) / 119][Stage 71:====================================================> (116 + 3) / 119][Stage 71:=====================================================>(117 + 2) / 119][Stage 71:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.336355663 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIn dex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionI ndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441112768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===========================>                          (58 + 55) / 113][Stage 72:=============================>                        (62 + 51) / 113][Stage 72:=================================>                    (70 + 43) / 113][Stage 72:=============================================>        (95 + 18) / 113][Stage 72:===================================================>  (107 + 6) / 113][Stage 72:=====================================================>(111 + 2) / 113]                                                                                [Stage 73:=============================>                        (63 + 51) / 114][Stage 73:===================================>                  (75 + 39) / 114][Stage 73:==============================================>      (100 + 14) / 114][Stage 73:====================================================> (110 + 4) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.498567844 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  parti tionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406618275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:====================================>                 (80 + 38) / 118][Stage 74:============================================>        (100 + 18) / 118][Stage 74:=================================================>    (109 + 9) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:=====================================>                (82 + 37) / 119][Stage 75:===========================================>          (96 + 23) / 119][Stage 75:==================================================>   (111 + 8) / 119][Stage 75:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.478740637 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionI ndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  parti tionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364235814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:======================================>               (81 + 34) / 115][Stage 76:========================================>             (86 + 29) / 115][Stage 76:==============================================>       (98 + 17) / 115][Stage 76:===================================================>  (109 + 6) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:========================================>             (87 + 29) / 116][Stage 77:============================================>         (95 + 21) / 116][Stage 77:====================================================> (112 + 4) / 116][Stage 77:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.936240432 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  parti tionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368607918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:>                                                       (0 + 0) / 115][Stage 78:======================================>               (81 + 34) / 115][Stage 78:==========================================>           (91 + 24) / 115][Stage 78:==================================================>   (107 + 8) / 115][Stage 78:=====================================================>(113 + 2) / 115]                                                                                [Stage 79:========================================>             (87 + 29) / 116][Stage 79:===============================================>     (104 + 12) / 116][Stage 79:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.734484417 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIn dex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partiti onIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415498964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:==========================>                           (60 + 61) / 121][Stage 80:=============================>                        (67 + 54) / 121][Stage 80:=======================================>              (89 + 32) / 121][Stage 80:==================================================>   (114 + 7) / 121]                                                                                [Stage 81:===========================>                          (61 + 61) / 122][Stage 81:==============================>                       (68 + 54) / 122][Stage 81:======================================>               (86 + 36) / 122][Stage 81:===============================================>     (110 + 12) / 122][Stage 81:====================================================> (119 + 3) / 122][Stage 81:=====================================================>(120 + 2) / 122][Stage 81:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.54362859 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  parti tionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387412997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:===================================>                  (78 + 40) / 118][Stage 82:=========================================>            (91 + 27) / 118][Stage 82:==================================================>   (110 + 8) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:===================================>                  (79 + 40) / 119][Stage 83:=======================================>              (86 + 33) / 119][Stage 83:============================================>        (100 + 19) / 119][Stage 83:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.743950842 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIn dex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionI ndex = 70  OR  partitionIndex = 83  OR  partitionIndex = 84 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 83  OR  partitionIndex = 84 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396504186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===================================>                  (75 + 40) / 115][Stage 84:=======================================>              (84 + 31) / 115][Stage 84:==============================================>      (100 + 15) / 115][Stage 84:====================================================> (112 + 3) / 115]                                                                                [Stage 85:===============================>                      (68 + 48) / 116][Stage 85:======================================>               (83 + 33) / 116][Stage 85:=============================================>        (98 + 18) / 116][Stage 85:==================================================>   (108 + 8) / 116][Stage 85:=====================================================>(114 + 2) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.9859346 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionI ndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422156091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:==========================>                           (60 + 61) / 121][Stage 86:============================>                         (63 + 58) / 121][Stage 86:==================================>                   (78 + 43) / 121][Stage 86:=============================================>       (103 + 18) / 121][Stage 86:====================================================> (118 + 3) / 121]                                                                                [Stage 87:===========================>                          (61 + 61) / 122][Stage 87:=============================>                        (66 + 56) / 122][Stage 87:===================================>                  (80 + 42) / 122][Stage 87:===========================================>         (101 + 21) / 122][Stage 87:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.992470189 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionI ndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  parti tionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414525244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:=============================>                        (61 + 52) / 113][Stage 88:===================================>                  (75 + 38) / 113][Stage 88:==============================================>       (98 + 15) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:============================>                         (61 + 53) / 114][Stage 89:=====================================>                (79 + 35) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.68363459 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIn dex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 36  OR  partitionI ndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373914724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:======================================>               (81 + 34) / 115][Stage 90:========================================>             (87 + 28) / 115][Stage 90:===============================================>     (104 + 11) / 115][Stage 90:===================================================>  (110 + 5) / 115]                                                                                [Stage 91:=======================================>              (85 + 31) / 116][Stage 91:=========================================>            (89 + 27) / 116][Stage 91:==============================================>       (99 + 17) / 116][Stage 91:===============================================>     (104 + 12) / 116][Stage 91:=================================================>    (107 + 9) / 116][Stage 91:==================================================>   (109 + 7) / 116][Stage 91:===================================================>  (111 + 5) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.526950282 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIn dex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionI ndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397373348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:=================================>                    (71 + 44) / 115][Stage 92:======================================>               (83 + 32) / 115][Stage 92:===============================================>     (102 + 13) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:===================================>                  (77 + 39) / 116][Stage 93:============================================>         (96 + 20) / 116][Stage 93:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.815088127 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  parti tionIndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431366301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:============================>                         (64 + 56) / 120][Stage 94:=================================>                    (74 + 46) / 120][Stage 94:=======================================>              (87 + 33) / 120][Stage 94:==============================================>      (106 + 14) / 120][Stage 94:=====================================================>(119 + 1) / 120]                                                                                [Stage 95:===========================>                          (62 + 59) / 121][Stage 95:===============================>                      (70 + 51) / 121][Stage 95:======================================>               (87 + 34) / 121][Stage 95:==============================================>      (106 + 15) / 121][Stage 95:===================================================>  (116 + 5) / 121][Stage 95:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.349402188 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  parti tionIndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374805326 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==================================>                   (73 + 40) / 113][Stage 96:==========================================>           (89 + 24) / 113][Stage 96:=============================================>        (95 + 18) / 113][Stage 96:====================================================> (109 + 4) / 113]                                                                                [Stage 97:=====================================>                (80 + 34) / 114][Stage 97:==========================================>           (90 + 24) / 114][Stage 97:===============================================>     (102 + 12) / 114][Stage 97:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.849275425 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIn dex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionI ndex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401041912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (58 + 55) / 113][Stage 98:==============================>                       (63 + 50) / 113][Stage 98:=======================================>              (82 + 31) / 113][Stage 98:===============================================>      (99 + 14) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:===========================>                          (59 + 55) / 114][Stage 99:===============================>                      (66 + 48) / 114][Stage 99:======================================>               (81 + 33) / 114][Stage 99:==============================================>       (98 + 16) / 114][Stage 99:===================================================>  (109 + 5) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.365941788 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionI ndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406094337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:==============================>                      (70 + 50) / 120][Stage 100:======================================>              (87 + 33) / 120][Stage 100:=============================================>      (106 + 14) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:===============================>                     (73 + 48) / 121][Stage 101:==========================================>          (97 + 24) / 121][Stage 101:=================================================>   (112 + 9) / 121][Stage 101:====================================================>(119 + 2) / 121][Stage 101:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.85403499 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionI ndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342363355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:==========================================>          (92 + 23) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:====================================================>(113 + 2) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:=====================================>               (82 + 34) / 116][Stage 103:=========================================>           (91 + 25) / 116][Stage 103:================================================>    (107 + 9) / 116][Stage 103:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.987275604 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  parti tionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412819624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==========================>                          (61 + 59) / 120][Stage 104:==============================>                      (70 + 50) / 120][Stage 104:========================================>            (91 + 29) / 120][Stage 104:=================================================>   (112 + 8) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:=============================>                       (67 + 54) / 121][Stage 105:=======================================>             (90 + 31) / 121][Stage 105:===============================================>    (111 + 10) / 121][Stage 105:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 4.443453192 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 91  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partition Index = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 91  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373361625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:=================================>                   (74 + 44) / 118][Stage 106:=======================================>             (88 + 30) / 118][Stage 106:=================================================>   (110 + 8) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:=================================>                   (76 + 43) / 119][Stage 107:========================================>            (91 + 28) / 119][Stage 107:==============================================>     (107 + 12) / 119][Stage 107:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.144396841 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  parti tionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447284318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:============================>                        (64 + 56) / 120][Stage 108:==================================>                  (79 + 41) / 120][Stage 108:============================================>       (103 + 17) / 120][Stage 108:====================================================>(119 + 1) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:=============================>                       (68 + 53) / 121][Stage 109:===================================>                 (82 + 39) / 121][Stage 109:===========================================>         (99 + 22) / 121][Stage 109:=================================================>   (114 + 7) / 121][Stage 109:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.448748943 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionI ndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37675533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:================================>                    (73 + 45) / 118][Stage 110:====================================>                (81 + 37) / 118][Stage 110:==========================================>          (95 + 23) / 118][Stage 110:===============================================>    (108 + 10) / 118][Stage 110:===================================================> (114 + 4) / 118]                                                                                [Stage 111:==================================>                  (78 + 41) / 119][Stage 111:=======================================>             (89 + 30) / 119][Stage 111:============================================>       (101 + 18) / 119][Stage 111:=================================================>   (111 + 8) / 119][Stage 111:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.586780199 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIn dex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionI ndex = 100  OR  partitionIndex = 113  OR  partitionIndex = 114 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 113  OR  partitionIndex = 114 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368107601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:=================================>                   (74 + 44) / 118][Stage 112:===================================>                 (80 + 38) / 118][Stage 112:=========================================>           (92 + 26) / 118][Stage 112:===============================================>    (107 + 11) / 118][Stage 112:====================================================>(116 + 2) / 118]                                                                                [Stage 113:=================================>                   (75 + 44) / 119][Stage 113:==================================>                  (77 + 42) / 119][Stage 113:======================================>              (87 + 32) / 119][Stage 113:===========================================>         (97 + 22) / 119][Stage 113:=================================================>   (111 + 8) / 119][Stage 113:===================================================> (115 + 4) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.483520262 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionI ndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408866181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:============================>                        (65 + 56) / 121][Stage 114:====================================>                (83 + 38) / 121][Stage 114:=============================================>      (106 + 15) / 121][Stage 114:===================================================> (117 + 4) / 121]                                                                                [Stage 115:==========================>                          (61 + 61) / 122][Stage 115:===============================>                     (72 + 50) / 122][Stage 115:===================================>                 (82 + 40) / 122][Stage 115:============================================>       (104 + 18) / 122][Stage 115:==================================================>  (117 + 5) / 122][Stage 115:====================================================>(120 + 2) / 122][Stage 115:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.973628804 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionI ndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  parti tionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37658591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:====================================>                (77 + 36) / 113][Stage 116:========================================>            (86 + 27) / 113][Stage 116:==============================================>     (102 + 11) / 113][Stage 116:==================================================>  (107 + 6) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:==================================>                  (74 + 40) / 114][Stage 117:=========================================>           (89 + 25) / 114][Stage 117:==============================================>      (99 + 15) / 114][Stage 117:===============================================>    (104 + 10) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.117750404 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIn dex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partiti onIndex = 114  OR  partitionIndex = 115  OR  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383258937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:===========================>                         (58 + 55) / 113][Stage 118:=============================>                       (63 + 50) / 113][Stage 118:=======================================>             (84 + 29) / 113][Stage 118:===============================================>    (103 + 10) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:==============================>                      (65 + 49) / 114][Stage 119:=====================================>               (80 + 34) / 114][Stage 119:=============================================>       (97 + 17) / 114][Stage 119:===================================================> (110 + 4) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.709557951 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partit ionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360480174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:==================================>                  (74 + 39) / 113][Stage 120:=======================================>             (84 + 29) / 113][Stage 120:============================================>        (94 + 19) / 113][Stage 120:================================================>    (104 + 9) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:=====================================>               (81 + 33) / 114][Stage 121:===========================================>         (93 + 21) / 114][Stage 121:==============================================>     (101 + 13) / 114][Stage 121:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.088015279 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIn dex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionI ndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350646245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (70 + 43) / 113][Stage 122:=====================================>               (80 + 33) / 113][Stage 122:==========================================>          (91 + 22) / 113][Stage 122:==================================================>  (107 + 6) / 113]                                                                                [Stage 123:===================================>                 (76 + 38) / 114][Stage 123:======================================>              (82 + 32) / 114][Stage 123:============================================>        (95 + 19) / 114][Stage 123:================================================>    (105 + 9) / 114][Stage 123:==================================================>  (109 + 5) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.159652485 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionInd ex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIn dex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352410787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:=====================================>               (80 + 33) / 113][Stage 124:==========================================>          (90 + 23) / 113][Stage 124:==============================================>     (100 + 13) / 113][Stage 124:==================================================>  (107 + 6) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:==================================>                  (74 + 40) / 114][Stage 125:=====================================>               (80 + 34) / 114][Stage 125:==========================================>          (91 + 23) / 114][Stage 125:============================================>        (96 + 18) / 114][Stage 125:===============================================>    (104 + 10) / 114][Stage 125:===================================================> (111 + 3) / 114][Stage 125:====================================================>(112 + 2) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.276662911 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  parti tionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358694794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:==================================>                  (73 + 40) / 113][Stage 126:=========================================>           (89 + 24) / 113][Stage 126:==============================================>      (99 + 14) / 113][Stage 126:=================================================>   (106 + 7) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:====================================>                (78 + 36) / 114][Stage 127:===========================================>         (93 + 21) / 114][Stage 127:==============================================>     (101 + 13) / 114][Stage 127:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.998971297 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  parti tionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413637868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:==================================>                  (77 + 43) / 120][Stage 128:===========================================>         (98 + 22) / 120][Stage 128:==================================================>  (114 + 6) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:=============================>                       (68 + 53) / 121][Stage 129:==========================================>          (98 + 23) / 121][Stage 129:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.481243455 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  parti tionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391922987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:===========================>                         (58 + 55) / 113][Stage 130:==============================>                      (65 + 48) / 113][Stage 130:======================================>              (82 + 31) / 113][Stage 130:==============================================>      (99 + 14) / 113][Stage 130:===================================================> (109 + 4) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:============================>                        (61 + 53) / 114][Stage 131:=====================================>               (80 + 34) / 114][Stage 131:==========================================>          (91 + 23) / 114][Stage 131:===============================================>    (104 + 10) / 114][Stage 131:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.973729122 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIn dex = 30  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionI ndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482426836 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:===========================>                         (59 + 54) / 113][Stage 132:===============================>                     (68 + 45) / 113][Stage 132:=======================================>             (85 + 28) / 113][Stage 132:==============================================>     (101 + 12) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:===========================>                         (59 + 55) / 114][Stage 133:===============================>                     (67 + 47) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:==================================================>  (108 + 6) / 114][Stage 133:===================================================> (111 + 3) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.514853572 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 13  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 53  OR  partitionI ndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54  OR  partitionIndex = 55  OR  partitionIndex = 56 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380884296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:===============================>                     (69 + 46) / 115][Stage 134:=======================================>             (86 + 29) / 115][Stage 134:=============================================>       (99 + 16) / 115][Stage 134:=================================================>   (107 + 8) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:================================>                    (71 + 45) / 116][Stage 135:=====================================>               (82 + 34) / 116][Stage 135:============================================>        (97 + 19) / 116][Stage 135:==============================================>     (104 + 12) / 116][Stage 135:=================================================>   (108 + 8) / 116][Stage 135:==================================================>  (111 + 5) / 116][Stage 135:===================================================> (113 + 3) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.478898652 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  parti tionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354721971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:====================================>                (77 + 36) / 113][Stage 136:=========================================>           (89 + 24) / 113][Stage 136:==============================================>      (99 + 14) / 113][Stage 136:==================================================>  (108 + 5) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:=====================================>               (81 + 33) / 114][Stage 137:=========================================>           (90 + 24) / 114][Stage 137:==============================================>      (99 + 15) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.167309712 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  parti tionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380032376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:===========================>                         (58 + 55) / 113][Stage 138:=============================>                       (62 + 51) / 113][Stage 138:======================================>              (83 + 30) / 113][Stage 138:=============================================>       (97 + 16) / 113][Stage 138:==================================================>  (107 + 6) / 113]                                                                                [Stage 139:===========================>                         (60 + 54) / 114][Stage 139:===============================>                     (68 + 46) / 114][Stage 139:=======================================>             (84 + 30) / 114][Stage 139:=============================================>       (97 + 17) / 114][Stage 139:==================================================>  (108 + 6) / 114][Stage 139:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.131871049 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionInd ex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356307173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:====================================>                (77 + 36) / 113][Stage 140:===========================================>         (92 + 21) / 113][Stage 140:==============================================>     (100 + 13) / 113][Stage 140:==================================================>  (107 + 6) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:==================================>                  (75 + 39) / 114][Stage 141:=======================================>             (84 + 30) / 114][Stage 141:==========================================>          (92 + 22) / 114][Stage 141:=============================================>       (97 + 17) / 114][Stage 141:==============================================>     (103 + 11) / 114][Stage 141:===================================================> (110 + 4) / 114][Stage 141:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.898651863 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIn dex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionI ndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397287034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:==========================>                          (61 + 59) / 120][Stage 142:==============================>                      (69 + 51) / 120][Stage 142:=====================================>               (86 + 34) / 120][Stage 142:===========================================>        (101 + 19) / 120][Stage 142:====================================================>(119 + 1) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:================================>                    (74 + 47) / 121][Stage 143:======================================>              (89 + 32) / 121][Stage 143:=============================================>      (105 + 16) / 121][Stage 143:===================================================> (117 + 4) / 121][Stage 143:====================================================>(119 + 2) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.983844969 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  parti tionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395243372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:===========================>                         (62 + 58) / 120][Stage 144:================================>                    (74 + 46) / 120][Stage 144:=========================================>           (94 + 26) / 120][Stage 144:==================================================>  (114 + 6) / 120]                                                                                [Stage 145:===========================>                         (63 + 58) / 121][Stage 145:==================================>                  (78 + 43) / 121][Stage 145:==========================================>          (97 + 24) / 121][Stage 145:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.884060892 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIn dex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionI ndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401092418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:==========================>                          (60 + 60) / 120][Stage 146:===========================>                         (62 + 58) / 120][Stage 146:==================================>                  (77 + 43) / 120][Stage 146:===========================================>        (101 + 19) / 120][Stage 146:====================================================>(119 + 1) / 120]                                                                                [Stage 147:==========================>                          (61 + 60) / 121][Stage 147:============================>                        (65 + 56) / 121][Stage 147:==================================>                  (79 + 42) / 121][Stage 147:===========================================>        (101 + 20) / 121][Stage 147:==================================================>  (116 + 5) / 121][Stage 147:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.691738643 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionI ndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 90 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 87  OR  partitionIndex = 88  OR  partitionIndex = 89  OR  partitionIndex = 90 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36194588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:==================================>                  (76 + 42) / 118][Stage 148:====================================>                (82 + 36) / 118][Stage 148:===========================================>         (97 + 21) / 118][Stage 148:==================================================>  (113 + 5) / 118][Stage 148:====================================================>(117 + 1) / 118]                                                                                [Stage 149:=================================>                   (75 + 44) / 119][Stage 149:====================================>                (81 + 38) / 119][Stage 149:=======================================>             (88 + 31) / 119][Stage 149:==========================================>          (95 + 24) / 119][Stage 149:===============================================>    (109 + 10) / 119][Stage 149:===================================================> (115 + 4) / 119][Stage 149:====================================================>(117 + 2) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 6.162011558 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 207  OR  parti tionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 207  OR  partitionIndex = 208  OR  partitionIndex = 209  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333320312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:=========================================>           (91 + 24) / 115][Stage 150:===============================================>    (104 + 11) / 115][Stage 150:==================================================>  (110 + 5) / 115]                                                                                [Stage 151:======================================>              (85 + 31) / 116][Stage 151:==========================================>          (92 + 24) / 116][Stage 151:=============================================>      (101 + 15) / 116][Stage 151:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.978523959 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionI ndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403727081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==========================>                          (60 + 61) / 121][Stage 152:============================>                        (66 + 55) / 121][Stage 152:=================================>                   (77 + 44) / 121][Stage 152:===========================================>        (102 + 19) / 121][Stage 152:==================================================>  (116 + 5) / 121]                                                                                [Stage 153:============================>                        (65 + 57) / 122][Stage 153:=============================>                       (68 + 54) / 122][Stage 153:=====================================>               (86 + 36) / 122][Stage 153:============================================>       (105 + 17) / 122][Stage 153:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.824032501 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIn dex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionI ndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347830506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:======================================>              (83 + 32) / 115][Stage 154:==========================================>          (92 + 23) / 115][Stage 154:===============================================>    (104 + 11) / 115][Stage 154:====================================================>(113 + 2) / 115][Stage 154:====================================================>(114 + 1) / 115]                                                                                [Stage 155:=====================================>               (82 + 34) / 116][Stage 155:========================================>            (89 + 27) / 116][Stage 155:===========================================>         (96 + 20) / 116][Stage 155:==================================================>  (110 + 6) / 116][Stage 155:===================================================> (112 + 4) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.120562527 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionI ndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123  OR  parti tionIndex = 135  OR  partitionIndex = 136  OR  partitionIndex = 137 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 135  OR  partitionIndex = 136  OR  partitionIndex = 137 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360073658 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:================================>                    (73 + 45) / 118][Stage 156:===================================>                 (78 + 40) / 118][Stage 156:============================================>        (99 + 19) / 118][Stage 156:==================================================>  (113 + 5) / 118]                                                                                [Stage 157:================================>                    (74 + 45) / 119][Stage 157:====================================>                (83 + 36) / 119][Stage 157:===========================================>         (97 + 22) / 119][Stage 157:=================================================>   (111 + 8) / 119][Stage 157:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.946444083 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  parti tionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390728849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:==========================>                          (60 + 61) / 121][Stage 158:==============================>                      (69 + 52) / 121][Stage 158:=====================================>               (85 + 36) / 121][Stage 158:===============================================>    (110 + 11) / 121][Stage 158:====================================================>(119 + 2) / 121]                                                                                [Stage 159:==========================>                          (61 + 61) / 122][Stage 159:============================>                        (66 + 56) / 122][Stage 159:===============================>                     (73 + 49) / 122][Stage 159:===========================================>        (102 + 20) / 122][Stage 159:==================================================>  (116 + 6) / 122][Stage 159:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.907344731 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionI ndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  parti tionIndex = 122  OR  partitionIndex = 135  OR  partitionIndex = 136 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 135  OR  partitionIndex = 136 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349929288 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:===================================>                 (75 + 38) / 113][Stage 160:=======================================>             (85 + 28) / 113][Stage 160:=============================================>       (96 + 17) / 113][Stage 160:================================================>    (104 + 9) / 113][Stage 160:====================================================>(111 + 2) / 113]                                                                                [Stage 161:=======================================>             (84 + 30) / 114][Stage 161:==========================================>          (92 + 22) / 114][Stage 161:=============================================>      (100 + 14) / 114][Stage 161:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.063015152 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  parti tionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166  OR  partitionIndex = 167  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341952301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:======================================>              (83 + 32) / 115][Stage 162:===========================================>         (95 + 20) / 115][Stage 162:==============================================>     (102 + 13) / 115]                                                                                [Stage 163:======================================>              (84 + 32) / 116][Stage 163:==========================================>          (92 + 24) / 116][Stage 163:=============================================>      (101 + 15) / 116][Stage 163:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.625461957 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 92  OR  partitionI ndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37055981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==============================>                      (67 + 48) / 115][Stage 164:====================================>                (79 + 36) / 115][Stage 164:==========================================>          (93 + 22) / 115][Stage 164:================================================>    (106 + 9) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:===============================>                     (69 + 47) / 116][Stage 165:=====================================>               (83 + 33) / 116][Stage 165:==========================================>          (94 + 22) / 116][Stage 165:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 2.914435587 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  parti tionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344266363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:=======================================>             (84 + 29) / 113][Stage 166:===========================================>         (93 + 20) / 113][Stage 166:==============================================>     (101 + 12) / 113][Stage 166:===================================================> (110 + 3) / 113]                                                                                [Stage 167:=====================================>               (81 + 33) / 114][Stage 167:==========================================>          (91 + 23) / 114][Stage 167:==============================================>     (103 + 11) / 114][Stage 167:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.867610421 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionI ndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  parti tionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410268949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 213)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  parti tionIndex = 144  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379967079 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:===========================>                         (59 + 54) / 113][Stage 168:=============================>                       (63 + 50) / 113][Stage 168:====================================>                (78 + 35) / 113][Stage 168:==============================================>      (99 + 14) / 113][Stage 168:====================================================>(111 + 2) / 113]                                                                                [Stage 169:===========================>                         (60 + 54) / 114][Stage 169:=============================>                       (64 + 50) / 114][Stage 169:=====================================>               (80 + 34) / 114][Stage 169:=============================================>      (100 + 14) / 114][Stage 169:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.623459418 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionI ndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  parti tionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394570094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:===========================>                         (63 + 57) / 120][Stage 170:===============================>                     (72 + 48) / 120][Stage 170:=============================================>      (104 + 16) / 120][Stage 170:====================================================>(118 + 2) / 120]                                                                                [Stage 171:==========================>                          (61 + 60) / 121][Stage 171:============================>                        (64 + 57) / 121][Stage 171:================================>                    (75 + 46) / 121][Stage 171:========================================>            (93 + 28) / 121][Stage 171:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 5.461674896 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionI ndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  parti tionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411853832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:==========================>                          (60 + 61) / 121][Stage 172:=============================>                       (68 + 53) / 121][Stage 172:=====================================>               (85 + 36) / 121][Stage 172:==============================================>     (109 + 12) / 121][Stage 172:====================================================>(120 + 1) / 121]                                                                                [Stage 173:============================>                        (65 + 57) / 122][Stage 173:==============================>                      (71 + 51) / 122][Stage 173:=======================================>             (90 + 32) / 122][Stage 173:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.778361997 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIn dex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionI ndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356015136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===================================>                 (76 + 37) / 113][Stage 174:==========================================>          (90 + 23) / 113][Stage 174:=================================================>   (105 + 8) / 113][Stage 174:===================================================> (109 + 4) / 113]                                                                                [Stage 175:=====================================>               (80 + 34) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:===========================================>         (94 + 20) / 114][Stage 175:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.893351854 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIn dex = 95  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partition Index = 110  OR  partitionIndex = 111  OR  partitionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364214504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:================================>                    (73 + 45) / 118][Stage 176:======================================>              (85 + 33) / 118][Stage 176:=============================================>      (103 + 15) / 118][Stage 176:===================================================> (114 + 4) / 118]                                                                                [Stage 177:===================================>                 (79 + 40) / 119][Stage 177:=======================================>             (88 + 31) / 119][Stage 177:===============================================>    (109 + 10) / 119][Stage 177:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.461668163 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 152  OR  parti tionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371678112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:================================>                    (73 + 45) / 118][Stage 178:==================================>                  (76 + 42) / 118][Stage 178:=====================================>               (84 + 34) / 118][Stage 178:============================================>       (100 + 18) / 118][Stage 178:=================================================>   (111 + 7) / 118]                                                                                [Stage 179:================================>                    (74 + 45) / 119][Stage 179:===================================>                 (79 + 40) / 119][Stage 179:======================================>              (87 + 32) / 119][Stage 179:============================================>       (101 + 18) / 119][Stage 179:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 4.259500284 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partition Index = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371977873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:================================>                    (70 + 43) / 113][Stage 180:=====================================>               (81 + 32) / 113][Stage 180:============================================>        (94 + 19) / 113][Stage 180:================================================>    (104 + 9) / 113][Stage 180:==================================================>  (108 + 5) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:===================================>                 (76 + 38) / 114][Stage 181:=======================================>             (85 + 29) / 114][Stage 181:============================================>        (95 + 19) / 114][Stage 181:==================================================>  (109 + 5) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.196883602 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  parti tionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40936645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==========================>                          (60 + 60) / 120][Stage 182:==========================>                          (61 + 59) / 120][Stage 182:==================================>                  (78 + 42) / 120][Stage 182:==============================================>     (108 + 12) / 120]                                                                                [Stage 183:===========================>                         (63 + 58) / 121][Stage 183:==============================>                      (69 + 52) / 121][Stage 183:=====================================>               (85 + 36) / 121][Stage 183:===========================================>        (101 + 20) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.715567883 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  parti tionIndex = 140  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 167  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390692572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:==========================>                          (61 + 60) / 121][Stage 184:===============================>                     (72 + 49) / 121][Stage 184:========================================>            (93 + 28) / 121][Stage 184:=================================================>   (113 + 8) / 121][Stage 184:====================================================>(120 + 1) / 121]                                                                                [Stage 185:==========================>                          (61 + 61) / 122][Stage 185:============================>                        (66 + 56) / 122][Stage 185:==================================>                  (79 + 43) / 122][Stage 185:=========================================>           (96 + 26) / 122][Stage 185:=================================================>   (113 + 9) / 122][Stage 185:===================================================> (118 + 4) / 122][Stage 185:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.040472434 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionI ndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402819264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:===========================>                         (62 + 58) / 120][Stage 186:===============================>                     (71 + 49) / 120][Stage 186:========================================>            (91 + 29) / 120][Stage 186:==============================================>     (108 + 12) / 120][Stage 186:====================================================>(119 + 1) / 120]                                                                                [Stage 187:==========================>                          (61 + 60) / 121][Stage 187:=============================>                       (68 + 53) / 121][Stage 187:======================================>              (89 + 32) / 121][Stage 187:==================================================>  (115 + 6) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.449145203 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionI ndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380842683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:===========================>                         (58 + 55) / 113][Stage 188:=============================>                       (63 + 50) / 113][Stage 188:===================================>                 (75 + 38) / 113][Stage 188:============================================>        (95 + 18) / 113][Stage 188:===================================================> (109 + 4) / 113]                                                                                [Stage 189:===========================>                         (60 + 54) / 114][Stage 189:==============================>                      (66 + 48) / 114][Stage 189:======================================>              (83 + 31) / 114][Stage 189:==============================================>     (101 + 13) / 114][Stage 189:====================================================>(112 + 2) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.758700757 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionI ndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  parti tionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338392919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:========================================>            (88 + 27) / 115][Stage 190:=============================================>       (99 + 16) / 115][Stage 190:===================================================> (111 + 4) / 115]                                                                                [Stage 191:======================================>              (85 + 31) / 116][Stage 191:===========================================>         (96 + 20) / 116][Stage 191:===============================================>    (106 + 10) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.774971047 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionInd ex = 2  OR  partitionIndex = 3  OR  partitionIndex = 15  OR  partitionIndex = 16  OR  partitionInde x = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 15  OR  partitionIndex = 16  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342234124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:=====================================>               (80 + 33) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:==============================================>     (101 + 12) / 113][Stage 192:==================================================>  (108 + 5) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:=================================>                   (71 + 43) / 114][Stage 193:======================================>              (82 + 32) / 114][Stage 193:==========================================>          (92 + 22) / 114][Stage 193:=============================================>       (98 + 16) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:==================================================>  (108 + 6) / 114][Stage 193:==================================================>  (109 + 5) / 114][Stage 193:===================================================> (111 + 3) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 9.927162819 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIn dex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionI ndex = 62  OR  partitionIndex = 75  OR  partitionIndex = 76 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 75  OR  partitionIndex = 76 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382928006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:===================================>                 (76 + 37) / 113][Stage 194:=========================================>           (89 + 24) / 113][Stage 194:==============================================>     (101 + 12) / 113][Stage 194:=================================================>   (105 + 8) / 113]                                                                                [Stage 195:====================================>                (78 + 36) / 114][Stage 195:========================================>            (87 + 27) / 114][Stage 195:==============================================>      (99 + 15) / 114][Stage 195:=================================================>   (106 + 8) / 114][Stage 195:=================================================>   (107 + 7) / 114][Stage 195:==================================================>  (108 + 6) / 114][Stage 195:====================================================>(112 + 2) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.920385222 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIn dex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionI ndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419039101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:============================>                        (65 + 55) / 120][Stage 196:================================>                    (73 + 47) / 120][Stage 196:===========================================>        (100 + 20) / 120][Stage 196:====================================================>(118 + 2) / 120]                                                                                [Stage 197:===========================>                         (63 + 58) / 121][Stage 197:======================================>              (87 + 34) / 121][Stage 197:=============================================>      (105 + 16) / 121][Stage 197:==================================================>  (116 + 5) / 121][Stage 197:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.598746163 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionInd ex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358340921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:=================================>                   (74 + 44) / 118][Stage 198:===================================>                 (79 + 39) / 118][Stage 198:=====================================>               (84 + 34) / 118][Stage 198:==========================================>          (95 + 23) / 118][Stage 198:==================================================>  (113 + 5) / 118][Stage 198:====================================================>(117 + 1) / 118]                                                                                [Stage 199:================================>                    (73 + 46) / 119][Stage 199:==================================>                  (77 + 42) / 119][Stage 199:======================================>              (86 + 33) / 119][Stage 199:==========================================>          (96 + 23) / 119][Stage 199:==============================================>     (107 + 12) / 119][Stage 199:==================================================>  (114 + 5) / 119][Stage 199:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.425022537 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m49.440s
user	12m29.512s
sys	1m36.912s
