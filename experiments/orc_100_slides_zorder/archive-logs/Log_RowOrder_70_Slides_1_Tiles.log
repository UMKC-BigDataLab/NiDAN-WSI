Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 00:02:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:02:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:02:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:02:24 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 00:02:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:02:36 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525000225-0611).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.344825832 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 113) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (109 + 6) / 115]                                                                                [Stage 1:==========================>                            (56 + 60) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:====================================================>  (110 + 6) / 116]                                                                                Time elapsed: 12.476380936 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  80 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.615849799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===================================>                   (74 + 41) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:========================================>              (84 + 31) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:===================================================>   (108 + 7) / 115][Stage 2:=====================================================> (111 + 4) / 115]                                                                                [Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:======================================>                (82 + 34) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:===================================================>   (109 + 7) / 116][Stage 3:=====================================================> (113 + 3) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.784611628 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.58976953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==================================>                    (70 + 43) / 113][Stage 4:==================================>                    (71 + 42) / 113][Stage 4:====================================>                  (76 + 37) / 113][Stage 4:=====================================>                 (77 + 36) / 113][Stage 4:==============================================>        (95 + 18) / 113][Stage 4:===============================================>      (100 + 13) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:====================================================>  (108 + 5) / 113][Stage 4:======================================================>(112 + 1) / 113]                                                                                [Stage 5:==============================>                        (64 + 50) / 114][Stage 5:=====================================>                 (78 + 36) / 114][Stage 5:=========================================>             (87 + 27) / 114][Stage 5:=============================================>         (95 + 19) / 114][Stage 5:================================================>     (102 + 12) / 114][Stage 5:===================================================>   (106 + 8) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.422501378 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.786137847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:========================>                              (51 + 64) / 115][Stage 6:============================>                          (59 + 56) / 115][Stage 6:=================================>                     (69 + 46) / 115][Stage 6:=====================================>                 (78 + 37) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:==============================================>       (100 + 15) / 115][Stage 6:===================================================>   (107 + 8) / 115][Stage 6:===================================================>   (108 + 7) / 115][Stage 6:=====================================================> (112 + 3) / 115]                                                                                [Stage 7:============================>                          (60 + 56) / 116][Stage 7:==================================>                    (72 + 44) / 116][Stage 7:======================================>                (81 + 35) / 116][Stage 7:========================================>              (85 + 31) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:================================================>     (105 + 11) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.504943558 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  230 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.619384338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=========================>                             (56 + 64) / 120][Stage 8:============================>                          (63 + 57) / 120][Stage 8:================================>                      (70 + 50) / 120][Stage 8:==========================================>            (92 + 28) / 120][Stage 8:============================================>          (98 + 22) / 120][Stage 8:===============================================>      (106 + 14) / 120][Stage 8:=====================================================> (116 + 4) / 120]                                                                                [Stage 9:===========================>                           (61 + 60) / 121][Stage 9:==============================>                        (66 + 55) / 121][Stage 9:===================================>                   (78 + 43) / 121][Stage 9:==========================================>            (94 + 27) / 121][Stage 9:=================================================>    (110 + 11) / 121][Stage 9:=====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.015669434 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  176 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.498229723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (71 + 42) / 113][Stage 10:======================================>               (80 + 33) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:==============================================>       (98 + 15) / 113][Stage 10:===================================================>  (107 + 6) / 113][Stage 10:====================================================> (109 + 4) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:===================================>                  (74 + 40) / 114][Stage 11:=======================================>              (83 + 31) / 114][Stage 11:=========================================>            (88 + 26) / 114][Stage 11:=============================================>        (95 + 19) / 114][Stage 11:===============================================>     (102 + 12) / 114][Stage 11:=====================================================>(112 + 2) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.271237144 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  141 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.624775159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (58 + 55) / 113][Stage 12:===============================>                      (65 + 48) / 113][Stage 12:========================================>             (84 + 29) / 113][Stage 12:=============================================>        (96 + 17) / 113][Stage 12:================================================>    (103 + 10) / 113]                                                                                [Stage 13:============================>                         (60 + 54) / 114][Stage 13:===============================>                      (66 + 48) / 114][Stage 13:=====================================>                (79 + 35) / 114][Stage 13:============================================>         (94 + 20) / 114][Stage 13:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.605877791 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478013016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (70 + 43) / 113][Stage 14:====================================>                 (76 + 37) / 113][Stage 14:========================================>             (85 + 28) / 113][Stage 14:===============================================>      (99 + 14) / 113][Stage 14:==================================================>   (106 + 7) / 113][Stage 14:====================================================> (110 + 3) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:===================================>                  (74 + 40) / 114][Stage 15:======================================>               (82 + 32) / 114][Stage 15:=============================================>        (95 + 19) / 114][Stage 15:=================================================>    (105 + 9) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.695767654 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.584673026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:============================>                         (64 + 56) / 120][Stage 16:===================================>                  (79 + 41) / 120][Stage 16:===========================================>          (97 + 23) / 120][Stage 16:===============================================>     (107 + 13) / 120][Stage 16:===================================================>  (115 + 5) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:==============================>                       (69 + 52) / 121][Stage 17:=====================================>                (83 + 38) / 121][Stage 17:===========================================>          (98 + 23) / 121][Stage 17:==============================================>      (107 + 14) / 121][Stage 17:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.825517388 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  125 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.469862313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:==================================>                   (76 + 42) / 118][Stage 18:======================================>               (84 + 34) / 118][Stage 18:===========================================>          (95 + 23) / 118][Stage 18:==============================================>      (104 + 14) / 118][Stage 18:=================================================>    (109 + 9) / 118][Stage 18:====================================================> (114 + 4) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:==================================>                   (76 + 43) / 119][Stage 19:=====================================>                (83 + 36) / 119][Stage 19:==========================================>           (93 + 26) / 119][Stage 19:================================================>    (109 + 10) / 119][Stage 19:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.80431006 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  42 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.510072585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (69 + 46) / 115][Stage 20:====================================>                 (78 + 37) / 115][Stage 20:==============================================>       (98 + 17) / 115][Stage 20:==================================================>   (108 + 7) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:===============================>                      (68 + 48) / 116][Stage 21:========================================>             (87 + 29) / 116][Stage 21:===============================================>     (103 + 13) / 116][Stage 21:===================================================>  (110 + 6) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.372538335 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  1 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464523552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (73 + 45) / 118][Stage 22:====================================>                 (80 + 38) / 118][Stage 22:===========================================>          (95 + 23) / 118][Stage 22:===============================================>     (106 + 12) / 118][Stage 22:====================================================> (115 + 3) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (77 + 42) / 119][Stage 23:=========================================>            (91 + 28) / 119][Stage 23:===========================================>          (95 + 24) / 119][Stage 23:=============================================>       (103 + 16) / 119][Stage 23:==================================================>   (112 + 7) / 119][Stage 23:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.601453317 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  119 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.508909144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (71 + 44) / 115][Stage 24:============================================>         (94 + 21) / 115][Stage 24:==================================================>   (108 + 7) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:===================================>                  (76 + 40) / 116][Stage 25:=============================================>        (97 + 19) / 116][Stage 25:=================================================>    (107 + 9) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.9124948 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.475340513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==============================>                       (66 + 49) / 115][Stage 26:=====================================>                (79 + 36) / 115][Stage 26:============================================>         (95 + 20) / 115][Stage 26:================================================>    (105 + 10) / 115][Stage 26:===================================================>  (110 + 5) / 115][Stage 26:====================================================> (112 + 3) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:=====================================>                (80 + 36) / 116][Stage 27:=========================================>            (90 + 26) / 116][Stage 27:==============================================>      (101 + 15) / 116][Stage 27:===================================================>  (110 + 6) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.77359924 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  214 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.512676744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:============================>                         (63 + 58) / 121][Stage 28:===================================>                  (79 + 42) / 121][Stage 28:=============================================>       (104 + 17) / 121][Stage 28:====================================================> (118 + 3) / 121][Stage 28:=====================================================>(119 + 2) / 121]                                                                                [Stage 29:===========================>                          (62 + 60) / 122][Stage 29:==================================>                   (78 + 44) / 122][Stage 29:=========================================>            (93 + 29) / 122][Stage 29:===================================================>  (116 + 6) / 122][Stage 29:====================================================> (119 + 3) / 122][Stage 29:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.908116376 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  68 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.53409965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (81 + 34) / 115][Stage 30:=========================================>            (88 + 27) / 115][Stage 30:==============================================>      (100 + 15) / 115][Stage 30:===================================================>  (109 + 6) / 115][Stage 30:====================================================> (111 + 4) / 115]                                                                                [Stage 31:=======================================>              (85 + 31) / 116][Stage 31:============================================>         (95 + 21) / 116][Stage 31:===============================================>     (104 + 12) / 116][Stage 31:==================================================>   (108 + 8) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.544317832 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  129 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.458154308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (64 + 51) / 115][Stage 32:===================================>                  (76 + 39) / 115][Stage 32:=======================================>              (85 + 30) / 115][Stage 32:==================================================>   (107 + 8) / 115][Stage 32:===================================================>  (110 + 5) / 115][Stage 32:====================================================> (112 + 3) / 115]                                                                                [Stage 33:===================================>                  (77 + 39) / 116][Stage 33:=======================================>              (85 + 31) / 116][Stage 33:=============================================>       (100 + 16) / 116][Stage 33:====================================================> (113 + 3) / 116][Stage 33:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.623979752 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  100 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.422783198 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (83 + 32) / 115][Stage 34:===========================================>          (92 + 23) / 115][Stage 34:==================================================>   (107 + 8) / 115][Stage 34:=====================================================>(113 + 2) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:=======================================>              (84 + 32) / 116][Stage 35:=============================================>        (98 + 18) / 116][Stage 35:==================================================>   (109 + 7) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.347815632 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438295122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (70 + 43) / 113][Stage 36:=======================================>              (82 + 31) / 113][Stage 36:==============================================>       (97 + 16) / 113][Stage 36:=================================================>    (104 + 9) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:===================================>                  (74 + 40) / 114][Stage 37:=======================================>              (84 + 30) / 114][Stage 37:============================================>         (94 + 20) / 114][Stage 37:==============================================>      (100 + 14) / 114][Stage 37:=================================================>    (105 + 9) / 114][Stage 37:==================================================>   (107 + 7) / 114][Stage 37:===================================================>  (108 + 6) / 114][Stage 37:===================================================>  (109 + 5) / 114][Stage 37:====================================================> (111 + 3) / 114][Stage 37:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.220278513 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  47 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.502054899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:================================>                     (69 + 44) / 113][Stage 38:=========================================>            (87 + 26) / 113][Stage 38:===================================================>  (107 + 6) / 113]                                                                                [Stage 39:===========================>                          (59 + 55) / 114][Stage 39:=================================>                    (71 + 43) / 114][Stage 39:=============================================>        (96 + 18) / 114][Stage 39:=================================================>    (105 + 9) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.089184436 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.449203304 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:=================================>                    (73 + 45) / 118][Stage 40:=========================================>            (91 + 27) / 118][Stage 40:===============================================>     (106 + 12) / 118][Stage 40:====================================================> (115 + 3) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:=======================================>              (88 + 31) / 119][Stage 41:=============================================>       (102 + 17) / 119][Stage 41:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.126095925 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.450725505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=======================================>              (82 + 31) / 113][Stage 42:===========================================>          (91 + 22) / 113][Stage 42:==============================================>       (98 + 15) / 113][Stage 42:====================================================> (110 + 3) / 113][Stage 42:=====================================================>(111 + 2) / 113]                                                                                [Stage 43:=========================================>            (88 + 26) / 114][Stage 43:=============================================>        (97 + 17) / 114][Stage 43:==================================================>   (107 + 7) / 114][Stage 43:====================================================> (110 + 4) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.430676087 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  207 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.460340047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (69 + 46) / 115][Stage 44:======================================>               (82 + 33) / 115][Stage 44:===============================================>     (102 + 13) / 115][Stage 44:====================================================> (111 + 4) / 115]                                                                                [Stage 45:=====================================>                (80 + 36) / 116][Stage 45:============================================>         (95 + 21) / 116][Stage 45:=================================================>    (107 + 9) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.042563077 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  145 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.433498799 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (70 + 45) / 115][Stage 46:======================================>               (81 + 34) / 115][Stage 46:==============================================>      (100 + 15) / 115][Stage 46:==================================================>   (108 + 7) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:===================================>                  (76 + 40) / 116][Stage 47:============================================>         (96 + 20) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:===================================================>  (111 + 5) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.27350498 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  28 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 28 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478389971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (65 + 50) / 115][Stage 48:====================================>                 (78 + 37) / 115][Stage 48:==============================================>      (100 + 15) / 115][Stage 48:====================================================> (111 + 4) / 115][Stage 48:====================================================> (112 + 3) / 115]                                                                                [Stage 49:================================>                     (70 + 46) / 116][Stage 49:=======================================>              (84 + 32) / 116][Stage 49:=============================================>        (98 + 18) / 116][Stage 49:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 3.295784704 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  213 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.430188818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (74 + 44) / 118][Stage 50:======================================>               (84 + 34) / 118][Stage 50:===========================================>          (96 + 22) / 118][Stage 50:====================================================> (114 + 4) / 118][Stage 50:=====================================================>(116 + 2) / 118]                                                                                [Stage 51:=================================>                    (73 + 46) / 119][Stage 51:====================================>                 (81 + 38) / 119][Stage 51:============================================>        (101 + 18) / 119][Stage 51:=================================================>    (110 + 9) / 119][Stage 51:===================================================>  (113 + 6) / 119][Stage 51:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.674115045 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403856331 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (80 + 35) / 115][Stage 52:========================================>             (86 + 29) / 115][Stage 52:============================================>         (95 + 20) / 115][Stage 52:==================================================>   (107 + 8) / 115][Stage 52:=====================================================>(113 + 2) / 115]                                                                                [Stage 53:======================================>               (82 + 34) / 116][Stage 53:=========================================>            (90 + 26) / 116][Stage 53:===============================================>     (105 + 11) / 116][Stage 53:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.881805647 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  32 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.436293559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===============================>                      (67 + 48) / 115][Stage 54:====================================>                 (78 + 37) / 115][Stage 54:=============================================>        (97 + 18) / 115][Stage 54:===================================================>  (109 + 6) / 115][Stage 54:====================================================> (112 + 3) / 115][Stage 54:=====================================================>(114 + 1) / 115]                                                                                [Stage 55:===============================>                      (67 + 49) / 116][Stage 55:=====================================>                (81 + 35) / 116][Stage 55:============================================>         (96 + 20) / 116][Stage 55:===================================================>  (110 + 6) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.26686643 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  57 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.417461233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:====================================>                 (79 + 39) / 118][Stage 56:======================================>               (84 + 34) / 118][Stage 56:===========================================>          (96 + 22) / 118][Stage 56:==================================================>   (110 + 8) / 118][Stage 56:=====================================================>(116 + 2) / 118][Stage 56:=====================================================>(117 + 1) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:==================================>                   (77 + 42) / 119][Stage 57:======================================>               (85 + 34) / 119][Stage 57:=========================================>            (91 + 28) / 119][Stage 57:=============================================>       (102 + 17) / 119][Stage 57:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 4.076582908 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  197 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415292273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:>                                                       (0 + 0) / 118][Stage 58:=================================>                    (73 + 45) / 118][Stage 58:===================================>                  (78 + 40) / 118][Stage 58:=====================================>                (82 + 36) / 118][Stage 58:=========================================>            (91 + 27) / 118][Stage 58:===============================================>     (105 + 13) / 118][Stage 58:=====================================================>(117 + 1) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:==================================>                   (77 + 42) / 119][Stage 59:======================================>               (85 + 34) / 119][Stage 59:===========================================>          (96 + 23) / 119][Stage 59:================================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.345425088 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  233 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.425753735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:==================================>                   (76 + 42) / 118][Stage 60:=======================================>              (87 + 31) / 118][Stage 60:===============================================>     (105 + 13) / 118][Stage 60:====================================================> (115 + 3) / 118]                                                                                [Stage 61:==================================>                   (76 + 43) / 119][Stage 61:=======================================>              (86 + 33) / 119][Stage 61:=============================================>       (102 + 17) / 119][Stage 61:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.062129329 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  193 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.422145154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:==================================>                   (75 + 43) / 118][Stage 62:=======================================>              (87 + 31) / 118][Stage 62:============================================>         (98 + 20) / 118][Stage 62:==================================================>   (110 + 8) / 118]                                                                                [Stage 63:=================================>                    (73 + 46) / 119][Stage 63:====================================>                 (80 + 39) / 119][Stage 63:========================================>             (90 + 29) / 119][Stage 63:=============================================>       (103 + 16) / 119][Stage 63:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.342082402 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379479423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:======================================>               (80 + 33) / 113][Stage 64:============================================>         (93 + 20) / 113][Stage 64:===============================================>     (101 + 12) / 113][Stage 64:==================================================>   (106 + 7) / 113][Stage 64:====================================================> (110 + 3) / 113]                                                                                [Stage 65:=======================================>              (84 + 30) / 114][Stage 65:=============================================>        (96 + 18) / 114][Stage 65:=================================================>    (105 + 9) / 114][Stage 65:=====================================================>(112 + 2) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.618811795 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  177 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386280004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=================================>                    (70 + 43) / 113][Stage 66:=======================================>              (83 + 30) / 113][Stage 66:============================================>         (93 + 20) / 113][Stage 66:==============================================>       (98 + 15) / 113][Stage 66:===================================================>  (107 + 6) / 113]                                                                                [Stage 67:=====================================>                (79 + 35) / 114][Stage 67:============================================>         (93 + 21) / 114][Stage 67:===============================================>     (102 + 12) / 114][Stage 67:===================================================>  (109 + 5) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.110498897 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  167 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413211851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:===================================>                  (78 + 40) / 118][Stage 68:=============================================>       (101 + 17) / 118][Stage 68:===================================================>  (113 + 5) / 118]                                                                                [Stage 69:=================================>                    (74 + 45) / 119][Stage 69:=====================================>                (83 + 36) / 119][Stage 69:=============================================>       (103 + 16) / 119][Stage 69:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.986397021 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  67 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406415709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:==================================>                   (76 + 42) / 118][Stage 70:=====================================>                (82 + 36) / 118][Stage 70:===========================================>          (95 + 23) / 118][Stage 70:===============================================>     (106 + 12) / 118]                                                                                [Stage 71:=================================>                    (74 + 45) / 119][Stage 71:====================================>                 (80 + 39) / 119][Stage 71:=======================================>              (87 + 32) / 119][Stage 71:==============================================>      (105 + 14) / 119][Stage 71:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.341801395 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  140 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37309476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (81 + 34) / 115][Stage 72:========================================>             (87 + 28) / 115][Stage 72:==============================================>       (98 + 17) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:======================================>               (83 + 33) / 116][Stage 73:=============================================>        (97 + 19) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.802349369 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  30 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400346427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==================================>                   (72 + 41) / 113][Stage 74:======================================>               (80 + 33) / 113][Stage 74:============================================>         (93 + 20) / 113][Stage 74:===============================================>     (102 + 11) / 113][Stage 74:=====================================================>(111 + 2) / 113]                                                                                [Stage 75:========================================>             (85 + 29) / 114][Stage 75:===========================================>          (92 + 22) / 114][Stage 75:===============================================>     (102 + 12) / 114][Stage 75:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.1480366 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421352092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (69 + 46) / 115][Stage 76:========================================>             (86 + 29) / 115][Stage 76:=============================================>        (96 + 19) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:==================================>                   (74 + 42) / 116][Stage 77:========================================>             (86 + 30) / 116][Stage 77:==============================================>       (99 + 17) / 116][Stage 77:=====================================================>(114 + 2) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.996471437 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405051367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:===================================>                  (78 + 40) / 118][Stage 78:==========================================>           (93 + 25) / 118][Stage 78:=============================================>       (101 + 17) / 118][Stage 78:=====================================================>(116 + 2) / 118]                                                                                [Stage 79:=================================>                    (74 + 45) / 119][Stage 79:===================================>                  (78 + 41) / 119][Stage 79:======================================>               (85 + 34) / 119][Stage 79:============================================>         (98 + 21) / 119][Stage 79:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.082571259 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  40 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382070082 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=================================>                    (74 + 44) / 118][Stage 80:=======================================>              (86 + 32) / 118][Stage 80:============================================>         (97 + 21) / 118][Stage 80:==================================================>   (110 + 8) / 118]                                                                                [Stage 81:=================================>                    (74 + 45) / 119][Stage 81:=====================================>                (82 + 37) / 119][Stage 81:===========================================>          (95 + 24) / 119][Stage 81:===============================================>     (106 + 13) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.183781224 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  24 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400354646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:>                                                       (0 + 0) / 115][Stage 82:=================================>                    (72 + 43) / 115][Stage 82:=======================================>              (84 + 31) / 115][Stage 82:==============================================>      (100 + 15) / 115][Stage 82:=====================================================>(113 + 2) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:================================>                     (69 + 47) / 116][Stage 83:======================================>               (83 + 33) / 116][Stage 83:==============================================>      (101 + 15) / 116][Stage 83:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.954746581 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398196465 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===================================>                  (75 + 40) / 115][Stage 84:==========================================>           (91 + 24) / 115][Stage 84:==================================================>   (107 + 8) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:=================================>                    (73 + 43) / 116][Stage 85:====================================>                 (79 + 37) / 116][Stage 85:============================================>         (95 + 21) / 116][Stage 85:==================================================>   (109 + 7) / 116][Stage 85:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.837282189 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  99 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.433160254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 60) / 121][Stage 86:=============================>                        (67 + 54) / 121][Stage 86:====================================>                 (82 + 39) / 121][Stage 86:===========================================>         (100 + 21) / 121][Stage 86:=====================================================>(119 + 2) / 121]                                                                                [Stage 87:===========================>                          (62 + 60) / 122][Stage 87:================================>                     (74 + 48) / 122][Stage 87:==========================================>           (97 + 25) / 122][Stage 87:===================================================>  (116 + 6) / 122][Stage 87:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.352075763 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  86 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365511917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===================================>                  (74 + 39) / 113][Stage 88:=======================================>              (83 + 30) / 113][Stage 88:==========================================>           (88 + 25) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:=====================================================>(111 + 2) / 113]                                                                                [Stage 89:=======================================>              (84 + 30) / 114][Stage 89:============================================>         (94 + 20) / 114][Stage 89:==================================================>   (106 + 8) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.285160743 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369404258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (70 + 43) / 113][Stage 90:=====================================>                (79 + 34) / 113][Stage 90:===========================================>          (91 + 22) / 113][Stage 90:===============================================>     (101 + 12) / 113][Stage 90:=====================================================>(111 + 2) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:===================================>                  (75 + 39) / 114][Stage 91:=========================================>            (88 + 26) / 114][Stage 91:============================================>         (94 + 20) / 114][Stage 91:================================================>    (104 + 10) / 114][Stage 91:====================================================> (110 + 4) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.309666448 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  196 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.426819812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (61 + 60) / 121][Stage 92:================================>                     (73 + 48) / 121][Stage 92:========================================>             (90 + 31) / 121][Stage 92:================================================>    (111 + 10) / 121]                                                                                [Stage 93:===========================>                          (63 + 59) / 122][Stage 93:==============================>                       (69 + 53) / 122][Stage 93:==========================================>           (97 + 25) / 122][Stage 93:====================================================> (118 + 4) / 122][Stage 93:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.130573559 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  133 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402652126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:============================>                         (59 + 54) / 113][Stage 94:===================================>                  (74 + 39) / 113][Stage 94:===========================================>          (91 + 22) / 113][Stage 94:==================================================>   (105 + 8) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:==============================>                       (64 + 50) / 114][Stage 95:===================================>                  (75 + 39) / 114][Stage 95:============================================>         (94 + 20) / 114][Stage 95:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.221950901 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  217 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418322689 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:===========================>                          (62 + 59) / 121][Stage 96:=================================>                    (74 + 47) / 121][Stage 96:============================================>        (101 + 20) / 121][Stage 96:====================================================> (118 + 3) / 121]                                                                                [Stage 97:===========================>                          (61 + 61) / 122][Stage 97:=============================>                        (66 + 56) / 122][Stage 97:===================================>                  (80 + 42) / 122][Stage 97:==============================================>      (107 + 15) / 122][Stage 97:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.014364406 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  144 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.444540796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:=================================>                    (74 + 47) / 121][Stage 98:=============================================>       (105 + 16) / 121][Stage 98:=====================================================>(119 + 2) / 121]                                                                                [Stage 99:===========================>                          (61 + 61) / 122][Stage 99:==============================>                       (68 + 54) / 122][Stage 99:===================================>                  (81 + 41) / 122][Stage 99:===============================================>     (109 + 13) / 122][Stage 99:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.068546559 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  98 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.34536461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (82 + 33) / 115][Stage 100:=========================================>           (90 + 25) / 115][Stage 100:==============================================>     (102 + 13) / 115][Stage 100:===================================================> (112 + 3) / 115]                                                                                [Stage 101:======================================>              (84 + 32) / 116][Stage 101:==========================================>          (93 + 23) / 116][Stage 101:===============================================>    (105 + 11) / 116][Stage 101:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.77410246 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  219 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379734838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==============================>                      (66 + 49) / 115][Stage 102:===================================>                 (77 + 38) / 115][Stage 102:=======================================>             (86 + 29) / 115][Stage 102:============================================>        (97 + 18) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:==============================>                      (67 + 49) / 116][Stage 103:=====================================>               (81 + 35) / 116][Stage 103:==============================================>     (103 + 13) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.026322404 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  52 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.414624967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 61) / 121][Stage 104:===========================>                         (63 + 58) / 121][Stage 104:===================================>                 (82 + 39) / 121][Stage 104:==============================================>     (108 + 13) / 121]                                                                                [Stage 105:==========================>                          (61 + 61) / 122][Stage 105:=============================>                       (68 + 54) / 122][Stage 105:==================================>                  (79 + 43) / 122][Stage 105:===========================================>        (102 + 20) / 122][Stage 105:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.052329889 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.431456131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 61) / 121][Stage 106:=============================>                       (67 + 54) / 121][Stage 106:======================================>              (87 + 34) / 121][Stage 106:==============================================>     (109 + 12) / 121][Stage 106:====================================================>(120 + 1) / 121]                                                                                [Stage 107:==========================>                          (61 + 61) / 122][Stage 107:============================>                        (66 + 56) / 122][Stage 107:====================================>                (85 + 37) / 122][Stage 107:============================================>       (104 + 18) / 122][Stage 107:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.068973832 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  114 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.429976471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:===========================>                         (62 + 58) / 120][Stage 108:=================================>                   (75 + 45) / 120][Stage 108:==============================================>     (107 + 13) / 120]                                                                                [Stage 109:===========================>                         (62 + 59) / 121][Stage 109:================================>                    (74 + 47) / 121][Stage 109:========================================>            (92 + 29) / 121][Stage 109:=================================================>   (114 + 7) / 121][Stage 109:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.995055012 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  218 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383543539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (73 + 45) / 118][Stage 110:===================================>                 (78 + 40) / 118][Stage 110:============================================>        (98 + 20) / 118][Stage 110:=================================================>   (111 + 7) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:======================================>              (87 + 32) / 119][Stage 111:===========================================>         (98 + 21) / 119][Stage 111:==============================================>     (107 + 12) / 119]                                                                                Time elapsed: 3.144088568 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  174 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411328486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:=================================>                   (74 + 44) / 118][Stage 112:=====================================>               (84 + 34) / 118][Stage 112:=========================================>           (92 + 26) / 118][Stage 112:============================================>        (98 + 20) / 118][Stage 112:===================================================> (114 + 4) / 118]                                                                                [Stage 113:==================================>                  (77 + 42) / 119][Stage 113:===================================>                 (80 + 39) / 119][Stage 113:========================================>            (90 + 29) / 119][Stage 113:==============================================>     (106 + 13) / 119][Stage 113:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.362605142 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  81 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39230494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:============================>                        (61 + 52) / 113][Stage 114:================================>                    (70 + 43) / 113][Stage 114:==========================================>          (90 + 23) / 113][Stage 114:=================================================>   (105 + 8) / 113][Stage 114:====================================================>(111 + 2) / 113]                                                                                [Stage 115:===========================>                         (59 + 55) / 114][Stage 115:============================>                        (61 + 53) / 114][Stage 115:====================================>                (79 + 35) / 114][Stage 115:=============================================>      (100 + 14) / 114][Stage 115:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.145952406 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.343430728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=====================================>               (82 + 33) / 115][Stage 116:=========================================>           (91 + 24) / 115][Stage 116:=================================================>   (108 + 7) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:=====================================>               (82 + 34) / 116][Stage 117:========================================>            (89 + 27) / 116][Stage 117:==============================================>     (104 + 12) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.671332962 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  74 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341931947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:======================================>              (83 + 32) / 115][Stage 118:==========================================>          (93 + 22) / 115][Stage 118:===============================================>    (105 + 10) / 115][Stage 118:====================================================>(113 + 2) / 115]                                                                                [Stage 119:====================================>                (80 + 36) / 116][Stage 119:==========================================>          (94 + 22) / 116][Stage 119:================================================>    (107 + 9) / 116][Stage 119:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.619713368 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408036804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (61 + 60) / 121][Stage 120:===============================>                     (72 + 49) / 121][Stage 120:======================================>              (89 + 32) / 121][Stage 120:==================================================>  (115 + 6) / 121]                                                                                [Stage 121:===========================>                         (64 + 58) / 122][Stage 121:================================>                    (75 + 47) / 122][Stage 121:==========================================>          (97 + 25) / 122][Stage 121:==================================================>  (116 + 6) / 122][Stage 121:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.090611107 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  83 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403593842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:===========================>                         (62 + 59) / 121][Stage 122:==================================>                  (78 + 43) / 121][Stage 122:===========================================>        (101 + 20) / 121][Stage 122:====================================================>(120 + 1) / 121]                                                                                [Stage 123:===========================>                         (64 + 58) / 122][Stage 123:====================================>                (83 + 39) / 122][Stage 123:============================================>       (105 + 17) / 122][Stage 123:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 2.971619135 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  2 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399101381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 61) / 121][Stage 124:==============================>                      (69 + 52) / 121][Stage 124:=====================================>               (85 + 36) / 121][Stage 124:===========================================>        (102 + 19) / 121][Stage 124:====================================================>(119 + 2) / 121]                                                                                [Stage 125:==========================>                          (61 + 61) / 122][Stage 125:=============================>                       (67 + 55) / 122][Stage 125:=======================================>             (90 + 32) / 122][Stage 125:==============================================>     (110 + 12) / 122][Stage 125:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.292918175 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.345555088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (84 + 31) / 115][Stage 126:==========================================>          (93 + 22) / 115][Stage 126:=================================================>   (108 + 7) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:=======================================>             (86 + 30) / 116][Stage 127:==========================================>          (93 + 23) / 116][Stage 127:==============================================>     (104 + 12) / 116][Stage 127:====================================================>(114 + 2) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.31843612 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.373419514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=============================>                       (64 + 51) / 115][Stage 128:===================================>                 (76 + 39) / 115][Stage 128:=========================================>           (91 + 24) / 115][Stage 128:=============================================>       (99 + 16) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:==============================>                      (66 + 50) / 116][Stage 129:===============================>                     (69 + 47) / 116][Stage 129:==========================================>          (93 + 23) / 116][Stage 129:==============================================>     (103 + 13) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.992901715 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  216 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387030277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (74 + 41) / 115][Stage 130:======================================>              (83 + 32) / 115][Stage 130:==============================================>     (103 + 12) / 115][Stage 130:===================================================> (111 + 4) / 115]                                                                                [Stage 131:===============================>                     (70 + 46) / 116][Stage 131:=======================================>             (86 + 30) / 116][Stage 131:=============================================>      (101 + 15) / 116][Stage 131:===================================================> (113 + 3) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.013250099 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385324217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (71 + 44) / 115][Stage 132:========================================>            (88 + 27) / 115][Stage 132:=================================================>   (107 + 8) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:===============================>                     (70 + 46) / 116][Stage 133:========================================>            (88 + 28) / 116][Stage 133:===============================================>    (106 + 10) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.909707252 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  65 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408377123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 60) / 121][Stage 134:============================>                        (66 + 55) / 121][Stage 134:======================================>              (88 + 33) / 121][Stage 134:==================================================>  (115 + 6) / 121]                                                                                [Stage 135:===========================>                         (63 + 59) / 122][Stage 135:===============================>                     (73 + 49) / 122][Stage 135:==========================================>          (97 + 25) / 122][Stage 135:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 2.99157757 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  156 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.468290057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (59 + 54) / 113][Stage 136:==============================>                      (65 + 48) / 113][Stage 136:======================================>              (82 + 31) / 113][Stage 136:=================================================>   (106 + 7) / 113][Stage 136:====================================================>(111 + 2) / 113]                                                                                [Stage 137:===========================>                         (60 + 54) / 114][Stage 137:==============================>                      (66 + 48) / 114][Stage 137:=====================================>               (80 + 34) / 114][Stage 137:==============================================>     (102 + 12) / 114][Stage 137:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.948775178 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  148 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381974496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:============================>                        (60 + 53) / 113][Stage 138:==================================>                  (73 + 40) / 113][Stage 138:============================================>        (94 + 19) / 113][Stage 138:================================================>    (104 + 9) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===========================>                         (60 + 54) / 114][Stage 139:=================================>                   (73 + 41) / 114][Stage 139:=======================================>             (84 + 30) / 114][Stage 139:================================================>    (105 + 9) / 114][Stage 139:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.443830441 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398801319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 60) / 120][Stage 140:===========================>                         (63 + 57) / 120][Stage 140:====================================>                (83 + 37) / 120][Stage 140:===========================================>         (98 + 22) / 120][Stage 140:===================================================> (117 + 3) / 120]                                                                                [Stage 141:===========================>                         (63 + 58) / 121][Stage 141:===================================>                 (81 + 40) / 121][Stage 141:============================================>       (104 + 17) / 121][Stage 141:=================================================>   (113 + 8) / 121][Stage 141:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.133436561 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  147 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382102996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (61 + 52) / 113][Stage 142:===================================>                 (76 + 37) / 113][Stage 142:============================================>        (95 + 18) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:============================>                        (61 + 53) / 114][Stage 143:=================================>                   (71 + 43) / 114][Stage 143:=======================================>             (86 + 28) / 114][Stage 143:=================================================>   (106 + 8) / 114][Stage 143:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.142689562 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  122 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.339436005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:====================================>                (80 + 35) / 115][Stage 144:=======================================>             (86 + 29) / 115][Stage 144:=============================================>      (100 + 15) / 115][Stage 144:===================================================> (112 + 3) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:=====================================>               (83 + 33) / 116][Stage 145:==========================================>          (93 + 23) / 116][Stage 145:================================================>    (107 + 9) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.661914761 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405491241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:============================>                        (64 + 57) / 121][Stage 146:==============================>                      (70 + 51) / 121][Stage 146:===========================================>        (101 + 20) / 121][Stage 146:====================================================>(120 + 1) / 121]                                                                                [Stage 147:============================>                        (66 + 56) / 122][Stage 147:==================================>                  (80 + 42) / 122][Stage 147:==============================================>     (108 + 14) / 122][Stage 147:====================================================>(120 + 2) / 122][Stage 147:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.142633738 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  77 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.374935973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (72 + 43) / 115][Stage 148:========================================>            (87 + 28) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:==================================================>  (110 + 5) / 115]                                                                                [Stage 149:===============================>                     (70 + 46) / 116][Stage 149:=========================================>           (91 + 25) / 116][Stage 149:=============================================>      (102 + 14) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.847977324 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398913019 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:============================>                        (65 + 55) / 120][Stage 150:===================================>                 (81 + 39) / 120][Stage 150:=============================================>      (105 + 15) / 120][Stage 150:===================================================> (117 + 3) / 120]                                                                                [Stage 151:===========================>                         (63 + 58) / 121][Stage 151:=================================>                   (77 + 44) / 121][Stage 151:============================================>       (103 + 18) / 121][Stage 151:====================================================>(119 + 2) / 121][Stage 151:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.19834805 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  76 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.354947368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (70 + 43) / 113][Stage 152:======================================>              (83 + 30) / 113][Stage 152:==========================================>          (91 + 22) / 113][Stage 152:==============================================>     (102 + 11) / 113][Stage 152:===================================================> (110 + 3) / 113]                                                                                [Stage 153:====================================>                (78 + 36) / 114][Stage 153:========================================>            (87 + 27) / 114][Stage 153:=============================================>       (98 + 16) / 114][Stage 153:=================================================>   (107 + 7) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.912272417 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.412726421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (62 + 59) / 121][Stage 154:==================================>                  (78 + 43) / 121][Stage 154:============================================>       (104 + 17) / 121][Stage 154:==================================================>  (116 + 5) / 121]                                                                                [Stage 155:==========================>                          (61 + 61) / 122][Stage 155:===========================>                         (64 + 58) / 122][Stage 155:====================================>                (84 + 38) / 122][Stage 155:==============================================>     (109 + 13) / 122][Stage 155:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.17305108 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.338063543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=======================================>             (86 + 29) / 115][Stage 156:=============================================>      (101 + 14) / 115][Stage 156:===================================================> (111 + 4) / 115][Stage 156:====================================================>(114 + 1) / 115]                                                                                [Stage 157:=====================================>               (82 + 34) / 116][Stage 157:==========================================>          (93 + 23) / 116][Stage 157:=================================================>   (108 + 8) / 116][Stage 157:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.868228783 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  16 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360130268 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:==================================>                  (76 + 42) / 118][Stage 158:=========================================>           (93 + 25) / 118][Stage 158:==============================================>     (106 + 12) / 118][Stage 158:====================================================>(116 + 2) / 118]                                                                                [Stage 159:=================================>                   (76 + 43) / 119][Stage 159:========================================>            (91 + 28) / 119][Stage 159:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.90078197 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  31 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.361140948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:==================================>                  (77 + 41) / 118][Stage 160:=======================================>             (87 + 31) / 118][Stage 160:============================================>       (100 + 18) / 118][Stage 160:==================================================>  (113 + 5) / 118]                                                                                [Stage 161:=================================>                   (75 + 44) / 119][Stage 161:=====================================>               (84 + 35) / 119][Stage 161:============================================>       (101 + 18) / 119][Stage 161:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.149785469 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  112 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405537999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===========================>                         (62 + 58) / 120][Stage 162:================================>                    (74 + 46) / 120][Stage 162:===========================================>         (99 + 21) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:===============================>                     (72 + 49) / 121][Stage 163:======================================>              (89 + 32) / 121][Stage 163:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 2.798771823 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398526937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:=============================>                       (67 + 53) / 120][Stage 164:=======================================>             (89 + 31) / 120][Stage 164:=================================================>   (111 + 9) / 120][Stage 164:====================================================>(119 + 1) / 120]                                                                                [Stage 165:==========================>                          (61 + 60) / 121][Stage 165:============================>                        (66 + 55) / 121][Stage 165:====================================>                (83 + 38) / 121][Stage 165:===========================================>        (101 + 20) / 121][Stage 165:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.094106012 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  164 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438428026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (72 + 41) / 113][Stage 166:=====================================>               (81 + 32) / 113][Stage 166:=========================================>           (89 + 24) / 113][Stage 166:==============================================>     (101 + 12) / 113][Stage 166:==================================================>  (107 + 6) / 113]                                                                                [Stage 167:======================================>              (82 + 32) / 114][Stage 167:============================================>        (95 + 19) / 114][Stage 167:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.820733265 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  25 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.345279364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (84 + 31) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:=================================================>   (107 + 8) / 115][Stage 168:====================================================>(113 + 2) / 115]                                                                                [Stage 169:=====================================>               (82 + 34) / 116][Stage 169:==========================================>          (93 + 23) / 116][Stage 169:=================================================>   (108 + 8) / 116][Stage 169:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.832205607 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  109 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.344085424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=====================================>               (82 + 33) / 115][Stage 170:=========================================>           (89 + 26) / 115][Stage 170:=============================================>       (98 + 17) / 115][Stage 170:====================================================>(113 + 2) / 115]                                                                                [Stage 171:=========================================>           (90 + 26) / 116][Stage 171:==============================================>     (103 + 13) / 116][Stage 171:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.616335573 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.361248607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=================================>                   (74 + 44) / 118][Stage 172:======================================>              (85 + 33) / 118][Stage 172:=============================================>      (104 + 14) / 118][Stage 172:===================================================> (114 + 4) / 118]                                                                                [Stage 173:==================================>                  (77 + 42) / 119][Stage 173:=======================================>             (88 + 31) / 119][Stage 173:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.852383869 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  43 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389833374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (59 + 54) / 113][Stage 174:================================>                    (69 + 44) / 113][Stage 174:=========================================>           (89 + 24) / 113][Stage 174:=================================================>   (105 + 8) / 113]                                                                                [Stage 175:============================>                        (61 + 53) / 114][Stage 175:===============================>                     (68 + 46) / 114][Stage 175:========================================>            (87 + 27) / 114][Stage 175:==============================================>     (103 + 11) / 114][Stage 175:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.133824835 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  108 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380285212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (71 + 44) / 115][Stage 176:=======================================>             (86 + 29) / 115][Stage 176:=============================================>       (99 + 16) / 115][Stage 176:=================================================>   (108 + 7) / 115]                                                                                [Stage 177:================================>                    (72 + 44) / 116][Stage 177:=========================================>           (90 + 26) / 116][Stage 177:=============================================>      (102 + 14) / 116][Stage 177:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.892468295 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  19 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402828717 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (61 + 60) / 121][Stage 178:=================================>                   (76 + 45) / 121][Stage 178:=========================================>           (95 + 26) / 121][Stage 178:=================================================>   (112 + 9) / 121]                                                                                [Stage 179:==========================>                          (62 + 60) / 122][Stage 179:==============================>                      (70 + 52) / 122][Stage 179:==========================================>          (97 + 25) / 122][Stage 179:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.006841162 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.33377486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=======================================>             (85 + 30) / 115][Stage 180:=========================================>           (90 + 25) / 115][Stage 180:==============================================>     (103 + 12) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:=====================================>               (83 + 33) / 116][Stage 181:===========================================>         (95 + 21) / 116][Stage 181:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.689134663 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37548517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===================================>                 (75 + 38) / 113][Stage 182:=========================================>           (89 + 24) / 113][Stage 182:=============================================>       (98 + 15) / 113][Stage 182:=================================================>   (106 + 7) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:==================================>                  (75 + 39) / 114][Stage 183:========================================>            (87 + 27) / 114][Stage 183:==============================================>      (99 + 15) / 114][Stage 183:===================================================> (111 + 3) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.986461833 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404197257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (60 + 61) / 121][Stage 184:==============================>                      (70 + 51) / 121][Stage 184:=====================================>               (86 + 35) / 121][Stage 184:===============================================>    (110 + 11) / 121]                                                                                [Stage 185:==========================>                          (61 + 61) / 122][Stage 185:==============================>                      (71 + 51) / 122][Stage 185:=======================================>             (92 + 30) / 122][Stage 185:==================================================>  (116 + 6) / 122][Stage 185:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.107592401 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.388978953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:==============================>                      (64 + 49) / 113][Stage 186:====================================>                (78 + 35) / 113][Stage 186:==============================================>     (102 + 11) / 113][Stage 186:====================================================>(111 + 2) / 113]                                                                                [Stage 187:============================>                        (62 + 52) / 114][Stage 187:===================================>                 (77 + 37) / 114][Stage 187:==========================================>          (92 + 22) / 114][Stage 187:==================================================>  (108 + 6) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.206949783 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.350907244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (82 + 31) / 113][Stage 188:===========================================>         (93 + 20) / 113][Stage 188:==============================================>     (101 + 12) / 113][Stage 188:====================================================>(111 + 2) / 113]                                                                                [Stage 189:=====================================>               (81 + 33) / 114][Stage 189:============================================>        (96 + 18) / 114][Stage 189:==============================================>     (103 + 11) / 114][Stage 189:===================================================> (111 + 3) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.122969861 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  59 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341895881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:====================================>                (80 + 35) / 115][Stage 190:========================================>            (87 + 28) / 115][Stage 190:==============================================>     (102 + 13) / 115][Stage 190:==================================================>  (109 + 6) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:=====================================>               (81 + 35) / 116][Stage 191:======================================>              (85 + 31) / 116][Stage 191:=========================================>           (91 + 25) / 116][Stage 191:===============================================>    (106 + 10) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.055958524 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  136 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375413229 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:============================>                        (60 + 53) / 113][Stage 192:===============================>                     (67 + 46) / 113][Stage 192:===========================================>         (93 + 20) / 113][Stage 192:=================================================>   (105 + 8) / 113]                                                                                [Stage 193:===========================>                         (60 + 54) / 114][Stage 193:===============================>                     (67 + 47) / 114][Stage 193:=========================================>           (90 + 24) / 114][Stage 193:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.92076499 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  15 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.371253788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:===================================>                 (80 + 38) / 118][Stage 194:=======================================>             (87 + 31) / 118][Stage 194:============================================>        (98 + 20) / 118][Stage 194:====================================================>(116 + 2) / 118]                                                                                [Stage 195:================================>                    (74 + 45) / 119][Stage 195:=================================>                   (76 + 43) / 119][Stage 195:======================================>              (86 + 33) / 119][Stage 195:===========================================>         (98 + 21) / 119][Stage 195:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.189584292 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  165 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406964276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:=============================>                       (67 + 53) / 120][Stage 196:===================================>                 (80 + 40) / 120][Stage 196:=============================================>      (104 + 16) / 120][Stage 196:====================================================>(119 + 1) / 120]                                                                                [Stage 197:==========================>                          (61 + 60) / 121][Stage 197:==============================>                      (69 + 52) / 121][Stage 197:======================================>              (89 + 32) / 121][Stage 197:===============================================>    (110 + 11) / 121][Stage 197:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.986306083 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  7 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.465478609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:>                                                      (0 + 0) / 113][Stage 198:===================================>                 (76 + 37) / 113][Stage 198:========================================>            (86 + 27) / 113][Stage 198:=============================================>       (97 + 16) / 113][Stage 198:==================================================>  (108 + 5) / 113]                                                                                [Stage 199:=======================================>             (86 + 28) / 114][Stage 199:===========================================>         (94 + 20) / 114][Stage 199:=================================================>   (106 + 8) / 114][Stage 199:====================================================>(112 + 2) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.047585856 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  162 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.371395248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=============================>                       (65 + 50) / 115][Stage 200:==================================>                  (74 + 41) / 115][Stage 200:==========================================>          (93 + 22) / 115][Stage 200:=================================================>   (107 + 8) / 115][Stage 200:===================================================> (111 + 4) / 115][Stage 200:====================================================>(114 + 1) / 115]                                                                                [Stage 201:===============================>                     (69 + 47) / 116][Stage 201:=====================================>               (81 + 35) / 116][Stage 201:==========================================>          (93 + 23) / 116][Stage 201:===============================================>    (106 + 10) / 116][Stage 201:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.188616168 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 00:12:00 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51062) dropped. RpcEnv already stopped.
17/05/25 00:12:00 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:37296) dropped. RpcEnv already stopped.
17/05/25 00:12:00 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51062) dropped. RpcEnv already stopped.
17/05/25 00:12:00 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:37296) dropped. RpcEnv already stopped.

real	9m53.852s
user	11m30.376s
sys	0m28.584s
