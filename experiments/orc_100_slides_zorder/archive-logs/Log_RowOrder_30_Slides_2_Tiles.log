Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 18:44:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 18:44:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 18:44:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 18:44:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 18:44:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 18:45:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524184452-0581).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.378070908 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (51 + 64) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:==================================================>    (106 + 9) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.387312636 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.64010981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===========================>                           (57 + 58) / 115][Stage 2:==================================>                    (73 + 42) / 115][Stage 2:===================================>                   (74 + 41) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:==========================================>            (88 + 27) / 115][Stage 2:=============================================>         (95 + 20) / 115][Stage 2:===============================================>      (101 + 14) / 115][Stage 2:==================================================>    (106 + 9) / 115][Stage 2:=====================================================> (112 + 3) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:====================================>                  (78 + 38) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:================================================>     (104 + 12) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.806338418 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.777262106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:========================>                              (54 + 67) / 121][Stage 4:=========================>                             (56 + 65) / 121][Stage 4:===========================>                           (61 + 60) / 121][Stage 4:==============================>                        (67 + 54) / 121][Stage 4:===============================>                       (70 + 51) / 121][Stage 4:====================================>                  (81 + 40) / 121][Stage 4:============================================>         (100 + 21) / 121][Stage 4:=====================================================> (117 + 4) / 121]                                                                                [Stage 5:===========================>                           (60 + 62) / 122][Stage 5:============================>                          (63 + 59) / 122][Stage 5:==============================>                        (67 + 55) / 122][Stage 5:=====================================>                 (83 + 39) / 122][Stage 5:=========================================>             (92 + 30) / 122][Stage 5:============================================>         (100 + 22) / 122][Stage 5:====================================================>  (116 + 6) / 122]                                                                                Time elapsed: 4.500000333 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.655115606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:============================>                          (58 + 55) / 113][Stage 6:=============================>                         (60 + 53) / 113][Stage 6:=================================>                     (68 + 45) / 113][Stage 6:========================================>              (83 + 30) / 113][Stage 6:=============================================>         (93 + 20) / 113][Stage 6:====================================================>  (108 + 5) / 113]                                                                                [Stage 7:============================>                          (59 + 55) / 114][Stage 7:==============================>                        (63 + 51) / 114][Stage 7:=======================================>               (82 + 32) / 114][Stage 7:===========================================>           (91 + 23) / 114][Stage 7:================================================>     (102 + 12) / 114][Stage 7:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.886995062 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.616444839 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (59 + 61) / 120][Stage 8:===========================>                           (60 + 60) / 120][Stage 8:==============================>                        (66 + 54) / 120][Stage 8:==================================>                    (76 + 44) / 120][Stage 8:=========================================>             (91 + 29) / 120][Stage 8:==============================================>       (104 + 16) / 120][Stage 8:=====================================================> (116 + 4) / 120][Stage 8:======================================================>(119 + 1) / 120]                                                                                [Stage 9:===========================>                           (60 + 61) / 121][Stage 9:============================>                          (62 + 59) / 121][Stage 9:=================================>                     (73 + 48) / 121][Stage 9:========================================>              (90 + 31) / 121][Stage 9:================================================>     (109 + 12) / 121][Stage 9:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.051888516 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.571823208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==============================>                       (66 + 49) / 115][Stage 10:====================================>                 (78 + 37) / 115][Stage 10:===========================================>          (92 + 23) / 115][Stage 10:===============================================>     (103 + 12) / 115][Stage 10:====================================================> (112 + 3) / 115]                                                                                [Stage 11:====================================>                 (78 + 38) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:=============================================>       (100 + 16) / 116][Stage 11:===============================================>     (105 + 11) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.519091273 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.594702582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:===========================>                          (61 + 59) / 120][Stage 12:=============================>                        (66 + 54) / 120][Stage 12:====================================>                 (82 + 38) / 120][Stage 12:============================================>         (98 + 22) / 120][Stage 12:===============================================>     (107 + 13) / 120][Stage 12:==================================================>   (112 + 8) / 120][Stage 12:=====================================================>(118 + 2) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:===============================>                      (71 + 50) / 121][Stage 13:=====================================>                (84 + 37) / 121][Stage 13:===============================================>     (109 + 12) / 121][Stage 13:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.082955266 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520847428 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (58 + 55) / 113][Stage 14:=============================>                        (62 + 51) / 113][Stage 14:===================================>                  (75 + 38) / 113][Stage 14:===========================================>          (91 + 22) / 113][Stage 14:====================================================> (110 + 3) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:============================>                         (61 + 53) / 114][Stage 15:========================================>             (86 + 28) / 114][Stage 15:==============================================>      (100 + 14) / 114]                                                                                Time elapsed: 3.15271866 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555554392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:============================>                         (64 + 57) / 121][Stage 16:================================>                     (72 + 49) / 121][Stage 16:========================================>             (91 + 30) / 121][Stage 16:==============================================>      (107 + 14) / 121][Stage 16:====================================================> (118 + 3) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:===========================>                          (63 + 59) / 122][Stage 17:====================================>                 (83 + 39) / 122][Stage 17:=============================================>       (104 + 18) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.479321437 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530876146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:============================>                         (60 + 53) / 113][Stage 18:=================================>                    (71 + 42) / 113][Stage 18:===========================================>          (91 + 22) / 113][Stage 18:===================================================>  (107 + 6) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:===========================>                          (58 + 56) / 114][Stage 19:=============================>                        (62 + 52) / 114][Stage 19:===================================>                  (74 + 40) / 114][Stage 19:=============================================>        (95 + 19) / 114][Stage 19:=================================================>    (105 + 9) / 114][Stage 19:=====================================================>(112 + 2) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.688734959 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504437553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:============================>                         (59 + 54) / 113][Stage 20:==============================>                       (64 + 49) / 113][Stage 20:======================================>               (80 + 33) / 113][Stage 20:================================================>    (103 + 10) / 113][Stage 20:===================================================>  (108 + 5) / 113][Stage 20:=====================================================>(111 + 2) / 113]                                                                                [Stage 21:============================>                         (61 + 53) / 114][Stage 21:====================================>                 (78 + 36) / 114][Stage 21:============================================>         (93 + 21) / 114][Stage 21:=============================================>        (97 + 17) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.807370578 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50198462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:============================>                         (59 + 54) / 113][Stage 22:================================>                     (69 + 44) / 113][Stage 22:=========================================>            (86 + 27) / 113][Stage 22:=================================================>    (104 + 9) / 113]                                                                                [Stage 23:===========================>                          (59 + 55) / 114][Stage 23:===============================>                      (67 + 47) / 114][Stage 23:=======================================>              (83 + 31) / 114][Stage 23:==============================================>      (101 + 13) / 114][Stage 23:===================================================>  (109 + 5) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.411873608 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520965538 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:=============================>                        (65 + 55) / 120][Stage 24:=================================>                    (75 + 45) / 120][Stage 24:==========================================>           (94 + 26) / 120][Stage 24:================================================>    (109 + 11) / 120]                                                                                [Stage 25:===========================>                          (62 + 59) / 121][Stage 25:==============================>                       (69 + 52) / 121][Stage 25:=======================================>              (89 + 32) / 121][Stage 25:=============================================>       (103 + 18) / 121][Stage 25:==================================================>   (113 + 8) / 121][Stage 25:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.480780801 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448752594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (73 + 45) / 118][Stage 26:=====================================>                (82 + 36) / 118][Stage 26:=============================================>       (102 + 16) / 118][Stage 26:===================================================>  (113 + 5) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:=====================================>                (82 + 37) / 119][Stage 27:==========================================>           (93 + 26) / 119][Stage 27:===================================================>  (113 + 6) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.266747153 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471199225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (58 + 55) / 113][Stage 28:==============================>                       (63 + 50) / 113][Stage 28:========================================>             (85 + 28) / 113][Stage 28:===============================================>      (99 + 14) / 113][Stage 28:====================================================> (109 + 4) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:============================>                         (60 + 54) / 114][Stage 29:=================================>                    (71 + 43) / 114][Stage 29:==========================================>           (89 + 25) / 114][Stage 29:==============================================>      (100 + 14) / 114][Stage 29:==================================================>   (107 + 7) / 114][Stage 29:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.779354876 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431492838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==================================>                   (72 + 41) / 113][Stage 30:=========================================>            (86 + 27) / 113][Stage 30:=============================================>        (96 + 17) / 113][Stage 30:==================================================>   (106 + 7) / 113][Stage 30:=====================================================>(111 + 2) / 113]                                                                                [Stage 31:=======================================>              (84 + 30) / 114][Stage 31:===========================================>          (92 + 22) / 114][Stage 31:==============================================>      (100 + 14) / 114][Stage 31:==================================================>   (106 + 8) / 114][Stage 31:====================================================> (111 + 3) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.784618361 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518348598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:=============================>                        (66 + 55) / 121][Stage 32:======================================>               (87 + 34) / 121][Stage 32:=================================================>    (112 + 9) / 121][Stage 32:=====================================================>(119 + 2) / 121]                                                                                [Stage 33:=============================>                        (66 + 56) / 122][Stage 33:==================================>                   (79 + 43) / 122][Stage 33:===========================================>          (98 + 24) / 122][Stage 33:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.300540971 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485570679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:=================================>                    (70 + 43) / 113][Stage 34:=========================================>            (87 + 26) / 113][Stage 34:===============================================>     (102 + 11) / 113][Stage 34:====================================================> (109 + 4) / 113]                                                                                [Stage 35:=============================>                        (62 + 52) / 114][Stage 35:==================================>                   (73 + 41) / 114][Stage 35:=============================================>        (96 + 18) / 114][Stage 35:=================================================>    (105 + 9) / 114][Stage 35:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.491843832 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412777934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (83 + 32) / 115][Stage 36:===========================================>          (92 + 23) / 115][Stage 36:=================================================>    (106 + 9) / 115][Stage 36:====================================================> (111 + 4) / 115]                                                                                [Stage 37:=======================================>              (84 + 32) / 116][Stage 37:==========================================>           (92 + 24) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.247287242 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447845579 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===============================>                      (68 + 47) / 115][Stage 38:======================================>               (83 + 32) / 115][Stage 38:===============================================>     (103 + 12) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:===================================>                  (77 + 39) / 116][Stage 39:=========================================>            (90 + 26) / 116][Stage 39:================================================>    (106 + 10) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.842423591 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400115779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (82 + 33) / 115][Stage 40:========================================>             (86 + 29) / 115][Stage 40:=============================================>        (96 + 19) / 115][Stage 40:==================================================>   (108 + 7) / 115][Stage 40:=====================================================>(113 + 2) / 115]                                                                                [Stage 41:=====================================>                (81 + 35) / 116][Stage 41:========================================>             (87 + 29) / 116][Stage 41:==============================================>       (99 + 17) / 116][Stage 41:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.925913967 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474457285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (58 + 55) / 113][Stage 42:==============================>                       (64 + 49) / 113][Stage 42:======================================>               (81 + 32) / 113][Stage 42:===============================================>     (102 + 11) / 113][Stage 42:====================================================> (110 + 3) / 113]                                                                                [Stage 43:============================>                         (61 + 53) / 114][Stage 43:====================================>                 (76 + 38) / 114][Stage 43:===========================================>          (92 + 22) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.319195403 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463413637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:===========================>                          (62 + 59) / 121][Stage 44:==================================>                   (78 + 43) / 121][Stage 44:==========================================>           (96 + 25) / 121][Stage 44:===================================================>  (116 + 5) / 121][Stage 44:=====================================================>(120 + 1) / 121]                                                                                [Stage 45:===========================>                          (61 + 61) / 122][Stage 45:==============================>                       (70 + 52) / 122][Stage 45:====================================>                 (82 + 40) / 122][Stage 45:===============================================>     (110 + 12) / 122][Stage 45:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.490557559 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422053645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:===================================>                  (76 + 39) / 115][Stage 46:============================================>         (95 + 20) / 115][Stage 46:====================================================> (112 + 3) / 115]                                                                                [Stage 47:=================================>                    (71 + 45) / 116][Stage 47:========================================>             (87 + 29) / 116][Stage 47:==================================================>   (108 + 8) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.728566756 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489190101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (65 + 50) / 115][Stage 48:=====================================>                (80 + 35) / 115][Stage 48:=========================================>            (88 + 27) / 115][Stage 48:==============================================>       (98 + 17) / 115][Stage 48:==============================================>      (101 + 14) / 115][Stage 48:===================================================>  (109 + 6) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:==================================>                   (75 + 41) / 116][Stage 49:=========================================>            (89 + 27) / 116][Stage 49:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.268085714 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 200 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430137695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (72 + 43) / 115][Stage 50:=========================================>            (89 + 26) / 115][Stage 50:==============================================>      (101 + 14) / 115][Stage 50:==================================================>   (108 + 7) / 115][Stage 50:====================================================> (112 + 3) / 115]                                                                                [Stage 51:=================================>                    (72 + 44) / 116][Stage 51:==========================================>           (91 + 25) / 116][Stage 51:================================================>    (106 + 10) / 116][Stage 51:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.171556803 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406462476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:=================================>                    (74 + 44) / 118][Stage 52:===========================================>          (94 + 24) / 118][Stage 52:===================================================>  (113 + 5) / 118][Stage 52:=====================================================>(117 + 1) / 118]                                                                                [Stage 53:=================================>                    (73 + 46) / 119][Stage 53:====================================>                 (80 + 39) / 119][Stage 53:=========================================>            (91 + 28) / 119][Stage 53:================================================>    (108 + 11) / 119][Stage 53:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.193297901 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447267182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:================================>                     (72 + 48) / 120][Stage 54:=========================================>            (93 + 27) / 120][Stage 54:=================================================>    (111 + 9) / 120]                                                                                [Stage 55:=============================>                        (66 + 55) / 121][Stage 55:===================================>                  (79 + 42) / 121][Stage 55:===========================================>          (97 + 24) / 121][Stage 55:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.105652088 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459950573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (62 + 59) / 121][Stage 56:=============================>                        (67 + 54) / 121][Stage 56:======================================>               (87 + 34) / 121][Stage 56:==============================================>      (106 + 15) / 121][Stage 56:=====================================================>(119 + 2) / 121]                                                                                [Stage 57:===========================>                          (62 + 60) / 122][Stage 57:===============================>                      (71 + 51) / 122][Stage 57:=========================================>            (93 + 29) / 122][Stage 57:================================================>    (112 + 10) / 122][Stage 57:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.533848157 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492881367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (80 + 33) / 113][Stage 58:===========================================>          (90 + 23) / 113][Stage 58:==============================================>      (100 + 13) / 113][Stage 58:==================================================>   (105 + 8) / 113][Stage 58:=====================================================>(111 + 2) / 113]                                                                                [Stage 59:===================================>                  (75 + 39) / 114][Stage 59:=========================================>            (87 + 27) / 114][Stage 59:==============================================>      (101 + 13) / 114][Stage 59:=================================================>    (105 + 9) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.064571515 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38469046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (82 + 33) / 115][Stage 60:=========================================>            (88 + 27) / 115][Stage 60:=================================================>    (106 + 9) / 115][Stage 60:==================================================>   (107 + 8) / 115][Stage 60:=====================================================>(113 + 2) / 115]                                                                                [Stage 61:========================================>             (86 + 30) / 116][Stage 61:============================================>         (95 + 21) / 116][Stage 61:================================================>    (106 + 10) / 116][Stage 61:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.243818059 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462045656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:=======================================>              (86 + 32) / 118][Stage 62:==============================================>      (103 + 15) / 118][Stage 62:====================================================> (115 + 3) / 118]                                                                                [Stage 63:==================================>                   (76 + 43) / 119][Stage 63:========================================>             (90 + 29) / 119][Stage 63:==============================================>      (105 + 14) / 119][Stage 63:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.129159076 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417885054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (74 + 41) / 115][Stage 64:=======================================>              (84 + 31) / 115][Stage 64:===========================================>          (93 + 22) / 115][Stage 64:==================================================>   (108 + 7) / 115]                                                                                [Stage 65:====================================>                 (79 + 37) / 116][Stage 65:============================================>         (96 + 20) / 116][Stage 65:===================================================>  (110 + 6) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.882974716 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411249965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:==================================>                   (75 + 43) / 118][Stage 66:==========================================>           (93 + 25) / 118][Stage 66:==============================================>      (103 + 15) / 118][Stage 66:=====================================================>(116 + 2) / 118][Stage 66:=====================================================>(117 + 1) / 118]                                                                                [Stage 67:=================================>                    (73 + 46) / 119][Stage 67:==================================>                   (77 + 42) / 119][Stage 67:=======================================>              (87 + 32) / 119][Stage 67:===============================================>     (107 + 12) / 119][Stage 67:====================================================> (115 + 4) / 119][Stage 67:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.474240686 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437119309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 106 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381901842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:=================================>                    (74 + 44) / 118][Stage 68:=====================================>                (81 + 37) / 118][Stage 68:==========================================>           (92 + 26) / 118][Stage 68:==============================================>      (103 + 15) / 118][Stage 68:=====================================================>(116 + 2) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (75 + 44) / 119][Stage 69:===================================>                  (78 + 41) / 119][Stage 69:===========================================>          (95 + 24) / 119][Stage 69:================================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.447769618 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 170 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565836832 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:=============================>                        (66 + 54) / 120][Stage 70:======================================>               (85 + 35) / 120][Stage 70:=============================================>       (102 + 18) / 120][Stage 70:=====================================================>(118 + 2) / 120]                                                                                [Stage 71:===========================>                          (62 + 59) / 121][Stage 71:====================================>                 (82 + 39) / 121][Stage 71:============================================>         (99 + 22) / 121][Stage 71:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.197640783 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379249828 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===================================>                  (74 + 39) / 113][Stage 72:========================================>             (85 + 28) / 113][Stage 72:=============================================>        (96 + 17) / 113][Stage 72:==================================================>   (106 + 7) / 113][Stage 72:====================================================> (110 + 3) / 113][Stage 72:=====================================================>(111 + 2) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:====================================>                 (77 + 37) / 114][Stage 73:=======================================>              (84 + 30) / 114][Stage 73:===========================================>          (91 + 23) / 114][Stage 73:==================================================>   (107 + 7) / 114][Stage 73:====================================================> (110 + 4) / 114][Stage 73:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.705066701 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383174983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==================================>                   (73 + 40) / 113][Stage 74:========================================>             (85 + 28) / 113][Stage 74:===========================================>          (90 + 23) / 113][Stage 74:==================================================>   (105 + 8) / 113][Stage 74:====================================================> (110 + 3) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:====================================>                 (77 + 37) / 114][Stage 75:==========================================>           (89 + 25) / 114][Stage 75:=============================================>        (97 + 17) / 114][Stage 75:=================================================>    (105 + 9) / 114][Stage 75:====================================================> (111 + 3) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.372957512 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452579584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:===========================>                          (62 + 58) / 120][Stage 76:====================================>                 (82 + 38) / 120][Stage 76:============================================>        (100 + 20) / 120][Stage 76:====================================================> (117 + 3) / 120]                                                                                [Stage 77:===========================>                          (61 + 60) / 121][Stage 77:=============================>                        (67 + 54) / 121][Stage 77:=====================================>                (85 + 36) / 121][Stage 77:=============================================>       (105 + 16) / 121][Stage 77:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.189979675 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40030045 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (58 + 55) / 113][Stage 78:==============================>                       (64 + 49) / 113][Stage 78:======================================>               (80 + 33) / 113][Stage 78:=============================================>        (96 + 17) / 113][Stage 78:====================================================> (109 + 4) / 113]                                                                                [Stage 79:============================>                         (61 + 53) / 114][Stage 79:==================================>                   (72 + 42) / 114][Stage 79:==============================================>      (101 + 13) / 114][Stage 79:==================================================>   (106 + 8) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.269052525 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419030524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:============================>                         (60 + 53) / 113][Stage 80:=================================>                    (70 + 43) / 113][Stage 80:==========================================>           (89 + 24) / 113][Stage 80:==================================================>   (105 + 8) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:================================>                     (69 + 45) / 114][Stage 81:==========================================>           (90 + 24) / 114][Stage 81:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.039551199 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427423517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==========================>                           (60 + 61) / 121][Stage 82:=============================>                        (67 + 54) / 121][Stage 82:=====================================>                (85 + 36) / 121][Stage 82:===========================================>         (100 + 21) / 121][Stage 82:===================================================>  (115 + 6) / 121][Stage 82:=====================================================>(120 + 1) / 121]                                                                                [Stage 83:===========================>                          (61 + 61) / 122][Stage 83:=============================>                        (66 + 56) / 122][Stage 83:=======================================>              (89 + 33) / 122][Stage 83:==================================================>   (113 + 9) / 122][Stage 83:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.396777859 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420311107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:============================>                         (64 + 56) / 120][Stage 84:===============================>                      (71 + 49) / 120][Stage 84:========================================>             (91 + 29) / 120][Stage 84:================================================>    (110 + 10) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:=============================>                        (67 + 54) / 121][Stage 85:===================================>                  (80 + 41) / 121][Stage 85:===========================================>          (97 + 24) / 121][Stage 85:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.130269465 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415544866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (61 + 59) / 120][Stage 86:=================================>                    (75 + 45) / 120][Stage 86:========================================>             (89 + 31) / 120][Stage 86:================================================>    (109 + 11) / 120][Stage 86:====================================================> (116 + 4) / 120]                                                                                [Stage 87:===========================>                          (61 + 60) / 121][Stage 87:==============================>                       (68 + 53) / 121][Stage 87:==================================>                   (77 + 44) / 121][Stage 87:==========================================>           (96 + 25) / 121][Stage 87:==================================================>   (113 + 8) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.387570116 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352590209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (81 + 34) / 115][Stage 88:=========================================>            (88 + 27) / 115][Stage 88:===============================================>     (104 + 11) / 115][Stage 88:====================================================> (112 + 3) / 115]                                                                                [Stage 89:======================================>               (83 + 33) / 116][Stage 89:==========================================>           (92 + 24) / 116][Stage 89:==============================================>      (102 + 14) / 116][Stage 89:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.880719631 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400991804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (69 + 46) / 115][Stage 90:=========================================>            (89 + 26) / 115][Stage 90:==============================================>      (100 + 15) / 115][Stage 90:====================================================> (111 + 4) / 115]                                                                                [Stage 91:===============================>                      (67 + 49) / 116][Stage 91:===================================>                  (77 + 39) / 116][Stage 91:========================================>             (87 + 29) / 116][Stage 91:===============================================>     (103 + 13) / 116][Stage 91:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.805989099 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365121038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=====================================>                (78 + 35) / 113][Stage 92:=========================================>            (87 + 26) / 113][Stage 92:===============================================>     (102 + 11) / 113][Stage 92:====================================================> (110 + 3) / 113][Stage 92:=====================================================>(111 + 2) / 113]                                                                                [Stage 93:==================================>                   (73 + 41) / 114][Stage 93:========================================>             (86 + 28) / 114][Stage 93:==============================================>       (98 + 16) / 114][Stage 93:=================================================>    (105 + 9) / 114][Stage 93:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.111233104 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37609194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (73 + 45) / 118][Stage 94:=====================================>                (82 + 36) / 118][Stage 94:==========================================>           (93 + 25) / 118][Stage 94:===============================================>     (106 + 12) / 118][Stage 94:=====================================================>(117 + 1) / 118]                                                                                [Stage 95:=================================>                    (73 + 46) / 119][Stage 95:=====================================>                (82 + 37) / 119][Stage 95:=========================================>            (92 + 27) / 119][Stage 95:==============================================>      (105 + 14) / 119]                                                                                Time elapsed: 3.107231876 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39620972 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (58 + 55) / 113][Stage 96:============================>                         (60 + 53) / 113][Stage 96:=================================>                    (71 + 42) / 113][Stage 96:=============================================>        (95 + 18) / 113][Stage 96:=====================================================>(111 + 2) / 113]                                                                                [Stage 97:===========================>                          (58 + 56) / 114][Stage 97:================================>                     (69 + 45) / 114][Stage 97:==========================================>           (90 + 24) / 114][Stage 97:================================================>    (104 + 10) / 114][Stage 97:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.278098535 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398200367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:================================>                     (72 + 46) / 118][Stage 98:====================================>                 (80 + 38) / 118][Stage 98:=======================================>              (86 + 32) / 118][Stage 98:===============================================>     (106 + 12) / 118][Stage 98:====================================================> (114 + 4) / 118][Stage 98:=====================================================>(116 + 2) / 118]                                                                                [Stage 99:=================================>                    (73 + 46) / 119][Stage 99:==================================>                   (75 + 44) / 119][Stage 99:========================================>             (90 + 29) / 119][Stage 99:==============================================>      (104 + 15) / 119][Stage 99:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.22541391 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372963644 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (72 + 46) / 118][Stage 100:===================================>                 (79 + 39) / 118][Stage 100:===========================================>         (97 + 21) / 118][Stage 100:=================================================>   (110 + 8) / 118]                                                                                [Stage 101:================================>                    (74 + 45) / 119][Stage 101:====================================>                (81 + 38) / 119][Stage 101:===========================================>         (97 + 22) / 119][Stage 101:===================================================> (115 + 4) / 119][Stage 101:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.016431157 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 80 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345169611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:======================================>              (83 + 32) / 115][Stage 102:==========================================>          (93 + 22) / 115][Stage 102:===============================================>    (104 + 11) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:======================================>              (84 + 32) / 116][Stage 103:=========================================>           (91 + 25) / 116][Stage 103:==============================================>     (104 + 12) / 116][Stage 103:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.951656745 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414064327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (71 + 44) / 115][Stage 104:======================================>              (83 + 32) / 115][Stage 104:============================================>        (97 + 18) / 115][Stage 104:=================================================>   (107 + 8) / 115]                                                                                [Stage 105:===================================>                 (78 + 38) / 116][Stage 105:===========================================>         (96 + 20) / 116][Stage 105:===============================================>    (105 + 11) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.895606869 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41027325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 61) / 121][Stage 106:===============================>                     (71 + 50) / 121][Stage 106:======================================>              (87 + 34) / 121][Stage 106:===================================================> (117 + 4) / 121]                                                                                [Stage 107:===========================>                         (63 + 59) / 122][Stage 107:================================>                    (75 + 47) / 122][Stage 107:===========================================>         (99 + 23) / 122][Stage 107:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.097903273 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351816594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===================================>                 (75 + 38) / 113][Stage 108:========================================>            (86 + 27) / 113][Stage 108:=============================================>       (96 + 17) / 113][Stage 108:=================================================>   (106 + 7) / 113][Stage 108:====================================================>(112 + 1) / 113]                                                                                [Stage 109:==================================>                  (74 + 40) / 114][Stage 109:=======================================>             (85 + 29) / 114][Stage 109:=============================================>      (100 + 14) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.237774482 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347727575 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:====================================>                (80 + 35) / 115][Stage 110:=====================================>               (82 + 33) / 115][Stage 110:=============================================>       (98 + 17) / 115][Stage 110:=================================================>   (108 + 7) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:======================================>              (85 + 31) / 116][Stage 111:============================================>       (100 + 16) / 116][Stage 111:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.753439049 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399421402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:===============================>                     (71 + 49) / 120][Stage 112:======================================>              (87 + 33) / 120][Stage 112:===============================================>    (110 + 10) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:============================>                        (64 + 57) / 121][Stage 113:=================================>                   (76 + 45) / 121][Stage 113:==========================================>          (96 + 25) / 121][Stage 113:==================================================>  (116 + 5) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.243244943 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404846502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 61) / 121][Stage 114:=============================>                       (68 + 53) / 121][Stage 114:======================================>              (88 + 33) / 121][Stage 114:==================================================>  (115 + 6) / 121][Stage 114:====================================================>(120 + 1) / 121]                                                                                [Stage 115:===========================>                         (63 + 59) / 122][Stage 115:===============================>                     (72 + 50) / 122][Stage 115:========================================>            (93 + 29) / 122][Stage 115:==================================================>  (117 + 5) / 122][Stage 115:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.279584477 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381932649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:=================================>                   (71 + 42) / 113][Stage 116:==========================================>          (91 + 22) / 113][Stage 116:==============================================>      (99 + 14) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:===========================>                         (59 + 55) / 114][Stage 117:==============================>                      (66 + 48) / 114][Stage 117:=======================================>             (84 + 30) / 114][Stage 117:=============================================>      (100 + 14) / 114][Stage 117:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.227363836 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353646494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==================================>                  (73 + 40) / 113][Stage 118:=======================================>             (84 + 29) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:==============================================>     (101 + 12) / 113][Stage 118:==================================================>  (108 + 5) / 113]                                                                                [Stage 119:======================================>              (83 + 31) / 114][Stage 119:==========================================>          (91 + 23) / 114][Stage 119:==============================================>     (101 + 13) / 114][Stage 119:=================================================>   (107 + 7) / 114][Stage 119:====================================================>(112 + 2) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.903929549 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40536106 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 61) / 121][Stage 120:=============================>                       (68 + 53) / 121][Stage 120:======================================>              (89 + 32) / 121][Stage 120:=================================================>   (113 + 8) / 121][Stage 120:====================================================>(120 + 1) / 121]                                                                                [Stage 121:===========================>                         (63 + 59) / 122][Stage 121:===============================>                     (72 + 50) / 122][Stage 121:========================================>            (93 + 29) / 122][Stage 121:===================================================> (118 + 4) / 122][Stage 121:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.228754617 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357295447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (71 + 42) / 113][Stage 122:======================================>              (83 + 30) / 113][Stage 122:===========================================>         (92 + 21) / 113][Stage 122:===============================================>    (103 + 10) / 113][Stage 122:==================================================>  (107 + 6) / 113][Stage 122:====================================================>(112 + 1) / 113]                                                                                [Stage 123:===================================>                 (76 + 38) / 114][Stage 123:========================================>            (88 + 26) / 114][Stage 123:=============================================>       (98 + 16) / 114][Stage 123:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.07183472 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369615235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=================================>                   (75 + 43) / 118][Stage 124:====================================>                (81 + 37) / 118][Stage 124:==========================================>          (95 + 23) / 118][Stage 124:===============================================>    (108 + 10) / 118][Stage 124:====================================================>(116 + 2) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:=================================>                   (75 + 44) / 119][Stage 125:====================================>                (83 + 36) / 119][Stage 125:===========================================>        (100 + 19) / 119][Stage 125:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.252657289 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396720621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:============================>                        (60 + 53) / 113][Stage 126:==================================>                  (74 + 39) / 113][Stage 126:=============================================>       (97 + 16) / 113][Stage 126:=================================================>   (106 + 7) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:============================>                        (61 + 53) / 114][Stage 127:=================================>                   (73 + 41) / 114][Stage 127:==========================================>          (91 + 23) / 114][Stage 127:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.2329623 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392063341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (58 + 55) / 113][Stage 128:============================>                        (60 + 53) / 113][Stage 128:===================================>                 (75 + 38) / 113][Stage 128:==============================================>      (99 + 14) / 113][Stage 128:===================================================> (109 + 4) / 113]                                                                                [Stage 129:============================>                        (61 + 53) / 114][Stage 129:===================================>                 (77 + 37) / 114][Stage 129:=======================================>             (86 + 28) / 114][Stage 129:================================================>    (105 + 9) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.318485128 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396476818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 61) / 121][Stage 130:============================>                        (64 + 57) / 121][Stage 130:=================================>                   (77 + 44) / 121][Stage 130:===========================================>         (99 + 22) / 121][Stage 130:===================================================> (117 + 4) / 121]                                                                                [Stage 131:==========================>                          (62 + 60) / 122][Stage 131:==============================>                      (71 + 51) / 122][Stage 131:========================================>            (94 + 28) / 122][Stage 131:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.094007644 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36234982 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:=================================>                   (75 + 43) / 118][Stage 132:=======================================>             (88 + 30) / 118][Stage 132:============================================>        (99 + 19) / 118][Stage 132:====================================================>(116 + 2) / 118]                                                                                [Stage 133:================================>                    (73 + 46) / 119][Stage 133:==================================>                  (77 + 42) / 119][Stage 133:======================================>              (87 + 32) / 119][Stage 133:===========================================>         (98 + 21) / 119][Stage 133:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.145875679 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3777693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:===========================>                         (59 + 54) / 113][Stage 134:================================>                    (70 + 43) / 113][Stage 134:=========================================>           (89 + 24) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:===========================>                         (59 + 55) / 114][Stage 135:=============================>                       (63 + 51) / 114][Stage 135:==================================>                  (74 + 40) / 114][Stage 135:==========================================>          (92 + 22) / 114][Stage 135:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.128150638 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379650747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (59 + 54) / 113][Stage 136:==================================>                  (73 + 40) / 113][Stage 136:========================================>            (87 + 26) / 113][Stage 136:===================================================> (109 + 4) / 113]                                                                                [Stage 137:===========================>                         (59 + 55) / 114][Stage 137:=============================>                       (64 + 50) / 114][Stage 137:=======================================>             (86 + 28) / 114][Stage 137:=================================================>   (107 + 7) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.148915629 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336373074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:========================================>            (87 + 28) / 115][Stage 138:============================================>        (96 + 19) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:======================================>              (84 + 32) / 116][Stage 139:==========================================>          (94 + 22) / 116][Stage 139:===============================================>    (105 + 11) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.658923498 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397293794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 61) / 121][Stage 140:============================>                        (66 + 55) / 121][Stage 140:===================================>                 (82 + 39) / 121][Stage 140:==========================================>          (96 + 25) / 121][Stage 140:=================================================>   (112 + 9) / 121][Stage 140:====================================================>(120 + 1) / 121]                                                                                [Stage 141:==========================>                          (61 + 61) / 122][Stage 141:=============================>                       (67 + 55) / 122][Stage 141:==================================>                  (80 + 42) / 122][Stage 141:=============================================>      (107 + 15) / 122][Stage 141:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.219733229 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398398916 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 61) / 121][Stage 142:===========================>                         (63 + 58) / 121][Stage 142:===============================>                     (73 + 48) / 121][Stage 142:===========================================>        (102 + 19) / 121][Stage 142:===================================================> (117 + 4) / 121]                                                                                [Stage 143:==========================>                          (61 + 61) / 122][Stage 143:============================>                        (65 + 57) / 122][Stage 143:================================>                    (74 + 48) / 122][Stage 143:==========================================>         (100 + 22) / 122][Stage 143:===================================================> (118 + 4) / 122][Stage 143:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.208128492 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392428772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (61 + 59) / 120][Stage 144:============================>                        (65 + 55) / 120][Stage 144:====================================>                (82 + 38) / 120][Stage 144:===========================================>        (100 + 20) / 120][Stage 144:====================================================>(118 + 2) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:==============================>                      (70 + 51) / 121][Stage 145:====================================>                (83 + 38) / 121][Stage 145:============================================>       (104 + 17) / 121][Stage 145:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.182030338 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391852068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:============================>                        (60 + 53) / 113][Stage 146:================================>                    (70 + 43) / 113][Stage 146:============================================>        (95 + 18) / 113][Stage 146:=================================================>   (106 + 7) / 113]                                                                                [Stage 147:============================>                        (61 + 53) / 114][Stage 147:==================================>                  (74 + 40) / 114][Stage 147:==============================================>      (99 + 15) / 114][Stage 147:=================================================>   (107 + 7) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.204465515 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383750935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (58 + 55) / 113][Stage 148:==============================>                      (65 + 48) / 113][Stage 148:======================================>              (83 + 30) / 113][Stage 148:===============================================>    (103 + 10) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:===========================>                         (59 + 55) / 114][Stage 149:==============================>                      (65 + 49) / 114][Stage 149:=========================================>           (90 + 24) / 114][Stage 149:==============================================>     (102 + 12) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.24407008 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378815134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (71 + 44) / 115][Stage 150:======================================>              (83 + 32) / 115][Stage 150:=============================================>       (98 + 17) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:===============================>                     (69 + 47) / 116][Stage 151:=========================================>           (90 + 26) / 116][Stage 151:===========================================>         (96 + 20) / 116][Stage 151:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.762412811 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460464995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=======================================>             (84 + 29) / 113][Stage 152:============================================>        (95 + 18) / 113][Stage 152:==============================================>      (99 + 14) / 113][Stage 152:==================================================>  (107 + 6) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:===================================>                 (76 + 38) / 114][Stage 153:========================================>            (88 + 26) / 114][Stage 153:==============================================>     (101 + 13) / 114][Stage 153:==================================================>  (108 + 6) / 114][Stage 153:===================================================> (110 + 4) / 114][Stage 153:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.641175142 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382158845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (58 + 55) / 113][Stage 154:===============================>                     (67 + 46) / 113][Stage 154:=====================================>               (80 + 33) / 113][Stage 154:==============================================>     (101 + 12) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:===========================>                         (59 + 55) / 114][Stage 155:==============================>                      (66 + 48) / 114][Stage 155:=========================================>           (90 + 24) / 114][Stage 155:===============================================>    (104 + 10) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.070744284 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373062627 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (72 + 46) / 118][Stage 156:==================================>                  (77 + 41) / 118][Stage 156:=========================================>           (92 + 26) / 118][Stage 156:=============================================>      (103 + 15) / 118][Stage 156:==================================================>  (112 + 6) / 118]                                                                                [Stage 157:================================>                    (73 + 46) / 119][Stage 157:====================================>                (82 + 37) / 119][Stage 157:===========================================>         (97 + 22) / 119][Stage 157:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.16386356 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331812404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:======================================>              (83 + 32) / 115][Stage 158:=========================================>           (90 + 25) / 115][Stage 158:=============================================>      (100 + 15) / 115][Stage 158:=================================================>   (108 + 7) / 115]                                                                                [Stage 159:=====================================>               (83 + 33) / 116][Stage 159:==========================================>          (92 + 24) / 116][Stage 159:=============================================>      (102 + 14) / 116][Stage 159:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.291545891 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358650309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:====================================>                (80 + 35) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:=============================================>       (98 + 17) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:===================================================> (111 + 4) / 115]                                                                                [Stage 161:======================================>              (85 + 31) / 116][Stage 161:==========================================>          (93 + 23) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:=================================================>   (109 + 7) / 116][Stage 161:====================================================>(114 + 2) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.585643653 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396022753 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 61) / 121][Stage 162:===============================>                     (72 + 49) / 121][Stage 162:=======================================>             (90 + 31) / 121][Stage 162:==============================================>     (108 + 13) / 121][Stage 162:==================================================>  (115 + 6) / 121]                                                                                [Stage 163:==========================>                          (61 + 61) / 122][Stage 163:==============================>                      (70 + 52) / 122][Stage 163:=======================================>             (91 + 31) / 122][Stage 163:=============================================>      (107 + 15) / 122][Stage 163:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.327698329 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412402417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:============================>                        (65 + 56) / 121][Stage 164:==================================>                  (79 + 42) / 121][Stage 164:==========================================>         (100 + 21) / 121][Stage 164:===================================================> (117 + 4) / 121]                                                                                [Stage 165:==========================>                          (62 + 60) / 122][Stage 165:=================================>                   (77 + 45) / 122][Stage 165:=========================================>           (96 + 26) / 122][Stage 165:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.158350513 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381265413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==============================>                      (66 + 49) / 115][Stage 166:====================================>                (79 + 36) / 115][Stage 166:============================================>        (96 + 19) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:================================>                    (72 + 44) / 116][Stage 167:=======================================>             (87 + 29) / 116][Stage 167:=============================================>      (101 + 15) / 116][Stage 167:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.749351062 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410401725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:=============================>                       (68 + 53) / 121][Stage 168:======================================>              (88 + 33) / 121][Stage 168:==============================================>     (108 + 13) / 121][Stage 168:====================================================>(120 + 1) / 121]                                                                                [Stage 169:===========================>                         (64 + 58) / 122][Stage 169:=================================>                   (76 + 46) / 122][Stage 169:========================================>            (93 + 29) / 122][Stage 169:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.250856494 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392680566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:==========================>                          (61 + 60) / 121][Stage 170:================================>                    (74 + 47) / 121][Stage 170:==========================================>          (96 + 25) / 121][Stage 170:=================================================>   (113 + 8) / 121]                                                                                [Stage 171:===========================>                         (63 + 59) / 122][Stage 171:================================>                    (75 + 47) / 122][Stage 171:==========================================>          (97 + 25) / 122][Stage 171:===================================================> (118 + 4) / 122][Stage 171:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.296354839 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36079794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (80 + 33) / 113][Stage 172:=========================================>           (88 + 25) / 113][Stage 172:=================================================>   (106 + 7) / 113][Stage 172:====================================================>(111 + 2) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:====================================>                (79 + 35) / 114][Stage 173:========================================>            (87 + 27) / 114][Stage 173:=============================================>       (98 + 16) / 114][Stage 173:===================================================> (110 + 4) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.683130139 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352236158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:=================================>                   (75 + 43) / 118][Stage 174:=====================================>               (83 + 35) / 118][Stage 174:==========================================>          (94 + 24) / 118][Stage 174:================================================>    (109 + 9) / 118][Stage 174:====================================================>(117 + 1) / 118]                                                                                [Stage 175:================================>                    (74 + 45) / 119][Stage 175:=================================>                   (76 + 43) / 119][Stage 175:======================================>              (87 + 32) / 119][Stage 175:=========================================>           (93 + 26) / 119][Stage 175:=============================================>      (105 + 14) / 119][Stage 175:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.510557561 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366894532 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===============================>                     (68 + 47) / 115][Stage 176:=========================================>           (90 + 25) / 115][Stage 176:=============================================>      (101 + 14) / 115][Stage 176:==================================================>  (109 + 6) / 115]                                                                                [Stage 177:==================================>                  (75 + 41) / 116][Stage 177:==========================================>          (93 + 23) / 116][Stage 177:==============================================>     (104 + 12) / 116][Stage 177:==================================================>  (110 + 6) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.420212911 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407178347 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:>                                                      (0 + 0) / 120][Stage 178:==========================>                          (60 + 60) / 120][Stage 178:============================>                        (65 + 55) / 120][Stage 178:======================================>              (87 + 33) / 120][Stage 178:=================================================>   (113 + 7) / 120]                                                                                [Stage 179:===========================>                         (62 + 59) / 121][Stage 179:================================>                    (74 + 47) / 121][Stage 179:=======================================>             (91 + 30) / 121][Stage 179:==================================================>  (116 + 5) / 121][Stage 179:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.046926659 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411721147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:================================>                    (70 + 45) / 115][Stage 180:=======================================>             (85 + 30) / 115][Stage 180:=========================================>           (91 + 24) / 115][Stage 180:================================================>    (106 + 9) / 115]                                                                                [Stage 181:=================================>                   (73 + 43) / 116][Stage 181:=========================================>           (90 + 26) / 116][Stage 181:============================================>        (98 + 18) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.780999235 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340453458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=====================================>               (81 + 34) / 115][Stage 182:=========================================>           (91 + 24) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:==================================================>  (110 + 5) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=====================================>               (83 + 33) / 116][Stage 183:========================================>            (88 + 28) / 116][Stage 183:=============================================>      (102 + 14) / 116][Stage 183:=================================================>   (108 + 8) / 116][Stage 183:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.076884739 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350062126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (80 + 33) / 113][Stage 184:==========================================>          (90 + 23) / 113][Stage 184:==============================================>      (99 + 14) / 113][Stage 184:==================================================>  (108 + 5) / 113]                                                                                [Stage 185:=====================================>               (81 + 33) / 114][Stage 185:==========================================>          (91 + 23) / 114][Stage 185:=============================================>      (100 + 14) / 114][Stage 185:==================================================>  (108 + 6) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.273041528 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390603622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (58 + 55) / 113][Stage 186:============================>                        (61 + 52) / 113][Stage 186:====================================>                (78 + 35) / 113][Stage 186:============================================>        (95 + 18) / 113][Stage 186:=================================================>   (106 + 7) / 113]                                                                                [Stage 187:============================>                        (61 + 53) / 114][Stage 187:=============================>                       (64 + 50) / 114][Stage 187:=====================================>               (81 + 33) / 114][Stage 187:============================================>        (96 + 18) / 114][Stage 187:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.293352356 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357506291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:================================>                    (73 + 45) / 118][Stage 188:===================================>                 (78 + 40) / 118][Stage 188:=========================================>           (93 + 25) / 118][Stage 188:===============================================>    (107 + 11) / 118][Stage 188:====================================================>(117 + 1) / 118]                                                                                [Stage 189:================================>                    (73 + 46) / 119][Stage 189:====================================>                (83 + 36) / 119][Stage 189:=========================================>           (94 + 25) / 119][Stage 189:============================================>        (99 + 20) / 119][Stage 189:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.388131776 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393986848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 61) / 121][Stage 190:============================>                        (64 + 57) / 121][Stage 190:=================================>                   (77 + 44) / 121][Stage 190:=======================================>             (91 + 30) / 121][Stage 190:=================================================>   (114 + 7) / 121]                                                                                [Stage 191:==========================>                          (61 + 61) / 122][Stage 191:============================>                        (66 + 56) / 122][Stage 191:===================================>                 (82 + 40) / 122][Stage 191:=============================================>      (106 + 16) / 122][Stage 191:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.098301156 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37619656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (58 + 55) / 113][Stage 192:=============================>                       (63 + 50) / 113][Stage 192:==================================>                  (74 + 39) / 113][Stage 192:==========================================>          (90 + 23) / 113][Stage 192:==================================================>  (107 + 6) / 113]                                                                                [Stage 193:============================>                        (62 + 52) / 114][Stage 193:=================================>                   (72 + 42) / 114][Stage 193:===========================================>         (93 + 21) / 114][Stage 193:===================================================> (110 + 4) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.249306879 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382545437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===============================>                     (69 + 46) / 115][Stage 194:====================================>                (80 + 35) / 115][Stage 194:============================================>        (96 + 19) / 115][Stage 194:==================================================>  (110 + 5) / 115]                                                                                [Stage 195:==============================>                      (67 + 49) / 116][Stage 195:====================================>                (79 + 37) / 116][Stage 195:============================================>        (97 + 19) / 116][Stage 195:==================================================>  (111 + 5) / 116][Stage 195:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.798564649 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396483624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (58 + 55) / 113][Stage 196:=============================>                       (62 + 51) / 113][Stage 196:===================================>                 (76 + 37) / 113][Stage 196:=========================================>           (88 + 25) / 113][Stage 196:==============================================>     (102 + 11) / 113][Stage 196:=====================================================(113 + 0) / 113]                                                                                [Stage 197:===========================>                         (59 + 55) / 114][Stage 197:=============================>                       (63 + 51) / 114][Stage 197:==================================>                  (75 + 39) / 114][Stage 197:=======================================>             (86 + 28) / 114][Stage 197:=============================================>       (98 + 16) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.465061942 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355787723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:======================================>              (83 + 30) / 113][Stage 198:============================================>        (94 + 19) / 113][Stage 198:===============================================>    (103 + 10) / 113][Stage 198:==================================================>  (108 + 5) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:=====================================>               (81 + 33) / 114][Stage 199:===========================================>         (93 + 21) / 114][Stage 199:==============================================>     (103 + 11) / 114][Stage 199:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.463999166 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m0.276s
user	11m31.752s
sys	0m37.768s
