Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 03:42:32 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:42:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:42:46 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:42:47 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 03:42:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:43:00 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525034249-0632).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.561065564 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:=========================>                             (53 + 63) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.833166134 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZInd ex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.709675092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:======================>                                (48 + 67) / 115][Stage 2:=============================>                         (62 + 53) / 115][Stage 2:=================================>                     (70 + 45) / 115][Stage 2:==================================>                    (72 + 43) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:=========================>                             (54 + 62) / 116][Stage 3:==============================>                        (64 + 52) / 116][Stage 3:=================================>                     (70 + 46) / 116][Stage 3:==================================>                    (73 + 43) / 116][Stage 3:=======================================>               (83 + 33) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:==============================================>        (99 + 17) / 116][Stage 3:===============================================>      (103 + 13) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:=====================================================> (113 + 3) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 11.646199984 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIn dex<=129", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.668838705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=========================>                             (52 + 61) / 113][Stage 4:===========================>                           (56 + 57) / 113][Stage 4:=============================>                         (60 + 53) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:=======================================>               (81 + 32) / 113][Stage 4:============================================>          (91 + 22) / 113][Stage 4:===============================================>      (100 + 13) / 113][Stage 4:====================================================>  (108 + 5) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:==============================>                        (63 + 51) / 114][Stage 5:==================================>                    (72 + 42) / 114][Stage 5:=========================================>             (87 + 27) / 114][Stage 5:================================================>     (102 + 12) / 114][Stage 5:======================================================>(112 + 2) / 114][Stage 5:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.919487442 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIn dex<=171", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.575548901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=================================>                     (72 + 46) / 118][Stage 6:==================================>                    (73 + 45) / 118][Stage 6:=====================================>                 (80 + 38) / 118][Stage 6:==========================================>            (92 + 26) / 118][Stage 6:==============================================>       (102 + 16) / 118][Stage 6:=================================================>    (108 + 10) / 118][Stage 6:======================================================>(117 + 1) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:====================================>                  (79 + 40) / 119][Stage 7:==========================================>            (93 + 26) / 119][Stage 7:=================================================>    (108 + 11) / 119][Stage 7:=====================================================> (115 + 4) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.214145733 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZInde x<=15", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.605866247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:===========================>                           (57 + 56) / 113][Stage 8:============================>                          (58 + 55) / 113][Stage 8:===============================>                       (65 + 48) / 113][Stage 8:======================================>                (79 + 34) / 113][Stage 8:===========================================>           (89 + 24) / 113][Stage 8:==================================================>    (104 + 9) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:=============================>                         (61 + 53) / 114][Stage 9:=================================>                     (70 + 44) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:=============================================>         (95 + 19) / 114][Stage 9:===================================================>   (107 + 7) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:=====================================================> (111 + 3) / 114][Stage 9:======================================================>(112 + 2) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.49868235 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZInd ex<=49", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=49,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.544076353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=====================================>                (80 + 35) / 115][Stage 10:=======================================>              (85 + 30) / 115][Stage 10:============================================>         (95 + 20) / 115][Stage 10:================================================>    (105 + 10) / 115][Stage 10:=================================================>    (106 + 9) / 115][Stage 10:==================================================>   (107 + 8) / 115][Stage 10:====================================================> (112 + 3) / 115]                                                                                [Stage 11:======================================>               (83 + 33) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:============================================>         (95 + 21) / 116][Stage 11:===============================================>     (103 + 13) / 116][Stage 11:==================================================>   (108 + 8) / 116][Stage 11:====================================================> (113 + 3) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.965544179 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIn dex<=183", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.625803353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:============================>                         (64 + 57) / 121][Stage 12:=================================>                    (75 + 46) / 121][Stage 12:==========================================>           (95 + 26) / 121][Stage 12:==============================================>      (107 + 14) / 121][Stage 12:=================================================>    (112 + 9) / 121][Stage 12:=====================================================>(120 + 1) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:===========================>                          (62 + 60) / 122][Stage 13:===============================>                      (72 + 50) / 122][Stage 13:======================================>               (86 + 36) / 122][Stage 13:==============================================>      (107 + 15) / 122][Stage 13:==================================================>   (115 + 7) / 122][Stage 13:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 5.184259098 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZInd ex<=50", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=50,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556810042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:==============================>                       (69 + 52) / 121][Stage 14:=================================>                    (75 + 46) / 121][Stage 14:================================================>    (110 + 11) / 121][Stage 14:====================================================> (118 + 3) / 121]                                                                                [Stage 15:===========================>                          (61 + 61) / 122][Stage 15:============================>                         (65 + 57) / 122][Stage 15:=================================>                    (76 + 46) / 122][Stage 15:===========================================>          (99 + 23) / 122][Stage 15:==================================================>   (113 + 9) / 122][Stage 15:=====================================================>(120 + 2) / 122][Stage 15:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.634367575 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIn dex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.591139758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:=============================>                        (66 + 54) / 120][Stage 16:======================================>               (85 + 35) / 120][Stage 16:=============================================>       (104 + 16) / 120][Stage 16:===================================================>  (115 + 5) / 120][Stage 16:=====================================================>(119 + 1) / 120]                                                                                [Stage 17:==========================>                           (60 + 61) / 121][Stage 17:=============================>                        (66 + 55) / 121][Stage 17:================================>                     (73 + 48) / 121][Stage 17:======================================>               (86 + 35) / 121][Stage 17:=============================================>       (103 + 18) / 121][Stage 17:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.991256306 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIn dex<=181", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=181,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.559472029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:>                                                       (0 + 0) / 121][Stage 18:==========================>                           (60 + 61) / 121][Stage 18:============================>                         (63 + 58) / 121][Stage 18:=================================>                    (74 + 47) / 121][Stage 18:=========================================>            (94 + 27) / 121][Stage 18:===================================================>  (116 + 5) / 121]                                                                                [Stage 19:===========================>                          (61 + 61) / 122][Stage 19:============================>                         (65 + 57) / 122][Stage 19:=================================>                    (76 + 46) / 122][Stage 19:=======================================>              (89 + 33) / 122][Stage 19:================================================>    (111 + 11) / 122][Stage 19:=====================================================>(120 + 2) / 122][Stage 19:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.767598976 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIn dex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530380946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:======================================>               (81 + 34) / 115][Stage 20:========================================>             (87 + 28) / 115][Stage 20:===============================================>     (103 + 12) / 115][Stage 20:===================================================>  (109 + 6) / 115]                                                                                [Stage 21:========================================>             (86 + 30) / 116][Stage 21:==============================================>      (102 + 14) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.858189503 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIn dex<=119", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=119,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510999844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:===========================>                          (58 + 55) / 113][Stage 22:============================>                         (59 + 54) / 113][Stage 22:================================>                     (69 + 44) / 113][Stage 22:===========================================>          (90 + 23) / 113][Stage 22:==================================================>   (106 + 7) / 113]                                                                                [Stage 23:===========================>                          (59 + 55) / 114][Stage 23:================================>                     (69 + 45) / 114][Stage 23:=====================================>                (79 + 35) / 114][Stage 23:=============================================>        (95 + 19) / 114][Stage 23:===================================================>  (108 + 6) / 114][Stage 23:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.821877843 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZInd ex<=77", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=77,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524608554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:=====================================>                (81 + 37) / 118][Stage 24:=========================================>            (91 + 27) / 118][Stage 24:================================================>    (107 + 11) / 118]                                                                                [Stage 25:==================================>                   (75 + 44) / 119][Stage 25:====================================>                 (80 + 39) / 119][Stage 25:=========================================>            (91 + 28) / 119][Stage 25:==============================================>      (105 + 14) / 119][Stage 25:====================================================> (115 + 4) / 119][Stage 25:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.794412347 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZInd ex<=100", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.595744611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:============================>                         (59 + 54) / 113][Stage 26:=================================>                    (71 + 42) / 113][Stage 26:==========================================>           (89 + 24) / 113][Stage 26:================================================>    (103 + 10) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:============================>                         (60 + 54) / 114][Stage 27:==============================>                       (65 + 49) / 114][Stage 27:======================================>               (82 + 32) / 114][Stage 27:==============================================>      (100 + 14) / 114][Stage 27:===================================================>  (108 + 6) / 114][Stage 27:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.040052911 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIn dex<=193", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=186 AND partitionZIndex<=193,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512946429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:============================>                         (63 + 58) / 121][Stage 28:================================>                     (73 + 48) / 121][Stage 28:============================================>        (101 + 20) / 121][Stage 28:===================================================>  (116 + 5) / 121]                                                                                [Stage 29:===========================>                          (61 + 61) / 122][Stage 29:==============================>                       (68 + 54) / 122][Stage 29:======================================>               (86 + 36) / 122][Stage 29:===============================================>     (109 + 13) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.442491719 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIn dex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521818569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:>                                                       (0 + 0) / 120][Stage 30:===========================>                          (60 + 60) / 120][Stage 30:============================>                         (64 + 56) / 120][Stage 30:==================================>                   (77 + 43) / 120][Stage 30:=========================================>            (92 + 28) / 120][Stage 30:==================================================>   (113 + 7) / 120][Stage 30:=====================================================>(119 + 1) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:=============================>                        (66 + 55) / 121][Stage 31:=====================================>                (83 + 38) / 121][Stage 31:=============================================>       (105 + 16) / 121][Stage 31:==================================================>   (113 + 8) / 121][Stage 31:===================================================>  (116 + 5) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.2956192 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIn dex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491729863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:===============================>                      (67 + 48) / 115][Stage 32:=====================================>                (79 + 36) / 115][Stage 32:==============================================>      (101 + 14) / 115][Stage 32:====================================================> (111 + 4) / 115]                                                                                [Stage 33:================================>                     (69 + 47) / 116][Stage 33:====================================>                 (78 + 38) / 116][Stage 33:===========================================>          (93 + 23) / 116][Stage 33:==============================================>      (102 + 14) / 116][Stage 33:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.880273146 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIn dex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478273234 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:===================================>                  (76 + 39) / 115][Stage 34:===========================================>          (93 + 22) / 115][Stage 34:=================================================>    (106 + 9) / 115]                                                                                [Stage 35:==================================>                   (74 + 42) / 116][Stage 35:======================================>               (83 + 33) / 116][Stage 35:=============================================>       (100 + 16) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.728589374 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIn dex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501770806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (55 + 58) / 113][Stage 36:=============================>                        (61 + 52) / 113][Stage 36:=================================>                    (70 + 43) / 113][Stage 36:===========================================>          (90 + 23) / 113][Stage 36:==================================================>   (106 + 7) / 113][Stage 36:======================================================(113 + 0) / 113]                                                                                [Stage 37:============================>                         (60 + 54) / 114][Stage 37:=================================>                    (70 + 44) / 114][Stage 37:=======================================>              (83 + 31) / 114][Stage 37:==============================================>      (100 + 14) / 114][Stage 37:==================================================>   (106 + 8) / 114][Stage 37:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.841710909 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIn dex<=227", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=227,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449803132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=====================================>                (79 + 36) / 115][Stage 38:=======================================>              (84 + 31) / 115][Stage 38:=============================================>        (97 + 18) / 115][Stage 38:====================================================> (112 + 3) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:======================================>               (83 + 33) / 116][Stage 39:===========================================>          (93 + 23) / 116][Stage 39:===============================================>     (104 + 12) / 116][Stage 39:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.821898803 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZInd ex<=89", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=89,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478207395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:============================>                         (59 + 54) / 113][Stage 40:===============================>                      (66 + 47) / 113][Stage 40:=======================================>              (82 + 31) / 113][Stage 40:==============================================>      (100 + 13) / 113][Stage 40:===================================================>  (107 + 6) / 113]                                                                                [Stage 41:============================>                         (60 + 54) / 114][Stage 41:================================>                     (69 + 45) / 114][Stage 41:========================================>             (86 + 28) / 114][Stage 41:==============================================>       (99 + 15) / 114][Stage 41:===================================================>  (109 + 5) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.918034863 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIn dex<=221", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=221,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531166052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:============================>                         (59 + 54) / 113][Stage 42:=============================>                        (62 + 51) / 113][Stage 42:===================================>                  (75 + 38) / 113][Stage 42:=============================================>        (96 + 17) / 113][Stage 42:====================================================> (109 + 4) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:============================>                         (60 + 54) / 114][Stage 43:================================>                     (68 + 46) / 114][Stage 43:======================================>               (81 + 33) / 114][Stage 43:==============================================>       (99 + 15) / 114][Stage 43:==================================================>   (107 + 7) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.944077223 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZInd ex<=42", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427608964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:=======================================>              (85 + 30) / 115][Stage 44:==============================================>       (99 + 16) / 115][Stage 44:===================================================>  (110 + 5) / 115][Stage 44:=====================================================>(113 + 2) / 115]                                                                                [Stage 45:========================================>             (86 + 30) / 116][Stage 45:============================================>         (96 + 20) / 116][Stage 45:=================================================>    (107 + 9) / 116][Stage 45:====================================================> (112 + 4) / 116][Stage 45:=====================================================>(114 + 2) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.839961099 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIn dex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45263712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:===================================>                  (76 + 39) / 115][Stage 46:=========================================>            (89 + 26) / 115][Stage 46:===============================================>     (103 + 12) / 115][Stage 46:====================================================> (111 + 4) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:================================>                     (70 + 46) / 116][Stage 47:=========================================>            (89 + 27) / 116][Stage 47:================================================>    (106 + 10) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:====================================================> (112 + 4) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.483704434 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZInde x<=13", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=13,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471064601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:============================>                         (59 + 54) / 113][Stage 48:==============================>                       (64 + 49) / 113][Stage 48:=======================================>              (82 + 31) / 113][Stage 48:==============================================>       (98 + 15) / 113][Stage 48:=====================================================>(111 + 2) / 113]                                                                                [Stage 49:============================>                         (60 + 54) / 114][Stage 49:=============================>                        (63 + 51) / 114][Stage 49:=================================>                    (70 + 44) / 114][Stage 49:=========================================>            (88 + 26) / 114][Stage 49:==============================================>      (101 + 13) / 114][Stage 49:==================================================>   (107 + 7) / 114][Stage 49:====================================================> (110 + 4) / 114][Stage 49:=====================================================>(112 + 2) / 114][Stage 49:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.644141009 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZInd ex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415962059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:======================================>               (82 + 33) / 115][Stage 50:===========================================>          (93 + 22) / 115][Stage 50:===============================================>     (102 + 13) / 115][Stage 50:==================================================>   (108 + 7) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:=====================================>                (81 + 35) / 116][Stage 51:==========================================>           (91 + 25) / 116][Stage 51:=============================================>       (100 + 16) / 116][Stage 51:=====================================================>(114 + 2) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.63740742 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIn dex<=113", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=113,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415397718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:=================================>                    (70 + 43) / 113][Stage 52:=======================================>              (83 + 30) / 113][Stage 52:===========================================>          (90 + 23) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:==================================>                   (73 + 41) / 114][Stage 53:========================================>             (86 + 28) / 114][Stage 53:===========================================>          (92 + 22) / 114][Stage 53:==============================================>      (101 + 13) / 114][Stage 53:===================================================>  (109 + 5) / 114][Stage 53:====================================================> (111 + 3) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.334812453 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIn dex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449165173 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:============================>                         (59 + 54) / 113][Stage 54:================================>                     (67 + 46) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:=================================================>    (104 + 9) / 113]                                                                                [Stage 55:============================>                         (60 + 54) / 114][Stage 55:===============================>                      (66 + 48) / 114][Stage 55:=======================================>              (84 + 30) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.560321595 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIn dex<=148", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=148,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456914071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:===============================>                      (69 + 51) / 120][Stage 56:=====================================>                (84 + 36) / 120][Stage 56:================================================>    (110 + 10) / 120]                                                                                [Stage 57:============================>                         (63 + 58) / 121][Stage 57:================================>                     (73 + 48) / 121][Stage 57:============================================>        (101 + 20) / 121][Stage 57:====================================================> (118 + 3) / 121][Stage 57:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.367520043 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIn dex<=236", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=236,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420563411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:===================================>                  (75 + 38) / 113][Stage 58:========================================>             (85 + 28) / 113][Stage 58:=============================================>        (95 + 18) / 113][Stage 58:====================================================> (109 + 4) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:=======================================>              (83 + 31) / 114][Stage 59:=============================================>        (95 + 19) / 114][Stage 59:=================================================>    (105 + 9) / 114][Stage 59:====================================================> (111 + 3) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.322349913 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIn dex<=163", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=163,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402647511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:====================================>                 (77 + 36) / 113][Stage 60:===========================================>          (90 + 23) / 113][Stage 60:================================================>    (103 + 10) / 113][Stage 60:===================================================>  (108 + 5) / 113]                                                                                [Stage 61:==================================>                   (73 + 41) / 114][Stage 61:========================================>             (86 + 28) / 114][Stage 61:==============================================>       (99 + 15) / 114][Stage 61:====================================================> (110 + 4) / 114][Stage 61:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.016622078 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZInd ex<=61", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=61,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466396032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:============================>                         (59 + 54) / 113][Stage 62:================================>                     (69 + 44) / 113][Stage 62:=======================================>              (83 + 30) / 113][Stage 62:===================================================>  (107 + 6) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:===========================>                          (59 + 55) / 114][Stage 63:==============================>                       (65 + 49) / 114][Stage 63:==================================>                   (73 + 41) / 114][Stage 63:=============================================>        (97 + 17) / 114][Stage 63:====================================================> (110 + 4) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.222991812 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIn dex<=230", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418828248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:================================>                     (72 + 46) / 118][Stage 64:====================================>                 (79 + 39) / 118][Stage 64:=========================================>            (90 + 28) / 118][Stage 64:===============================================>     (105 + 13) / 118][Stage 64:====================================================> (114 + 4) / 118]                                                                                [Stage 65:==================================>                   (75 + 44) / 119][Stage 65:=======================================>              (88 + 31) / 119][Stage 65:============================================>        (100 + 19) / 119][Stage 65:==================================================>   (111 + 8) / 119][Stage 65:=====================================================>(117 + 2) / 119][Stage 65:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.984512448 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZInd ex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454043746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:==============================>                       (63 + 50) / 113][Stage 66:====================================>                 (76 + 37) / 113][Stage 66:===========================================>          (92 + 21) / 113][Stage 66:==================================================>   (105 + 8) / 113][Stage 66:====================================================> (110 + 3) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:=============================>                        (62 + 52) / 114][Stage 67:=====================================>                (80 + 34) / 114][Stage 67:============================================>         (94 + 20) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.724837611 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIn dex<=161", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=161,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406726662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:=================================>                    (73 + 45) / 118][Stage 68:===================================>                  (78 + 40) / 118][Stage 68:============================================>         (97 + 21) / 118][Stage 68:===================================================>  (112 + 6) / 118][Stage 68:=====================================================>(117 + 1) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (77 + 42) / 119][Stage 69:===========================================>          (95 + 24) / 119][Stage 69:==================================================>   (112 + 7) / 119][Stage 69:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.166036516 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIn dex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481614808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:==========================>                           (60 + 61) / 121][Stage 70:===========================>                          (61 + 60) / 121][Stage 70:=================================>                    (74 + 47) / 121][Stage 70:============================================>         (99 + 22) / 121][Stage 70:==================================================>   (114 + 7) / 121]                                                                                [Stage 71:===========================>                          (61 + 61) / 122][Stage 71:===============================>                      (71 + 51) / 122][Stage 71:=========================================>            (93 + 29) / 122][Stage 71:==============================================>      (108 + 14) / 122][Stage 71:==================================================>   (115 + 7) / 122][Stage 71:=====================================================>(120 + 2) / 122][Stage 71:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.432989511 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIn dex<=116", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395198497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===================================>                  (74 + 39) / 113][Stage 72:=========================================>            (87 + 26) / 113][Stage 72:============================================>         (94 + 19) / 113][Stage 72:===============================================>     (102 + 11) / 113][Stage 72:===================================================>  (107 + 6) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:====================================>                 (76 + 38) / 114][Stage 73:=========================================>            (88 + 26) / 114][Stage 73:==============================================>      (101 + 13) / 114][Stage 73:=====================================================>(112 + 2) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.430730351 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZInde x<=16", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=16,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366860914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:======================================>               (82 + 33) / 115][Stage 74:=========================================>            (89 + 26) / 115][Stage 74:================================================>    (105 + 10) / 115][Stage 74:====================================================> (111 + 4) / 115]                                                                                [Stage 75:=====================================>                (80 + 36) / 116][Stage 75:=========================================>            (90 + 26) / 116][Stage 75:==============================================>       (99 + 17) / 116][Stage 75:==================================================>   (109 + 7) / 116][Stage 75:====================================================> (112 + 4) / 116][Stage 75:====================================================> (113 + 3) / 116][Stage 75:=====================================================>(114 + 2) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.999523315 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIn dex<=175", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=175,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368912779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=======================================>              (84 + 31) / 115][Stage 76:=========================================>            (89 + 26) / 115][Stage 76:===============================================>     (103 + 12) / 115][Stage 76:===================================================>  (110 + 5) / 115][Stage 76:====================================================> (111 + 4) / 115][Stage 76:=====================================================>(113 + 2) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=======================================>              (85 + 31) / 116][Stage 77:=========================================>            (89 + 27) / 116][Stage 77:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.147468928 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIn dex<=143", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=143,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376258536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:=====================================>                (80 + 35) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:==============================================>      (101 + 14) / 115][Stage 78:===================================================>  (109 + 6) / 115]                                                                                [Stage 79:=======================================>              (85 + 31) / 116][Stage 79:=============================================>        (97 + 19) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:=====================================================>(114 + 2) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.988577838 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIn dex<=204", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=204,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362957786 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:======================================>               (82 + 33) / 115][Stage 80:==========================================>           (91 + 24) / 115][Stage 80:================================================>    (105 + 10) / 115][Stage 80:===================================================>  (110 + 5) / 115][Stage 80:====================================================> (111 + 4) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:======================================>               (82 + 34) / 116][Stage 81:=========================================>            (90 + 26) / 116][Stage 81:==============================================>      (101 + 15) / 116][Stage 81:===================================================>  (111 + 5) / 116][Stage 81:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.248238676 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIn dex<=162", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=162,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393461654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:===================================>                  (77 + 41) / 118][Stage 82:============================================>         (98 + 20) / 118][Stage 82:==================================================>   (111 + 7) / 118]                                                                                [Stage 83:==================================>                   (75 + 44) / 119][Stage 83:=======================================>              (86 + 33) / 119][Stage 83:=============================================>       (102 + 17) / 119][Stage 83:====================================================> (116 + 3) / 119][Stage 83:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.794426212 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIn dex<=235", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=235,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557933481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:==========================>                           (60 + 61) / 121][Stage 84:===========================>                          (62 + 59) / 121][Stage 84:====================================>                 (82 + 39) / 121][Stage 84:==============================================>      (107 + 14) / 121][Stage 84:=====================================================>(119 + 2) / 121]                                                                                [Stage 85:===========================>                          (61 + 61) / 122][Stage 85:============================>                         (65 + 57) / 122][Stage 85:=====================================>                (84 + 38) / 122][Stage 85:=============================================>       (105 + 17) / 122][Stage 85:===================================================>  (117 + 5) / 122][Stage 85:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.194682745 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIn dex<=124", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396436921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:=================================>                    (74 + 44) / 118][Stage 86:==========================================>           (92 + 26) / 118][Stage 86:=================================================>    (109 + 9) / 118]                                                                                [Stage 87:=================================>                    (74 + 45) / 119][Stage 87:=====================================>                (82 + 37) / 119][Stage 87:=============================================>       (102 + 17) / 119][Stage 87:===================================================>  (113 + 6) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.613833816 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZInd ex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433614065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:==========================>                           (60 + 61) / 121][Stage 88:=============================>                        (67 + 54) / 121][Stage 88:====================================>                 (81 + 40) / 121][Stage 88:===========================================>         (100 + 21) / 121][Stage 88:=====================================================>(119 + 2) / 121][Stage 88:=====================================================>(120 + 1) / 121]                                                                                [Stage 89:===========================>                          (61 + 61) / 122][Stage 89:==============================>                       (68 + 54) / 122][Stage 89:=====================================>                (84 + 38) / 122][Stage 89:==============================================>      (108 + 14) / 122][Stage 89:====================================================> (119 + 3) / 122][Stage 89:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.932087347 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZInd ex<=88", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=88,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397885345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:==================================>                   (76 + 42) / 118][Stage 90:=====================================>                (82 + 36) / 118][Stage 90:==========================================>           (92 + 26) / 118][Stage 90:==============================================>      (104 + 14) / 118][Stage 90:=====================================================>(117 + 1) / 118]                                                                                [Stage 91:=================================>                    (74 + 45) / 119][Stage 91:===================================>                  (78 + 41) / 119][Stage 91:=========================================>            (91 + 28) / 119][Stage 91:============================================>         (98 + 21) / 119][Stage 91:==============================================>      (104 + 15) / 119][Stage 91:====================================================> (116 + 3) / 119][Stage 91:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.857942044 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIn dex<=245", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=245,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396824563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:==============================>                       (65 + 50) / 115][Stage 92:====================================>                 (77 + 38) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:===============================================>     (104 + 11) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:=====================================>                (80 + 36) / 116][Stage 93:==========================================>           (92 + 24) / 116][Stage 93:===============================================>     (103 + 13) / 116][Stage 93:=====================================================>(114 + 2) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.088860935 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIn dex<=188", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=188,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389291727 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:=================================>                    (71 + 42) / 113][Stage 94:========================================>             (84 + 29) / 113][Stage 94:============================================>         (94 + 19) / 113][Stage 94:==================================================>   (105 + 8) / 113][Stage 94:====================================================> (110 + 3) / 113]                                                                                [Stage 95:=====================================>                (79 + 35) / 114][Stage 95:===========================================>          (91 + 23) / 114][Stage 95:==============================================>       (98 + 16) / 114][Stage 95:===================================================>  (109 + 5) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.252891622 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIn dex<=197", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=197,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35447833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:=========================================>            (88 + 27) / 115][Stage 96:=============================================>        (97 + 18) / 115][Stage 96:===================================================>  (110 + 5) / 115]                                                                                [Stage 97:=======================================>              (85 + 31) / 116][Stage 97:===========================================>          (93 + 23) / 116][Stage 97:==================================================>   (108 + 8) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.884668784 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZInd ex<=97", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=97,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393602797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:================================>                     (69 + 46) / 115][Stage 98:=====================================>                (80 + 35) / 115][Stage 98:=============================================>        (96 + 19) / 115][Stage 98:==================================================>   (107 + 8) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=================================>                    (71 + 45) / 116][Stage 99:========================================>             (86 + 30) / 116][Stage 99:=============================================>        (98 + 18) / 116][Stage 99:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.878070811 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZInd ex<=28", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=28,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392482714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==============================>                      (67 + 48) / 115][Stage 100:====================================>                (79 + 36) / 115][Stage 100:==========================================>          (93 + 22) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:==============================>                      (67 + 49) / 116][Stage 101:====================================>                (79 + 37) / 116][Stage 101:=========================================>           (91 + 25) / 116][Stage 101:=============================================>      (102 + 14) / 116][Stage 101:===============================================>    (106 + 10) / 116][Stage 101:=================================================>   (108 + 8) / 116][Stage 101:=================================================>   (109 + 7) / 116][Stage 101:===================================================> (113 + 3) / 116][Stage 101:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.718135107 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIn dex<=244", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=244,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392847996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:===================================>                 (80 + 38) / 118][Stage 102:=============================================>      (103 + 15) / 118][Stage 102:==================================================>  (113 + 5) / 118]                                                                                [Stage 103:================================>                    (74 + 45) / 119][Stage 103:====================================>                (83 + 36) / 119][Stage 103:============================================>       (101 + 18) / 119][Stage 103:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.469745795 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZInd ex<=73", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=73,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420195617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:===============================>                     (72 + 48) / 120][Stage 104:========================================>            (92 + 28) / 120][Stage 104:==============================================>     (107 + 13) / 120][Stage 104:===================================================> (117 + 3) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:=============================>                       (67 + 54) / 121][Stage 105:===================================>                 (80 + 41) / 121][Stage 105:===========================================>        (102 + 19) / 121][Stage 105:===================================================> (118 + 3) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.778721887 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZInde x<=10", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=10,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393393898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:==============================>                      (67 + 48) / 115][Stage 106:======================================>              (83 + 32) / 115][Stage 106:============================================>        (97 + 18) / 115][Stage 106:==================================================>  (109 + 6) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:===============================>                     (69 + 47) / 116][Stage 107:======================================>              (84 + 32) / 116][Stage 107:=============================================>       (99 + 17) / 116][Stage 107:================================================>    (107 + 9) / 116][Stage 107:===================================================> (113 + 3) / 116][Stage 107:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.595926835 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIn dex<=174", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=174,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38980639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:====================================>                (80 + 35) / 115][Stage 108:=========================================>           (89 + 26) / 115][Stage 108:==================================================>  (109 + 6) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (82 + 34) / 116][Stage 109:==========================================>          (93 + 23) / 116][Stage 109:==============================================>     (103 + 13) / 116][Stage 109:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.679420379 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZInd ex<=20", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=20,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366571018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:=====================================>               (82 + 33) / 115][Stage 110:==========================================>          (93 + 22) / 115][Stage 110:===============================================>    (104 + 11) / 115][Stage 110:===================================================> (112 + 3) / 115]                                                                                [Stage 111:=====================================>               (83 + 33) / 116][Stage 111:=========================================>           (90 + 26) / 116][Stage 111:=============================================>      (102 + 14) / 116][Stage 111:==================================================>  (110 + 6) / 116][Stage 111:====================================================>(114 + 2) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.343629882 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIn dex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430868522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:=============================>                       (66 + 54) / 120][Stage 112:===================================>                 (80 + 40) / 120][Stage 112:============================================>       (102 + 18) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:===========================>                         (62 + 59) / 121][Stage 113:================================>                    (75 + 46) / 121][Stage 113:=======================================>             (91 + 30) / 121][Stage 113:===============================================>    (110 + 11) / 121][Stage 113:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.223006911 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIn dex<=146", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=146,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354851193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:====================================>                (79 + 36) / 115][Stage 114:======================================>              (83 + 32) / 115][Stage 114:===========================================>         (94 + 21) / 115][Stage 114:===============================================>    (104 + 11) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:=====================================>               (82 + 34) / 116][Stage 115:========================================>            (88 + 28) / 116][Stage 115:=================================================>   (109 + 7) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.925716116 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZInd ex<=56", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=56,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348651959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:=====================================>               (81 + 34) / 115][Stage 116:=======================================>             (85 + 30) / 115][Stage 116:============================================>        (97 + 18) / 115][Stage 116:=================================================>   (108 + 7) / 115]                                                                                [Stage 117:=====================================>               (83 + 33) / 116][Stage 117:=========================================>           (91 + 25) / 116][Stage 117:==============================================>     (104 + 12) / 116][Stage 117:==================================================>  (110 + 6) / 116][Stage 117:===================================================> (112 + 4) / 116][Stage 117:===================================================> (113 + 3) / 116][Stage 117:====================================================>(114 + 2) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.372070499 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZInd ex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387403866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:===================================>                 (76 + 39) / 115][Stage 118:==========================================>          (92 + 23) / 115][Stage 118:==============================================>     (103 + 12) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:===================================>                 (77 + 39) / 116][Stage 119:========================================>            (88 + 28) / 116][Stage 119:=============================================>       (99 + 17) / 116][Stage 119:==================================================>  (110 + 6) / 116][Stage 119:==================================================>  (111 + 5) / 116][Stage 119:====================================================>(114 + 2) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.294149624 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZInd ex<=54", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47425402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:==========================>                          (60 + 61) / 121][Stage 120:===========================>                         (63 + 58) / 121][Stage 120:===================================>                 (80 + 41) / 121][Stage 120:============================================>       (104 + 17) / 121][Stage 120:====================================================>(120 + 1) / 121]                                                                                [Stage 121:==========================>                          (61 + 61) / 122][Stage 121:============================>                        (66 + 56) / 122][Stage 121:====================================>                (85 + 37) / 122][Stage 121:============================================>       (105 + 17) / 122][Stage 121:==================================================>  (117 + 5) / 122][Stage 121:====================================================>(120 + 2) / 122][Stage 121:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.966445392 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIn dex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363814374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:=====================================>               (81 + 32) / 113][Stage 122:===========================================>         (93 + 20) / 113][Stage 122:==============================================>      (99 + 14) / 113][Stage 122:====================================================>(111 + 2) / 113]                                                                                [Stage 123:==================================>                  (75 + 39) / 114][Stage 123:======================================>              (83 + 31) / 114][Stage 123:============================================>        (96 + 18) / 114][Stage 123:==================================================>  (109 + 5) / 114][Stage 123:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.823459018 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZInd ex<=63", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=63,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370467649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:=================================>                   (75 + 43) / 118][Stage 124:=====================================>               (84 + 34) / 118][Stage 124:=======================================>             (88 + 30) / 118][Stage 124:============================================>        (99 + 19) / 118][Stage 124:==================================================>  (112 + 6) / 118]                                                                                [Stage 125:=================================>                   (76 + 43) / 119][Stage 125:===================================>                 (80 + 39) / 119][Stage 125:=========================================>           (94 + 25) / 119][Stage 125:===========================================>        (100 + 19) / 119][Stage 125:===================================================> (115 + 4) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.520265617 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIn dex<=132", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=125 AND partitionZIndex<=132,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386784726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:=============================>                       (65 + 50) / 115][Stage 126:====================================>                (80 + 35) / 115][Stage 126:===========================================>         (95 + 20) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:===================================>                 (78 + 38) / 116][Stage 127:============================================>        (98 + 18) / 116][Stage 127:===============================================>    (105 + 11) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.723627838 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIn dex<=213", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=213,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372536854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:================================>                    (72 + 46) / 118][Stage 128:=================================>                   (75 + 43) / 118][Stage 128:==========================================>          (95 + 23) / 118][Stage 128:===================================================> (115 + 3) / 118]                                                                                [Stage 129:================================>                    (73 + 46) / 119][Stage 129:====================================>                (83 + 36) / 119][Stage 129:==============================================>     (107 + 12) / 119][Stage 129:===================================================> (116 + 3) / 119][Stage 129:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.422269444 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZInd ex<=98", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=98,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351248567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:======================================>              (83 + 32) / 115][Stage 130:==========================================>          (93 + 22) / 115][Stage 130:===============================================>    (104 + 11) / 115][Stage 130:===================================================> (111 + 4) / 115]                                                                                [Stage 131:=======================================>             (86 + 30) / 116][Stage 131:=============================================>       (99 + 17) / 116][Stage 131:=================================================>   (108 + 8) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.902063801 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZInd ex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408396835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:===========================>                         (58 + 55) / 113][Stage 132:=============================>                       (63 + 50) / 113][Stage 132:======================================>              (83 + 30) / 113][Stage 132:==============================================>     (101 + 12) / 113][Stage 132:===================================================> (110 + 3) / 113]                                                                                [Stage 133:===========================>                         (59 + 55) / 114][Stage 133:==============================>                      (65 + 49) / 114][Stage 133:=====================================>               (81 + 33) / 114][Stage 133:==============================================>      (99 + 15) / 114][Stage 133:==================================================>  (109 + 5) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.522857733 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIn dex<=189", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=189,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355728537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:>                                                      (0 + 0) / 115][Stage 134:=====================================>               (82 + 33) / 115][Stage 134:=========================================>           (90 + 25) / 115][Stage 134:=================================================>   (107 + 8) / 115][Stage 134:===================================================> (111 + 4) / 115]                                                                                [Stage 135:=====================================>               (83 + 33) / 116][Stage 135:========================================>            (89 + 27) / 116][Stage 135:=============================================>      (101 + 15) / 116][Stage 135:=================================================>   (109 + 7) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.767047701 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIn dex<=149", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=149,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358760344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:===================================>                 (75 + 38) / 113][Stage 136:======================================>              (82 + 31) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:=================================================>   (105 + 8) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:==================================>                  (75 + 39) / 114][Stage 137:=======================================>             (84 + 30) / 114][Stage 137:=============================================>       (98 + 16) / 114][Stage 137:===============================================>    (104 + 10) / 114][Stage 137:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.030364393 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIn dex<=128", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=128,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406804232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:==========================>                          (61 + 59) / 120][Stage 138:==============================>                      (70 + 50) / 120][Stage 138:========================================>            (91 + 29) / 120][Stage 138:==============================================>     (108 + 12) / 120]                                                                                [Stage 139:===========================>                         (62 + 59) / 121][Stage 139:================================>                    (75 + 46) / 121][Stage 139:========================================>            (92 + 29) / 121][Stage 139:=================================================>   (112 + 9) / 121][Stage 139:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.678244068 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZInd ex<=18", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=18,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404449407 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:==========================>                          (61 + 59) / 120][Stage 140:=============================>                       (67 + 53) / 120][Stage 140:=======================================>             (90 + 30) / 120][Stage 140:===============================================>    (110 + 10) / 120][Stage 140:====================================================>(119 + 1) / 120]                                                                                [Stage 141:==========================>                          (61 + 60) / 121][Stage 141:===============================>                     (73 + 48) / 121][Stage 141:======================================>              (88 + 33) / 121][Stage 141:===========================================>        (101 + 20) / 121][Stage 141:===================================================> (118 + 3) / 121][Stage 141:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 5.46116473 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZInd ex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364635818 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:===================================>                 (75 + 38) / 113][Stage 142:==========================================>          (90 + 23) / 113][Stage 142:===========================================>         (93 + 20) / 113][Stage 142:=================================================>   (105 + 8) / 113][Stage 142:===================================================> (110 + 3) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:==================================>                  (74 + 40) / 114][Stage 143:======================================>              (83 + 31) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:=============================================>       (97 + 17) / 114][Stage 143:==============================================>      (99 + 15) / 114][Stage 143:=================================================>   (106 + 8) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 7.944048228 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZInd ex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369368969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:======================================>              (83 + 30) / 113][Stage 144:==========================================>          (90 + 23) / 113][Stage 144:=================================================>   (106 + 7) / 113][Stage 144:===================================================> (110 + 3) / 113]                                                                                [Stage 145:===================================>                 (76 + 38) / 114][Stage 145:=======================================>             (86 + 28) / 114][Stage 145:============================================>        (95 + 19) / 114][Stage 145:==================================================>  (109 + 5) / 114][Stage 145:====================================================>(112 + 2) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.24709229 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIn dex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408850898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:===========================>                         (63 + 58) / 121][Stage 146:=================================>                   (76 + 45) / 121][Stage 146:=========================================>           (95 + 26) / 121][Stage 146:==================================================>  (116 + 5) / 121]                                                                                [Stage 147:==========================>                          (62 + 60) / 122][Stage 147:==============================>                      (70 + 52) / 122][Stage 147:====================================>                (84 + 38) / 122][Stage 147:=============================================>      (106 + 16) / 122][Stage 147:==================================================>  (117 + 5) / 122][Stage 147:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 5.016047224 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIn dex<=134", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=134,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388006412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:===============================>                     (69 + 46) / 115][Stage 148:====================================>                (80 + 35) / 115][Stage 148:===========================================>         (94 + 21) / 115][Stage 148:==============================================>     (103 + 12) / 115][Stage 148:==================================================>  (109 + 6) / 115][Stage 148:==================================================>  (110 + 5) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:=====================================>               (82 + 34) / 116][Stage 149:=============================================>       (99 + 17) / 116][Stage 149:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 3.310852198 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIn dex<=239", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=232 AND partitionZIndex<=239,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36506742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:>                                                      (0 + 0) / 113][Stage 150:=====================================>               (79 + 34) / 113][Stage 150:=======================================>             (84 + 29) / 113][Stage 150:============================================>        (94 + 19) / 113][Stage 150:================================================>    (104 + 9) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:=======================================>             (85 + 29) / 114][Stage 151:===========================================>         (94 + 20) / 114][Stage 151:==============================================>     (101 + 13) / 114][Stage 151:===================================================> (110 + 4) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.301742799 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIn dex<=152", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=145 AND partitionZIndex<=152,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372480757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:===================================>                 (80 + 38) / 118][Stage 152:=======================================>             (89 + 29) / 118][Stage 152:============================================>       (102 + 16) / 118][Stage 152:==================================================>  (113 + 5) / 118]                                                                                [Stage 153:================================>                    (74 + 45) / 119][Stage 153:=====================================>               (85 + 34) / 119][Stage 153:===========================================>         (97 + 22) / 119][Stage 153:=================================================>   (112 + 7) / 119][Stage 153:====================================================>(117 + 2) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.396054581 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIn dex<=203", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=203,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376343866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==================================>                  (74 + 41) / 115][Stage 154:========================================>            (87 + 28) / 115][Stage 154:===============================================>    (104 + 11) / 115][Stage 154:==================================================>  (110 + 5) / 115][Stage 154:====================================================>(114 + 1) / 115]                                                                                [Stage 155:=================================>                   (73 + 43) / 116][Stage 155:=====================================>               (81 + 35) / 116][Stage 155:===========================================>         (95 + 21) / 116][Stage 155:==============================================>     (104 + 12) / 116][Stage 155:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.183667278 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIn dex<=242", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=242,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36509898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:=====================================>               (80 + 33) / 113][Stage 156:===========================================>         (93 + 20) / 113][Stage 156:==============================================>     (102 + 11) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:=======================================>             (84 + 30) / 114][Stage 157:===========================================>         (93 + 21) / 114][Stage 157:================================================>    (105 + 9) / 114][Stage 157:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.834042613 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIn dex<=126", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=126,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40462341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:===========================>                         (62 + 58) / 120][Stage 158:================================>                    (73 + 47) / 120][Stage 158:=========================================>           (95 + 25) / 120][Stage 158:==================================================>  (115 + 5) / 120]                                                                                [Stage 159:==========================>                          (61 + 60) / 121][Stage 159:===============================>                     (73 + 48) / 121][Stage 159:=========================================>           (95 + 26) / 121][Stage 159:=================================================>   (114 + 7) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.720055288 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIn dex<=155", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381942899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:===================================>                 (76 + 39) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:===================================================> (112 + 3) / 115]                                                                                [Stage 161:==============================>                      (66 + 50) / 116][Stage 161:=====================================>               (81 + 35) / 116][Stage 161:===========================================>         (95 + 21) / 116][Stage 161:===============================================>    (105 + 11) / 116][Stage 161:=====================================================(116 + 0) / 116]                                                                                Time elapsed: 2.79996188 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIn dex<=177", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=170 AND partitionZIndex<=177,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415052874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 61) / 121][Stage 162:===========================>                         (62 + 59) / 121][Stage 162:===============================>                     (72 + 49) / 121][Stage 162:====================================>                (84 + 37) / 121][Stage 162:==============================================>     (109 + 12) / 121][Stage 162:====================================================>(120 + 1) / 121]                                                                                [Stage 163:===========================>                         (63 + 59) / 122][Stage 163:==================================>                  (79 + 43) / 122][Stage 163:===========================================>         (99 + 23) / 122][Stage 163:==================================================>  (116 + 6) / 122][Stage 163:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.861656031 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIn dex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340011065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:======================================>              (83 + 32) / 115][Stage 164:=========================================>           (91 + 24) / 115][Stage 164:=============================================>      (100 + 15) / 115][Stage 164:=================================================>   (107 + 8) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:=====================================>               (83 + 33) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.737263962 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIn dex<=228", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396932414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===========================>                         (59 + 54) / 113][Stage 166:==============================>                      (66 + 47) / 113][Stage 166:====================================>                (78 + 35) / 113][Stage 166:==============================================>     (101 + 12) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:===========================>                         (59 + 55) / 114][Stage 167:===========================>                         (60 + 54) / 114][Stage 167:===============================>                     (68 + 46) / 114][Stage 167:======================================>              (83 + 31) / 114][Stage 167:==============================================>      (99 + 15) / 114][Stage 167:===================================================> (111 + 3) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.791145617 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIn dex<=233", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=233,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398307137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:============================>                        (61 + 52) / 113][Stage 168:=================================>                   (71 + 42) / 113][Stage 168:============================================>        (94 + 19) / 113][Stage 168:===================================================> (110 + 3) / 113]                                                                                [Stage 169:============================>                        (62 + 52) / 114][Stage 169:===================================>                 (76 + 38) / 114][Stage 169:==========================================>          (91 + 23) / 114][Stage 169:===============================================>    (104 + 10) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.482166163 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIn dex<=114", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=114,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368361529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:=================================>                   (71 + 42) / 113][Stage 170:======================================>              (82 + 31) / 113][Stage 170:=============================================>       (96 + 17) / 113][Stage 170:==================================================>  (107 + 6) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:=======================================>             (85 + 29) / 114][Stage 171:===========================================>         (93 + 21) / 114][Stage 171:===============================================>    (104 + 10) / 114][Stage 171:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.971470995 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIn dex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361832715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:=================================>                   (72 + 41) / 113][Stage 172:======================================>              (82 + 31) / 113][Stage 172:==========================================>          (90 + 23) / 113][Stage 172:=================================================>   (105 + 8) / 113][Stage 172:===================================================> (109 + 4) / 113]                                                                                [Stage 173:===================================>                 (77 + 37) / 114][Stage 173:=========================================>           (89 + 25) / 114][Stage 173:===============================================>    (104 + 10) / 114][Stage 173:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.053779201 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZInd ex<=60", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=60,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390853141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===========================>                         (58 + 55) / 113][Stage 174:=============================>                       (63 + 50) / 113][Stage 174:===================================>                 (76 + 37) / 113][Stage 174:=============================================>       (96 + 17) / 113][Stage 174:==================================================>  (108 + 5) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:===========================>                         (60 + 54) / 114][Stage 175:===============================>                     (67 + 47) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:===================================================> (110 + 4) / 114][Stage 175:====================================================>(112 + 2) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.562344324 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZInd ex<=35", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=35,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380364577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==============================>                      (66 + 49) / 115][Stage 176:==================================>                  (75 + 40) / 115][Stage 176:=========================================>           (90 + 25) / 115][Stage 176:=============================================>       (99 + 16) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:===============================>                     (68 + 48) / 116][Stage 177:=====================================>               (81 + 35) / 116][Stage 177:==========================================>          (93 + 23) / 116][Stage 177:=============================================>      (102 + 14) / 116][Stage 177:=================================================>   (108 + 8) / 116][Stage 177:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.077080355 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIn dex<=139", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=139,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368446971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:===================================>                 (75 + 38) / 113][Stage 178:=======================================>             (84 + 29) / 113][Stage 178:============================================>        (94 + 19) / 113][Stage 178:=================================================>   (105 + 8) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:======================================>              (82 + 32) / 114][Stage 179:=======================================>             (86 + 28) / 114][Stage 179:============================================>        (96 + 18) / 114][Stage 179:==================================================>  (108 + 6) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.136978837 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZInd ex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387984055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:================================>                    (72 + 46) / 118][Stage 180:===================================>                 (80 + 38) / 118][Stage 180:============================================>        (99 + 19) / 118][Stage 180:=================================================>   (111 + 7) / 118][Stage 180:====================================================>(116 + 2) / 118]                                                                                [Stage 181:================================>                    (73 + 46) / 119][Stage 181:==================================>                  (77 + 42) / 119][Stage 181:======================================>              (87 + 32) / 119][Stage 181:===========================================>         (98 + 21) / 119][Stage 181:=================================================>   (111 + 8) / 119][Stage 181:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.074595955 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIn dex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413339873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:================================>                    (72 + 46) / 118][Stage 182:===================================>                 (78 + 40) / 118][Stage 182:==========================================>          (94 + 24) / 118][Stage 182:=================================================>   (110 + 8) / 118][Stage 182:====================================================>(116 + 2) / 118]                                                                                [Stage 183:================================>                    (73 + 46) / 119][Stage 183:=================================>                   (76 + 43) / 119][Stage 183:=====================================>               (84 + 35) / 119][Stage 183:==============================================>     (106 + 13) / 119][Stage 183:=================================================>   (111 + 8) / 119][Stage 183:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.387181823 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZInd ex<=74", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=74,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350653052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:=====================================>               (81 + 34) / 115][Stage 184:=========================================>           (91 + 24) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:=======================================>             (87 + 29) / 116][Stage 185:============================================>       (100 + 16) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.641606804 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZInde x<=9", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=9,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355777303 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==================================>                  (73 + 40) / 113][Stage 186:=======================================>             (84 + 29) / 113][Stage 186:============================================>        (94 + 19) / 113][Stage 186:=================================================>   (105 + 8) / 113][Stage 186:===================================================> (109 + 4) / 113][Stage 186:====================================================>(111 + 2) / 113]                                                                                [Stage 187:======================================>              (83 + 31) / 114][Stage 187:===========================================>         (93 + 21) / 114][Stage 187:=============================================>       (98 + 16) / 114][Stage 187:==============================================>     (101 + 13) / 114][Stage 187:==============================================>     (103 + 11) / 114][Stage 187:===================================================> (111 + 3) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 7.871586579 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZInd ex<=92", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=92,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412039551 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:===========================>                         (63 + 58) / 121][Stage 188:===============================>                     (73 + 48) / 121][Stage 188:==========================================>          (98 + 23) / 121][Stage 188:=================================================>   (113 + 8) / 121]                                                                                [Stage 189:==========================>                          (61 + 61) / 122][Stage 189:=============================>                       (69 + 53) / 122][Stage 189:====================================>                (84 + 38) / 122][Stage 189:=============================================>      (106 + 16) / 122][Stage 189:===================================================> (119 + 3) / 122][Stage 189:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.920217317 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIn dex<=178", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=171 AND partitionZIndex<=178,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342101813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:====================================>                (80 + 35) / 115][Stage 190:=======================================>             (85 + 30) / 115][Stage 190:=============================================>       (99 + 16) / 115][Stage 190:==================================================>  (109 + 6) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:=====================================>               (82 + 34) / 116][Stage 191:=======================================>             (87 + 29) / 116][Stage 191:============================================>       (100 + 16) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.795424578 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIn dex<=176", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359469553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:==================================>                  (76 + 42) / 118][Stage 192:=====================================>               (84 + 34) / 118][Stage 192:========================================>            (91 + 27) / 118][Stage 192:=============================================>      (104 + 14) / 118][Stage 192:====================================================>(116 + 2) / 118]                                                                                [Stage 193:================================>                    (74 + 45) / 119][Stage 193:===================================>                 (80 + 39) / 119][Stage 193:=========================================>           (94 + 25) / 119][Stage 193:============================================>       (102 + 17) / 119][Stage 193:===================================================> (115 + 4) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.8748346 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIn dex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388610978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:================================>                    (73 + 45) / 118][Stage 194:=====================================>               (84 + 34) / 118][Stage 194:=============================================>      (104 + 14) / 118][Stage 194:==================================================>  (113 + 5) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:==================================>                  (78 + 41) / 119][Stage 195:=========================================>           (94 + 25) / 119][Stage 195:===============================================>    (109 + 10) / 119][Stage 195:===================================================> (115 + 4) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.801379016 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZInd ex<=101", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352389737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:====================================>                (80 + 35) / 115][Stage 196:========================================>            (87 + 28) / 115][Stage 196:===========================================>         (95 + 20) / 115][Stage 196:=================================================>   (108 + 7) / 115][Stage 196:====================================================>(113 + 2) / 115]                                                                                [Stage 197:=====================================>               (83 + 33) / 116][Stage 197:=========================================>           (91 + 25) / 116][Stage 197:============================================>        (98 + 18) / 116][Stage 197:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.832042366 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIn dex<=147", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=147,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399127043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:================================>                    (71 + 44) / 115][Stage 198:========================================>            (88 + 27) / 115][Stage 198:==============================================>     (103 + 12) / 115][Stage 198:==================================================>  (110 + 5) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:===============================>                     (68 + 48) / 116][Stage 199:=====================================>               (81 + 35) / 116][Stage 199:==========================================>          (94 + 22) / 116][Stage 199:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.880505257 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIn dex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403873573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:==========================>                          (60 + 61) / 121][Stage 200:==============================>                      (70 + 51) / 121][Stage 200:=====================================>               (86 + 35) / 121][Stage 200:=============================================>      (107 + 14) / 121][Stage 200:====================================================>(120 + 1) / 121]                                                                                [Stage 201:==========================>                          (61 + 61) / 122][Stage 201:=============================>                       (67 + 55) / 122][Stage 201:=====================================>               (86 + 36) / 122][Stage 201:===========================================>        (102 + 20) / 122][Stage 201:=================================================>   (115 + 7) / 122][Stage 201:====================================================>(120 + 2) / 122][Stage 201:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.975273116 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 03:54:15 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:36122) dropped. RpcEnv already stopped.
17/05/25 03:54:15 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:36122) dropped. RpcEnv already stopped.

real	11m46.346s
user	12m17.764s
sys	1m33.136s
