Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 04:35:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:35:52 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:35:52 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:35:53 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 04:35:55 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:36:05 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525043554-0637).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.34756515 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:===============>                                       (33 + 82) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:=======================================>               (82 + 33) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:===================================================>   (108 + 7) / 115]                                                                                [Stage 1:=============================>                         (62 + 54) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.534133147 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionI ndex = 189 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.901989417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:===============>                                       (35 + 86) / 121][Stage 2:====================>                                  (44 + 77) / 121][Stage 2:=========================>                             (56 + 65) / 121][Stage 2:===========================>                           (61 + 60) / 121][Stage 2:============================>                          (63 + 58) / 121][Stage 2:=================================>                     (74 + 47) / 121][Stage 2:=====================================>                 (82 + 39) / 121][Stage 2:=========================================>             (92 + 29) / 121][Stage 2:====================================================>  (116 + 5) / 121]                                                                                [Stage 3:===========================>                           (61 + 61) / 122][Stage 3:============================>                          (63 + 59) / 122][Stage 3:==============================>                        (68 + 54) / 122][Stage 3:=================================>                     (75 + 47) / 122][Stage 3:========================================>              (90 + 32) / 122][Stage 3:============================================>         (100 + 22) / 122][Stage 3:==================================================>    (113 + 9) / 122][Stage 3:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.041196688 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionI ndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.724986233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:===========================>                           (60 + 61) / 121][Stage 4:===========================>                           (61 + 60) / 121][Stage 4:=============================>                         (64 + 57) / 121][Stage 4:==================================>                    (75 + 46) / 121][Stage 4:=======================================>               (86 + 35) / 121][Stage 4:=============================================>        (103 + 18) / 121][Stage 4:=====================================================> (117 + 4) / 121]                                                                                [Stage 5:===========================>                           (61 + 61) / 122][Stage 5:=============================>                         (66 + 56) / 122][Stage 5:==================================>                    (77 + 45) / 122][Stage 5:========================================>              (89 + 33) / 122][Stage 5:============================================>         (100 + 22) / 122][Stage 5:=====================================================> (118 + 4) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.457478499 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.608887979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=================================>                     (71 + 47) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:====================================>                  (79 + 39) / 118][Stage 6:=========================================>             (90 + 28) / 118][Stage 6:===============================================>      (104 + 14) / 118][Stage 6:=====================================================> (114 + 4) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:===================================>                   (76 + 43) / 119][Stage 7:=======================================>               (86 + 33) / 119][Stage 7:============================================>          (96 + 23) / 119][Stage 7:=====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.66258044 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.544034708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:==================================>                    (71 + 42) / 113][Stage 8:=========================================>             (85 + 28) / 113][Stage 8:=============================================>         (93 + 20) / 113][Stage 8:=================================================>    (103 + 10) / 113][Stage 8:===================================================>   (105 + 8) / 113][Stage 8:=====================================================> (109 + 4) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:==================================>                    (71 + 43) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:=========================================>             (87 + 27) / 114][Stage 9:============================================>          (93 + 21) / 114][Stage 9:===============================================>      (101 + 13) / 114][Stage 9:====================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.861705387 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIn dex = 34 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.621244048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:==========================>                           (59 + 62) / 121][Stage 10:==========================>                           (60 + 61) / 121][Stage 10:==============================>                       (68 + 53) / 121][Stage 10:=====================================>                (83 + 38) / 121][Stage 10:============================================>         (99 + 22) / 121][Stage 10:=============================================>       (104 + 17) / 121][Stage 10:===================================================>  (116 + 5) / 121][Stage 10:=====================================================>(120 + 1) / 121]                                                                                [Stage 11:==========================>                           (59 + 63) / 122][Stage 11:============================>                         (64 + 58) / 122][Stage 11:===============================>                      (72 + 50) / 122][Stage 11:=====================================>                (84 + 38) / 122][Stage 11:===========================================>         (101 + 21) / 122][Stage 11:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 4.02798592 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionI ndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.589731054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:=============================>                        (66 + 55) / 121][Stage 12:=================================>                    (75 + 46) / 121][Stage 12:=========================================>            (94 + 27) / 121][Stage 12:===============================================>     (109 + 12) / 121][Stage 12:==================================================>   (114 + 7) / 121][Stage 12:====================================================> (118 + 3) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:===========================>                          (63 + 59) / 122][Stage 13:==============================>                       (69 + 53) / 122][Stage 13:========================================>             (92 + 30) / 122][Stage 13:==============================================>      (108 + 14) / 122][Stage 13:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.840403777 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionI ndex = 145 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.669941595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:============================>                         (59 + 54) / 113][Stage 14:===============================>                      (66 + 47) / 113][Stage 14:===================================>                  (75 + 38) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:===============================>                      (66 + 48) / 114][Stage 15:=====================================>                (79 + 35) / 114][Stage 15:==========================================>           (90 + 24) / 114][Stage 15:===============================================>     (103 + 11) / 114][Stage 15:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.730831671 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506391335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:==============================>                       (66 + 49) / 115][Stage 16:====================================>                 (78 + 37) / 115][Stage 16:========================================>             (87 + 28) / 115][Stage 16:=============================================>        (96 + 19) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:==================================================>   (108 + 7) / 115][Stage 16:===================================================>  (110 + 5) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:===============================>                      (68 + 48) / 116][Stage 17:===================================>                  (77 + 39) / 116][Stage 17:========================================>             (87 + 29) / 116][Stage 17:==============================================>       (99 + 17) / 116][Stage 17:==================================================>   (109 + 7) / 116][Stage 17:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.021768207 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionI ndex = 183 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542453994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:===============================>                      (66 + 47) / 113][Stage 18:======================================>               (80 + 33) / 113][Stage 18:============================================>         (94 + 19) / 113][Stage 18:==============================================>       (97 + 16) / 113][Stage 18:================================================>    (103 + 10) / 113][Stage 18:===================================================>  (107 + 6) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:=============================>                        (63 + 51) / 114][Stage 19:====================================>                 (78 + 36) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.237016006 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionI ndex = 180 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535236632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:============================>                         (63 + 57) / 120][Stage 20:================================>                     (72 + 48) / 120][Stage 20:============================================>        (100 + 20) / 120][Stage 20:===================================================>  (114 + 6) / 120][Stage 20:===================================================>  (115 + 5) / 120]                                                                                [Stage 21:===========================>                          (62 + 59) / 121][Stage 21:================================>                     (72 + 49) / 121][Stage 21:======================================>               (86 + 35) / 121][Stage 21:=================================================>    (112 + 9) / 121][Stage 21:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.686274076 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionI ndex = 230 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471058661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:=================================>                    (73 + 45) / 118][Stage 22:====================================>                 (79 + 39) / 118][Stage 22:============================================>         (98 + 20) / 118][Stage 22:===================================================>  (113 + 5) / 118]                                                                                [Stage 23:=================================>                    (74 + 45) / 119][Stage 23:======================================>               (84 + 35) / 119][Stage 23:============================================>        (101 + 18) / 119][Stage 23:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.154839052 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452708491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:=================================>                    (74 + 44) / 118][Stage 24:=======================================>              (86 + 32) / 118][Stage 24:=============================================>        (99 + 19) / 118][Stage 24:=================================================>    (109 + 9) / 118][Stage 24:====================================================> (114 + 4) / 118][Stage 24:====================================================> (115 + 3) / 118]                                                                                [Stage 25:==================================>                   (75 + 44) / 119][Stage 25:==================================>                   (76 + 43) / 119][Stage 25:======================================>               (85 + 34) / 119][Stage 25:=============================================>       (103 + 16) / 119][Stage 25:====================================================> (115 + 4) / 119][Stage 25:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.102506285 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 118 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426125959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:======================================>               (82 + 33) / 115][Stage 26:============================================>         (95 + 20) / 115][Stage 26:===============================================>     (104 + 11) / 115][Stage 26:==================================================>   (108 + 7) / 115]                                                                                [Stage 27:=======================================>              (85 + 31) / 116][Stage 27:=============================================>        (97 + 19) / 116][Stage 27:===================================================>  (110 + 6) / 116][Stage 27:====================================================> (113 + 3) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.084189409 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionI ndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446542931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:================================>                     (72 + 46) / 118][Stage 28:===================================>                  (78 + 40) / 118][Stage 28:=========================================>            (90 + 28) / 118][Stage 28:==================================================>   (111 + 7) / 118][Stage 28:====================================================> (115 + 3) / 118]                                                                                [Stage 29:=================================>                    (74 + 45) / 119][Stage 29:=======================================>              (86 + 33) / 119][Stage 29:============================================>         (98 + 21) / 119][Stage 29:================================================>    (109 + 10) / 119][Stage 29:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.459686049 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449414593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:=================================>                    (73 + 45) / 118][Stage 30:=====================================>                (81 + 37) / 118][Stage 30:============================================>         (98 + 20) / 118][Stage 30:====================================================> (114 + 4) / 118]                                                                                [Stage 31:=================================>                    (74 + 45) / 119][Stage 31:==================================>                   (76 + 43) / 119][Stage 31:=======================================>              (87 + 32) / 119][Stage 31:==============================================>      (105 + 14) / 119][Stage 31:===================================================>  (114 + 5) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.429447821 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499495599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:===========================>                          (61 + 60) / 121][Stage 32:=================================>                    (74 + 47) / 121][Stage 32:========================================>             (91 + 30) / 121][Stage 32:=============================================>       (103 + 18) / 121][Stage 32:==================================================>   (114 + 7) / 121][Stage 32:=====================================================>(120 + 1) / 121]                                                                                [Stage 33:===========================>                          (61 + 61) / 122][Stage 33:=============================>                        (67 + 55) / 122][Stage 33:====================================>                 (83 + 39) / 122][Stage 33:==============================================>      (108 + 14) / 122][Stage 33:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.644413881 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionI ndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47902369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:=============================>                        (62 + 51) / 113][Stage 34:=================================>                    (70 + 43) / 113][Stage 34:=========================================>            (86 + 27) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:============================>                         (60 + 54) / 114][Stage 35:================================>                     (69 + 45) / 114][Stage 35:==========================================>           (89 + 25) / 114][Stage 35:===============================================>     (103 + 11) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.15276501 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionI ndex = 170 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511135308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:=============================>                        (67 + 54) / 121][Stage 36:=====================================>                (84 + 37) / 121][Stage 36:=============================================>       (105 + 16) / 121][Stage 36:===================================================>  (116 + 5) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:=================================>                    (76 + 46) / 122][Stage 37:==========================================>           (97 + 25) / 122][Stage 37:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.262446254 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426942084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=======================================>              (84 + 31) / 115][Stage 38:=========================================>            (89 + 26) / 115][Stage 38:=================================================>    (106 + 9) / 115][Stage 38:====================================================> (111 + 4) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:========================================>             (87 + 29) / 116][Stage 39:===============================================>     (103 + 13) / 116][Stage 39:===================================================>  (111 + 5) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.998587381 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionI ndex = 173 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489941679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:================================>                     (72 + 48) / 120][Stage 40:==========================================>           (94 + 26) / 120][Stage 40:===================================================>  (115 + 5) / 120]                                                                                [Stage 41:===========================>                          (62 + 59) / 121][Stage 41:=================================>                    (74 + 47) / 121][Stage 41:============================================>         (99 + 22) / 121][Stage 41:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.086124994 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionI ndex = 158 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504108827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:================================>                     (70 + 45) / 115][Stage 42:======================================>               (82 + 33) / 115][Stage 42:=============================================>        (97 + 18) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:=================================>                    (71 + 45) / 116][Stage 43:========================================>             (86 + 30) / 116][Stage 43:===============================================>     (105 + 11) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.882276291 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 102 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415737102 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:==================================>                   (73 + 40) / 113][Stage 44:=======================================>              (82 + 31) / 113][Stage 44:============================================>         (93 + 20) / 113][Stage 44:================================================>    (103 + 10) / 113][Stage 44:====================================================> (109 + 4) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:========================================>             (86 + 28) / 114][Stage 45:============================================>         (93 + 21) / 114][Stage 45:===============================================>     (102 + 12) / 114][Stage 45:====================================================> (110 + 4) / 114][Stage 45:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.448033798 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionI ndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455455063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:============================>                         (63 + 57) / 120][Stage 46:===================================>                  (78 + 42) / 120][Stage 46:============================================>        (101 + 19) / 120][Stage 46:===================================================>  (115 + 5) / 120][Stage 46:=====================================================>(118 + 2) / 120][Stage 46:=====================================================>(119 + 1) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:=============================>                        (67 + 54) / 121][Stage 47:=======================================>              (88 + 33) / 121][Stage 47:===============================================>     (108 + 13) / 121]                                                                                Time elapsed: 3.51383254 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionI ndex = 217 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514659056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:===========================>                          (61 + 59) / 120][Stage 48:=================================>                    (75 + 45) / 120][Stage 48:=============================================>       (103 + 17) / 120][Stage 48:===================================================>  (114 + 6) / 120]                                                                                [Stage 49:============================>                         (64 + 57) / 121][Stage 49:=================================>                    (76 + 45) / 121][Stage 49:=========================================>            (92 + 29) / 121][Stage 49:=================================================>    (112 + 9) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.267740175 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionI ndex = 175 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489731983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:=============================>                        (65 + 55) / 120][Stage 50:====================================>                 (82 + 38) / 120][Stage 50:==============================================>      (105 + 15) / 120]                                                                                [Stage 51:===========================>                          (62 + 59) / 121][Stage 51:==================================>                   (77 + 44) / 121][Stage 51:==========================================>           (95 + 26) / 121][Stage 51:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.91236575 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionI ndex = 209 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40852642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:================================>                     (72 + 46) / 118][Stage 52:===================================>                  (78 + 40) / 118][Stage 52:=========================================>            (91 + 27) / 118][Stage 52:=================================================>    (109 + 9) / 118]                                                                                [Stage 53:=================================>                    (74 + 45) / 119][Stage 53:=====================================>                (82 + 37) / 119][Stage 53:============================================>         (98 + 21) / 119][Stage 53:===================================================>  (113 + 6) / 119][Stage 53:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.133425534 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392828592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:======================================>               (80 + 33) / 113][Stage 54:==========================================>           (88 + 25) / 113][Stage 54:==============================================>      (100 + 13) / 113][Stage 54:===================================================>  (107 + 6) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:====================================>                 (78 + 36) / 114][Stage 55:===========================================>          (91 + 23) / 114][Stage 55:===============================================>     (103 + 11) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.421439377 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionI ndex = 207 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.576496573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:==========================>                           (60 + 61) / 121][Stage 56:=============================>                        (66 + 55) / 121][Stage 56:=======================================>              (88 + 33) / 121][Stage 56:==================================================>   (114 + 7) / 121][Stage 56:=====================================================>(120 + 1) / 121]                                                                                [Stage 57:===========================>                          (62 + 60) / 122][Stage 57:=================================>                    (76 + 46) / 122][Stage 57:========================================>             (91 + 31) / 122][Stage 57:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.298906337 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionI ndex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417298008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:==============================>                       (64 + 51) / 115][Stage 58:====================================>                 (77 + 38) / 115][Stage 58:===========================================>          (93 + 22) / 115][Stage 58:================================================>    (105 + 10) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:====================================>                 (78 + 38) / 116][Stage 59:=============================================>        (98 + 18) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.085543187 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43872442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:===============================>                      (68 + 47) / 115][Stage 60:====================================>                 (78 + 37) / 115][Stage 60:============================================>         (95 + 20) / 115][Stage 60:===================================================>  (110 + 5) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:=======================================>              (85 + 31) / 116][Stage 61:==============================================>      (102 + 14) / 116][Stage 61:====================================================> (112 + 4) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.503064582 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIn dex = 22 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428076175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:=================================>                    (73 + 45) / 118][Stage 62:=================================>                    (74 + 44) / 118][Stage 62:===================================>                  (78 + 40) / 118][Stage 62:=========================================>            (90 + 28) / 118][Stage 62:===============================================>     (106 + 12) / 118]                                                                                [Stage 63:=================================>                    (73 + 46) / 119][Stage 63:==================================>                   (75 + 44) / 119][Stage 63:=====================================>                (83 + 36) / 119][Stage 63:==========================================>           (94 + 25) / 119][Stage 63:==============================================>      (105 + 14) / 119][Stage 63:====================================================> (115 + 4) / 119][Stage 63:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.801893913 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionI ndex = 117 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369491464 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:=====================================>                (80 + 35) / 115][Stage 64:=========================================>            (88 + 27) / 115][Stage 64:==============================================>       (98 + 17) / 115][Stage 64:==================================================>   (108 + 7) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:========================================>             (86 + 30) / 116][Stage 65:============================================>         (96 + 20) / 116][Stage 65:==================================================>   (108 + 8) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.009691783 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459982054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:==========================>                           (60 + 61) / 121][Stage 66:===========================>                          (62 + 59) / 121][Stage 66:==================================>                   (77 + 44) / 121][Stage 66:============================================>        (102 + 19) / 121][Stage 66:====================================================> (118 + 3) / 121][Stage 66:=====================================================>(120 + 1) / 121]                                                                                [Stage 67:===========================>                          (61 + 61) / 122][Stage 67:==============================>                       (68 + 54) / 122][Stage 67:=====================================>                (84 + 38) / 122][Stage 67:==============================================>      (108 + 14) / 122][Stage 67:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.246779 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionI ndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376328349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:======================================>               (82 + 33) / 115][Stage 68:========================================>             (86 + 29) / 115][Stage 68:==============================================>       (99 + 16) / 115][Stage 68:===================================================>  (109 + 6) / 115]                                                                                [Stage 69:======================================>               (83 + 33) / 116][Stage 69:===========================================>          (93 + 23) / 116][Stage 69:===============================================>     (105 + 11) / 116][Stage 69:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.686132233 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionInd ex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471738863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:==========================>                           (60 + 61) / 121][Stage 70:=============================>                        (67 + 54) / 121][Stage 70:======================================>               (86 + 35) / 121][Stage 70:=============================================>       (103 + 18) / 121][Stage 70:====================================================> (118 + 3) / 121]                                                                                [Stage 71:===========================>                          (61 + 61) / 122][Stage 71:============================>                         (64 + 58) / 122][Stage 71:==================================>                   (79 + 43) / 122][Stage 71:===========================================>          (98 + 24) / 122][Stage 71:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.302536102 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIn dex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422522196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:==============================>                       (64 + 51) / 115][Stage 72:======================================>               (81 + 34) / 115][Stage 72:==============================================>       (98 + 17) / 115][Stage 72:==================================================>   (108 + 7) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:=================================>                    (71 + 45) / 116][Stage 73:=======================================>              (85 + 31) / 116][Stage 73:==================================================>   (109 + 7) / 116][Stage 73:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.979206107 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIn dex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437468545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:===============================>                      (69 + 51) / 120][Stage 74:=====================================>                (84 + 36) / 120][Stage 74:===============================================>     (108 + 12) / 120][Stage 74:=====================================================>(119 + 1) / 120]                                                                                [Stage 75:===========================>                          (61 + 60) / 121][Stage 75:=============================>                        (67 + 54) / 121][Stage 75:========================================>             (91 + 30) / 121][Stage 75:=================================================>    (112 + 9) / 121][Stage 75:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.076750108 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428477141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:==============================>                       (66 + 49) / 115][Stage 76:===================================>                  (75 + 40) / 115][Stage 76:=======================================>              (85 + 30) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:=====================================================>(113 + 2) / 115]                                                                                [Stage 77:===============================>                      (68 + 48) / 116][Stage 77:========================================>             (88 + 28) / 116][Stage 77:=============================================>       (100 + 16) / 116][Stage 77:===============================================>     (105 + 11) / 116]                                                                                Time elapsed: 3.17714523 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIn dex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450138774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:============================>                         (64 + 56) / 120][Stage 78:==================================>                   (77 + 43) / 120][Stage 78:==============================================>      (106 + 14) / 120][Stage 78:=====================================================>(118 + 2) / 120]                                                                                [Stage 79:===========================>                          (62 + 59) / 121][Stage 79:==================================>                   (77 + 44) / 121][Stage 79:============================================>        (102 + 19) / 121][Stage 79:===================================================>  (115 + 6) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.360379479 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIn dex = 111 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416145715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:=============================>                        (65 + 55) / 120][Stage 80:=================================>                    (74 + 46) / 120][Stage 80:=========================================>            (92 + 28) / 120][Stage 80:==============================================>      (106 + 14) / 120][Stage 80:=====================================================>(118 + 2) / 120]                                                                                [Stage 81:===========================>                          (61 + 60) / 121][Stage 81:=============================>                        (67 + 54) / 121][Stage 81:======================================>               (87 + 34) / 121][Stage 81:=============================================>       (103 + 18) / 121][Stage 81:==================================================>   (113 + 8) / 121][Stage 81:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.464412884 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionI ndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.548289191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:==========================>                           (60 + 61) / 121][Stage 82:============================>                         (63 + 58) / 121][Stage 82:====================================>                 (82 + 39) / 121][Stage 82:============================================>        (102 + 19) / 121][Stage 82:====================================================> (118 + 3) / 121]                                                                                [Stage 83:===========================>                          (61 + 61) / 122][Stage 83:==============================>                       (69 + 53) / 122][Stage 83:========================================>             (92 + 30) / 122][Stage 83:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.210237327 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424559761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:===============================>                      (69 + 51) / 120][Stage 84:========================================>             (90 + 30) / 120][Stage 84:====================================================> (116 + 4) / 120]                                                                                [Stage 85:=============================>                        (65 + 56) / 121][Stage 85:=================================>                    (75 + 46) / 121][Stage 85:===========================================>         (100 + 21) / 121][Stage 85:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.990430267 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIn dex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399250928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:==================================>                   (73 + 42) / 115][Stage 86:============================================>         (94 + 21) / 115][Stage 86:================================================>    (105 + 10) / 115][Stage 86:====================================================> (112 + 3) / 115]                                                                                [Stage 87:==============================>                       (66 + 50) / 116][Stage 87:====================================>                 (79 + 37) / 116][Stage 87:==============================================>      (101 + 15) / 116][Stage 87:===================================================>  (110 + 6) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.436011947 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433553789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:===========================>                          (62 + 58) / 120][Stage 88:==================================>                   (77 + 43) / 120][Stage 88:==========================================>           (95 + 25) / 120][Stage 88:=================================================>    (111 + 9) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==================================>                   (78 + 43) / 121][Stage 89:=========================================>            (92 + 29) / 121][Stage 89:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.139443043 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378093497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:==================================>                   (76 + 42) / 118][Stage 90:=======================================>              (86 + 32) / 118][Stage 90:=============================================>        (99 + 19) / 118][Stage 90:===================================================>  (113 + 5) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:=======================================>              (86 + 33) / 119][Stage 91:==========================================>           (94 + 25) / 119][Stage 91:================================================>    (109 + 10) / 119][Stage 91:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.390315134 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionI ndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396669969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:============================>                         (59 + 54) / 113][Stage 92:=================================>                    (71 + 42) / 113][Stage 92:===========================================>          (92 + 21) / 113][Stage 92:===================================================>  (108 + 5) / 113]                                                                                [Stage 93:============================>                         (60 + 54) / 114][Stage 93:=================================>                    (71 + 43) / 114][Stage 93:========================================>             (85 + 29) / 114][Stage 93:==============================================>       (99 + 15) / 114][Stage 93:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.169042052 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIn dex = 95 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375772737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:================================>                     (72 + 46) / 118][Stage 94:==================================>                   (75 + 43) / 118][Stage 94:========================================>             (88 + 30) / 118][Stage 94:==============================================>      (103 + 15) / 118][Stage 94:=====================================================>(116 + 2) / 118]                                                                                [Stage 95:=================================>                    (73 + 46) / 119][Stage 95:===================================>                  (79 + 40) / 119][Stage 95:=======================================>              (86 + 33) / 119][Stage 95:================================================>    (109 + 10) / 119][Stage 95:=====================================================>(117 + 2) / 119][Stage 95:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.159957492 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionI ndex = 221 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420757704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:==============================>                       (68 + 53) / 121][Stage 96:=======================================>              (88 + 33) / 121][Stage 96:==================================================>   (113 + 8) / 121]                                                                                [Stage 97:===========================>                          (62 + 60) / 122][Stage 97:===============================>                      (72 + 50) / 122][Stage 97:==========================================>           (95 + 27) / 122][Stage 97:====================================================> (118 + 4) / 122][Stage 97:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.145624529 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionI ndex = 166 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352611686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:=======================================>              (84 + 31) / 115][Stage 98:============================================>         (95 + 20) / 115][Stage 98:===============================================>     (104 + 11) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:======================================>               (83 + 33) / 116][Stage 99:==========================================>           (91 + 25) / 116][Stage 99:==============================================>      (102 + 14) / 116][Stage 99:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.96503115 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388932267 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:===============================>                     (68 + 47) / 115][Stage 100:=======================================>             (86 + 29) / 115][Stage 100:===============================================>    (104 + 11) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:==============================>                      (67 + 49) / 116][Stage 101:====================================>                (80 + 36) / 116][Stage 101:==========================================>          (94 + 22) / 116][Stage 101:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.632888381 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 166 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467502494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:>                                                      (0 + 0) / 113][Stage 102:===================================>                 (75 + 38) / 113][Stage 102:========================================>            (87 + 26) / 113][Stage 102:=============================================>       (96 + 17) / 113][Stage 102:===================================================> (109 + 4) / 113]                                                                                [Stage 103:=====================================>               (81 + 33) / 114][Stage 103:============================================>        (96 + 18) / 114][Stage 103:=================================================>   (107 + 7) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.757139877 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionI ndex = 214 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394964732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==============================>                      (66 + 49) / 115][Stage 104:==================================>                  (74 + 41) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:=================================================>   (108 + 7) / 115][Stage 104:===================================================> (112 + 3) / 115]                                                                                [Stage 105:===================================>                 (77 + 39) / 116][Stage 105:==============================================>     (103 + 13) / 116][Stage 105:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.802465589 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionI ndex = 234 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389064329 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:============================>                        (61 + 52) / 113][Stage 106:================================>                    (69 + 44) / 113][Stage 106:==========================================>          (90 + 23) / 113][Stage 106:=================================================>   (105 + 8) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:=================================>                   (72 + 42) / 114][Stage 107:==========================================>          (92 + 22) / 114][Stage 107:=================================================>   (107 + 7) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.147845477 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIn dex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350555107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (82 + 33) / 115][Stage 108:===========================================>         (94 + 21) / 115][Stage 108:===============================================>    (105 + 10) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:=========================================>           (90 + 26) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:====================================================>(114 + 2) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.928245373 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIn dex = 87 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399823197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:==============================>                      (68 + 52) / 120][Stage 110:======================================>              (88 + 32) / 120][Stage 110:==============================================>     (108 + 12) / 120]                                                                                [Stage 111:===========================>                         (63 + 58) / 121][Stage 111:===============================>                     (73 + 48) / 121][Stage 111:=========================================>           (95 + 26) / 121][Stage 111:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.046951648 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIn dex = 105 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450509947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:>                                                      (0 + 0) / 113][Stage 112:===================================>                 (76 + 37) / 113][Stage 112:========================================>            (87 + 26) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:==================================================>  (108 + 5) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:=================================>                   (73 + 41) / 114][Stage 113:=======================================>             (85 + 29) / 114][Stage 113:===========================================>         (93 + 21) / 114][Stage 113:===============================================>    (104 + 10) / 114][Stage 113:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.106725409 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 226 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36913956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:====================================>                (77 + 36) / 113][Stage 114:=======================================>             (84 + 29) / 113][Stage 114:=============================================>       (96 + 17) / 113][Stage 114:====================================================>(111 + 2) / 113]                                                                                [Stage 115:=======================================>             (85 + 29) / 114][Stage 115:==========================================>          (91 + 23) / 114][Stage 115:=============================================>      (100 + 14) / 114]                                                                                Time elapsed: 2.687170163 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionI ndex = 103 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385086191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:============================>                        (61 + 52) / 113][Stage 116:==================================>                  (73 + 40) / 113][Stage 116:======================================>              (82 + 31) / 113][Stage 116:===============================================>    (103 + 10) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:==========================>                          (58 + 56) / 114][Stage 117:===============================>                     (67 + 47) / 114][Stage 117:======================================>              (83 + 31) / 114][Stage 117:==========================================>          (92 + 22) / 114][Stage 117:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.32517445 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionI ndex = 137 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355217593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:=====================================>               (81 + 32) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:==============================================>     (102 + 11) / 113][Stage 118:==================================================>  (107 + 6) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===================================>                 (77 + 37) / 114][Stage 119:======================================>              (83 + 31) / 114][Stage 119:===========================================>         (94 + 20) / 114][Stage 119:==============================================>     (101 + 13) / 114][Stage 119:===================================================> (110 + 4) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.346543289 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionI ndex = 200 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346188928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:=======================================>             (86 + 29) / 115][Stage 120:===========================================>         (95 + 20) / 115][Stage 120:==================================================>  (110 + 5) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:========================================>            (89 + 27) / 116][Stage 121:=============================================>      (102 + 14) / 116][Stage 121:==================================================>  (110 + 6) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.750517696 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionInd ex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445120688 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (73 + 45) / 118][Stage 122:====================================>                (82 + 36) / 118][Stage 122:============================================>        (99 + 19) / 118][Stage 122:=================================================>   (111 + 7) / 118]                                                                                [Stage 123:================================>                    (74 + 45) / 119][Stage 123:====================================>                (81 + 38) / 119][Stage 123:=========================================>           (93 + 26) / 119][Stage 123:================================================>    (110 + 9) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.190789066 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionI ndex = 112 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369027963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:===================================>                 (78 + 40) / 118][Stage 124:======================================>              (85 + 33) / 118][Stage 124:========================================>            (90 + 28) / 118][Stage 124:===============================================>    (107 + 11) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:==================================>                  (78 + 41) / 119][Stage 125:=======================================>             (88 + 31) / 119][Stage 125:============================================>       (101 + 18) / 119][Stage 125:===================================================> (116 + 3) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.453756511 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionI ndex = 201 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386412174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:=================================>                   (73 + 42) / 115][Stage 126:=========================================>           (89 + 26) / 115][Stage 126:=============================================>      (101 + 14) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:===============================>                     (70 + 46) / 116][Stage 127:=====================================>               (82 + 34) / 116][Stage 127:=============================================>      (102 + 14) / 116][Stage 127:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.78367773 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIn dex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371813846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:=====================================>               (79 + 34) / 113][Stage 128:=========================================>           (88 + 25) / 113][Stage 128:==============================================>      (99 + 14) / 113][Stage 128:=================================================>   (106 + 7) / 113]                                                                                [Stage 129:=====================================>               (80 + 34) / 114][Stage 129:==========================================>          (91 + 23) / 114][Stage 129:==============================================>      (99 + 15) / 114][Stage 129:=================================================>   (106 + 8) / 114][Stage 129:===================================================> (110 + 4) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.600162412 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386742456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:===========================>                         (59 + 54) / 113][Stage 130:=============================>                       (63 + 50) / 113][Stage 130:===================================>                 (76 + 37) / 113][Stage 130:=============================================>       (98 + 15) / 113]                                                                                [Stage 131:============================>                        (61 + 53) / 114][Stage 131:================================>                    (70 + 44) / 114][Stage 131:=====================================>               (80 + 34) / 114][Stage 131:==============================================>      (99 + 15) / 114][Stage 131:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.081283682 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399421705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:==========================>                          (60 + 61) / 121][Stage 132:===========================>                         (62 + 59) / 121][Stage 132:===================================>                 (82 + 39) / 121][Stage 132:===============================================>    (110 + 11) / 121][Stage 132:====================================================>(120 + 1) / 121]                                                                                [Stage 133:==========================>                          (61 + 61) / 122][Stage 133:=============================>                       (69 + 53) / 122][Stage 133:===================================>                 (82 + 40) / 122][Stage 133:===========================================>        (103 + 19) / 122][Stage 133:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.211976847 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionI ndex = 197 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352130276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:=================================>                   (72 + 41) / 113][Stage 134:======================================>              (83 + 30) / 113][Stage 134:============================================>        (94 + 19) / 113][Stage 134:==============================================>     (102 + 11) / 113][Stage 134:===================================================> (110 + 3) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:====================================>                (79 + 35) / 114][Stage 135:=========================================>           (89 + 25) / 114][Stage 135:=============================================>       (98 + 16) / 114][Stage 135:==================================================>  (108 + 6) / 114][Stage 135:===================================================> (111 + 3) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.542803156 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionI ndex = 172 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37438781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:==============================>                      (67 + 48) / 115][Stage 136:===================================>                 (78 + 37) / 115][Stage 136:===========================================>         (95 + 20) / 115][Stage 136:==================================================>  (110 + 5) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:===============================>                     (70 + 46) / 116][Stage 137:=====================================>               (81 + 35) / 116][Stage 137:=============================================>       (99 + 17) / 116][Stage 137:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.790667379 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionI ndex = 231 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462306546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:===========================>                         (59 + 54) / 113][Stage 138:================================>                    (70 + 43) / 113][Stage 138:=========================================>           (89 + 24) / 113][Stage 138:===================================================> (109 + 4) / 113]                                                                                [Stage 139:============================>                        (61 + 53) / 114][Stage 139:==================================>                  (75 + 39) / 114][Stage 139:==============================================>     (103 + 11) / 114][Stage 139:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.01188276 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionI ndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34005699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:>                                                      (0 + 0) / 115][Stage 140:======================================>              (83 + 32) / 115][Stage 140:============================================>        (96 + 19) / 115][Stage 140:===================================================> (111 + 4) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:=========================================>           (90 + 26) / 116][Stage 141:================================================>    (107 + 9) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.625031426 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362123784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:====================================>                (82 + 36) / 118][Stage 142:=========================================>           (92 + 26) / 118][Stage 142:==============================================>     (106 + 12) / 118][Stage 142:====================================================>(116 + 2) / 118]                                                                                [Stage 143:================================>                    (73 + 46) / 119][Stage 143:===================================>                 (79 + 40) / 119][Stage 143:========================================>            (91 + 28) / 119][Stage 143:=============================================>      (104 + 15) / 119][Stage 143:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.432671891 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionI ndex = 154 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357508542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:=====================================>               (79 + 34) / 113][Stage 144:==========================================>          (91 + 22) / 113][Stage 144:==============================================>      (99 + 14) / 113][Stage 144:===================================================> (109 + 4) / 113][Stage 144:====================================================>(112 + 1) / 113]                                                                                [Stage 145:===================================>                 (76 + 38) / 114][Stage 145:==========================================>          (92 + 22) / 114][Stage 145:==============================================>     (101 + 13) / 114][Stage 145:===================================================> (111 + 3) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.025975304 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionI ndex = 180 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340145872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:=====================================>               (82 + 33) / 115][Stage 146:=========================================>           (90 + 25) / 115][Stage 146:=================================================>   (107 + 8) / 115][Stage 146:===================================================> (112 + 3) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=======================================>             (86 + 30) / 116][Stage 147:==========================================>          (93 + 23) / 116][Stage 147:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.730059744 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionI ndex = 233 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371732293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:==============================>                      (67 + 48) / 115][Stage 148:===================================>                 (78 + 37) / 115][Stage 148:========================================>            (88 + 27) / 115][Stage 148:=================================================>   (107 + 8) / 115]                                                                                [Stage 149:=================================>                   (74 + 42) / 116][Stage 149:========================================>            (89 + 27) / 116][Stage 149:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.613374335 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 170 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401771572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:==========================>                          (60 + 61) / 121][Stage 150:============================>                        (64 + 57) / 121][Stage 150:=====================================>               (86 + 35) / 121][Stage 150:==============================================>     (108 + 13) / 121][Stage 150:====================================================>(119 + 2) / 121]                                                                                [Stage 151:==========================>                          (61 + 61) / 122][Stage 151:=============================>                       (68 + 54) / 122][Stage 151:===================================>                 (82 + 40) / 122][Stage 151:===========================================>        (102 + 20) / 122][Stage 151:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.166203326 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIn dex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408964417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:===============================>                     (72 + 48) / 120][Stage 152:=======================================>             (90 + 30) / 120][Stage 152:===================================================> (117 + 3) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:==============================>                      (70 + 51) / 121][Stage 153:======================================>              (89 + 32) / 121][Stage 153:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 2.876995809 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIn dex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401184293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:===========================>                         (62 + 58) / 120][Stage 154:=================================>                   (76 + 44) / 120][Stage 154:=======================================>             (89 + 31) / 120][Stage 154:=================================================>   (113 + 7) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:===========================>                         (63 + 58) / 121][Stage 155:==============================>                      (70 + 51) / 121][Stage 155:=======================================>             (90 + 31) / 121][Stage 155:==============================================>     (109 + 12) / 121][Stage 155:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.18619897 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIn dex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374345716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:===============================>                     (68 + 47) / 115][Stage 156:=====================================>               (81 + 34) / 115][Stage 156:=============================================>       (98 + 17) / 115][Stage 156:===================================================> (111 + 4) / 115]                                                                                [Stage 157:==================================>                  (75 + 41) / 116][Stage 157:==========================================>          (93 + 23) / 116][Stage 157:=================================================>   (108 + 8) / 116][Stage 157:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.582198065 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionI ndex = 195 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333906492 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:=======================================>             (86 + 29) / 115][Stage 158:=============================================>       (99 + 16) / 115][Stage 158:==================================================>  (109 + 6) / 115]                                                                                [Stage 159:=======================================>             (87 + 29) / 116][Stage 159:===========================================>         (95 + 21) / 116][Stage 159:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.688994565 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionI ndex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400150554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:=============================>                       (67 + 54) / 121][Stage 160:====================================>                (84 + 37) / 121][Stage 160:==================================================>  (115 + 6) / 121]                                                                                [Stage 161:==========================>                          (62 + 60) / 122][Stage 161:==============================>                      (71 + 51) / 122][Stage 161:=====================================>               (87 + 35) / 122][Stage 161:==============================================>     (110 + 12) / 122][Stage 161:====================================================>(121 + 1) / 122][Stage 161:=====================================================(122 + 0) / 122]                                                                                Time elapsed: 3.325016414 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIn dex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339507716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:=====================================>               (82 + 33) / 115][Stage 162:========================================>            (88 + 27) / 115][Stage 162:=============================================>       (99 + 16) / 115][Stage 162:==================================================>  (109 + 6) / 115][Stage 162:====================================================>(114 + 1) / 115]                                                                                [Stage 163:=====================================>               (82 + 34) / 116][Stage 163:========================================>            (89 + 27) / 116][Stage 163:=============================================>      (101 + 15) / 116][Stage 163:===================================================> (112 + 4) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.281768752 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionI ndex = 211 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355865147 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:===================================>                 (76 + 37) / 113][Stage 164:========================================>            (87 + 26) / 113][Stage 164:==============================================>     (100 + 13) / 113][Stage 164:==================================================>  (108 + 5) / 113]                                                                                [Stage 165:===================================>                 (77 + 37) / 114][Stage 165:========================================>            (88 + 26) / 114][Stage 165:==============================================>      (99 + 15) / 114][Stage 165:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.750438079 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIn dex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347498463 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===================================>                 (76 + 37) / 113][Stage 166:========================================>            (86 + 27) / 113][Stage 166:============================================>        (95 + 18) / 113][Stage 166:=================================================>   (106 + 7) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:====================================>                (78 + 36) / 114][Stage 167:========================================>            (88 + 26) / 114][Stage 167:==============================================>     (101 + 13) / 114][Stage 167:==================================================>  (108 + 6) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.271103578 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 68 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380883605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:===========================>                         (59 + 54) / 113][Stage 168:===============================>                     (68 + 45) / 113][Stage 168:============================================>        (94 + 19) / 113][Stage 168:==================================================>  (107 + 6) / 113]                                                                                [Stage 169:============================>                        (62 + 52) / 114][Stage 169:===============================>                     (68 + 46) / 114][Stage 169:=========================================>           (90 + 24) / 114][Stage 169:==================================================>  (109 + 5) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.230024137 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394047854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:==============================>                      (69 + 51) / 120][Stage 170:==========================================>          (96 + 24) / 120][Stage 170:===================================================> (116 + 4) / 120]                                                                                [Stage 171:===========================>                         (63 + 58) / 121][Stage 171:===============================>                     (73 + 48) / 121][Stage 171:===========================================>         (99 + 22) / 121][Stage 171:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.160300578 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396412216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:=============================>                       (67 + 53) / 120][Stage 172:==========================================>          (96 + 24) / 120][Stage 172:=================================================>   (113 + 7) / 120]                                                                                [Stage 173:===========================>                         (62 + 59) / 121][Stage 173:================================>                    (74 + 47) / 121][Stage 173:===========================================>        (102 + 19) / 121][Stage 173:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.158557542 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356559451 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===================================>                 (76 + 37) / 113][Stage 174:========================================>            (86 + 27) / 113][Stage 174:============================================>        (94 + 19) / 113][Stage 174:=================================================>   (106 + 7) / 113]                                                                                [Stage 175:======================================>              (82 + 32) / 114][Stage 175:===========================================>         (93 + 21) / 114][Stage 175:==============================================>     (103 + 11) / 114][Stage 175:===================================================> (111 + 3) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.367727523 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIn dex = 94 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483585134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:============================>                        (65 + 56) / 121][Stage 176:===============================>                     (73 + 48) / 121][Stage 176:==========================================>         (100 + 21) / 121][Stage 176:==================================================>  (116 + 5) / 121]                                                                                [Stage 177:==========================>                          (61 + 61) / 122][Stage 177:================================>                    (75 + 47) / 122][Stage 177:=========================================>           (96 + 26) / 122][Stage 177:=================================================>   (113 + 9) / 122][Stage 177:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.332125706 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIn dex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332887437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:=======================================>             (85 + 30) / 115][Stage 178:===========================================>         (95 + 20) / 115][Stage 178:=============================================>      (101 + 14) / 115][Stage 178:===================================================> (112 + 3) / 115][Stage 178:====================================================>(113 + 2) / 115]                                                                                [Stage 179:=====================================>               (82 + 34) / 116][Stage 179:========================================>            (89 + 27) / 116][Stage 179:=============================================>      (102 + 14) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.308812516 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionI ndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360295195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:================================>                    (72 + 46) / 118][Stage 180:=================================>                   (75 + 43) / 118][Stage 180:========================================>            (90 + 28) / 118][Stage 180:============================================>       (101 + 17) / 118][Stage 180:==================================================>  (112 + 6) / 118]                                                                                [Stage 181:================================>                    (74 + 45) / 119][Stage 181:======================================>              (86 + 33) / 119][Stage 181:============================================>       (101 + 18) / 119][Stage 181:=================================================>   (112 + 7) / 119][Stage 181:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.274160819 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIn dex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429239601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==========================>                          (60 + 61) / 121][Stage 182:=============================>                       (68 + 53) / 121][Stage 182:======================================>              (88 + 33) / 121][Stage 182:=================================================>   (113 + 8) / 121][Stage 182:====================================================>(119 + 2) / 121]                                                                                [Stage 183:============================>                        (66 + 56) / 122][Stage 183:=================================>                   (76 + 46) / 122][Stage 183:==========================================>          (97 + 25) / 122][Stage 183:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.256418793 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIn dex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379288209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:==================================>                  (75 + 40) / 115][Stage 184:=========================================>           (91 + 24) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:===============================>                     (68 + 48) / 116][Stage 185:=====================================>               (82 + 34) / 116][Stage 185:==========================================>          (94 + 22) / 116][Stage 185:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 3.049440883 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionI ndex = 230 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370410764 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==============================>                      (66 + 49) / 115][Stage 186:=======================================>             (85 + 30) / 115][Stage 186:============================================>        (96 + 19) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:===================================>                 (77 + 39) / 116][Stage 187:==========================================>          (93 + 23) / 116][Stage 187:===============================================>    (105 + 11) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.826257081 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357898315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:================================>                    (70 + 43) / 113][Stage 188:=====================================>               (79 + 34) / 113][Stage 188:==========================================>          (91 + 22) / 113][Stage 188:==============================================>     (101 + 12) / 113][Stage 188:===================================================> (109 + 4) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:====================================>                (79 + 35) / 114][Stage 189:=========================================>           (90 + 24) / 114][Stage 189:=============================================>       (97 + 17) / 114][Stage 189:=================================================>   (106 + 8) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.42492844 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIn dex = 80 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335385822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:====================================>                (80 + 35) / 115][Stage 190:======================================>              (84 + 31) / 115][Stage 190:=============================================>       (99 + 16) / 115][Stage 190:==================================================>  (110 + 5) / 115]                                                                                [Stage 191:======================================>              (85 + 31) / 116][Stage 191:=============================================>       (99 + 17) / 116][Stage 191:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.493566749 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionI ndex = 210 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348391491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:=====================================>               (79 + 34) / 113][Stage 192:==========================================>          (91 + 22) / 113][Stage 192:==============================================>     (101 + 12) / 113][Stage 192:=================================================>   (106 + 7) / 113][Stage 192:===================================================> (110 + 3) / 113]                                                                                [Stage 193:====================================>                (79 + 35) / 114][Stage 193:========================================>            (88 + 26) / 114][Stage 193:===========================================>         (94 + 20) / 114][Stage 193:=============================================>      (100 + 14) / 114][Stage 193:===================================================> (110 + 4) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.322275963 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide98"
dataSource: String = /nidan/orc/individualORC/slide98

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 200 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403988468 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:===========================>                         (62 + 59) / 121][Stage 194:===============================>                     (73 + 48) / 121][Stage 194:=======================================>             (91 + 30) / 121][Stage 194:===================================================> (117 + 4) / 121]                                                                                [Stage 195:===========================>                         (64 + 58) / 122][Stage 195:===============================>                     (73 + 49) / 122][Stage 195:==========================================>          (97 + 25) / 122][Stage 195:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.148083813 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40505781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:==========================>                          (61 + 59) / 120][Stage 196:==============================>                      (70 + 50) / 120][Stage 196:=======================================>             (89 + 31) / 120][Stage 196:=============================================>      (106 + 14) / 120][Stage 196:====================================================>(119 + 1) / 120]                                                                                [Stage 197:==========================>                          (61 + 60) / 121][Stage 197:=============================>                       (67 + 54) / 121][Stage 197:=======================================>             (91 + 30) / 121][Stage 197:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.104636429 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionI ndex = 199 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.536778098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:===========================>                         (63 + 58) / 121][Stage 198:====================================>                (83 + 38) / 121][Stage 198:==============================================>     (108 + 13) / 121][Stage 198:====================================================>(120 + 1) / 121]                                                                                [Stage 199:===========================>                         (64 + 58) / 122][Stage 199:===============================>                     (73 + 49) / 122][Stage 199:=========================================>           (95 + 27) / 122][Stage 199:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.126758749 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382598576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:===========================>                         (59 + 54) / 113][Stage 200:=============================>                       (62 + 51) / 113][Stage 200:=========================================>           (88 + 25) / 113][Stage 200:=================================================>   (105 + 8) / 113]                                                                                [Stage 201:============================>                        (61 + 53) / 114][Stage 201:================================>                    (69 + 45) / 114][Stage 201:======================================>              (82 + 32) / 114][Stage 201:=============================================>       (98 + 16) / 114][Stage 201:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.106216581 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m55.416s
user	11m33.752s
sys	0m38.644s
