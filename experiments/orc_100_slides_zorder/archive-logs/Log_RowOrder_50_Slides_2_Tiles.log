Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 21:33:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:33:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:33:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:33:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 21:33:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:33:52 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524213341-0597).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.43025266 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 113) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.341515241 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  194  OR  partitionIndex = 195 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.751552338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:>                                                        (0 + 0) / 120][Stage 2:========================>                              (53 + 67) / 120][Stage 2:========================>                              (54 + 66) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:=============================>                         (64 + 56) / 120][Stage 2:==============================>                        (66 + 54) / 120][Stage 2:================================>                      (70 + 50) / 120][Stage 2:=======================================>               (87 + 33) / 120][Stage 2:===================================================>   (113 + 7) / 120][Stage 2:=====================================================> (116 + 4) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:============================>                          (62 + 59) / 121][Stage 3:===============================>                       (69 + 52) / 121][Stage 3:==================================>                    (76 + 45) / 121][Stage 3:=====================================>                 (82 + 39) / 121][Stage 3:=============================================>        (101 + 20) / 121][Stage 3:=================================================>    (110 + 11) / 121][Stage 3:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.914188962 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  41  OR  partitionIndex = 55 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.651249002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 113][Stage 4:===========================>                           (57 + 56) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:=============================>                         (61 + 52) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:============================================>          (91 + 22) / 113][Stage 4:===================================================>   (106 + 7) / 113]                                                                                [Stage 5:===========================>                           (57 + 57) / 114][Stage 5:=================================>                     (69 + 45) / 114][Stage 5:======================================>                (80 + 34) / 114][Stage 5:============================================>          (92 + 22) / 114][Stage 5:=================================================>    (104 + 10) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.135143378 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.692108143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==============================>                        (64 + 51) / 115][Stage 6:=================================>                     (69 + 46) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:==============================================>       (100 + 15) / 115][Stage 6:=================================================>    (105 + 10) / 115][Stage 6:====================================================>  (109 + 6) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:==================================>                    (72 + 44) / 116][Stage 7:=====================================>                 (79 + 37) / 116][Stage 7:=========================================>             (87 + 29) / 116][Stage 7:=============================================>         (96 + 20) / 116][Stage 7:==============================================>        (99 + 17) / 116][Stage 7:================================================>     (104 + 12) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:=====================================================> (113 + 3) / 116][Stage 7:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.060104264 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.488749603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===================================>                   (75 + 40) / 115][Stage 8:========================================>              (84 + 31) / 115][Stage 8:===========================================>           (91 + 24) / 115][Stage 8:===============================================>       (99 + 16) / 115][Stage 8:=================================================>    (105 + 10) / 115][Stage 8:=====================================================> (112 + 3) / 115]                                                                                [Stage 9:======================================>                (82 + 34) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:==============================================>        (98 + 18) / 116][Stage 9:===============================================>      (101 + 15) / 116][Stage 9:=================================================>    (106 + 10) / 116][Stage 9:=====================================================> (112 + 4) / 116][Stage 9:======================================================>(114 + 2) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.609922768 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  185  OR  partitionIndex = 199 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.551419933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=============================>                        (63 + 52) / 115][Stage 10:==============================>                       (66 + 49) / 115][Stage 10:======================================>               (81 + 34) / 115][Stage 10:=============================================>        (97 + 18) / 115][Stage 10:==============================================>       (99 + 16) / 115][Stage 10:================================================>    (105 + 10) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:===================================================>  (110 + 5) / 115]                                                                                [Stage 11:================================>                     (70 + 46) / 116][Stage 11:===================================>                  (77 + 39) / 116][Stage 11:========================================>             (88 + 28) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:==================================================>   (108 + 8) / 116][Stage 11:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.254713964 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135  OR  partitionIndex = 136 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.479762865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:======================================>               (81 + 34) / 115][Stage 12:========================================>             (87 + 28) / 115][Stage 12:===========================================>          (93 + 22) / 115][Stage 12:=============================================>        (96 + 19) / 115][Stage 12:==============================================>      (100 + 15) / 115][Stage 12:=================================================>    (106 + 9) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:=====================================>                (80 + 36) / 116][Stage 13:========================================>             (86 + 30) / 116][Stage 13:=============================================>        (97 + 19) / 116][Stage 13:================================================>    (106 + 10) / 116][Stage 13:=================================================>    (107 + 9) / 116][Stage 13:==================================================>   (109 + 7) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.289089341 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  156  OR  partitionIndex = 157 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.640788877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:============================>                         (59 + 54) / 113][Stage 14:==============================>                       (63 + 50) / 113][Stage 14:====================================>                 (76 + 37) / 113][Stage 14:===========================================>          (91 + 22) / 113][Stage 14:=============================================>        (96 + 17) / 113][Stage 14:===============================================>      (99 + 14) / 113][Stage 14:===================================================>  (108 + 5) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:============================>                         (61 + 53) / 114][Stage 15:================================>                     (69 + 45) / 114][Stage 15:==========================================>           (89 + 25) / 114][Stage 15:==================================================>   (106 + 8) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.038924516 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  113  OR  partitionIndex = 114 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.489305154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:=================================>                    (70 + 43) / 113][Stage 16:=====================================>                (78 + 35) / 113][Stage 16:=========================================>            (87 + 26) / 113][Stage 16:==============================================>       (97 + 16) / 113][Stage 16:==================================================>   (106 + 7) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:===================================>                  (75 + 39) / 114][Stage 17:========================================>             (86 + 28) / 114][Stage 17:=============================================>        (95 + 19) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.233941581 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  180  OR  partitionIndex = 181 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453870681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 42) / 113][Stage 18:====================================>                 (77 + 36) / 113][Stage 18:=========================================>            (86 + 27) / 113][Stage 18:===========================================>          (90 + 23) / 113][Stage 18:==================================================>   (105 + 8) / 113][Stage 18:====================================================> (110 + 3) / 113]                                                                                [Stage 19:======================================>               (81 + 33) / 114][Stage 19:=============================================>        (95 + 19) / 114][Stage 19:==================================================>   (107 + 7) / 114][Stage 19:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.286977379 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  201  OR  partitionIndex = 202 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.499841823 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==================================>                   (72 + 41) / 113][Stage 20:========================================>             (84 + 29) / 113][Stage 20:===========================================>          (91 + 22) / 113][Stage 20:===============================================>     (102 + 11) / 113][Stage 20:===================================================>  (108 + 5) / 113][Stage 20:=====================================================>(111 + 2) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:=====================================>                (80 + 34) / 114][Stage 21:==========================================>           (90 + 24) / 114][Stage 21:===============================================>     (103 + 11) / 114][Stage 21:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.974620123 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.544913586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:================================>                     (72 + 48) / 120][Stage 22:========================================>             (91 + 29) / 120][Stage 22:=============================================>       (102 + 18) / 120][Stage 22:===================================================>  (114 + 6) / 120][Stage 22:=====================================================>(118 + 2) / 120][Stage 22:=====================================================>(119 + 1) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:=============================>                        (67 + 54) / 121][Stage 23:=====================================>                (84 + 37) / 121][Stage 23:==============================================>      (107 + 14) / 121][Stage 23:====================================================> (117 + 4) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.90379621 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  25  OR  partitionIndex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.508543572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:==============================>                       (63 + 50) / 113][Stage 24:=====================================>                (78 + 35) / 113][Stage 24:=================================================>    (104 + 9) / 113]                                                                                [Stage 25:============================>                         (61 + 53) / 114][Stage 25:================================>                     (68 + 46) / 114][Stage 25:=========================================>            (88 + 26) / 114][Stage 25:===============================================>     (103 + 11) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.294672329 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  202  OR  partitionIndex = 214 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464667334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=====================================>                (78 + 35) / 113][Stage 26:===========================================>          (90 + 23) / 113][Stage 26:==============================================>       (98 + 15) / 113][Stage 26:===================================================>  (107 + 6) / 113][Stage 26:=====================================================>(111 + 2) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:========================================>             (85 + 29) / 114][Stage 27:==========================================>           (90 + 24) / 114][Stage 27:==============================================>      (101 + 13) / 114][Stage 27:====================================================> (111 + 3) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.548583781 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90  OR  partitionIndex = 102 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.476535822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (58 + 55) / 113][Stage 28:============================>                         (59 + 54) / 113][Stage 28:===============================>                      (66 + 47) / 113][Stage 28:===========================================>          (92 + 21) / 113][Stage 28:==================================================>   (106 + 7) / 113][Stage 28:====================================================> (109 + 4) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:============================>                         (61 + 53) / 114][Stage 29:===================================>                  (75 + 39) / 114][Stage 29:==========================================>           (90 + 24) / 114][Stage 29:=============================================>        (96 + 18) / 114][Stage 29:===================================================>  (109 + 5) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.886153295 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  130  OR  partitionIndex = 131 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.555088661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (60 + 61) / 121][Stage 30:===========================>                          (62 + 59) / 121][Stage 30:=================================>                    (74 + 47) / 121][Stage 30:=========================================>            (93 + 28) / 121][Stage 30:===================================================>  (115 + 6) / 121][Stage 30:=====================================================>(120 + 1) / 121]                                                                                [Stage 31:===========================>                          (61 + 61) / 122][Stage 31:=============================>                        (66 + 56) / 122][Stage 31:=================================>                    (76 + 46) / 122][Stage 31:==========================================>           (97 + 25) / 122][Stage 31:==================================================>   (113 + 9) / 122][Stage 31:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.579404208 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  220  OR  partitionIndex = 234 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.507721381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:===========================>                          (62 + 59) / 121][Stage 32:================================>                     (72 + 49) / 121][Stage 32:=========================================>            (92 + 29) / 121][Stage 32:=================================================>    (112 + 9) / 121]                                                                                [Stage 33:===========================>                          (61 + 61) / 122][Stage 33:==============================>                       (69 + 53) / 122][Stage 33:==========================================>           (96 + 26) / 122][Stage 33:================================================>    (112 + 10) / 122][Stage 33:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.384943951 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  77  OR  partitionIndex = 78 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.468260104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:==================================>                   (76 + 42) / 118][Stage 34:========================================>             (88 + 30) / 118][Stage 34:================================================>    (108 + 10) / 118][Stage 34:=====================================================>(117 + 1) / 118]                                                                                [Stage 35:=================================>                    (73 + 46) / 119][Stage 35:==================================>                   (75 + 44) / 119][Stage 35:===========================================>          (95 + 24) / 119][Stage 35:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.980414151 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.4547929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (72 + 46) / 118][Stage 36:=================================>                    (73 + 45) / 118][Stage 36:=========================================>            (91 + 27) / 118][Stage 36:=============================================>        (99 + 19) / 118][Stage 36:================================================>    (107 + 11) / 118][Stage 36:=====================================================>(117 + 1) / 118]                                                                                [Stage 37:=================================>                    (73 + 46) / 119][Stage 37:==================================>                   (77 + 42) / 119][Stage 37:========================================>             (89 + 30) / 119][Stage 37:===============================================>     (106 + 13) / 119][Stage 37:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.290836914 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.51212359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==========================>                           (60 + 61) / 121][Stage 38:=============================>                        (67 + 54) / 121][Stage 38:=====================================>                (85 + 36) / 121][Stage 38:=============================================>       (104 + 17) / 121][Stage 38:=====================================================>(119 + 2) / 121]                                                                                [Stage 39:===========================>                          (61 + 61) / 122][Stage 39:=============================>                        (66 + 56) / 122][Stage 39:===================================>                  (80 + 42) / 122][Stage 39:===========================================>         (101 + 21) / 122][Stage 39:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.11256142 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  18  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.436482214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:====================================>                 (77 + 36) / 113][Stage 40:=========================================>            (87 + 26) / 113][Stage 40:==============================================>      (100 + 13) / 113][Stage 40:==================================================>   (106 + 7) / 113]                                                                                [Stage 41:====================================>                 (77 + 37) / 114][Stage 41:==========================================>           (89 + 25) / 114][Stage 41:=============================================>        (95 + 19) / 114][Stage 41:===============================================>     (102 + 12) / 114][Stage 41:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.47014227 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  83  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.448937863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==================================>                   (73 + 40) / 113][Stage 42:=======================================>              (82 + 31) / 113][Stage 42:=============================================>        (95 + 18) / 113][Stage 42:===============================================>     (102 + 11) / 113][Stage 42:====================================================> (109 + 4) / 113]                                                                                [Stage 43:======================================>               (82 + 32) / 114][Stage 43:=============================================>        (97 + 17) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.985733625 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  32  OR  partitionIndex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.483246482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:============================>                         (63 + 57) / 120][Stage 44:==================================>                   (77 + 43) / 120][Stage 44:============================================>         (99 + 21) / 120][Stage 44:====================================================> (116 + 4) / 120]                                                                                [Stage 45:============================>                         (63 + 58) / 121][Stage 45:================================>                     (73 + 48) / 121][Stage 45:=======================================>              (89 + 32) / 121][Stage 45:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.096347353 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  109  OR  partitionIndex = 110 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.466900756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:===============================>                      (71 + 49) / 120][Stage 46:=======================================>              (87 + 33) / 120][Stage 46:================================================>    (110 + 10) / 120][Stage 46:=====================================================>(119 + 1) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:=============================>                        (66 + 55) / 121][Stage 47:=======================================>              (88 + 33) / 121][Stage 47:================================================>    (111 + 10) / 121][Stage 47:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.187195771 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  161  OR  partitionIndex = 175 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.469790578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (58 + 55) / 113][Stage 48:=============================>                        (61 + 52) / 113][Stage 48:====================================>                 (77 + 36) / 113][Stage 48:===============================================>      (99 + 14) / 113][Stage 48:=====================================================>(111 + 2) / 113]                                                                                [Stage 49:==============================>                       (64 + 50) / 114][Stage 49:====================================>                 (78 + 36) / 114][Stage 49:============================================>         (93 + 21) / 114][Stage 49:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.100059099 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  160  OR  partitionIndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438296264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:================================>                     (72 + 46) / 118][Stage 50:===================================>                  (78 + 40) / 118][Stage 50:==========================================>           (93 + 25) / 118][Stage 50:================================================>    (107 + 11) / 118][Stage 50:====================================================> (114 + 4) / 118]                                                                                [Stage 51:==================================>                   (76 + 43) / 119][Stage 51:=========================================>            (91 + 28) / 119][Stage 51:=================================================>    (110 + 9) / 119][Stage 51:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.141884054 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  229  OR  partitionIndex = 230 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.451368773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (60 + 60) / 120][Stage 52:=============================>                        (65 + 55) / 120][Stage 52:========================================>             (89 + 31) / 120][Stage 52:==============================================>      (106 + 14) / 120]                                                                                [Stage 53:===========================>                          (61 + 60) / 121][Stage 53:===============================>                      (70 + 51) / 121][Stage 53:=======================================>              (88 + 33) / 121][Stage 53:===============================================>     (109 + 12) / 121][Stage 53:====================================================> (117 + 4) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.308499273 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.468283264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:===============================>                      (69 + 51) / 120][Stage 54:=========================================>            (92 + 28) / 120][Stage 54:====================================================> (117 + 3) / 120]                                                                                [Stage 55:===========================>                          (61 + 60) / 121][Stage 55:============================>                         (63 + 58) / 121][Stage 55:=================================>                    (76 + 45) / 121][Stage 55:===========================================>         (100 + 21) / 121][Stage 55:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.965686627 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  159  OR  partitionIndex = 173 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.452620657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==========================>                           (60 + 61) / 121][Stage 56:============================>                         (64 + 57) / 121][Stage 56:===============================>                      (71 + 50) / 121][Stage 56:=======================================>              (89 + 32) / 121][Stage 56:================================================>    (111 + 10) / 121][Stage 56:=====================================================>(120 + 1) / 121]                                                                                [Stage 57:===========================>                          (61 + 61) / 122][Stage 57:==============================>                       (68 + 54) / 122][Stage 57:====================================>                 (82 + 40) / 122][Stage 57:=============================================>       (105 + 17) / 122]                                                                                Time elapsed: 3.19691184 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.445793575 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (61 + 59) / 120][Stage 58:================================>                     (72 + 48) / 120][Stage 58:===========================================>          (96 + 24) / 120][Stage 58:==================================================>   (113 + 7) / 120][Stage 58:=====================================================>(119 + 1) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:================================>                     (72 + 49) / 121][Stage 59:======================================>               (87 + 34) / 121][Stage 59:==============================================>      (106 + 15) / 121][Stage 59:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.215620463 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  61  OR  partitionIndex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.434036111 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:=============================>                        (61 + 52) / 113][Stage 60:====================================>                 (76 + 37) / 113][Stage 60:============================================>         (93 + 20) / 113][Stage 60:====================================================> (110 + 3) / 113]                                                                                [Stage 61:===========================>                          (59 + 55) / 114][Stage 61:=============================>                        (62 + 52) / 114][Stage 61:=====================================>                (80 + 34) / 114][Stage 61:============================================>         (94 + 20) / 114][Stage 61:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.16623563 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  147  OR  partitionIndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.423349307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===================================>                  (75 + 38) / 113][Stage 62:=========================================>            (86 + 27) / 113][Stage 62:==============================================>       (97 + 16) / 113][Stage 62:=================================================>    (104 + 9) / 113][Stage 62:===================================================>  (108 + 5) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:===================================>                  (74 + 40) / 114][Stage 63:=======================================>              (84 + 30) / 114][Stage 63:=============================================>        (95 + 19) / 114][Stage 63:==============================================>      (101 + 13) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.47881129 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  211  OR  partitionIndex = 225 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453308605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:============================>                         (63 + 57) / 120][Stage 64:=================================>                    (74 + 46) / 120][Stage 64:============================================>        (101 + 19) / 120][Stage 64:====================================================> (116 + 4) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:=============================>                        (67 + 54) / 121][Stage 65:=====================================>                (83 + 38) / 121][Stage 65:=============================================>       (105 + 16) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.983545936 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  233  OR  partitionIndex = 234 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393705514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 41) / 113][Stage 66:=========================================>            (86 + 27) / 113][Stage 66:=============================================>        (95 + 18) / 113][Stage 66:===================================================>  (108 + 5) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:===================================>                  (75 + 39) / 114][Stage 67:=======================================>              (83 + 31) / 114][Stage 67:==============================================>       (98 + 16) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.930812259 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  191  OR  partitionIndex = 205 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40041554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:======================================>               (84 + 34) / 118][Stage 68:=============================================>       (102 + 16) / 118][Stage 68:==================================================>   (110 + 8) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:======================================>               (84 + 35) / 119][Stage 69:===========================================>          (95 + 24) / 119][Stage 69:====================================================> (115 + 4) / 119][Stage 69:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.192376734 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  165  OR  partitionIndex = 179 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464558856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:===============================>                      (71 + 49) / 120][Stage 70:=========================================>            (92 + 28) / 120][Stage 70:==================================================>   (112 + 8) / 120]                                                                                [Stage 71:============================>                         (64 + 57) / 121][Stage 71:==================================>                   (77 + 44) / 121][Stage 71:=========================================>            (94 + 27) / 121][Stage 71:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.059057993 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  29  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408221306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:=================================>                    (73 + 45) / 118][Stage 72:====================================>                 (79 + 39) / 118][Stage 72:==========================================>           (93 + 25) / 118][Stage 72:================================================>    (108 + 10) / 118][Stage 72:=====================================================>(117 + 1) / 118]                                                                                [Stage 73:=================================>                    (73 + 46) / 119][Stage 73:===================================>                  (79 + 40) / 119][Stage 73:======================================>               (85 + 34) / 119][Stage 73:============================================>        (101 + 18) / 119][Stage 73:==================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.402562096 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  177  OR  partitionIndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396301742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:====================================>                 (78 + 37) / 115][Stage 74:=============================================>        (97 + 18) / 115][Stage 74:====================================================> (111 + 4) / 115]                                                                                [Stage 75:====================================>                 (78 + 38) / 116][Stage 75:============================================>         (96 + 20) / 116][Stage 75:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.592769975 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  99  OR  partitionIndex = 113 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384196876 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (70 + 43) / 113][Stage 76:======================================>               (80 + 33) / 113][Stage 76:=============================================>        (96 + 17) / 113][Stage 76:================================================>    (103 + 10) / 113][Stage 76:===================================================>  (107 + 6) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:======================================>               (81 + 33) / 114][Stage 77:===========================================>          (91 + 23) / 114][Stage 77:==============================================>      (101 + 13) / 114][Stage 77:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.20588385 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  138  OR  partitionIndex = 150 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.440363769 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:================================>                     (73 + 48) / 121][Stage 78:============================================>        (101 + 20) / 121][Stage 78:===================================================>  (116 + 5) / 121]                                                                                [Stage 79:===========================>                          (61 + 61) / 122][Stage 79:=============================>                        (67 + 55) / 122][Stage 79:======================================>               (87 + 35) / 122][Stage 79:==============================================>      (108 + 14) / 122][Stage 79:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.261125594 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  129  OR  partitionIndex = 143 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405656092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=============================>                        (62 + 51) / 113][Stage 80:==================================>                   (73 + 40) / 113][Stage 80:============================================>         (93 + 20) / 113][Stage 80:====================================================> (109 + 4) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:=================================>                    (71 + 43) / 114][Stage 81:===========================================>          (91 + 23) / 114][Stage 81:=================================================>    (105 + 9) / 114][Stage 81:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.477331071 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  65  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421649963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:============================>                         (59 + 54) / 113][Stage 82:==============================>                       (63 + 50) / 113][Stage 82:=======================================>              (82 + 31) / 113][Stage 82:==============================================>       (97 + 16) / 113]                                                                                [Stage 83:============================>                         (60 + 54) / 114][Stage 83:================================>                     (69 + 45) / 114][Stage 83:========================================>             (86 + 28) / 114][Stage 83:=============================================>        (95 + 19) / 114][Stage 83:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.101881868 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  145  OR  partitionIndex = 146 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375069297 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=================================>                    (71 + 42) / 113][Stage 84:=====================================>                (79 + 34) / 113][Stage 84:=============================================>        (95 + 18) / 113][Stage 84:==================================================>   (105 + 8) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:===================================>                  (75 + 39) / 114][Stage 85:=========================================>            (87 + 27) / 114][Stage 85:===========================================>          (91 + 23) / 114][Stage 85:==============================================>      (101 + 13) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.070872042 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  163  OR  partitionIndex = 177 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385898024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==============================>                       (66 + 49) / 115][Stage 86:=====================================>                (79 + 36) / 115][Stage 86:=============================================>        (96 + 19) / 115][Stage 86:=================================================>    (106 + 9) / 115][Stage 86:====================================================> (112 + 3) / 115]                                                                                [Stage 87:=====================================>                (80 + 36) / 116][Stage 87:=============================================>        (98 + 18) / 116][Stage 87:==================================================>   (109 + 7) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.105042293 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  69  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.437696296 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:>                                                       (0 + 0) / 120][Stage 88:===========================>                          (60 + 60) / 120][Stage 88:===============================>                      (69 + 51) / 120][Stage 88:====================================>                 (82 + 38) / 120][Stage 88:=============================================>       (104 + 16) / 120][Stage 88:====================================================> (116 + 4) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:============================>                         (64 + 57) / 121][Stage 89:=================================>                    (76 + 45) / 121][Stage 89:==========================================>           (96 + 25) / 121][Stage 89:===================================================>  (116 + 5) / 121][Stage 89:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.438866481 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415238105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (60 + 60) / 120][Stage 90:==============================>                       (67 + 53) / 120][Stage 90:=====================================>                (84 + 36) / 120][Stage 90:=================================================>    (111 + 9) / 120][Stage 90:=====================================================>(118 + 2) / 120]                                                                                [Stage 91:===========================>                          (62 + 59) / 121][Stage 91:===============================>                      (71 + 50) / 121][Stage 91:========================================>             (90 + 31) / 121][Stage 91:==============================================>      (107 + 14) / 121][Stage 91:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.400263172 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  235  OR  partitionIndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377327724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=====================================>                (78 + 35) / 113][Stage 92:==========================================>           (89 + 24) / 113][Stage 92:==============================================>      (100 + 13) / 113][Stage 92:===================================================>  (108 + 5) / 113]                                                                                [Stage 93:======================================>               (82 + 32) / 114][Stage 93:============================================>         (93 + 21) / 114][Stage 93:================================================>    (104 + 10) / 114][Stage 93:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.83917437 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  101  OR  partitionIndex = 115 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398677098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:================================>                     (69 + 44) / 113][Stage 94:========================================>             (85 + 28) / 113][Stage 94:===============================================>     (102 + 11) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:==============================>                       (65 + 49) / 114][Stage 95:===================================>                  (74 + 40) / 114][Stage 95:=============================================>        (97 + 17) / 114][Stage 95:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.266257877 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  52  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360936077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (81 + 32) / 113][Stage 96:===========================================>          (91 + 22) / 113][Stage 96:================================================>    (103 + 10) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:====================================>                 (77 + 37) / 114][Stage 97:==========================================>           (89 + 25) / 114][Stage 97:==============================================>       (99 + 15) / 114][Stage 97:================================================>    (104 + 10) / 114][Stage 97:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.288492943 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  36  OR  partitionIndex = 37 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365670601 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=================================>                    (70 + 43) / 113][Stage 98:======================================>               (81 + 32) / 113][Stage 98:===========================================>          (90 + 23) / 113][Stage 98:===============================================>     (102 + 11) / 113][Stage 98:====================================================> (109 + 4) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:===================================>                  (74 + 40) / 114][Stage 99:========================================>             (86 + 28) / 114][Stage 99:=============================================>        (95 + 19) / 114][Stage 99:==================================================>   (106 + 8) / 114][Stage 99:====================================================> (110 + 4) / 114][Stage 99:=====================================================>(112 + 2) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.926680464 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 119 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.371225546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:====================================>                (77 + 36) / 113][Stage 100:==========================================>          (90 + 23) / 113][Stage 100:==============================================>     (100 + 13) / 113][Stage 100:================================================>    (104 + 9) / 113][Stage 100:===================================================> (110 + 3) / 113]                                                                                [Stage 101:========================================>            (87 + 27) / 114][Stage 101:=============================================>       (98 + 16) / 114][Stage 101:================================================>    (105 + 9) / 114][Stage 101:===================================================> (110 + 4) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.325771113 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  152  OR  partitionIndex = 153 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365890164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:======================================>              (82 + 31) / 113][Stage 102:=========================================>           (89 + 24) / 113][Stage 102:==============================================>     (100 + 13) / 113][Stage 102:==================================================>  (107 + 6) / 113]                                                                                [Stage 103:=====================================>               (81 + 33) / 114][Stage 103:============================================>        (95 + 19) / 114][Stage 103:=================================================>   (106 + 8) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.826491518 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.439151091 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 61) / 121][Stage 104:==============================>                      (70 + 51) / 121][Stage 104:=======================================>             (90 + 31) / 121][Stage 104:=================================================>   (113 + 8) / 121][Stage 104:====================================================>(120 + 1) / 121]                                                                                [Stage 105:==========================>                          (61 + 61) / 122][Stage 105:=============================>                       (67 + 55) / 122][Stage 105:=================================>                   (76 + 46) / 122][Stage 105:===========================================>        (102 + 20) / 122][Stage 105:===================================================> (118 + 4) / 122][Stage 105:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.460481621 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  172  OR  partitionIndex = 180 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364205706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=================================>                   (72 + 41) / 113][Stage 106:====================================>                (78 + 35) / 113][Stage 106:==========================================>          (90 + 23) / 113][Stage 106:==============================================>     (101 + 12) / 113]                                                                                [Stage 107:====================================>                (79 + 35) / 114][Stage 107:========================================>            (87 + 27) / 114][Stage 107:=============================================>       (98 + 16) / 114][Stage 107:===================================================> (110 + 4) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.963609244 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126  OR  partitionIndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369683151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:==========================================>          (93 + 22) / 115][Stage 108:==============================================>     (103 + 12) / 115][Stage 108:===================================================> (111 + 4) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=======================================>             (86 + 30) / 116][Stage 109:=============================================>      (102 + 14) / 116][Stage 109:===================================================> (112 + 4) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.976379783 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  143  OR  partitionIndex = 144 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384330382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:=================================>                   (75 + 43) / 118][Stage 110:========================================>            (90 + 28) / 118][Stage 110:==============================================>     (105 + 13) / 118][Stage 110:====================================================>(116 + 2) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:===================================>                 (79 + 40) / 119][Stage 111:==========================================>          (95 + 24) / 119][Stage 111:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 2.956633602 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403291034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (61 + 59) / 120][Stage 112:=============================>                       (66 + 54) / 120][Stage 112:=====================================>               (85 + 35) / 120][Stage 112:=================================================>   (111 + 9) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:============================>                        (64 + 57) / 121][Stage 113:==================================>                  (78 + 43) / 121][Stage 113:==========================================>          (96 + 25) / 121][Stage 113:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.23730851 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  10  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353014224 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:=================================>                   (72 + 41) / 113][Stage 114:=======================================>             (84 + 29) / 113][Stage 114:===========================================>         (92 + 21) / 113][Stage 114:=============================================>       (98 + 15) / 113][Stage 114:===================================================> (109 + 4) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:======================================>              (82 + 32) / 114][Stage 115:=========================================>           (90 + 24) / 114][Stage 115:=============================================>      (100 + 14) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.569839374 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394129872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:================================>                    (69 + 44) / 113][Stage 116:=======================================>             (84 + 29) / 113][Stage 116:===============================================>    (103 + 10) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:===========================>                         (60 + 54) / 114][Stage 117:==============================>                      (66 + 48) / 114][Stage 117:=======================================>             (85 + 29) / 114][Stage 117:==============================================>     (103 + 11) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.224031187 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  55  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40432068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:>                                                      (0 + 0) / 121][Stage 118:==========================>                          (60 + 61) / 121][Stage 118:============================>                        (66 + 55) / 121][Stage 118:====================================>                (83 + 38) / 121][Stage 118:=============================================>      (105 + 16) / 121][Stage 118:====================================================>(120 + 1) / 121]                                                                                [Stage 119:==========================>                          (61 + 61) / 122][Stage 119:=============================>                       (68 + 54) / 122][Stage 119:====================================>                (83 + 39) / 122][Stage 119:===========================================>         (99 + 23) / 122][Stage 119:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.059140172 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  13  OR  partitionIndex = 27 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38775401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (58 + 55) / 113][Stage 120:================================>                    (69 + 44) / 113][Stage 120:=========================================>           (89 + 24) / 113][Stage 120:=================================================>   (105 + 8) / 113][Stage 120:===================================================> (109 + 4) / 113]                                                                                [Stage 121:=============================>                       (63 + 51) / 114][Stage 121:==================================>                  (75 + 39) / 114][Stage 121:===========================================>         (94 + 20) / 114][Stage 121:==================================================>  (109 + 5) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.437623309 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92  OR  partitionIndex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372124262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==============================>                      (66 + 49) / 115][Stage 122:====================================>                (80 + 35) / 115][Stage 122:============================================>        (96 + 19) / 115][Stage 122:=================================================>   (108 + 7) / 115]                                                                                [Stage 123:==================================>                  (76 + 40) / 116][Stage 123:=========================================>           (90 + 26) / 116][Stage 123:==============================================>     (103 + 13) / 116][Stage 123:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.724322316 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  10  OR  partitionIndex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410837109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (61 + 60) / 121][Stage 124:==============================>                      (70 + 51) / 121][Stage 124:=========================================>           (94 + 27) / 121][Stage 124:==============================================>     (109 + 12) / 121]                                                                                [Stage 125:==========================>                          (61 + 61) / 122][Stage 125:==============================>                      (70 + 52) / 122][Stage 125:=====================================>               (86 + 36) / 122][Stage 125:==============================================>     (110 + 12) / 122][Stage 125:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.3257497 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184  OR  partitionIndex = 185 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.347087328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:====================================>                (79 + 36) / 115][Stage 126:========================================>            (87 + 28) / 115][Stage 126:=============================================>      (100 + 15) / 115][Stage 126:===================================================> (111 + 4) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:=====================================>               (82 + 34) / 116][Stage 127:==========================================>          (92 + 24) / 116][Stage 127:================================================>    (107 + 9) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.7293072 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  133  OR  partitionIndex = 147 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.419964398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (61 + 59) / 120][Stage 128:================================>                    (74 + 46) / 120][Stage 128:=========================================>           (95 + 25) / 120][Stage 128:=================================================>   (113 + 7) / 120]                                                                                [Stage 129:===========================>                         (63 + 58) / 121][Stage 129:===================================>                 (80 + 41) / 121][Stage 129:==========================================>          (96 + 25) / 121][Stage 129:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.051661103 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  15  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381966594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (59 + 54) / 113][Stage 130:=============================>                       (62 + 51) / 113][Stage 130:===================================>                 (75 + 38) / 113][Stage 130:=============================================>       (96 + 17) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:=============================>                       (63 + 51) / 114][Stage 131:====================================>                (78 + 36) / 114][Stage 131:================================================>    (105 + 9) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.106413731 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  139  OR  partitionIndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396788765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:============================>                        (65 + 55) / 120][Stage 132:==================================>                  (79 + 41) / 120][Stage 132:=======================================>             (89 + 31) / 120][Stage 132:==================================================>  (114 + 6) / 120]                                                                                [Stage 133:==========================>                          (61 + 60) / 121][Stage 133:================================>                    (75 + 46) / 121][Stage 133:===========================================>        (102 + 19) / 121][Stage 133:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.097744036 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  98  OR  partitionIndex = 99 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394130125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (61 + 59) / 120][Stage 134:===============================>                     (72 + 48) / 120][Stage 134:======================================>              (88 + 32) / 120][Stage 134:=================================================>   (113 + 7) / 120][Stage 134:====================================================>(119 + 1) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:===============================>                     (73 + 48) / 121][Stage 135:==========================================>          (97 + 24) / 121][Stage 135:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.038508967 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  67  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.34076083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:====================================>                (80 + 35) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:=============================================>       (99 + 16) / 115][Stage 136:=================================================>   (108 + 7) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:======================================>              (85 + 31) / 116][Stage 137:========================================>            (89 + 27) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.736008453 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  218  OR  partitionIndex = 219 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376881276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:================================>                    (70 + 45) / 115][Stage 138:======================================>              (83 + 32) / 115][Stage 138:==========================================>          (93 + 22) / 115][Stage 138:=================================================>   (108 + 7) / 115]                                                                                [Stage 139:==================================>                  (75 + 41) / 116][Stage 139:=========================================>           (91 + 25) / 116][Stage 139:===============================================>    (105 + 11) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.797102483 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  32  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375464116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==================================>                  (75 + 40) / 115][Stage 140:=========================================>           (89 + 26) / 115][Stage 140:==============================================>     (102 + 13) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:===================================>                 (78 + 38) / 116][Stage 141:=============================================>       (99 + 17) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(114 + 2) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.315994388 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  86  OR  partitionIndex = 98 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395365771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:==========================>                          (61 + 59) / 120][Stage 142:===================================>                 (80 + 40) / 120][Stage 142:===========================================>         (98 + 22) / 120][Stage 142:====================================================>(118 + 2) / 120]                                                                                [Stage 143:==========================>                          (61 + 60) / 121][Stage 143:============================>                        (66 + 55) / 121][Stage 143:==================================>                  (78 + 43) / 121][Stage 143:===========================================>        (102 + 19) / 121][Stage 143:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.055134922 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  195  OR  partitionIndex = 209 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.334685611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=====================================>               (81 + 34) / 115][Stage 144:===========================================>         (95 + 20) / 115][Stage 144:==============================================>     (103 + 12) / 115][Stage 144:==================================================>  (109 + 6) / 115]                                                                                [Stage 145:======================================>              (84 + 32) / 116][Stage 145:============================================>        (97 + 19) / 116][Stage 145:==============================================>     (103 + 13) / 116][Stage 145:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.93505097 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  150  OR  partitionIndex = 162 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364115512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (72 + 46) / 118][Stage 146:==================================>                  (76 + 42) / 118][Stage 146:==========================================>          (94 + 24) / 118][Stage 146:================================================>    (109 + 9) / 118][Stage 146:====================================================>(116 + 2) / 118]                                                                                [Stage 147:================================>                    (73 + 46) / 119][Stage 147:=================================>                   (76 + 43) / 119][Stage 147:========================================>            (90 + 29) / 119][Stage 147:=============================================>      (105 + 14) / 119][Stage 147:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.091652849 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353874667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (74 + 39) / 113][Stage 148:============================================>        (94 + 19) / 113][Stage 148:==============================================>     (101 + 12) / 113][Stage 148:===================================================> (110 + 3) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:=======================================>             (85 + 29) / 114][Stage 149:============================================>        (96 + 18) / 114][Stage 149:=================================================>   (106 + 8) / 114][Stage 149:===================================================> (111 + 3) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.489499878 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 196 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410407668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:===============================>                     (71 + 49) / 120][Stage 150:=======================================>             (90 + 30) / 120][Stage 150:===============================================>    (110 + 10) / 120][Stage 150:===================================================> (116 + 4) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:=============================>                       (67 + 54) / 121][Stage 151:=====================================>               (85 + 36) / 121][Stage 151:=============================================>      (106 + 15) / 121][Stage 151:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.11538747 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  162  OR  partitionIndex = 163 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.355807531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==================================>                  (74 + 39) / 113][Stage 152:===========================================>         (92 + 21) / 113][Stage 152:=============================================>       (97 + 16) / 113][Stage 152:===================================================> (109 + 4) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:==================================>                  (74 + 40) / 114][Stage 153:=========================================>           (90 + 24) / 114][Stage 153:=============================================>       (98 + 16) / 114][Stage 153:==============================================>     (103 + 11) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.970051878 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  216  OR  partitionIndex = 217 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384110412 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===============================>                     (68 + 47) / 115][Stage 154:====================================>                (79 + 36) / 115][Stage 154:=============================================>      (100 + 15) / 115][Stage 154:==================================================>  (110 + 5) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:===============================>                     (68 + 48) / 116][Stage 155:===================================>                 (78 + 38) / 116][Stage 155:============================================>       (100 + 16) / 116][Stage 155:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.837845774 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  155  OR  partitionIndex = 169 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360834636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (74 + 44) / 118][Stage 156:===================================>                 (80 + 38) / 118][Stage 156:===========================================>         (96 + 22) / 118][Stage 156:==================================================>  (112 + 6) / 118]                                                                                [Stage 157:=================================>                   (76 + 43) / 119][Stage 157:====================================>                (83 + 36) / 119][Stage 157:=============================================>      (104 + 15) / 119][Stage 157:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.003603841 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395283442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:============================>                        (65 + 55) / 120][Stage 158:==================================>                  (79 + 41) / 120][Stage 158:===========================================>        (100 + 20) / 120][Stage 158:===================================================> (116 + 4) / 120]                                                                                [Stage 159:===========================>                         (63 + 58) / 121][Stage 159:===================================>                 (82 + 39) / 121][Stage 159:=============================================>      (107 + 14) / 121][Stage 159:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.096545859 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  151  OR  partitionIndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385349277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (58 + 55) / 113][Stage 160:=============================>                       (62 + 51) / 113][Stage 160:=================================>                   (72 + 41) / 113][Stage 160:=============================================>       (96 + 17) / 113][Stage 160:====================================================>(112 + 1) / 113]                                                                                [Stage 161:===========================>                         (59 + 55) / 114][Stage 161:================================>                    (70 + 44) / 114][Stage 161:=======================================>             (86 + 28) / 114][Stage 161:===============================================>    (104 + 10) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.994281996 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  89  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393701484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:================================>                    (69 + 44) / 113][Stage 162:==========================================>          (90 + 23) / 113][Stage 162:==================================================>  (108 + 5) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:===========================>                         (60 + 54) / 114][Stage 163:===================================>                 (76 + 38) / 114][Stage 163:=============================================>       (97 + 17) / 114][Stage 163:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.30342283 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  194  OR  partitionIndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341023148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (80 + 35) / 115][Stage 164:=========================================>           (89 + 26) / 115][Stage 164:=============================================>       (99 + 16) / 115][Stage 164:==================================================>  (110 + 5) / 115]                                                                                [Stage 165:=======================================>             (86 + 30) / 116][Stage 165:===========================================>         (95 + 21) / 116][Stage 165:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.537064624 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  173  OR  partitionIndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.364263225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==================================>                  (75 + 40) / 115][Stage 166:============================================>        (96 + 19) / 115][Stage 166:=================================================>   (107 + 8) / 115][Stage 166:====================================================>(113 + 2) / 115]                                                                                [Stage 167:==============================>                      (67 + 49) / 116][Stage 167:===================================>                 (77 + 39) / 116][Stage 167:==========================================>          (92 + 24) / 116][Stage 167:================================================>    (107 + 9) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.987659822 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  154  OR  partitionIndex = 155 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.343793991 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (83 + 32) / 115][Stage 168:===========================================>         (94 + 21) / 115][Stage 168:=================================================>   (108 + 7) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=====================================>               (83 + 33) / 116][Stage 169:==========================================>          (92 + 24) / 116][Stage 169:==============================================>     (104 + 12) / 116][Stage 169:===================================================> (112 + 4) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.792469349 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  153  OR  partitionIndex = 167 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358960884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (72 + 46) / 118][Stage 170:=================================>                   (75 + 43) / 118][Stage 170:=======================================>             (87 + 31) / 118][Stage 170:=================================================>   (110 + 8) / 118][Stage 170:====================================================>(117 + 1) / 118]                                                                                [Stage 171:==================================>                  (77 + 42) / 119][Stage 171:========================================>            (92 + 27) / 119][Stage 171:===============================================>    (108 + 11) / 119][Stage 171:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.29629379 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  45  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.417960189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (62 + 59) / 121][Stage 172:================================>                    (74 + 47) / 121][Stage 172:=======================================>             (91 + 30) / 121][Stage 172:==============================================>     (109 + 12) / 121][Stage 172:====================================================>(119 + 2) / 121]                                                                                [Stage 173:==========================>                          (61 + 61) / 122][Stage 173:===========================>                         (64 + 58) / 122][Stage 173:=================================>                   (78 + 44) / 122][Stage 173:==========================================>          (98 + 24) / 122][Stage 173:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.277302708 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  179  OR  partitionIndex = 180 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379351482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (72 + 43) / 115][Stage 174:========================================>            (88 + 27) / 115][Stage 174:==============================================>     (103 + 12) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:================================>                    (71 + 45) / 116][Stage 175:=======================================>             (87 + 29) / 116][Stage 175:===============================================>    (105 + 11) / 116][Stage 175:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.617844949 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  103  OR  partitionIndex = 117 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392835973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:==========================>                          (61 + 60) / 121][Stage 176:================================>                    (74 + 47) / 121][Stage 176:==========================================>          (97 + 24) / 121][Stage 176:=================================================>   (112 + 9) / 121][Stage 176:====================================================>(120 + 1) / 121]                                                                                [Stage 177:==========================>                          (61 + 61) / 122][Stage 177:=============================>                       (69 + 53) / 122][Stage 177:=======================================>             (92 + 30) / 122][Stage 177:===============================================>    (111 + 11) / 122][Stage 177:===================================================> (119 + 3) / 122][Stage 177:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.493852333 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 183 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349173562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===================================>                 (76 + 37) / 113][Stage 178:==========================================>          (90 + 23) / 113][Stage 178:==============================================>      (99 + 14) / 113][Stage 178:==================================================>  (107 + 6) / 113]                                                                                [Stage 179:=================================>                   (72 + 42) / 114][Stage 179:======================================>              (83 + 31) / 114][Stage 179:===========================================>         (93 + 21) / 114][Stage 179:==============================================>     (101 + 13) / 114][Stage 179:================================================>    (105 + 9) / 114][Stage 179:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.000121814 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  131  OR  partitionIndex = 145 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407062027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 61) / 121][Stage 180:==============================>                      (70 + 51) / 121][Stage 180:======================================>              (88 + 33) / 121][Stage 180:===============================================>    (111 + 10) / 121][Stage 180:===================================================> (118 + 3) / 121]                                                                                [Stage 181:==========================>                          (61 + 61) / 122][Stage 181:==============================>                      (70 + 52) / 122][Stage 181:====================================>                (85 + 37) / 122][Stage 181:==============================================>     (109 + 13) / 122][Stage 181:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.358991116 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  74  OR  partitionIndex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.367463118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:>                                                      (0 + 0) / 115][Stage 182:====================================>                (80 + 35) / 115][Stage 182:========================================>            (87 + 28) / 115][Stage 182:================================================>    (106 + 9) / 115]                                                                                [Stage 183:======================================>              (85 + 31) / 116][Stage 183:===========================================>         (95 + 21) / 116][Stage 183:=================================================>   (109 + 7) / 116][Stage 183:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.595478808 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 176 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360265654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=========================================>           (89 + 26) / 115][Stage 184:============================================>        (96 + 19) / 115][Stage 184:=================================================>   (108 + 7) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:=====================================>               (83 + 33) / 116][Stage 185:=========================================>           (90 + 26) / 116][Stage 185:===============================================>    (106 + 10) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.890730801 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  97  OR  partitionIndex = 111 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359305194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (72 + 46) / 118][Stage 186:=================================>                   (75 + 43) / 118][Stage 186:====================================>                (81 + 37) / 118][Stage 186:========================================>            (91 + 27) / 118][Stage 186:=============================================>      (103 + 15) / 118][Stage 186:===================================================> (115 + 3) / 118]                                                                                [Stage 187:=================================>                   (75 + 44) / 119][Stage 187:=====================================>               (84 + 35) / 119][Stage 187:=========================================>           (94 + 25) / 119][Stage 187:===============================================>    (109 + 10) / 119][Stage 187:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.432800286 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  27  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393607802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:============================>                        (64 + 57) / 121][Stage 188:===============================>                     (71 + 50) / 121][Stage 188:=========================================>           (95 + 26) / 121][Stage 188:==================================================>  (116 + 5) / 121]                                                                                [Stage 189:==========================>                          (62 + 60) / 122][Stage 189:===============================>                     (72 + 50) / 122][Stage 189:======================================>              (88 + 34) / 122][Stage 189:==================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.111683472 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383546075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=============================>                       (62 + 51) / 113][Stage 190:==================================>                  (74 + 39) / 113][Stage 190:==========================================>          (90 + 23) / 113][Stage 190:==============================================>     (102 + 11) / 113]                                                                                [Stage 191:============================>                        (62 + 52) / 114][Stage 191:=================================>                   (71 + 43) / 114][Stage 191:=========================================>           (89 + 25) / 114][Stage 191:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.08242804 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  221  OR  partitionIndex = 235 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394036305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (60 + 60) / 120][Stage 192:============================>                        (64 + 56) / 120][Stage 192:===================================>                 (80 + 40) / 120][Stage 192:==========================================>          (97 + 23) / 120][Stage 192:====================================================>(119 + 1) / 120]                                                                                [Stage 193:==========================>                          (61 + 60) / 121][Stage 193:=============================>                       (67 + 54) / 121][Stage 193:======================================>              (87 + 34) / 121][Stage 193:=================================================>   (112 + 9) / 121][Stage 193:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.088510296 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  207  OR  partitionIndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404676955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (63 + 57) / 120][Stage 194:================================>                    (73 + 47) / 120][Stage 194:========================================>            (91 + 29) / 120][Stage 194:====================================================>(118 + 2) / 120]                                                                                [Stage 195:============================>                        (65 + 56) / 121][Stage 195:================================>                    (74 + 47) / 121][Stage 195:==========================================>          (98 + 23) / 121][Stage 195:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.072807714 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  124  OR  partitionIndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.401417873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (58 + 55) / 113][Stage 196:============================>                        (61 + 52) / 113][Stage 196:====================================>                (77 + 36) / 113][Stage 196:============================================>        (95 + 18) / 113][Stage 196:====================================================>(112 + 1) / 113]                                                                                [Stage 197:===========================>                         (59 + 55) / 114][Stage 197:===============================>                     (67 + 47) / 114][Stage 197:=======================================>             (85 + 29) / 114][Stage 197:==============================================>     (102 + 12) / 114][Stage 197:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.076795529 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  36  OR  partitionIndex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389336685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:================================>                    (73 + 45) / 118][Stage 198:=====================================>               (83 + 35) / 118][Stage 198:============================================>        (98 + 20) / 118][Stage 198:=================================================>   (110 + 8) / 118][Stage 198:====================================================>(117 + 1) / 118]                                                                                [Stage 199:================================>                    (73 + 46) / 119][Stage 199:=================================>                   (75 + 44) / 119][Stage 199:======================================>              (86 + 33) / 119][Stage 199:===========================================>         (98 + 21) / 119][Stage 199:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.350980434 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 191 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353739039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===================================>                 (75 + 38) / 113][Stage 200:=========================================>           (88 + 25) / 113][Stage 200:================================================>    (104 + 9) / 113][Stage 200:==================================================>  (107 + 6) / 113][Stage 200:===================================================> (109 + 4) / 113][Stage 200:====================================================>(111 + 2) / 113]                                                                                [Stage 201:==================================>                  (75 + 39) / 114][Stage 201:========================================>            (87 + 27) / 114][Stage 201:============================================>        (95 + 19) / 114][Stage 201:================================================>    (105 + 9) / 114][Stage 201:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.247228305 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/24 21:43:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:49372) dropped. RpcEnv already stopped.
17/05/24 21:43:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:36354) dropped. RpcEnv already stopped.
17/05/24 21:43:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:49372) dropped. RpcEnv already stopped.
17/05/24 21:43:22 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:36354) dropped. RpcEnv already stopped.

real	9m59.654s
user	11m27.516s
sys	0m35.540s
