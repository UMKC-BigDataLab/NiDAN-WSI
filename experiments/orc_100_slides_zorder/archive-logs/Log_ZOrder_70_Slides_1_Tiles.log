Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 23:52:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:52:27 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:52:27 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:52:28 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 23:52:30 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:52:41 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524235230-0610).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.415776972 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:========>                                              (17 + 98) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:==========================================>            (90 + 26) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.724809483 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 2 AND partitionZIndex<=52", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=52,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.643907514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================================>                  (76 + 39) / 115][Stage 2:=====================================>                 (79 + 36) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:========================================>              (85 + 30) / 115][Stage 2:=============================================>         (95 + 20) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:====================================================>  (110 + 5) / 115][Stage 2:=====================================================> (111 + 4) / 115]                                                                                [Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:=============================================>         (96 + 20) / 116][Stage 3:===============================================>      (102 + 14) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:====================================================>  (110 + 6) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.257243005 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 02 AND partitionZIndex<=202", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=202,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.667458722 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (67 + 46) / 113][Stage 4:=================================>                     (69 + 44) / 113][Stage 4:====================================>                  (75 + 38) / 113][Stage 4:=====================================>                 (77 + 36) / 113][Stage 4:==========================================>            (88 + 25) / 113][Stage 4:===============================================>       (98 + 15) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:=====================================================> (110 + 3) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:==============================>                        (64 + 50) / 114][Stage 5:===================================>                   (74 + 40) / 114][Stage 5:======================================>                (79 + 35) / 114][Stage 5:============================================>          (93 + 21) / 114][Stage 5:===============================================>       (99 + 15) / 114][Stage 5:===================================================>   (107 + 7) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.279456566 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 18 AND partitionZIndex<=118", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=118,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.632392809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (54 + 61) / 115][Stage 6:==============================>                        (64 + 51) / 115][Stage 6:==================================>                    (72 + 43) / 115][Stage 6:====================================>                  (77 + 38) / 115][Stage 6:==========================================>            (89 + 26) / 115][Stage 6:==============================================>        (98 + 17) / 115][Stage 6:================================================>     (104 + 11) / 115][Stage 6:=================================================>    (105 + 10) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:==========================>                            (55 + 61) / 116][Stage 7:=================================>                     (71 + 45) / 116][Stage 7:===================================>                   (75 + 41) / 116][Stage 7:======================================>                (81 + 35) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:===================================================>   (108 + 8) / 116][Stage 7:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.474037112 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 88 AND partitionZIndex<=188", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=188,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.624148524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 60) / 120][Stage 8:============================>                          (63 + 57) / 120][Stage 8:==================================>                    (75 + 45) / 120][Stage 8:==========================================>            (92 + 28) / 120][Stage 8:============================================>          (97 + 23) / 120][Stage 8:==============================================>       (104 + 16) / 120][Stage 8:======================================================>(119 + 1) / 120]                                                                                [Stage 9:===========================>                           (60 + 61) / 121][Stage 9:===========================>                           (61 + 60) / 121][Stage 9:==============================>                        (67 + 54) / 121][Stage 9:========================================>              (90 + 31) / 121][Stage 9:==============================================>       (105 + 16) / 121][Stage 9:=====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.915256347 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 08 AND partitionZIndex<=208", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=208,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.61204654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (71 + 42) / 113][Stage 10:======================================>               (80 + 33) / 113][Stage 10:=========================================>            (87 + 26) / 113][Stage 10:============================================>         (94 + 19) / 113][Stage 10:=================================================>    (104 + 9) / 113][Stage 10:===================================================>  (107 + 6) / 113][Stage 10:====================================================> (110 + 3) / 113]                                                                                [Stage 11:=======================================>              (83 + 31) / 114][Stage 11:============================================>         (93 + 21) / 114][Stage 11:==============================================>       (98 + 16) / 114][Stage 11:================================================>    (104 + 10) / 114][Stage 11:==================================================>   (107 + 7) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.945537895 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 51 AND partitionZIndex<=151", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=151,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.661602597 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (55 + 58) / 113][Stage 12:============================>                         (59 + 54) / 113][Stage 12:================================>                     (67 + 46) / 113][Stage 12:=======================================>              (82 + 31) / 113][Stage 12:============================================>         (93 + 20) / 113][Stage 12:=================================================>    (104 + 9) / 113][Stage 12:====================================================> (109 + 4) / 113][Stage 12:====================================================> (110 + 3) / 113]                                                                                [Stage 13:===========================>                          (57 + 57) / 114][Stage 13:==============================>                       (64 + 50) / 114][Stage 13:=====================================>                (80 + 34) / 114][Stage 13:==============================================>      (100 + 14) / 114][Stage 13:=====================================================>(112 + 2) / 114][Stage 13:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.094893624 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 95 AND partitionZIndex<=195", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=195,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.499324359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (70 + 43) / 113][Stage 14:====================================>                 (76 + 37) / 113][Stage 14:===========================================>          (91 + 22) / 113][Stage 14:==============================================>       (98 + 15) / 113][Stage 14:==================================================>   (105 + 8) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:===================================>                  (74 + 40) / 114][Stage 15:========================================>             (86 + 28) / 114][Stage 15:=============================================>        (95 + 19) / 114][Stage 15:==============================================>       (99 + 15) / 114][Stage 15:================================================>    (104 + 10) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.734328693 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 1 AND partitionZIndex<=61", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=61,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.571658563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:=============================>                        (66 + 54) / 120][Stage 16:===================================>                  (79 + 41) / 120][Stage 16:=========================================>            (93 + 27) / 120][Stage 16:==============================================>      (106 + 14) / 120][Stage 16:==================================================>   (113 + 7) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:=============================>                        (66 + 55) / 121][Stage 17:======================================>               (87 + 34) / 121][Stage 17:================================================>    (110 + 11) / 121][Stage 17:===================================================>  (116 + 5) / 121][Stage 17:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.775567064 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 46 AND partitionZIndex<=146", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=146,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.47887245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (73 + 45) / 118][Stage 18:==================================>                   (76 + 42) / 118][Stage 18:=====================================>                (82 + 36) / 118][Stage 18:==========================================>           (92 + 26) / 118][Stage 18:=============================================>       (101 + 17) / 118][Stage 18:==================================================>   (110 + 8) / 118][Stage 18:====================================================> (114 + 4) / 118][Stage 18:=====================================================>(117 + 1) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:==================================>                   (75 + 44) / 119][Stage 19:=======================================>              (86 + 33) / 119][Stage 19:==========================================>           (94 + 25) / 119][Stage 19:=================================================>    (110 + 9) / 119][Stage 19:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.929610255 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 9 AND partitionZIndex<=89", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=89,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.523461865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=================================>                    (71 + 44) / 115][Stage 20:======================================>               (82 + 33) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:===============================================>     (102 + 13) / 115][Stage 20:====================================================> (111 + 4) / 115]                                                                                [Stage 21:===============================>                      (67 + 49) / 116][Stage 21:=======================================>              (84 + 32) / 116][Stage 21:===============================================>     (105 + 11) / 116][Stage 21:====================================================> (112 + 4) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.401990485 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2  AND partitionZIndex<=2", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=2,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478276389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:====================================>                 (80 + 38) / 118][Stage 22:===========================================>          (94 + 24) / 118][Stage 22:==============================================>      (103 + 15) / 118][Stage 22:==================================================>   (111 + 7) / 118][Stage 22:====================================================> (114 + 4) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:===================================>                  (78 + 41) / 119][Stage 23:========================================>             (90 + 29) / 119][Stage 23:=============================================>       (103 + 16) / 119][Stage 23:==================================================>   (111 + 8) / 119][Stage 23:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.049877612 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 27 AND partitionZIndex<=127", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=127,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.490796794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (71 + 44) / 115][Stage 24:==========================================>           (91 + 24) / 115][Stage 24:==============================================>      (100 + 15) / 115][Stage 24:===================================================>  (110 + 5) / 115]                                                                                [Stage 25:================================>                     (69 + 47) / 116][Stage 25:=======================================>              (84 + 32) / 116][Stage 25:==============================================>      (101 + 15) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.933986835 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 8 AND partitionZIndex<=78", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=78,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.483736771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==============================>                       (64 + 51) / 115][Stage 26:===============================>                      (68 + 47) / 115][Stage 26:=====================================>                (79 + 36) / 115][Stage 26:==============================================>       (99 + 16) / 115][Stage 26:===================================================>  (109 + 6) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:==============================>                       (66 + 50) / 116][Stage 27:====================================>                 (79 + 37) / 116][Stage 27:============================================>         (95 + 21) / 116][Stage 27:=================================================>    (107 + 9) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.160054353 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 85 AND partitionZIndex<=185", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=185,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.522901804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:===========================>                          (62 + 59) / 121][Stage 28:===============================>                      (70 + 51) / 121][Stage 28:=======================================>              (88 + 33) / 121][Stage 28:====================================================> (117 + 4) / 121]                                                                                [Stage 29:===========================>                          (62 + 60) / 122][Stage 29:=================================>                    (75 + 47) / 122][Stage 29:======================================>               (87 + 35) / 122][Stage 29:==================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.171143555 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 7 AND partitionZIndex<=97", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=97,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.434416312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (83 + 32) / 115][Stage 30:===========================================>          (92 + 23) / 115][Stage 30:===============================================>     (102 + 13) / 115][Stage 30:===================================================>  (110 + 5) / 115][Stage 30:====================================================> (111 + 4) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:=======================================>              (84 + 32) / 116][Stage 31:=========================================>            (90 + 26) / 116][Stage 31:==============================================>      (101 + 15) / 116][Stage 31:=================================================>    (107 + 9) / 116][Stage 31:===================================================>  (111 + 5) / 116][Stage 31:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.777855205 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 94 AND partitionZIndex<=194", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=194 AND partitionZIndex<=194,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464285543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=================================>                    (71 + 44) / 115][Stage 32:=========================================>            (88 + 27) / 115][Stage 32:================================================>    (105 + 10) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (70 + 46) / 116][Stage 33:======================================>               (82 + 34) / 116][Stage 33:===============================================>     (103 + 13) / 116]                                                                                Time elapsed: 2.549809573 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 09 AND partitionZIndex<=109", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=109,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.434382212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=====================================>                (80 + 35) / 115][Stage 34:==========================================>           (90 + 25) / 115][Stage 34:===============================================>     (104 + 11) / 115][Stage 34:====================================================> (111 + 4) / 115][Stage 34:====================================================> (112 + 3) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:========================================>             (87 + 29) / 116][Stage 35:==============================================>       (99 + 17) / 116][Stage 35:==================================================>   (109 + 7) / 116][Stage 35:====================================================> (112 + 4) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.488683719 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 16 AND partitionZIndex<=216", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=216,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.460251321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (70 + 43) / 113][Stage 36:====================================>                 (76 + 37) / 113][Stage 36:===========================================>          (92 + 21) / 113][Stage 36:==============================================>      (100 + 13) / 113][Stage 36:===================================================>  (107 + 6) / 113][Stage 36:=====================================================>(111 + 2) / 113][Stage 36:=====================================================>(112 + 1) / 113]                                                                                [Stage 37:==================================>                   (73 + 41) / 114][Stage 37:=======================================>              (83 + 31) / 114][Stage 37:=============================================>        (96 + 18) / 114][Stage 37:==================================================>   (106 + 8) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.294336588 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 5 AND partitionZIndex<=15", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=15,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.51778564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:===============================>                      (65 + 48) / 113][Stage 38:=======================================>              (83 + 30) / 113][Stage 38:===============================================>     (102 + 11) / 113][Stage 38:====================================================> (109 + 4) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:===========================>                          (59 + 55) / 114][Stage 39:==============================>                       (65 + 49) / 114][Stage 39:====================================>                 (77 + 37) / 114][Stage 39:==========================================>           (89 + 25) / 114][Stage 39:==================================================>   (107 + 7) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.542295073 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 5 AND partitionZIndex<=45", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=45,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.452429357 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:===================================>                  (78 + 40) / 118][Stage 40:============================================>        (100 + 18) / 118][Stage 40:=====================================================>(116 + 2) / 118]                                                                                [Stage 41:==================================>                   (77 + 42) / 119][Stage 41:=======================================>              (88 + 31) / 119][Stage 41:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 2.832731764 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 14 AND partitionZIndex<=214", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=214,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453077557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:====================================>                 (77 + 36) / 113][Stage 42:=========================================>            (87 + 26) / 113][Stage 42:=============================================>        (96 + 17) / 113][Stage 42:==================================================>   (106 + 7) / 113]                                                                                [Stage 43:====================================>                 (76 + 38) / 114][Stage 43:=========================================>            (88 + 26) / 114][Stage 43:================================================>    (104 + 10) / 114][Stage 43:==================================================>   (107 + 7) / 114][Stage 43:=====================================================>(112 + 2) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.241508024 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 43 AND partitionZIndex<=243", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=243,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.476279344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==================================>                   (73 + 42) / 115][Stage 44:==========================================>           (91 + 24) / 115][Stage 44:===================================================>  (109 + 6) / 115]                                                                                [Stage 45:===================================>                  (77 + 39) / 116][Stage 45:============================================>         (95 + 21) / 116][Stage 45:==================================================>   (108 + 8) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.824170717 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 99 AND partitionZIndex<=199", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=199,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.52218232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (70 + 45) / 115][Stage 46:=======================================>              (84 + 31) / 115][Stage 46:============================================>         (94 + 21) / 115][Stage 46:==================================================>   (108 + 7) / 115]                                                                                [Stage 47:=================================>                    (72 + 44) / 116][Stage 47:==========================================>           (92 + 24) / 116][Stage 47:==============================================>      (102 + 14) / 116][Stage 47:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.146147946 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 4 AND partitionZIndex<=84", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=84,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.441956893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:=================================>                    (72 + 43) / 115][Stage 48:==========================================>           (91 + 24) / 115][Stage 48:================================================>    (105 + 10) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(113 + 2) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:===============================>                      (67 + 49) / 116][Stage 49:===================================>                  (77 + 39) / 116][Stage 49:==========================================>           (92 + 24) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.331733748 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 74 AND partitionZIndex<=174", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=174,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438980351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:=================================>                    (73 + 45) / 118][Stage 50:=====================================>                (82 + 36) / 118][Stage 50:=========================================>            (91 + 27) / 118][Stage 50:===============================================>     (106 + 12) / 118][Stage 50:====================================================> (115 + 3) / 118][Stage 50:=====================================================>(117 + 1) / 118]                                                                                [Stage 51:=================================>                    (73 + 46) / 119][Stage 51:==================================>                   (76 + 43) / 119][Stage 51:========================================>             (89 + 30) / 119][Stage 51:===============================================>     (107 + 12) / 119][Stage 51:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.37403678 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 28 AND partitionZIndex<=228", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=228,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386245813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (80 + 35) / 115][Stage 52:======================================>               (82 + 33) / 115][Stage 52:==========================================>           (91 + 24) / 115][Stage 52:================================================>    (105 + 10) / 115][Stage 52:=====================================================>(113 + 2) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:========================================>             (88 + 28) / 116][Stage 53:==============================================>       (99 + 17) / 116][Stage 53:===================================================>  (110 + 6) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.895819334 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 3 AND partitionZIndex<=13", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=13,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.446733693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:================================>                     (69 + 46) / 115][Stage 54:=======================================>              (85 + 30) / 115][Stage 54:==============================================>      (101 + 14) / 115][Stage 54:===================================================>  (109 + 6) / 115][Stage 54:=====================================================>(114 + 1) / 115]                                                                                [Stage 55:================================>                     (70 + 46) / 116][Stage 55:========================================>             (87 + 29) / 116][Stage 55:=============================================>        (97 + 19) / 116][Stage 55:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.986831023 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 1 AND partitionZIndex<=91", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=91 AND partitionZIndex<=91,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.425748966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:==================================>                   (76 + 42) / 118][Stage 56:=====================================>                (82 + 36) / 118][Stage 56:============================================>         (97 + 21) / 118][Stage 56:================================================>    (107 + 11) / 118][Stage 56:=====================================================>(116 + 2) / 118][Stage 56:=====================================================>(117 + 1) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:===================================>                  (78 + 41) / 119][Stage 57:====================================>                 (81 + 38) / 119][Stage 57:========================================>             (90 + 29) / 119][Stage 57:==============================================>      (105 + 14) / 119][Stage 57:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.652115049 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 67 AND partitionZIndex<=167", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=167,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.419950723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:=================================>                    (74 + 44) / 118][Stage 58:====================================>                 (80 + 38) / 118][Stage 58:=========================================>            (90 + 28) / 118][Stage 58:==============================================>      (104 + 14) / 118][Stage 58:=====================================================>(117 + 1) / 118]                                                                                [Stage 59:=================================>                    (74 + 45) / 119][Stage 59:===================================>                  (79 + 40) / 119][Stage 59:======================================>               (85 + 34) / 119][Stage 59:========================================>             (90 + 29) / 119][Stage 59:===============================================>     (107 + 12) / 119]                                                                                Time elapsed: 3.447038297 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 35 AND partitionZIndex<=235", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=235,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.423449985 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=================================>                    (73 + 45) / 118][Stage 60:=======================================>              (86 + 32) / 118][Stage 60:===============================================>     (106 + 12) / 118][Stage 60:=====================================================>(117 + 1) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:===================================>                  (79 + 40) / 119][Stage 61:===========================================>          (95 + 24) / 119][Stage 61:===================================================>  (113 + 6) / 119][Stage 61:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.047770078 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 42 AND partitionZIndex<=242", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=242,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408974679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:=================================>                    (74 + 44) / 118][Stage 62:=====================================>                (82 + 36) / 118][Stage 62:========================================>             (89 + 29) / 118][Stage 62:==============================================>      (103 + 15) / 118][Stage 62:====================================================> (114 + 4) / 118]                                                                                [Stage 63:=================================>                    (74 + 45) / 119][Stage 63:======================================>               (84 + 35) / 119][Stage 63:===========================================>          (95 + 24) / 119][Stage 63:==================================================>   (112 + 7) / 119][Stage 63:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.423143063 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 5 AND partitionZIndex<=65", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=65,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397685935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=================================>                    (71 + 42) / 113][Stage 64:=======================================>              (82 + 31) / 113][Stage 64:===========================================>          (90 + 23) / 113][Stage 64:==============================================>       (97 + 16) / 113][Stage 64:===================================================>  (107 + 6) / 113][Stage 64:====================================================> (109 + 4) / 113][Stage 64:=====================================================>(111 + 2) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:====================================>                 (78 + 36) / 114][Stage 65:=========================================>            (87 + 27) / 114][Stage 65:=============================================>        (95 + 19) / 114][Stage 65:==================================================>   (106 + 8) / 114][Stage 65:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.574514733 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 19 AND partitionZIndex<=219", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=219,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.4143581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=====================================>                (79 + 34) / 113][Stage 66:=========================================>            (86 + 27) / 113][Stage 66:==============================================>       (97 + 16) / 113][Stage 66:==================================================>   (106 + 7) / 113]                                                                                [Stage 67:=====================================>                (80 + 34) / 114][Stage 67:=============================================>        (95 + 19) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:====================================================> (111 + 3) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.103755011 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 43 AND partitionZIndex<=143", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=143,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.417623081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (71 + 47) / 118][Stage 68:==================================>                   (76 + 42) / 118][Stage 68:==========================================>           (92 + 26) / 118][Stage 68:=================================================>    (109 + 9) / 118][Stage 68:=====================================================>(117 + 1) / 118]                                                                                [Stage 69:=================================>                    (73 + 46) / 119][Stage 69:==================================>                   (76 + 43) / 119][Stage 69:============================================>         (97 + 22) / 119][Stage 69:===============================================>     (107 + 12) / 119][Stage 69:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.058378833 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 4 AND partitionZIndex<=54", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=54,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.429861205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=================================>                    (74 + 44) / 118][Stage 70:===================================>                  (78 + 40) / 118][Stage 70:=======================================>              (86 + 32) / 118][Stage 70:============================================>        (100 + 18) / 118][Stage 70:===================================================>  (113 + 5) / 118]                                                                                [Stage 71:==================================>                   (75 + 44) / 119][Stage 71:=====================================>                (82 + 37) / 119][Stage 71:=======================================>              (86 + 33) / 119][Stage 71:===========================================>          (95 + 24) / 119][Stage 71:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.444497742 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 48 AND partitionZIndex<=148", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=148,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398093154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (80 + 35) / 115][Stage 72:========================================>             (86 + 29) / 115][Stage 72:==============================================>      (100 + 15) / 115][Stage 72:===================================================>  (110 + 5) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:==========================================>           (92 + 24) / 116][Stage 73:==============================================>      (101 + 15) / 116][Stage 73:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.812338107 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9  AND partitionZIndex<=9", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=9,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393522852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (78 + 35) / 113][Stage 74:==========================================>           (89 + 24) / 113][Stage 74:==============================================>       (97 + 16) / 113][Stage 74:=================================================>    (104 + 9) / 113][Stage 74:====================================================> (110 + 3) / 113]                                                                                [Stage 75:=====================================>                (80 + 34) / 114][Stage 75:============================================>         (93 + 21) / 114][Stage 75:===============================================>     (102 + 12) / 114][Stage 75:====================================================> (110 + 4) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.380016676 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 76 AND partitionZIndex<=176", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=176,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.426799864 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (70 + 45) / 115][Stage 76:=====================================>                (79 + 36) / 115][Stage 76:=========================================>            (89 + 26) / 115][Stage 76:===============================================>     (104 + 11) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=================================>                    (73 + 43) / 116][Stage 77:=========================================>            (90 + 26) / 116][Stage 77:==============================================>      (101 + 15) / 116][Stage 77:==================================================>   (108 + 8) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.050964604 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 09 AND partitionZIndex<=209", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=209,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.41955372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (74 + 44) / 118][Stage 78:====================================>                 (80 + 38) / 118][Stage 78:========================================>             (89 + 29) / 118][Stage 78:==============================================>      (104 + 14) / 118][Stage 78:===================================================>  (113 + 5) / 118][Stage 78:=====================================================>(117 + 1) / 118]                                                                                [Stage 79:=================================>                    (73 + 46) / 119][Stage 79:===================================>                  (78 + 41) / 119][Stage 79:========================================>             (90 + 29) / 119][Stage 79:=============================================>       (102 + 17) / 119][Stage 79:=================================================>    (110 + 9) / 119][Stage 79:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.728632148 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 7 AND partitionZIndex<=77", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=77,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397758913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=====================================>                (81 + 37) / 118][Stage 80:==========================================>           (92 + 26) / 118][Stage 80:===============================================>     (106 + 12) / 118][Stage 80:=====================================================>(116 + 2) / 118]                                                                                [Stage 81:==================================>                   (77 + 42) / 119][Stage 81:=======================================>              (87 + 32) / 119][Stage 81:============================================>        (100 + 19) / 119][Stage 81:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.303972423 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 8 AND partitionZIndex<=68", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=68,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.417355899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==============================>                       (65 + 50) / 115][Stage 82:====================================>                 (78 + 37) / 115][Stage 82:==========================================>           (90 + 25) / 115][Stage 82:===============================================>     (104 + 11) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:=================================>                    (73 + 43) / 116][Stage 83:========================================>             (87 + 29) / 116][Stage 83:============================================>         (96 + 20) / 116][Stage 83:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.837344626 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 22 AND partitionZIndex<=222", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=222,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406779696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==============================>                       (66 + 49) / 115][Stage 84:====================================>                 (77 + 38) / 115][Stage 84:============================================>         (95 + 20) / 115][Stage 84:===============================================>     (103 + 12) / 115]                                                                                [Stage 85:=================================>                    (71 + 45) / 116][Stage 85:=========================================>            (89 + 27) / 116][Stage 85:================================================>    (106 + 10) / 116][Stage 85:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.875509637 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 06 AND partitionZIndex<=106", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=106,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.54177878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==========================>                           (60 + 61) / 121][Stage 86:=============================>                        (67 + 54) / 121][Stage 86:======================================>               (86 + 35) / 121][Stage 86:===============================================>     (109 + 12) / 121]                                                                                [Stage 87:===========================>                          (62 + 60) / 122][Stage 87:==============================>                       (68 + 54) / 122][Stage 87:====================================>                 (83 + 39) / 122][Stage 87:==============================================>      (107 + 15) / 122][Stage 87:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.097068529 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 04 AND partitionZIndex<=104", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=104,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382300547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:>                                                       (0 + 0) / 113][Stage 88:===================================>                  (74 + 39) / 113][Stage 88:==========================================>           (88 + 25) / 113][Stage 88:==============================================>      (100 + 13) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:=======================================>              (84 + 30) / 114][Stage 89:============================================>         (93 + 21) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.928379191 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 61 AND partitionZIndex<=161", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=161,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386278128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (71 + 42) / 113][Stage 90:======================================>               (80 + 33) / 113][Stage 90:==========================================>           (89 + 24) / 113][Stage 90:===============================================>     (101 + 12) / 113][Stage 90:====================================================> (109 + 4) / 113][Stage 90:=====================================================>(111 + 2) / 113]                                                                                [Stage 91:======================================>               (82 + 32) / 114][Stage 91:=============================================>        (96 + 18) / 114][Stage 91:===============================================>     (103 + 11) / 114][Stage 91:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.240773392 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 64 AND partitionZIndex<=164", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=164,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.439729266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==========================>                           (60 + 61) / 121][Stage 92:===========================>                          (61 + 60) / 121][Stage 92:==================================>                   (77 + 44) / 121][Stage 92:==========================================>           (96 + 25) / 121][Stage 92:==================================================>   (114 + 7) / 121]                                                                                [Stage 93:===========================>                          (61 + 61) / 122][Stage 93:=============================>                        (66 + 56) / 122][Stage 93:======================================>               (86 + 36) / 122][Stage 93:==============================================>      (108 + 14) / 122][Stage 93:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.031615381 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 10 AND partitionZIndex<=210", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=210 AND partitionZIndex<=210,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.408386075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:=============================>                        (62 + 51) / 113][Stage 94:====================================>                 (77 + 36) / 113][Stage 94:============================================>         (93 + 20) / 113][Stage 94:===================================================>  (108 + 5) / 113]                                                                                [Stage 95:=============================>                        (62 + 52) / 114][Stage 95:=====================================>                (79 + 35) / 114][Stage 95:============================================>         (93 + 21) / 114][Stage 95:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.082668017 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 90 AND partitionZIndex<=190", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=190,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.434486683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:===========================>                          (62 + 59) / 121][Stage 96:=================================>                    (74 + 47) / 121][Stage 96:===========================================>          (98 + 23) / 121][Stage 96:=====================================================>(119 + 2) / 121]                                                                                [Stage 97:============================>                         (64 + 58) / 122][Stage 97:=================================>                    (76 + 46) / 122][Stage 97:=========================================>            (94 + 28) / 122][Stage 97:================================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.049648524 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 96 AND partitionZIndex<=196", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=196 AND partitionZIndex<=196,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.432210962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 60) / 121][Stage 98:=================================>                    (76 + 45) / 121][Stage 98:==========================================>           (96 + 25) / 121][Stage 98:================================================>    (111 + 10) / 121]                                                                                [Stage 99:===========================>                          (62 + 60) / 122][Stage 99:===============================>                      (72 + 50) / 122][Stage 99:=========================================>            (94 + 28) / 122][Stage 99:==================================================>   (114 + 8) / 122][Stage 99:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.145058893 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 05 AND partitionZIndex<=105", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=105,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.352733176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=======================================>             (85 + 30) / 115][Stage 100:=========================================>           (90 + 25) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:===================================================> (112 + 3) / 115]                                                                                [Stage 101:=====================================>               (83 + 33) / 116][Stage 101:==========================================>          (92 + 24) / 116][Stage 101:=================================================>   (108 + 8) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.86746334 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 34 AND partitionZIndex<=234", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=234,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39654927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (70 + 45) / 115][Stage 102:=======================================>             (85 + 30) / 115][Stage 102:==============================================>     (103 + 12) / 115][Stage 102:==================================================>  (110 + 5) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:==================================>                  (76 + 40) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:================================================>    (107 + 9) / 116][Stage 103:==================================================>  (111 + 5) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.457470672 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 2 AND partitionZIndex<=32", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=32,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.424955719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (63 + 58) / 121][Stage 104:===============================>                     (72 + 49) / 121][Stage 104:========================================>            (93 + 28) / 121][Stage 104:===================================================> (118 + 3) / 121]                                                                                [Stage 105:==========================>                          (61 + 61) / 122][Stage 105:================================>                    (74 + 48) / 122][Stage 105:=========================================>           (96 + 26) / 122][Stage 105:=================================================>   (115 + 7) / 122][Stage 105:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.15285111 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 77 AND partitionZIndex<=177", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=177,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.432766401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 61) / 121][Stage 106:=============================>                       (67 + 54) / 121][Stage 106:====================================>                (84 + 37) / 121][Stage 106:===============================================>    (110 + 11) / 121][Stage 106:===================================================> (118 + 3) / 121]                                                                                [Stage 107:===========================>                         (64 + 58) / 122][Stage 107:=============================>                       (69 + 53) / 122][Stage 107:====================================>                (85 + 37) / 122][Stage 107:============================================>       (105 + 17) / 122]                                                                                Time elapsed: 3.201607323 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 08 AND partitionZIndex<=108", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=108,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.433633641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:==============================>                      (70 + 50) / 120][Stage 108:==========================================>          (97 + 23) / 120][Stage 108:====================================================>(119 + 1) / 120]                                                                                [Stage 109:===========================>                         (63 + 58) / 121][Stage 109:================================>                    (74 + 47) / 121][Stage 109:=========================================>           (94 + 27) / 121][Stage 109:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.941799558 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 33 AND partitionZIndex<=233", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=233,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372895741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:===================================>                 (79 + 39) / 118][Stage 110:===========================================>         (97 + 21) / 118][Stage 110:=================================================>   (110 + 8) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:====================================>                (81 + 38) / 119][Stage 111:=========================================>           (93 + 26) / 119][Stage 111:===============================================>    (109 + 10) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.989963091 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 04 AND partitionZIndex<=204", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=204,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40209309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=================================>                   (74 + 44) / 118][Stage 112:===================================>                 (78 + 40) / 118][Stage 112:========================================>            (90 + 28) / 118][Stage 112:=============================================>      (103 + 15) / 118][Stage 112:====================================================>(116 + 2) / 118]                                                                                [Stage 113:================================>                    (73 + 46) / 119][Stage 113:===================================>                 (79 + 40) / 119][Stage 113:======================================>              (86 + 33) / 119][Stage 113:==========================================>          (95 + 24) / 119][Stage 113:===============================================>    (109 + 10) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.570479958 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 5 AND partitionZIndex<=55", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=55,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.501016823 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:===========================>                         (59 + 54) / 113][Stage 114:=====================================>               (81 + 32) / 113][Stage 114:================================================>    (104 + 9) / 113][Stage 114:===================================================> (110 + 3) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:================================>                    (70 + 44) / 114][Stage 115:=====================================>               (81 + 33) / 114][Stage 115:=============================================>       (97 + 17) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.932058509 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 5 AND partitionZIndex<=85", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=85,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.37233598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:======================================>              (84 + 31) / 115][Stage 116:=============================================>       (99 + 16) / 115][Stage 116:===================================================> (112 + 3) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:========================================>            (89 + 27) / 116][Stage 117:=============================================>      (102 + 14) / 116][Stage 117:==================================================>  (111 + 5) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.846265679 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 17 AND partitionZIndex<=117", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=117,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.344199151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:=========================================>           (89 + 26) / 115][Stage 118:=============================================>      (101 + 14) / 115][Stage 118:===================================================> (112 + 3) / 115]                                                                                [Stage 119:======================================>              (84 + 32) / 116][Stage 119:===========================================>         (96 + 20) / 116][Stage 119:===================================================> (112 + 4) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.891397212 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 31 AND partitionZIndex<=231", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=231,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.416908375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 61) / 121][Stage 120:============================>                        (65 + 56) / 121][Stage 120:=================================>                   (77 + 44) / 121][Stage 120:===========================================>        (102 + 19) / 121][Stage 120:==================================================>  (115 + 6) / 121]                                                                                [Stage 121:==========================>                          (62 + 60) / 122][Stage 121:==============================>                      (70 + 52) / 122][Stage 121:==========================================>          (98 + 24) / 122][Stage 121:==============================================>     (110 + 12) / 122][Stage 121:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.287519318 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 9 AND partitionZIndex<=99", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=99,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411689152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:===============================>                     (71 + 50) / 121][Stage 122:======================================>              (89 + 32) / 121][Stage 122:=================================================>   (112 + 9) / 121]                                                                                [Stage 123:==========================>                          (61 + 61) / 122][Stage 123:==============================>                      (71 + 51) / 122][Stage 123:=======================================>             (91 + 31) / 122][Stage 123:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 2.954414129 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5  AND partitionZIndex<=5", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=5,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40772493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 61) / 121][Stage 124:=============================>                       (67 + 54) / 121][Stage 124:=======================================>             (90 + 31) / 121][Stage 124:=================================================>   (113 + 8) / 121]                                                                                [Stage 125:==========================>                          (61 + 61) / 122][Stage 125:=============================>                       (67 + 55) / 122][Stage 125:==================================>                  (80 + 42) / 122][Stage 125:==============================================>     (109 + 13) / 122][Stage 125:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.091471351 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 1 AND partitionZIndex<=11", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=11,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.350033632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:======================================>              (83 + 32) / 115][Stage 126:=======================================>             (86 + 29) / 115][Stage 126:==============================================>     (102 + 13) / 115][Stage 126:===================================================> (111 + 4) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:=====================================>               (82 + 34) / 116][Stage 127:========================================>            (88 + 28) / 116][Stage 127:===============================================>    (105 + 11) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.395114366 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 78 AND partitionZIndex<=178", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=178,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397252207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===================================>                 (76 + 39) / 115][Stage 128:========================================>            (87 + 28) / 115][Stage 128:===============================================>    (105 + 10) / 115][Stage 128:===================================================> (112 + 3) / 115]                                                                                [Stage 129:=====================================>               (82 + 34) / 116][Stage 129:============================================>        (98 + 18) / 116][Stage 129:===============================================>    (105 + 11) / 116][Stage 129:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.861948614 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 89 AND partitionZIndex<=189", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=189,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392451706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===================================>                 (76 + 39) / 115][Stage 130:============================================>        (97 + 18) / 115][Stage 130:================================================>    (106 + 9) / 115][Stage 130:==================================================>  (110 + 5) / 115][Stage 130:====================================================>(114 + 1) / 115]                                                                                [Stage 131:==============================>                      (67 + 49) / 116][Stage 131:====================================>                (80 + 36) / 116][Stage 131:============================================>        (97 + 19) / 116][Stage 131:=================================================>   (108 + 8) / 116][Stage 131:====================================================>(114 + 2) / 116][Stage 131:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.242893554 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 7 AND partitionZIndex<=87", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=87,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394160446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===============================>                     (68 + 47) / 115][Stage 132:===================================>                 (78 + 37) / 115][Stage 132:==========================================>          (93 + 22) / 115][Stage 132:=================================================>   (107 + 8) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:===============================>                     (69 + 47) / 116][Stage 133:=====================================>               (81 + 35) / 116][Stage 133:==========================================>          (94 + 22) / 116][Stage 133:==============================================>     (103 + 13) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.039510766 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 0 AND partitionZIndex<=50", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=50,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421333973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 61) / 121][Stage 134:=============================>                       (68 + 53) / 121][Stage 134:====================================>                (84 + 37) / 121][Stage 134:=================================================>   (113 + 8) / 121][Stage 134:====================================================>(119 + 2) / 121]                                                                                [Stage 135:==========================>                          (62 + 60) / 122][Stage 135:=================================>                   (77 + 45) / 122][Stage 135:=========================================>           (96 + 26) / 122][Stage 135:=================================================>   (114 + 8) / 122][Stage 135:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.300796948 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 57 AND partitionZIndex<=157", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=157,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396862566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:============================>                        (61 + 52) / 113][Stage 136:================================>                    (69 + 44) / 113][Stage 136:========================================>            (87 + 26) / 113][Stage 136:===================================================> (109 + 4) / 113]                                                                                [Stage 137:=============================>                       (63 + 51) / 114][Stage 137:===================================>                 (77 + 37) / 114][Stage 137:==============================================>     (103 + 11) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.93403349 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 12 AND partitionZIndex<=212", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=212,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392309644 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (58 + 55) / 113][Stage 138:=============================>                       (63 + 50) / 113][Stage 138:================================>                    (70 + 43) / 113][Stage 138:================================================>    (104 + 9) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===========================>                         (59 + 55) / 114][Stage 139:==============================>                      (66 + 48) / 114][Stage 139:======================================>              (82 + 32) / 114][Stage 139:=============================================>       (98 + 16) / 114][Stage 139:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.125607129 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 41 AND partitionZIndex<=141", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=141,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406255948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 60) / 120][Stage 140:===========================>                         (62 + 58) / 120][Stage 140:===================================>                 (81 + 39) / 120][Stage 140:============================================>       (103 + 17) / 120][Stage 140:====================================================>(118 + 2) / 120]                                                                                [Stage 141:============================>                        (66 + 55) / 121][Stage 141:==================================>                  (78 + 43) / 121][Stage 141:=========================================>           (94 + 27) / 121][Stage 141:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.012660091 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 11 AND partitionZIndex<=211", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=211,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398183385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (59 + 54) / 113][Stage 142:=================================>                   (72 + 41) / 113][Stage 142:============================================>        (95 + 18) / 113][Stage 142:===================================================> (110 + 3) / 113]                                                                                [Stage 143:============================>                        (62 + 52) / 114][Stage 143:===================================>                 (76 + 38) / 114][Stage 143:==============================================>     (103 + 11) / 114][Stage 143:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.070010886 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 33 AND partitionZIndex<=133", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=133,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.345476689 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=====================================>               (81 + 34) / 115][Stage 144:========================================>            (87 + 28) / 115][Stage 144:===============================================>    (105 + 10) / 115][Stage 144:===================================================> (111 + 4) / 115]                                                                                [Stage 145:======================================>              (85 + 31) / 116][Stage 145:==========================================>          (92 + 24) / 116][Stage 145:==============================================>     (103 + 13) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.727968177 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 5 AND partitionZIndex<=35", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=35,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404240067 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:============================>                        (65 + 56) / 121][Stage 146:==================================>                  (79 + 42) / 121][Stage 146:==============================================>     (108 + 13) / 121][Stage 146:====================================================>(119 + 2) / 121]                                                                                [Stage 147:===========================>                         (64 + 58) / 122][Stage 147:================================>                    (74 + 48) / 122][Stage 147:=======================================>             (92 + 30) / 122][Stage 147:=================================================>   (114 + 8) / 122][Stage 147:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.276731648 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 9 AND partitionZIndex<=39", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=39,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38257754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (71 + 44) / 115][Stage 148:=====================================>               (82 + 33) / 115][Stage 148:=============================================>       (99 + 16) / 115][Stage 148:=================================================>   (108 + 7) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:================================>                    (71 + 45) / 116][Stage 149:======================================>              (84 + 32) / 116][Stage 149:============================================>        (97 + 19) / 116][Stage 149:==================================================>  (111 + 5) / 116][Stage 149:===================================================> (112 + 4) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.346853048 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 25 AND partitionZIndex<=225", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=225,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411334108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:==============================>                      (70 + 50) / 120][Stage 150:======================================>              (87 + 33) / 120][Stage 150:=============================================>      (106 + 14) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:===============================>                     (71 + 50) / 121][Stage 151:=====================================>               (86 + 35) / 121][Stage 151:=============================================>      (107 + 14) / 121]                                                                                Time elapsed: 2.884462041 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 6 AND partitionZIndex<=36", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=36,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38230452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:=================================>                   (71 + 42) / 113][Stage 152:=======================================>             (84 + 29) / 113][Stage 152:===========================================>         (93 + 20) / 113][Stage 152:================================================>    (104 + 9) / 113][Stage 152:===================================================> (110 + 3) / 113]                                                                                [Stage 153:====================================>                (79 + 35) / 114][Stage 153:===========================================>         (94 + 20) / 114][Stage 153:==============================================>     (101 + 13) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.2052673 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 82 AND partitionZIndex<=182", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=182,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.41835607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 61) / 121][Stage 154:===========================>                         (62 + 59) / 121][Stage 154:==================================>                  (79 + 42) / 121][Stage 154:============================================>       (103 + 18) / 121][Stage 154:=================================================>   (113 + 8) / 121]                                                                                [Stage 155:===========================>                         (64 + 58) / 122][Stage 155:==============================>                      (70 + 52) / 122][Stage 155:===========================================>        (102 + 20) / 122][Stage 155:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.197536776 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 49 AND partitionZIndex<=149", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=149,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.344170767 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:====================================>                (79 + 36) / 115][Stage 156:========================================>            (87 + 28) / 115][Stage 156:==============================================>     (102 + 13) / 115][Stage 156:==================================================>  (110 + 5) / 115]                                                                                [Stage 157:=======================================>             (86 + 30) / 116][Stage 157:============================================>        (97 + 19) / 116][Stage 157:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.637128879 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4  AND partitionZIndex<=4", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=4,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372486156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (73 + 45) / 118][Stage 158:======================================>              (86 + 32) / 118][Stage 158:===============================================>    (107 + 11) / 118][Stage 158:===================================================> (115 + 3) / 118]                                                                                [Stage 159:================================>                    (73 + 46) / 119][Stage 159:====================================>                (81 + 38) / 119][Stage 159:=============================================>      (103 + 16) / 119][Stage 159:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.976741124 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 0 AND partitionZIndex<=10", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=10,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368784634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:====================================>                (82 + 36) / 118][Stage 160:=========================================>           (93 + 25) / 118][Stage 160:==================================================>  (113 + 5) / 118][Stage 160:====================================================>(117 + 1) / 118]                                                                                [Stage 161:================================>                    (73 + 46) / 119][Stage 161:==================================>                  (78 + 41) / 119][Stage 161:========================================>            (90 + 29) / 119][Stage 161:==============================================>     (106 + 13) / 119]                                                                                Time elapsed: 3.024575016 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 4 AND partitionZIndex<=64", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=64,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.513212459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===============================>                     (71 + 49) / 120][Stage 162:=====================================>               (84 + 36) / 120][Stage 162:==================================================>  (115 + 5) / 120][Stage 162:====================================================>(118 + 2) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:=============================>                       (68 + 53) / 121][Stage 163:======================================>              (88 + 33) / 121][Stage 163:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 2.966052717 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 7 AND partitionZIndex<=47", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=47,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404575485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:===========================>                         (63 + 57) / 120][Stage 164:=====================================>               (84 + 36) / 120][Stage 164:============================================>       (103 + 17) / 120][Stage 164:===================================================> (117 + 3) / 120]                                                                                [Stage 165:============================>                        (65 + 56) / 121][Stage 165:====================================>                (83 + 38) / 121][Stage 165:===========================================>        (101 + 20) / 121][Stage 165:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.044304899 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 21 AND partitionZIndex<=221", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=221,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.363791012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (79 + 34) / 113][Stage 166:===========================================>         (92 + 21) / 113][Stage 166:==============================================>     (102 + 11) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:===================================>                 (76 + 38) / 114][Stage 167:=========================================>           (90 + 24) / 114][Stage 167:==============================================>      (99 + 15) / 114][Stage 167:==================================================>  (109 + 5) / 114][Stage 167:===================================================> (111 + 3) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.361128054 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 1 AND partitionZIndex<=71", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=71,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.351803189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (84 + 31) / 115][Stage 168:===========================================>         (95 + 20) / 115][Stage 168:=================================================>   (107 + 8) / 115][Stage 168:===================================================> (112 + 3) / 115]                                                                                [Stage 169:======================================>              (85 + 31) / 116][Stage 169:=============================================>       (99 + 17) / 116][Stage 169:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.747268264 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 9 AND partitionZIndex<=59", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=59,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.347789467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:=====================================>               (82 + 33) / 115][Stage 170:===========================================>         (94 + 21) / 115][Stage 170:===============================================>    (104 + 11) / 115][Stage 170:==================================================>  (109 + 6) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:=======================================>             (86 + 30) / 116][Stage 171:===========================================>         (96 + 20) / 116][Stage 171:==============================================>     (103 + 13) / 116][Stage 171:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.256424099 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 75 AND partitionZIndex<=175", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=175,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376465715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:======================================>              (85 + 33) / 118][Stage 172:==========================================>          (94 + 24) / 118][Stage 172:====================================================>(116 + 2) / 118]                                                                                [Stage 173:=================================>                   (75 + 44) / 119][Stage 173:=====================================>               (85 + 34) / 119][Stage 173:============================================>       (102 + 17) / 119][Stage 173:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.880318942 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 0 AND partitionZIndex<=90", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=90,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.3920937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:============================>                        (60 + 53) / 113][Stage 174:===============================>                     (67 + 46) / 113][Stage 174:=======================================>             (84 + 29) / 113][Stage 174:===============================================>    (103 + 10) / 113]                                                                                [Stage 175:===========================>                         (60 + 54) / 114][Stage 175:================================>                    (69 + 45) / 114][Stage 175:========================================>            (87 + 27) / 114][Stage 175:==============================================>     (103 + 11) / 114][Stage 175:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.058261274 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 8 AND partitionZIndex<=48", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=48,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405414964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:====================================>                (79 + 36) / 115][Stage 176:==========================================>          (92 + 23) / 115][Stage 176:=================================================>   (107 + 8) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:====================================>                (80 + 36) / 116][Stage 177:=============================================>       (99 + 17) / 116][Stage 177:===================================================> (113 + 3) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.048078189 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 9 AND partitionZIndex<=19", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=19,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409214944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:============================>                        (65 + 56) / 121][Stage 178:====================================>                (84 + 37) / 121][Stage 178:===============================================>    (111 + 10) / 121][Stage 178:====================================================>(120 + 1) / 121]                                                                                [Stage 179:===========================>                         (63 + 59) / 122][Stage 179:===============================>                     (73 + 49) / 122][Stage 179:=========================================>           (96 + 26) / 122][Stage 179:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.037262085 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 20 AND partitionZIndex<=220", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=220,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.339069863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:======================================>              (84 + 31) / 115][Stage 180:=========================================>           (90 + 25) / 115][Stage 180:=============================================>      (101 + 14) / 115][Stage 180:====================================================>(113 + 2) / 115]                                                                                [Stage 181:======================================>              (85 + 31) / 116][Stage 181:============================================>        (98 + 18) / 116][Stage 181:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.775717423 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 44 AND partitionZIndex<=244", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=244,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393986159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (77 + 36) / 113][Stage 182:==========================================>          (91 + 22) / 113][Stage 182:================================================>    (104 + 9) / 113][Stage 182:===================================================> (110 + 3) / 113]                                                                                [Stage 183:======================================>              (83 + 31) / 114][Stage 183:============================================>        (96 + 18) / 114][Stage 183:===============================================>    (104 + 10) / 114][Stage 183:==================================================>  (109 + 5) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.96735348 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 29 AND partitionZIndex<=129", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=129,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.424035868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (60 + 61) / 121][Stage 184:==========================>                          (61 + 60) / 121][Stage 184:==================================>                  (79 + 42) / 121][Stage 184:========================================>            (92 + 29) / 121][Stage 184:==================================================>  (116 + 5) / 121]                                                                                [Stage 185:==========================>                          (61 + 61) / 122][Stage 185:==============================>                      (70 + 52) / 122][Stage 185:=======================================>             (90 + 32) / 122][Stage 185:=============================================>      (107 + 15) / 122]                                                                                Time elapsed: 2.90830108 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 07 AND partitionZIndex<=207", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=207,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387994077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (58 + 55) / 113][Stage 186:=============================>                       (63 + 50) / 113][Stage 186:=====================================>               (79 + 34) / 113][Stage 186:==============================================>      (99 + 14) / 113][Stage 186:====================================================>(112 + 1) / 113]                                                                                [Stage 187:============================>                        (61 + 53) / 114][Stage 187:================================>                    (69 + 45) / 114][Stage 187:========================================>            (88 + 26) / 114][Stage 187:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.108366339 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 1 AND partitionZIndex<=21", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=21,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353683186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==================================>                  (73 + 40) / 113][Stage 188:=======================================>             (84 + 29) / 113][Stage 188:=============================================>       (97 + 16) / 113][Stage 188:==================================================>  (107 + 6) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:=======================================>             (84 + 30) / 114][Stage 189:===========================================>         (94 + 20) / 114][Stage 189:==============================================>     (103 + 11) / 114][Stage 189:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.141094807 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 5 AND partitionZIndex<=95", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=95,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.345469644 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=====================================>               (81 + 34) / 115][Stage 190:=========================================>           (91 + 24) / 115][Stage 190:=============================================>      (101 + 14) / 115][Stage 190:====================================================>(113 + 2) / 115]                                                                                [Stage 191:======================================>              (85 + 31) / 116][Stage 191:==========================================>          (93 + 23) / 116][Stage 191:================================================>    (107 + 9) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.92487774 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 32 AND partitionZIndex<=132", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=132,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39640034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:================================>                    (69 + 44) / 113][Stage 192:=======================================>             (85 + 28) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(111 + 2) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:=============================>                       (63 + 51) / 114][Stage 193:===================================>                 (76 + 38) / 114][Stage 193:=============================================>       (98 + 16) / 114][Stage 193:===================================================> (110 + 4) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.516433376 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3  AND partitionZIndex<=3", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=3,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381788035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (73 + 45) / 118][Stage 194:===================================>                 (80 + 38) / 118][Stage 194:===========================================>         (97 + 21) / 118][Stage 194:==============================================>     (106 + 12) / 118]                                                                                [Stage 195:================================>                    (74 + 45) / 119][Stage 195:==================================>                  (78 + 41) / 119][Stage 195:======================================>              (86 + 33) / 119][Stage 195:============================================>       (102 + 17) / 119][Stage 195:==================================================>  (114 + 5) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.298269529 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 39 AND partitionZIndex<=139", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=139,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.416939885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (62 + 58) / 120][Stage 196:===============================>                     (71 + 49) / 120][Stage 196:======================================>              (88 + 32) / 120][Stage 196:==================================================>  (115 + 5) / 120]                                                                                [Stage 197:===========================>                         (63 + 58) / 121][Stage 197:==================================>                  (79 + 42) / 121][Stage 197:===========================================>        (101 + 20) / 121][Stage 197:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.912949811 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 2 AND partitionZIndex<=22", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=22,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.388710056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (81 + 32) / 113][Stage 198:==========================================>          (91 + 22) / 113][Stage 198:=============================================>       (97 + 16) / 113][Stage 198:===================================================> (110 + 3) / 113]                                                                                [Stage 199:========================================>            (87 + 27) / 114][Stage 199:==========================================>          (91 + 23) / 114][Stage 199:================================================>    (105 + 9) / 114][Stage 199:====================================================>(112 + 2) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.238916267 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 17 AND partitionZIndex<=217", 1))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=217,1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459249577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=================================>                   (73 + 42) / 115][Stage 200:========================================>            (88 + 27) / 115][Stage 200:============================================>        (96 + 19) / 115][Stage 200:==================================================>  (109 + 6) / 115][Stage 200:===================================================> (111 + 4) / 115]                                                                                [Stage 201:====================================>                (79 + 37) / 116][Stage 201:==========================================>          (94 + 22) / 116][Stage 201:===============================================>    (105 + 11) / 116][Stage 201:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.157073501 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 00:02:06 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48058) dropped. RpcEnv already stopped.
17/05/25 00:02:06 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:48058) dropped. RpcEnv already stopped.

real	9m55.603s
user	11m25.844s
sys	0m28.072s
