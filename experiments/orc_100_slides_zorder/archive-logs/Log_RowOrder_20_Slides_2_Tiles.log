Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 17:19:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 17:20:05 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 17:20:05 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 17:20:06 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 17:20:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 17:20:19 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524172008-0573).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.430288265 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:========================================>              (86 + 30) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.631142981 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.757056679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==================>                                    (39 + 74) / 113][Stage 2:=======================>                               (48 + 65) / 113][Stage 2:===========================>                           (56 + 57) / 113][Stage 2:============================>                          (58 + 55) / 113][Stage 2:==============================>                        (62 + 51) / 113][Stage 2:====================================>                  (75 + 38) / 113][Stage 2:===========================================>           (89 + 24) / 113][Stage 2:=================================================>    (103 + 10) / 113][Stage 2:===================================================>   (106 + 7) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:=============================>                         (62 + 52) / 114][Stage 3:================================>                      (67 + 47) / 114][Stage 3:=====================================>                 (78 + 36) / 114][Stage 3:==============================================>        (97 + 17) / 114][Stage 3:====================================================>  (108 + 6) / 114][Stage 3:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.958307642 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.73352502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 121][Stage 4:=========================>                             (56 + 65) / 121][Stage 4:===========================>                           (60 + 61) / 121][Stage 4:=============================>                         (65 + 56) / 121][Stage 4:================================>                      (71 + 50) / 121][Stage 4:======================================>                (84 + 37) / 121][Stage 4:============================================>          (97 + 24) / 121][Stage 4:=================================================>    (110 + 11) / 121]                                                                                [Stage 5:===========================>                           (60 + 62) / 122][Stage 5:=============================>                         (65 + 57) / 122][Stage 5:====================================>                  (81 + 41) / 122][Stage 5:===========================================>           (96 + 26) / 122][Stage 5:=============================================>        (102 + 20) / 122][Stage 5:====================================================>  (117 + 5) / 122]                                                                                Time elapsed: 4.297088633 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.677190615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (56 + 65) / 121][Stage 6:===========================>                           (60 + 61) / 121][Stage 6:===========================>                           (61 + 60) / 121][Stage 6:==============================>                        (68 + 53) / 121][Stage 6:========================================>              (90 + 31) / 121][Stage 6:===============================================>      (106 + 15) / 121][Stage 6:====================================================>  (115 + 6) / 121]                                                                                [Stage 7:===========================>                           (61 + 61) / 122][Stage 7:=============================>                         (65 + 57) / 122][Stage 7:==================================>                    (76 + 46) / 122][Stage 7:========================================>              (89 + 33) / 122][Stage 7:===============================================>      (107 + 15) / 122][Stage 7:=====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.007650838 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.611553022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (59 + 61) / 120][Stage 8:===========================>                           (60 + 60) / 120][Stage 8:============================>                          (62 + 58) / 120][Stage 8:==================================>                    (75 + 45) / 120][Stage 8:==========================================>            (93 + 27) / 120][Stage 8:==============================================>       (104 + 16) / 120][Stage 8:======================================================>(118 + 2) / 120]                                                                                [Stage 9:==========================>                            (59 + 62) / 121][Stage 9:============================>                          (62 + 59) / 121][Stage 9:=================================>                     (73 + 48) / 121][Stage 9:=========================================>             (91 + 30) / 121][Stage 9:==================================================>    (112 + 9) / 121][Stage 9:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.713538663 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.550099313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.490701665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (70 + 43) / 113][Stage 10:======================================>               (81 + 32) / 113][Stage 10:===========================================>          (91 + 22) / 113][Stage 10:===============================================>     (101 + 12) / 113][Stage 10:===================================================>  (108 + 5) / 113][Stage 10:=====================================================>(111 + 2) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:====================================>                 (78 + 36) / 114][Stage 11:=========================================>            (87 + 27) / 114][Stage 11:=============================================>        (95 + 19) / 114][Stage 11:================================================>    (104 + 10) / 114][Stage 11:===================================================>  (109 + 5) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.084636446 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531695717 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==============================>                       (66 + 49) / 115][Stage 12:===================================>                  (75 + 40) / 115][Stage 12:=========================================>            (88 + 27) / 115][Stage 12:===============================================>     (102 + 13) / 115][Stage 12:=================================================>    (106 + 9) / 115][Stage 12:==================================================>   (108 + 7) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:================================>                     (69 + 47) / 116][Stage 13:====================================>                 (79 + 37) / 116][Stage 13:========================================>             (88 + 28) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:===============================================>     (103 + 13) / 116][Stage 13:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.966234829 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 176 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.589336542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (59 + 61) / 120][Stage 14:=============================>                        (65 + 55) / 120][Stage 14:=====================================>                (84 + 36) / 120][Stage 14:============================================>         (99 + 21) / 120][Stage 14:===============================================>     (107 + 13) / 120][Stage 14:===================================================>  (115 + 5) / 120]                                                                                [Stage 15:===========================>                          (62 + 59) / 121][Stage 15:================================>                     (73 + 48) / 121][Stage 15:========================================>             (90 + 31) / 121][Stage 15:==============================================>      (106 + 15) / 121][Stage 15:===================================================>  (116 + 5) / 121][Stage 15:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.938234562 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466938185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (83 + 32) / 115][Stage 16:========================================>             (86 + 29) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:===================================================>  (110 + 5) / 115][Stage 16:=====================================================>(113 + 2) / 115]                                                                                [Stage 17:=======================================>              (84 + 32) / 116][Stage 17:========================================>             (88 + 28) / 116][Stage 17:=============================================>       (100 + 16) / 116][Stage 17:==================================================>   (109 + 7) / 116][Stage 17:====================================================> (113 + 3) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.8905295 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510015959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==============================>                       (64 + 51) / 115][Stage 18:===================================>                  (75 + 40) / 115][Stage 18:==========================================>           (90 + 25) / 115][Stage 18:==============================================>       (99 + 16) / 115][Stage 18:================================================>    (105 + 10) / 115][Stage 18:===================================================>  (109 + 6) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:===================================>                  (76 + 40) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:===============================================>     (105 + 11) / 116][Stage 19:==================================================>   (108 + 8) / 116][Stage 19:===================================================>  (110 + 6) / 116][Stage 19:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.058120107 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481064515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:================================>                     (72 + 46) / 118][Stage 20:=================================>                    (74 + 44) / 118][Stage 20:======================================>               (85 + 33) / 118][Stage 20:===========================================>          (96 + 22) / 118][Stage 20:==================================================>   (110 + 8) / 118]                                                                                [Stage 21:=================================>                    (73 + 46) / 119][Stage 21:===================================>                  (79 + 40) / 119][Stage 21:=========================================>            (91 + 28) / 119][Stage 21:==============================================>      (104 + 15) / 119][Stage 21:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.481746433 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.522210087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==========================>                           (60 + 61) / 121][Stage 22:=============================>                        (67 + 54) / 121][Stage 22:======================================>               (87 + 34) / 121][Stage 22:==========================================>           (96 + 25) / 121][Stage 22:===============================================>     (109 + 12) / 121][Stage 22:===================================================>  (116 + 5) / 121]                                                                                [Stage 23:===========================>                          (62 + 60) / 122][Stage 23:================================>                     (74 + 48) / 122][Stage 23:===========================================>          (98 + 24) / 122][Stage 23:===================================================>  (116 + 6) / 122][Stage 23:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.631588626 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486977559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (58 + 55) / 113][Stage 24:=============================>                        (61 + 52) / 113][Stage 24:===================================>                  (75 + 38) / 113][Stage 24:===========================================>          (92 + 21) / 113][Stage 24:===============================================>     (102 + 11) / 113][Stage 24:===================================================>  (108 + 5) / 113]                                                                                [Stage 25:============================>                         (60 + 54) / 114][Stage 25:================================>                     (68 + 46) / 114][Stage 25:==========================================>           (89 + 25) / 114][Stage 25:==============================================>       (99 + 15) / 114]                                                                                Time elapsed: 3.478116683 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437215619 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:=================================>                    (70 + 43) / 113][Stage 26:========================================>             (84 + 29) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:===============================================>     (102 + 11) / 113][Stage 26:=====================================================>(111 + 2) / 113]                                                                                [Stage 27:==================================>                   (72 + 42) / 114][Stage 27:======================================>               (81 + 33) / 114][Stage 27:============================================>         (93 + 21) / 114][Stage 27:==================================================>   (106 + 8) / 114][Stage 27:====================================================> (111 + 3) / 114][Stage 27:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.243911557 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479407512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (58 + 55) / 113][Stage 28:================================>                     (68 + 45) / 113][Stage 28:========================================>             (85 + 28) / 113][Stage 28:==================================================>   (106 + 7) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===========================>                          (59 + 55) / 114][Stage 29:=============================>                        (63 + 51) / 114][Stage 29:======================================>               (82 + 32) / 114][Stage 29:==============================================>       (99 + 15) / 114][Stage 29:====================================================> (111 + 3) / 114][Stage 29:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.368858252 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520892444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (58 + 55) / 113][Stage 30:==============================>                       (63 + 50) / 113][Stage 30:=====================================>                (78 + 35) / 113][Stage 30:==============================================>       (98 + 15) / 113][Stage 30:===================================================>  (108 + 5) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:============================>                         (61 + 53) / 114][Stage 31:====================================>                 (76 + 38) / 114][Stage 31:=============================================>        (95 + 19) / 114][Stage 31:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.338174084 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431091833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:====================================>                 (77 + 36) / 113][Stage 32:========================================>             (85 + 28) / 113][Stage 32:==============================================>       (98 + 15) / 113][Stage 32:===================================================>  (107 + 6) / 113][Stage 32:====================================================> (109 + 4) / 113]                                                                                [Stage 33:======================================>               (82 + 32) / 114][Stage 33:=============================================>        (95 + 19) / 114][Stage 33:===============================================>     (103 + 11) / 114][Stage 33:===================================================>  (109 + 5) / 114][Stage 33:====================================================> (111 + 3) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.652500684 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53036427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:================================>                     (72 + 49) / 121][Stage 34:=========================================>            (92 + 29) / 121][Stage 34:================================================>    (110 + 11) / 121]                                                                                [Stage 35:===========================>                          (61 + 61) / 122][Stage 35:==============================>                       (70 + 52) / 122][Stage 35:======================================>               (87 + 35) / 122][Stage 35:==============================================>      (106 + 16) / 122][Stage 35:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.19955335 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.5440036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==============================>                       (64 + 51) / 115][Stage 36:=====================================>                (79 + 36) / 115][Stage 36:==========================================>           (91 + 24) / 115][Stage 36:===============================================>     (102 + 13) / 115][Stage 36:===================================================>  (110 + 5) / 115][Stage 36:====================================================> (112 + 3) / 115]                                                                                [Stage 37:================================>                     (70 + 46) / 116][Stage 37:========================================>             (87 + 29) / 116][Stage 37:===============================================>     (103 + 13) / 116][Stage 37:====================================================> (112 + 4) / 116][Stage 37:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.933273873 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486214914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:=============================>                        (62 + 51) / 113][Stage 38:=====================================>                (79 + 34) / 113][Stage 38:===============================================>     (101 + 12) / 113][Stage 38:====================================================> (110 + 3) / 113]                                                                                [Stage 39:===========================>                          (59 + 55) / 114][Stage 39:=============================>                        (63 + 51) / 114][Stage 39:=====================================>                (79 + 35) / 114][Stage 39:==============================================>       (99 + 15) / 114][Stage 39:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.197740442 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455559411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=====================================>                (79 + 34) / 113][Stage 40:==========================================>           (88 + 25) / 113][Stage 40:==============================================>       (98 + 15) / 113][Stage 40:====================================================> (109 + 4) / 113]                                                                                [Stage 41:====================================>                 (77 + 37) / 114][Stage 41:=========================================>            (88 + 26) / 114][Stage 41:==============================================>      (100 + 14) / 114][Stage 41:================================================>    (104 + 10) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.352920939 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423540405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 35) / 115][Stage 42:========================================>             (87 + 28) / 115][Stage 42:==============================================>      (101 + 14) / 115][Stage 42:====================================================> (111 + 4) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:==========================================>           (91 + 25) / 116][Stage 43:=============================================>       (100 + 16) / 116][Stage 43:==================================================>   (108 + 8) / 116][Stage 43:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.256147162 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402227668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===================================>                  (74 + 39) / 113][Stage 44:==========================================>           (88 + 25) / 113][Stage 44:===============================================>      (99 + 14) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:=====================================>                (80 + 34) / 114][Stage 45:==========================================>           (89 + 25) / 114][Stage 45:==============================================>      (100 + 14) / 114][Stage 45:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.176209477 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479292208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (66 + 55) / 121][Stage 46:====================================>                 (81 + 40) / 121][Stage 46:==============================================>      (107 + 14) / 121][Stage 46:=====================================================>(120 + 1) / 121]                                                                                [Stage 47:===========================>                          (61 + 61) / 122][Stage 47:============================>                         (65 + 57) / 122][Stage 47:======================================>               (86 + 36) / 122][Stage 47:================================================>    (112 + 10) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.233675438 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410054834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:======================================>               (83 + 32) / 115][Stage 48:=========================================>            (89 + 26) / 115][Stage 48:=============================================>        (97 + 18) / 115][Stage 48:===================================================>  (109 + 6) / 115]                                                                                [Stage 49:========================================>             (86 + 30) / 116][Stage 49:===========================================>          (93 + 23) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.832662548 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462041393 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (62 + 58) / 120][Stage 50:===============================>                      (71 + 49) / 120][Stage 50:===========================================>          (97 + 23) / 120][Stage 50:===================================================>  (114 + 6) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (62 + 59) / 121][Stage 51:====================================>                 (81 + 40) / 121][Stage 51:============================================>        (102 + 19) / 121][Stage 51:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.2713818 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394176861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=====================================>                (80 + 35) / 115][Stage 52:===========================================>          (93 + 22) / 115][Stage 52:=================================================>    (106 + 9) / 115]                                                                                [Stage 53:=======================================>              (85 + 31) / 116][Stage 53:============================================>         (96 + 20) / 116][Stage 53:==============================================>      (102 + 14) / 116][Stage 53:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.753309922 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37965923 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (83 + 32) / 115][Stage 54:============================================>         (95 + 20) / 115][Stage 54:=================================================>    (106 + 9) / 115][Stage 54:=====================================================>(114 + 1) / 115]                                                                                [Stage 55:======================================>               (83 + 33) / 116][Stage 55:=========================================>            (89 + 27) / 116][Stage 55:===============================================>     (104 + 12) / 116][Stage 55:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.653247924 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394964061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===================================>                  (74 + 39) / 113][Stage 56:==========================================>           (88 + 25) / 113][Stage 56:==============================================>       (98 + 15) / 113][Stage 56:===================================================>  (107 + 6) / 113]                                                                                [Stage 57:=========================================>            (87 + 27) / 114][Stage 57:===========================================>          (91 + 23) / 114][Stage 57:==============================================>      (100 + 14) / 114][Stage 57:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.924750768 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424471683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:====================================>                 (79 + 39) / 118][Stage 58:===========================================>          (96 + 22) / 118][Stage 58:====================================================> (114 + 4) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:==================================>                   (77 + 42) / 119][Stage 59:========================================>             (90 + 29) / 119][Stage 59:============================================>        (101 + 18) / 119][Stage 59:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.118261573 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438273074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:=============================>                        (61 + 52) / 113][Stage 60:===================================>                  (74 + 39) / 113][Stage 60:============================================>         (94 + 19) / 113][Stage 60:====================================================> (109 + 4) / 113]                                                                                [Stage 61:=============================>                        (62 + 52) / 114][Stage 61:==================================>                   (72 + 42) / 114][Stage 61:============================================>         (93 + 21) / 114][Stage 61:==================================================>   (106 + 8) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.3689968 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398411842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:>                                                       (0 + 0) / 113][Stage 62:===================================>                  (74 + 39) / 113][Stage 62:========================================>             (84 + 29) / 113][Stage 62:============================================>         (94 + 19) / 113][Stage 62:==================================================>   (105 + 8) / 113][Stage 62:====================================================> (110 + 3) / 113]                                                                                [Stage 63:===================================>                  (74 + 40) / 114][Stage 63:========================================>             (85 + 29) / 114][Stage 63:=============================================>        (95 + 19) / 114][Stage 63:===============================================>     (102 + 12) / 114][Stage 63:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.300315385 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412528333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:================================>                     (72 + 46) / 118][Stage 64:===================================>                  (78 + 40) / 118][Stage 64:===========================================>          (96 + 22) / 118][Stage 64:=================================================>    (109 + 9) / 118]                                                                                [Stage 65:=================================>                    (73 + 46) / 119][Stage 65:====================================>                 (81 + 38) / 119][Stage 65:==========================================>           (94 + 25) / 119][Stage 65:==================================================>   (111 + 8) / 119][Stage 65:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.238187656 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387361914 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (72 + 41) / 113][Stage 66:========================================>             (84 + 29) / 113][Stage 66:===========================================>          (92 + 21) / 113][Stage 66:=================================================>    (104 + 9) / 113][Stage 66:=====================================================>(111 + 2) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:====================================>                 (78 + 36) / 114][Stage 67:=========================================>            (87 + 27) / 114][Stage 67:=============================================>        (97 + 17) / 114][Stage 67:===================================================>  (108 + 6) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.212614653 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365920256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (82 + 33) / 115][Stage 68:=============================================>        (96 + 19) / 115][Stage 68:==================================================>   (107 + 8) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:======================================>               (83 + 33) / 116][Stage 69:=========================================>            (89 + 27) / 116][Stage 69:=============================================>       (100 + 16) / 116][Stage 69:====================================================> (113 + 3) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.077078408 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.58201924 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (62 + 59) / 121][Stage 70:=================================>                    (74 + 47) / 121][Stage 70:=========================================>            (93 + 28) / 121][Stage 70:==================================================>   (113 + 8) / 121][Stage 70:=====================================================>(120 + 1) / 121]                                                                                [Stage 71:===========================>                          (61 + 61) / 122][Stage 71:===========================>                          (63 + 59) / 122][Stage 71:===================================>                  (81 + 41) / 122][Stage 71:==============================================>      (107 + 15) / 122][Stage 71:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.387111379 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396400739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (80 + 33) / 113][Stage 72:============================================>         (94 + 19) / 113][Stage 72:=================================================>    (104 + 9) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:====================================>                 (78 + 36) / 114][Stage 73:=========================================>            (87 + 27) / 114][Stage 73:==============================================>       (99 + 15) / 114][Stage 73:===================================================>  (108 + 6) / 114][Stage 73:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.610342885 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433654447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:============================>                         (59 + 54) / 113][Stage 74:================================>                     (68 + 45) / 113][Stage 74:===========================================>          (90 + 23) / 113][Stage 74:===================================================>  (108 + 5) / 113]                                                                                [Stage 75:============================>                         (60 + 54) / 114][Stage 75:================================>                     (68 + 46) / 114][Stage 75:========================================>             (86 + 28) / 114][Stage 75:===================================================>  (108 + 6) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.223386609 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396318459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==============================>                       (64 + 51) / 115][Stage 76:====================================>                 (78 + 37) / 115][Stage 76:=============================================>        (96 + 19) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:====================================================> (112 + 3) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:================================>                     (70 + 46) / 116][Stage 77:==================================>                   (75 + 41) / 116][Stage 77:========================================>             (88 + 28) / 116][Stage 77:===============================================>     (104 + 12) / 116][Stage 77:==================================================>   (108 + 8) / 116][Stage 77:===================================================>  (110 + 6) / 116][Stage 77:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.753054826 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381880668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=======================================>              (84 + 31) / 115][Stage 78:===========================================>          (92 + 23) / 115][Stage 78:===================================================>  (109 + 6) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:======================================>               (82 + 34) / 116][Stage 79:========================================>             (88 + 28) / 116][Stage 79:=============================================>       (100 + 16) / 116][Stage 79:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.024828015 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360794191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=====================================>                (80 + 35) / 115][Stage 80:=========================================>            (88 + 27) / 115][Stage 80:=================================================>    (106 + 9) / 115][Stage 80:====================================================> (112 + 3) / 115][Stage 80:=====================================================>(113 + 2) / 115]                                                                                [Stage 81:=========================================>            (89 + 27) / 116][Stage 81:==============================================>      (102 + 14) / 116][Stage 81:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.879260522 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37374948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===================================>                  (74 + 39) / 113][Stage 82:==========================================>           (89 + 24) / 113][Stage 82:=============================================>        (95 + 18) / 113][Stage 82:================================================>    (103 + 10) / 113][Stage 82:=====================================================>(111 + 2) / 113]                                                                                [Stage 83:===================================>                  (74 + 40) / 114][Stage 83:=========================================>            (87 + 27) / 114][Stage 83:============================================>         (94 + 20) / 114][Stage 83:===============================================>     (103 + 11) / 114][Stage 83:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.996300367 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421237276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==========================>                           (60 + 61) / 121][Stage 84:=============================>                        (66 + 55) / 121][Stage 84:=====================================>                (83 + 38) / 121][Stage 84:=============================================>       (105 + 16) / 121][Stage 84:=====================================================>(120 + 1) / 121]                                                                                [Stage 85:===========================>                          (61 + 61) / 122][Stage 85:==============================>                       (69 + 53) / 122][Stage 85:========================================>             (91 + 31) / 122][Stage 85:==============================================>      (106 + 16) / 122][Stage 85:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.209660485 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415473691 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:==================================>                   (76 + 42) / 118][Stage 86:=============================================>        (99 + 19) / 118][Stage 86:==================================================>   (110 + 8) / 118]                                                                                [Stage 87:=================================>                    (74 + 45) / 119][Stage 87:====================================>                 (80 + 39) / 119][Stage 87:============================================>         (99 + 20) / 119][Stage 87:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.00738833 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412594408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:==============================>                       (63 + 50) / 113][Stage 88:=====================================>                (79 + 34) / 113][Stage 88:===============================================>      (99 + 14) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:================================>                     (68 + 46) / 114][Stage 89:=========================================>            (88 + 26) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.186974042 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359758349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=====================================>                (80 + 35) / 115][Stage 90:=========================================>            (89 + 26) / 115][Stage 90:==============================================>       (99 + 16) / 115][Stage 90:==================================================>   (108 + 7) / 115]                                                                                [Stage 91:=======================================>              (85 + 31) / 116][Stage 91:============================================>         (95 + 21) / 116][Stage 91:==================================================>   (109 + 7) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.699378376 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354443525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (81 + 34) / 115][Stage 92:==========================================>           (90 + 25) / 115][Stage 92:==============================================>      (100 + 15) / 115][Stage 92:====================================================> (112 + 3) / 115]                                                                                [Stage 93:======================================>               (83 + 33) / 116][Stage 93:=========================================>            (89 + 27) / 116][Stage 93:==============================================>      (101 + 15) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.504781749 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354331904 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (81 + 34) / 115][Stage 94:=========================================>            (89 + 26) / 115][Stage 94:=============================================>        (96 + 19) / 115][Stage 94:==================================================>   (107 + 8) / 115]                                                                                [Stage 95:=====================================>                (81 + 35) / 116][Stage 95:==========================================>           (91 + 25) / 116][Stage 95:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.715724864 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369323975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:==========================================>           (90 + 25) / 115][Stage 96:===============================================>     (103 + 12) / 115][Stage 96:====================================================> (111 + 4) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:=======================================>              (84 + 32) / 116][Stage 97:==============================================>       (99 + 17) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:===================================================>  (111 + 5) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.441860441 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413679088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:==============================>                       (67 + 53) / 120][Stage 98:=======================================>              (87 + 33) / 120][Stage 98:=============================================>       (102 + 18) / 120][Stage 98:====================================================> (117 + 3) / 120]                                                                                [Stage 99:=============================>                        (66 + 55) / 121][Stage 99:=================================>                    (76 + 45) / 121][Stage 99:========================================>             (90 + 31) / 121][Stage 99:===============================================>     (109 + 12) / 121]                                                                                Time elapsed: 3.282516781 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451639595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:================================>                    (72 + 46) / 118][Stage 100:==================================>                  (77 + 41) / 118][Stage 100:=======================================>             (89 + 29) / 118][Stage 100:============================================>       (101 + 17) / 118][Stage 100:==================================================>  (113 + 5) / 118]                                                                                [Stage 101:================================>                    (74 + 45) / 119][Stage 101:=====================================>               (85 + 34) / 119][Stage 101:============================================>       (101 + 18) / 119][Stage 101:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.2320034 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399551137 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===============================>                     (68 + 47) / 115][Stage 102:=========================================>           (89 + 26) / 115][Stage 102:===============================================>    (104 + 11) / 115][Stage 102:==================================================>  (110 + 5) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:===============================>                     (68 + 48) / 116][Stage 103:====================================>                (80 + 36) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:===============================================>    (105 + 11) / 116][Stage 103:===================================================> (113 + 3) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.191637087 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437362924 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:==============================>                      (70 + 50) / 120][Stage 104:========================================>            (92 + 28) / 120][Stage 104:==================================================>  (114 + 6) / 120]                                                                                [Stage 105:===========================>                         (62 + 59) / 121][Stage 105:=================================>                   (76 + 45) / 121][Stage 105:=======================================>             (91 + 30) / 121][Stage 105:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.086515947 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438150965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (58 + 55) / 113][Stage 106:=============================>                       (62 + 51) / 113][Stage 106:====================================>                (78 + 35) / 113][Stage 106:============================================>        (95 + 18) / 113][Stage 106:==================================================>  (108 + 5) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:=============================>                       (64 + 50) / 114][Stage 107:======================================>              (83 + 31) / 114][Stage 107:==============================================>     (102 + 12) / 114][Stage 107:==================================================>  (109 + 5) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.572862463 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4046801 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===================================>                 (76 + 39) / 115][Stage 108:==========================================>          (92 + 23) / 115][Stage 108:==============================================>     (103 + 12) / 115][Stage 108:===================================================> (111 + 4) / 115]                                                                                [Stage 109:===================================>                 (78 + 38) / 116][Stage 109:===========================================>         (95 + 21) / 116][Stage 109:===============================================>    (106 + 10) / 116][Stage 109:===================================================> (112 + 4) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.405407717 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397217694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (58 + 55) / 113][Stage 110:=============================>                       (63 + 50) / 113][Stage 110:==================================>                  (74 + 39) / 113][Stage 110:============================================>        (95 + 18) / 113][Stage 110:===================================================> (109 + 4) / 113]                                                                                [Stage 111:=============================>                       (63 + 51) / 114][Stage 111:===================================>                 (77 + 37) / 114][Stage 111:==========================================>          (91 + 23) / 114][Stage 111:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.19653902 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398302894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:============================>                        (60 + 53) / 113][Stage 112:===============================>                     (68 + 45) / 113][Stage 112:========================================>            (87 + 26) / 113][Stage 112:=================================================>   (105 + 8) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:=============================>                       (63 + 51) / 114][Stage 113:===================================>                 (76 + 38) / 114][Stage 113:===========================================>         (93 + 21) / 114][Stage 113:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.221279035 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365967809 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==================================>                  (74 + 39) / 113][Stage 114:=========================================>           (88 + 25) / 113][Stage 114:=============================================>       (97 + 16) / 113][Stage 114:=================================================>   (105 + 8) / 113][Stage 114:===================================================> (110 + 3) / 113]                                                                                [Stage 115:=======================================>             (84 + 30) / 114][Stage 115:===========================================>         (93 + 21) / 114][Stage 115:=============================================>      (100 + 14) / 114][Stage 115:==================================================>  (108 + 6) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.142587275 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403469877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:===============================>                     (72 + 48) / 120][Stage 116:=======================================>             (90 + 30) / 120][Stage 116:=================================================>   (112 + 8) / 120]                                                                                [Stage 117:=============================>                       (67 + 54) / 121][Stage 117:===================================>                 (81 + 40) / 121][Stage 117:==========================================>         (100 + 21) / 121][Stage 117:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.07263952 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 228 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412491543 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (61 + 59) / 120][Stage 118:================================>                    (74 + 46) / 120][Stage 118:========================================>            (91 + 29) / 120][Stage 118:===============================================>    (110 + 10) / 120][Stage 118:====================================================>(119 + 1) / 120]                                                                                [Stage 119:==========================>                          (61 + 60) / 121][Stage 119:===============================>                     (71 + 50) / 121][Stage 119:=====================================>               (85 + 36) / 121][Stage 119:=============================================>      (107 + 14) / 121]                                                                                Time elapsed: 3.0484117 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389426666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (58 + 55) / 113][Stage 120:============================>                        (61 + 52) / 113][Stage 120:====================================>                (77 + 36) / 113][Stage 120:=========================================>           (88 + 25) / 113][Stage 120:==================================================>  (108 + 5) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:================================>                    (69 + 45) / 114][Stage 121:======================================>              (83 + 31) / 114][Stage 121:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.049618559 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393803569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:=============================>                       (62 + 51) / 113][Stage 122:=====================================>               (81 + 32) / 113][Stage 122:=============================================>       (97 + 16) / 113][Stage 122:===================================================> (110 + 3) / 113]                                                                                [Stage 123:===========================>                         (59 + 55) / 114][Stage 123:=============================>                       (64 + 50) / 114][Stage 123:====================================>                (79 + 35) / 114][Stage 123:==================================================>  (108 + 6) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.209124033 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446393587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==================================>                  (73 + 40) / 113][Stage 124:=========================================>           (89 + 24) / 113][Stage 124:=============================================>       (98 + 15) / 113][Stage 124:=================================================>   (106 + 7) / 113]                                                                                [Stage 125:=====================================>               (81 + 33) / 114][Stage 125:========================================>            (88 + 26) / 114][Stage 125:==============================================>     (103 + 11) / 114][Stage 125:===================================================> (110 + 4) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.971657676 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378497797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===============================>                     (69 + 46) / 115][Stage 126:====================================>                (80 + 35) / 115][Stage 126:==========================================>          (92 + 23) / 115][Stage 126:==============================================>     (102 + 13) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:=====================================>               (81 + 35) / 116][Stage 127:=============================================>      (101 + 15) / 116][Stage 127:==================================================>  (111 + 5) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.995533771 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343610611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (80 + 35) / 115][Stage 128:=======================================>             (85 + 30) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:===================================================> (111 + 4) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:======================================>              (84 + 32) / 116][Stage 129:==========================================>          (94 + 22) / 116][Stage 129:==============================================>     (103 + 13) / 116][Stage 129:===================================================> (112 + 4) / 116][Stage 129:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.299075311 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362367724 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (70 + 43) / 113][Stage 130:=======================================>             (84 + 29) / 113][Stage 130:===========================================>         (92 + 21) / 113][Stage 130:==============================================>     (100 + 13) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:=================================>                   (73 + 41) / 114][Stage 131:========================================>            (88 + 26) / 114][Stage 131:===========================================>         (94 + 20) / 114][Stage 131:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.867705493 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372445572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:===================================>                 (80 + 38) / 118][Stage 132:============================================>        (98 + 20) / 118][Stage 132:==================================================>  (113 + 5) / 118]                                                                                [Stage 133:=================================>                   (75 + 44) / 119][Stage 133:========================================>            (90 + 29) / 119][Stage 133:=============================================>      (103 + 16) / 119][Stage 133:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.009495974 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367418008 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (73 + 45) / 118][Stage 134:===================================>                 (78 + 40) / 118][Stage 134:==========================================>          (94 + 24) / 118][Stage 134:==============================================>     (106 + 12) / 118]                                                                                [Stage 135:================================>                    (74 + 45) / 119][Stage 135:===================================>                 (80 + 39) / 119][Stage 135:=======================================>             (88 + 31) / 119][Stage 135:===============================================>    (108 + 11) / 119][Stage 135:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.184960999 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379559016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==============================>                      (67 + 48) / 115][Stage 136:====================================>                (80 + 35) / 115][Stage 136:============================================>        (96 + 19) / 115][Stage 136:=================================================>   (107 + 8) / 115][Stage 136:==================================================>  (110 + 5) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:===============================>                     (69 + 47) / 116][Stage 137:=======================================>             (86 + 30) / 116][Stage 137:==============================================>     (104 + 12) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.562239211 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34461661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:====================================>                (80 + 35) / 115][Stage 138:========================================>            (87 + 28) / 115][Stage 138:===========================================>         (95 + 20) / 115][Stage 138:===================================================> (111 + 4) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:=====================================>               (82 + 34) / 116][Stage 139:=========================================>           (90 + 26) / 116][Stage 139:==============================================>     (103 + 13) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.499229322 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397209568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (58 + 55) / 113][Stage 140:==============================>                      (64 + 49) / 113][Stage 140:===================================>                 (76 + 37) / 113][Stage 140:=============================================>       (98 + 15) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:=============================>                       (64 + 50) / 114][Stage 141:======================================>              (83 + 31) / 114][Stage 141:=============================================>      (100 + 14) / 114][Stage 141:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.086304759 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374747952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==================================>                  (75 + 40) / 115][Stage 142:========================================>            (87 + 28) / 115][Stage 142:==============================================>     (103 + 12) / 115][Stage 142:==================================================>  (109 + 6) / 115][Stage 142:====================================================>(113 + 2) / 115]                                                                                [Stage 143:===============================>                     (70 + 46) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:==============================================>     (103 + 13) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.437893432 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365723245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:================================>                    (73 + 45) / 118][Stage 144:==================================>                  (77 + 41) / 118][Stage 144:==========================================>          (95 + 23) / 118][Stage 144:===============================================>    (108 + 10) / 118][Stage 144:====================================================>(116 + 2) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:=================================>                   (76 + 43) / 119][Stage 145:====================================>                (82 + 37) / 119][Stage 145:==========================================>          (96 + 23) / 119][Stage 145:===============================================>    (108 + 11) / 119][Stage 145:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.295035185 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361001361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=====================================>               (81 + 32) / 113][Stage 146:==========================================>          (91 + 22) / 113][Stage 146:=============================================>       (98 + 15) / 113][Stage 146:===================================================> (109 + 4) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:===================================>                 (76 + 38) / 114][Stage 147:=======================================>             (86 + 28) / 114][Stage 147:============================================>        (95 + 19) / 114][Stage 147:==================================================>  (108 + 6) / 114][Stage 147:====================================================>(112 + 2) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.61003501 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377442013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:=================================>                   (72 + 43) / 115][Stage 148:=========================================>           (89 + 26) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:===============================>                     (70 + 46) / 116][Stage 149:=====================================>               (81 + 35) / 116][Stage 149:===========================================>         (96 + 20) / 116][Stage 149:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.711767618 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341619367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (82 + 33) / 115][Stage 150:==========================================>          (92 + 23) / 115][Stage 150:=================================================>   (108 + 7) / 115][Stage 150:===================================================> (112 + 3) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:======================================>              (85 + 31) / 116][Stage 151:============================================>        (98 + 18) / 116][Stage 151:===================================================> (112 + 4) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.990785277 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363115282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:==================================>                  (76 + 42) / 118][Stage 152:=========================================>           (93 + 25) / 118][Stage 152:================================================>    (109 + 9) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:==================================>                  (77 + 42) / 119][Stage 153:========================================>            (92 + 27) / 119][Stage 153:=============================================>      (105 + 14) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.12343909 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340079625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=====================================>               (81 + 34) / 115][Stage 154:=========================================>           (89 + 26) / 115][Stage 154:===============================================>    (105 + 10) / 115][Stage 154:==================================================>  (110 + 5) / 115]                                                                                [Stage 155:======================================>              (85 + 31) / 116][Stage 155:===========================================>         (95 + 21) / 116][Stage 155:==============================================>     (104 + 12) / 116][Stage 155:===================================================> (112 + 4) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.395563643 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372899909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:================================>                    (72 + 46) / 118][Stage 156:===================================>                 (80 + 38) / 118][Stage 156:=========================================>           (93 + 25) / 118][Stage 156:===============================================>    (108 + 10) / 118][Stage 156:====================================================>(117 + 1) / 118]                                                                                [Stage 157:================================>                    (73 + 46) / 119][Stage 157:==================================>                  (77 + 42) / 119][Stage 157:=========================================>           (93 + 26) / 119][Stage 157:=============================================>      (105 + 14) / 119][Stage 157:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.203415842 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36186294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:================================>                    (73 + 45) / 118][Stage 158:=====================================>               (83 + 35) / 118][Stage 158:============================================>        (99 + 19) / 118][Stage 158:=================================================>   (111 + 7) / 118][Stage 158:====================================================>(117 + 1) / 118]                                                                                [Stage 159:=================================>                   (75 + 44) / 119][Stage 159:====================================>                (81 + 38) / 119][Stage 159:==========================================>          (96 + 23) / 119][Stage 159:================================================>    (110 + 9) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.473937214 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416480159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:===========================>                         (62 + 58) / 120][Stage 160:==================================>                  (77 + 43) / 120][Stage 160:===========================================>        (101 + 19) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:==========================>                          (61 + 60) / 121][Stage 161:=============================>                       (68 + 53) / 121][Stage 161:===================================>                 (80 + 41) / 121][Stage 161:=================================================>   (112 + 9) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.081312409 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367349123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (72 + 46) / 118][Stage 162:====================================>                (82 + 36) / 118][Stage 162:============================================>       (100 + 18) / 118][Stage 162:=================================================>   (110 + 8) / 118][Stage 162:====================================================>(116 + 2) / 118]                                                                                [Stage 163:=================================>                   (75 + 44) / 119][Stage 163:======================================>              (86 + 33) / 119][Stage 163:============================================>       (102 + 17) / 119][Stage 163:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.272498344 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36389278 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 46) / 118][Stage 164:=================================>                   (75 + 43) / 118][Stage 164:====================================>                (81 + 37) / 118][Stage 164:=========================================>           (93 + 25) / 118][Stage 164:==============================================>     (106 + 12) / 118]                                                                                [Stage 165:================================>                    (73 + 46) / 119][Stage 165:===================================>                 (79 + 40) / 119][Stage 165:========================================>            (90 + 29) / 119][Stage 165:=============================================>      (105 + 14) / 119][Stage 165:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.246860463 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424625843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:=============================>                       (62 + 51) / 113][Stage 166:====================================>                (77 + 36) / 113][Stage 166:==============================================>     (101 + 12) / 113]                                                                                [Stage 167:===========================>                         (59 + 55) / 114][Stage 167:=================================>                   (71 + 43) / 114][Stage 167:=========================================>           (90 + 24) / 114][Stage 167:================================================>    (105 + 9) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.073318296 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384434235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==============================>                      (67 + 48) / 115][Stage 168:========================================>            (87 + 28) / 115][Stage 168:===============================================>    (104 + 11) / 115][Stage 168:====================================================>(113 + 2) / 115]                                                                                [Stage 169:================================>                    (71 + 45) / 116][Stage 169:=====================================>               (82 + 34) / 116][Stage 169:============================================>       (100 + 16) / 116][Stage 169:==================================================>  (110 + 6) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.808456965 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403452608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:================================>                    (74 + 47) / 121][Stage 170:===========================================>         (99 + 22) / 121][Stage 170:=================================================>   (113 + 8) / 121]                                                                                [Stage 171:===========================>                         (63 + 59) / 122][Stage 171:=================================>                   (76 + 46) / 122][Stage 171:========================================>            (94 + 28) / 122][Stage 171:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.153618308 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377130088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (70 + 45) / 115][Stage 172:========================================>            (88 + 27) / 115][Stage 172:==============================================>     (103 + 12) / 115][Stage 172:==================================================>  (109 + 6) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:===============================>                     (69 + 47) / 116][Stage 173:======================================>              (84 + 32) / 116][Stage 173:============================================>       (100 + 16) / 116][Stage 173:=================================================>   (109 + 7) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.041549518 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36658768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:=================================>                   (75 + 43) / 118][Stage 174:======================================>              (86 + 32) / 118][Stage 174:===============================================>    (107 + 11) / 118][Stage 174:====================================================>(116 + 2) / 118]                                                                                [Stage 175:================================>                    (73 + 46) / 119][Stage 175:================================>                    (74 + 45) / 119][Stage 175:=======================================>             (89 + 30) / 119][Stage 175:============================================>       (101 + 18) / 119][Stage 175:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.137980632 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360599437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:=================================>                   (75 + 43) / 118][Stage 176:=======================================>             (88 + 30) / 118][Stage 176:==============================================>     (105 + 13) / 118][Stage 176:====================================================>(117 + 1) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:====================================>                (82 + 37) / 119][Stage 177:========================================>            (92 + 27) / 119][Stage 177:=============================================>      (103 + 16) / 119][Stage 177:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.099816982 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416111335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 60) / 120][Stage 178:============================>                        (64 + 56) / 120][Stage 178:===============================>                     (72 + 48) / 120][Stage 178:=======================================>             (90 + 30) / 120][Stage 178:==================================================>  (114 + 6) / 120]                                                                                [Stage 179:============================>                        (65 + 56) / 121][Stage 179:================================>                    (75 + 46) / 121][Stage 179:=========================================>           (94 + 27) / 121][Stage 179:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.206247095 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412670233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===============================>                     (69 + 46) / 115][Stage 180:====================================>                (80 + 35) / 115][Stage 180:===========================================>         (95 + 20) / 115][Stage 180:=================================================>   (107 + 8) / 115]                                                                                [Stage 181:====================================>                (80 + 36) / 116][Stage 181:============================================>       (100 + 16) / 116][Stage 181:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.895055752 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346729186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:======================================>              (84 + 31) / 115][Stage 182:===========================================>         (94 + 21) / 115][Stage 182:=================================================>   (108 + 7) / 115]                                                                                [Stage 183:=====================================>               (83 + 33) / 116][Stage 183:===========================================>         (95 + 21) / 116][Stage 183:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.567950599 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402872285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:===========================>                         (59 + 54) / 113][Stage 184:================================>                    (70 + 43) / 113][Stage 184:========================================>            (87 + 26) / 113][Stage 184:==============================================>      (99 + 14) / 113][Stage 184:===================================================> (110 + 3) / 113]                                                                                [Stage 185:============================>                        (62 + 52) / 114][Stage 185:====================================>                (78 + 36) / 114][Stage 185:==========================================>          (91 + 23) / 114][Stage 185:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.285767684 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381118129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:=============================>                       (62 + 51) / 113][Stage 186:=====================================>               (81 + 32) / 113][Stage 186:=============================================>       (96 + 17) / 113][Stage 186:===================================================> (109 + 4) / 113]                                                                                [Stage 187:===========================>                         (60 + 54) / 114][Stage 187:=================================>                   (71 + 43) / 114][Stage 187:==========================================>          (91 + 23) / 114][Stage 187:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.038723567 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400905023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 61) / 121][Stage 188:============================>                        (65 + 56) / 121][Stage 188:======================================>              (87 + 34) / 121][Stage 188:===============================================>    (110 + 11) / 121][Stage 188:====================================================>(119 + 2) / 121][Stage 188:====================================================>(120 + 1) / 121]                                                                                [Stage 189:==========================>                          (61 + 61) / 122][Stage 189:=============================>                       (68 + 54) / 122][Stage 189:======================================>              (88 + 34) / 122][Stage 189:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.266154685 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364158837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:================================>                    (73 + 45) / 118][Stage 190:====================================>                (82 + 36) / 118][Stage 190:============================================>       (101 + 17) / 118][Stage 190:===================================================> (114 + 4) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:=====================================>               (85 + 34) / 119][Stage 191:============================================>       (102 + 17) / 119][Stage 191:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.194467071 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398323081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:==========================>                          (61 + 60) / 121][Stage 192:===============================>                     (72 + 49) / 121][Stage 192:==========================================>          (97 + 24) / 121][Stage 192:===============================================>    (110 + 11) / 121]                                                                                [Stage 193:==========================>                          (61 + 61) / 122][Stage 193:=============================>                       (69 + 53) / 122][Stage 193:======================================>              (89 + 33) / 122][Stage 193:=============================================>      (106 + 16) / 122][Stage 193:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.154131661 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405832346 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (59 + 54) / 113][Stage 194:============================>                        (60 + 53) / 113][Stage 194:=======================================>             (84 + 29) / 113][Stage 194:==============================================>     (102 + 11) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:===========================>                         (59 + 55) / 114][Stage 195:==============================>                      (66 + 48) / 114][Stage 195:=======================================>             (84 + 30) / 114][Stage 195:==============================================>     (103 + 11) / 114][Stage 195:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.15722174 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344438702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:====================================>                (80 + 35) / 115][Stage 196:========================================>            (88 + 27) / 115][Stage 196:=============================================>      (100 + 15) / 115][Stage 196:==================================================>  (110 + 5) / 115]                                                                                [Stage 197:======================================>              (84 + 32) / 116][Stage 197:============================================>        (97 + 19) / 116][Stage 197:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.658241228 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392565676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (61 + 59) / 120][Stage 198:===============================>                     (72 + 48) / 120][Stage 198:==========================================>          (96 + 24) / 120][Stage 198:===================================================> (117 + 3) / 120]                                                                                [Stage 199:==========================>                          (61 + 60) / 121][Stage 199:=============================>                       (67 + 54) / 121][Stage 199:======================================>              (87 + 34) / 121][Stage 199:=============================================>      (107 + 14) / 121][Stage 199:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.000766385 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/24 17:29:45 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:44520) dropped. Could not find BlockManagerMaster.
17/05/24 17:29:45 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:52530) dropped. RpcEnv already stopped.
17/05/24 17:29:45 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.34:52530) dropped. RpcEnv already stopped.

real	9m57.360s
user	11m56.924s
sys	0m40.908s
