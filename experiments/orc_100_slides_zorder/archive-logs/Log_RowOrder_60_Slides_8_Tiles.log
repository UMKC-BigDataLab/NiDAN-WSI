Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 23:40:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:40:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:40:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:40:51 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 23:40:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 23:41:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524234053-0609).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.32944343 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:===================================>                   (75 + 40) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.505918894 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 100  OR  partitionIndex = 101   OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115  O R  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.797069898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=====================>                                 (46 + 74) / 120][Stage 2:==========================>                            (58 + 62) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:=============================>                         (64 + 56) / 120][Stage 2:==================================>                    (75 + 45) / 120][Stage 2:=====================================>                 (82 + 38) / 120][Stage 2:============================================>          (98 + 22) / 120][Stage 2:====================================================>  (114 + 6) / 120][Stage 2:======================================================>(119 + 1) / 120]                                                                                [Stage 3:===========================>                           (61 + 60) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (67 + 54) / 121][Stage 3:==================================>                    (75 + 46) / 121][Stage 3:=======================================>               (87 + 34) / 121][Stage 3:============================================>          (98 + 23) / 121][Stage 3:=================================================>    (110 + 11) / 121][Stage 3:======================================================>(119 + 2) / 121][Stage 3:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 6.352603729 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  O R  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90  OR  pa rtitionIndex = 91 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.669265501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==========================>                            (54 + 59) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:=======================================>               (81 + 32) / 113][Stage 4:===============================================>       (98 + 15) / 113][Stage 4:====================================================>  (108 + 5) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:==============================>                        (63 + 51) / 114][Stage 5:====================================>                  (76 + 38) / 114][Stage 5:==========================================>            (89 + 25) / 114][Stage 5:===============================================>      (101 + 13) / 114][Stage 5:===================================================>   (106 + 8) / 114][Stage 5:===================================================>   (107 + 7) / 114]                                                                                Time elapsed: 5.400756699 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 18 7  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 201   OR  partitionIndex = 228 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 228 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.627643649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (72 + 46) / 118][Stage 6:===================================>                   (76 + 42) / 118][Stage 6:=====================================>                 (80 + 38) / 118][Stage 6:==============================================>        (99 + 19) / 118][Stage 6:===================================================>   (110 + 8) / 118][Stage 6:======================================================>(116 + 2) / 118]                                                                                [Stage 7:==================================>                    (74 + 45) / 119][Stage 7:===================================>                   (77 + 42) / 119][Stage 7:==========================================>            (93 + 26) / 119][Stage 7:=================================================>    (108 + 11) / 119][Stage 7:====================================================>  (113 + 6) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.630076076 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 20 6  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233   OR  partitionIndex = 234 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.56117386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===================================>                   (73 + 40) / 113][Stage 8:=======================================>               (81 + 32) / 113][Stage 8:==========================================>            (88 + 25) / 113][Stage 8:=============================================>         (94 + 19) / 113][Stage 8:===================================================>   (105 + 8) / 113][Stage 8:====================================================>  (107 + 6) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:======================================>                (80 + 34) / 114][Stage 9:=========================================>             (87 + 27) / 114][Stage 9:=============================================>         (94 + 20) / 114][Stage 9:===============================================>       (98 + 16) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.263970921 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 15 4  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 169   OR  partitionIndex = 170 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.612748491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (60 + 60) / 120][Stage 10:============================>                         (63 + 57) / 120][Stage 10:===================================>                  (79 + 41) / 120][Stage 10:============================================>         (99 + 21) / 120][Stage 10:=================================================>    (111 + 9) / 120][Stage 10:=====================================================>(118 + 2) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:=============================>                        (65 + 56) / 121][Stage 11:===================================>                  (79 + 42) / 121][Stage 11:==========================================>           (96 + 25) / 121][Stage 11:=================================================>    (112 + 9) / 121][Stage 11:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.961726057 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 36  O R  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  pa rtitionIndex = 51 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.527572606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:================================>                     (72 + 46) / 118][Stage 12:===================================>                  (77 + 41) / 118][Stage 12:=========================================>            (90 + 28) / 118][Stage 12:==============================================>      (104 + 14) / 118][Stage 12:===================================================>  (112 + 6) / 118][Stage 12:====================================================> (115 + 3) / 118]                                                                                [Stage 13:=================================>                    (73 + 46) / 119][Stage 13:===================================>                  (78 + 41) / 119][Stage 13:============================================>         (99 + 20) / 119][Stage 13:==================================================>   (111 + 8) / 119][Stage 13:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.971062533 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 22 0  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234   OR  partitionIndex = 235 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.486255193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:=================================>                    (74 + 44) / 118][Stage 14:=====================================>                (82 + 36) / 118][Stage 14:===========================================>          (96 + 22) / 118][Stage 14:===============================================>     (105 + 13) / 118][Stage 14:==================================================>   (110 + 8) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:===================================>                  (79 + 40) / 119][Stage 15:=======================================>              (88 + 31) / 119][Stage 15:==========================================>           (94 + 25) / 119][Stage 15:==============================================>      (104 + 15) / 119][Stage 15:==============================================>      (105 + 14) / 119][Stage 15:===================================================>  (113 + 6) / 119][Stage 15:=====================================================>(117 + 2) / 119][Stage 15:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.763775832 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  O R  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  pa rtitionIndex = 78 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 75  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.56568022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:==============================>                       (67 + 53) / 120][Stage 16:=================================>                    (75 + 45) / 120][Stage 16:===========================================>          (96 + 24) / 120][Stage 16:===============================================>     (108 + 12) / 120][Stage 16:=====================================================>(119 + 1) / 120]                                                                                [Stage 17:===========================>                          (61 + 60) / 121][Stage 17:============================>                         (63 + 58) / 121][Stage 17:====================================>                 (81 + 40) / 121][Stage 17:===========================================>          (97 + 24) / 121][Stage 17:===============================================>     (109 + 12) / 121][Stage 17:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 4.055618698 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 19 8  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225   OR  partitionIndex = 226 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.420807345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (80 + 35) / 115][Stage 18:=======================================>              (85 + 30) / 115][Stage 18:==============================================>       (98 + 17) / 115][Stage 18:===================================================>  (109 + 6) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:=================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.719782036 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24  OR   partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  par titionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.517074348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===============================>                      (67 + 48) / 115][Stage 20:=====================================>                (79 + 36) / 115][Stage 20:=========================================>            (89 + 26) / 115][Stage 20:================================================>    (105 + 10) / 115]                                                                                [Stage 21:==================================>                   (74 + 42) / 116][Stage 21:======================================>               (83 + 33) / 116][Stage 21:===========================================>          (93 + 23) / 116][Stage 21:=============================================>       (100 + 16) / 116][Stage 21:===============================================>     (105 + 11) / 116][Stage 21:=================================================>    (107 + 9) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.479738262 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 13 1  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 231   OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.479737015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:====================================>                 (77 + 36) / 113][Stage 22:=========================================>            (87 + 26) / 113][Stage 22:============================================>         (94 + 19) / 113][Stage 22:===============================================>     (102 + 11) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:====================================>                 (76 + 38) / 114][Stage 23:========================================>             (86 + 28) / 114][Stage 23:============================================>         (93 + 21) / 114][Stage 23:===============================================>     (102 + 12) / 114][Stage 23:==================================================>   (106 + 8) / 114][Stage 23:====================================================> (110 + 4) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.893186747 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  62  OR  partitionIndex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77  O R  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  pa rtitionIndex = 105 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.482447454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (70 + 45) / 115][Stage 24:========================================>             (87 + 28) / 115][Stage 24:==============================================>      (101 + 14) / 115][Stage 24:===================================================>  (110 + 5) / 115]                                                                                [Stage 25:================================>                     (69 + 47) / 116][Stage 25:===================================>                  (77 + 39) / 116][Stage 25:===========================================>          (93 + 23) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:====================================================> (112 + 4) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.943185278 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  O R  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 107  OR  p artitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.526326386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (60 + 61) / 121][Stage 26:=============================>                        (65 + 56) / 121][Stage 26:=====================================>                (83 + 38) / 121][Stage 26:============================================>        (101 + 20) / 121][Stage 26:==================================================>   (114 + 7) / 121][Stage 26:=====================================================>(119 + 2) / 121]                                                                                [Stage 27:===========================>                          (61 + 61) / 122][Stage 27:=============================>                        (66 + 56) / 122][Stage 27:==================================>                   (78 + 44) / 122][Stage 27:==============================================>      (107 + 15) / 122][Stage 27:==================================================>   (114 + 8) / 122][Stage 27:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 4.106927529 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  O R  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  pa rtitionIndex = 39 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406878368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (79 + 36) / 115][Stage 28:======================================>               (83 + 32) / 115][Stage 28:=============================================>        (96 + 19) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:====================================================> (112 + 3) / 115][Stage 28:=====================================================>(113 + 2) / 115]                                                                                [Stage 29:=====================================>                (81 + 35) / 116][Stage 29:========================================>             (88 + 28) / 116][Stage 29:=============================================>        (98 + 18) / 116][Stage 29:===============================================>     (104 + 12) / 116][Stage 29:===============================================>     (105 + 11) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 7.622071603 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 19 7  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211   OR  partitionIndex = 225 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.463589537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==============================>                       (64 + 51) / 115][Stage 30:=================================>                    (72 + 43) / 115][Stage 30:========================================>             (86 + 29) / 115][Stage 30:================================================>    (105 + 10) / 115][Stage 30:==================================================>   (107 + 8) / 115]                                                                                [Stage 31:=================================>                    (71 + 45) / 116][Stage 31:========================================>             (86 + 30) / 116][Stage 31:==============================================>       (99 + 17) / 116][Stage 31:==================================================>   (108 + 8) / 116][Stage 31:===================================================>  (110 + 6) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.340990445 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 21 8  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233   OR  partitionIndex = 234 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.444213841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:==================================>                   (76 + 42) / 118][Stage 32:=========================================>            (90 + 28) / 118][Stage 32:==============================================>      (103 + 15) / 118][Stage 32:=====================================================>(117 + 1) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:==================================>                   (76 + 43) / 119][Stage 33:=======================================>              (86 + 33) / 119][Stage 33:==============================================>      (104 + 15) / 119][Stage 33:================================================>    (109 + 10) / 119][Stage 33:===================================================>  (114 + 5) / 119][Stage 33:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.216700629 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 19  OR   partitionIndex = 20  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  parti tionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.485664273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:========================================>             (85 + 28) / 113][Stage 34:==================================================>   (105 + 8) / 113]                                                                                [Stage 35:============================>                         (61 + 53) / 114][Stage 35:================================>                     (69 + 45) / 114][Stage 35:========================================>             (86 + 28) / 114][Stage 35:================================================>    (104 + 10) / 114][Stage 35:====================================================> (111 + 3) / 114][Stage 35:=====================================================>(112 + 2) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.542434972 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 15 8  OR  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 173   OR  partitionIndex = 174 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.4492905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:================================>                     (72 + 46) / 118][Stage 36:===================================>                  (77 + 41) / 118][Stage 36:======================================>               (84 + 34) / 118][Stage 36:=============================================>       (102 + 16) / 118][Stage 36:==================================================>   (111 + 7) / 118][Stage 36:=====================================================>(117 + 1) / 118]                                                                                [Stage 37:=================================>                    (74 + 45) / 119][Stage 37:======================================>               (85 + 34) / 119][Stage 37:=========================================>            (92 + 27) / 119][Stage 37:=============================================>       (102 + 17) / 119][Stage 37:====================================================> (116 + 3) / 119][Stage 37:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.091706592 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 14 3  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146   OR  partitionIndex = 158 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.509924789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==========================>                           (60 + 61) / 121][Stage 38:=============================>                        (66 + 55) / 121][Stage 38:=====================================>                (84 + 37) / 121][Stage 38:===============================================>     (108 + 13) / 121][Stage 38:====================================================> (117 + 4) / 121]                                                                                [Stage 39:===========================>                          (61 + 61) / 122][Stage 39:=============================>                        (67 + 55) / 122][Stage 39:====================================>                 (82 + 40) / 122][Stage 39:============================================>        (102 + 20) / 122][Stage 39:====================================================> (119 + 3) / 122][Stage 39:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.059217077 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  O R  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  pa rtitionIndex = 60 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.492731413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==============================>                       (65 + 50) / 115][Stage 40:==================================>                   (73 + 42) / 115][Stage 40:==========================================>           (90 + 25) / 115][Stage 40:==============================================>      (101 + 14) / 115][Stage 40:====================================================> (111 + 4) / 115]                                                                                [Stage 41:===============================>                      (68 + 48) / 116][Stage 41:=======================================>              (85 + 31) / 116][Stage 41:============================================>         (95 + 21) / 116][Stage 41:===============================================>     (104 + 12) / 116][Stage 41:==================================================>   (109 + 7) / 116][Stage 41:===================================================>  (110 + 6) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:====================================================> (113 + 3) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 8.158241667 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 191  OR  partitionIndex = 204  OR  partitionIndex = 20 5  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219   OR  partitionIndex = 233 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.454612199 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==================================>                   (73 + 40) / 113][Stage 42:=======================================>              (83 + 30) / 113][Stage 42:===========================================>          (90 + 23) / 113][Stage 42:================================================>    (103 + 10) / 113][Stage 42:====================================================> (110 + 3) / 113][Stage 42:=====================================================>(112 + 1) / 113]                                                                                [Stage 43:======================================>               (82 + 32) / 114][Stage 43:=============================================>        (97 + 17) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.247648942 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 14 7  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150   OR  partitionIndex = 162 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402707788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (82 + 33) / 115][Stage 44:===========================================>          (92 + 23) / 115][Stage 44:==============================================>       (99 + 16) / 115][Stage 44:==================================================>   (107 + 8) / 115]                                                                                [Stage 45:======================================>               (82 + 34) / 116][Stage 45:=========================================>            (89 + 27) / 116][Stage 45:==============================================>      (101 + 15) / 116][Stage 45:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.97434635 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 14 3  OR  partitionIndex = 144  OR  partitionIndex = 217  OR  partitionIndex = 231   OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.487553793 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (58 + 55) / 113][Stage 46:=============================>                        (61 + 52) / 113][Stage 46:================================>                     (68 + 45) / 113][Stage 46:========================================>             (85 + 28) / 113][Stage 46:===============================================>     (101 + 12) / 113][Stage 46:====================================================> (110 + 3) / 113][Stage 46:=====================================================>(111 + 2) / 113]                                                                                [Stage 47:============================>                         (60 + 54) / 114][Stage 47:===================================>                  (75 + 39) / 114][Stage 47:============================================>         (94 + 20) / 114][Stage 47:=================================================>    (105 + 9) / 114][Stage 47:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.208664031 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  157  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 18 0  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 195   OR  partitionIndex = 196 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 195  OR  partitionIndex = 196 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.470574156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==========================>                           (60 + 61) / 121][Stage 48:============================>                         (63 + 58) / 121][Stage 48:================================>                     (73 + 48) / 121][Stage 48:=========================================>            (94 + 27) / 121][Stage 48:====================================================> (118 + 3) / 121]                                                                                [Stage 49:===========================>                          (63 + 59) / 122][Stage 49:===============================>                      (72 + 50) / 122][Stage 49:========================================>             (92 + 30) / 122][Stage 49:===============================================>     (109 + 13) / 122][Stage 49:=====================================================>(120 + 2) / 122][Stage 49:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.058905397 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  71  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  O R  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 113  OR   partitionIndex = 114 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 113  OR  partitionIndex = 114 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.467531377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:===============================>                      (70 + 50) / 120][Stage 50:=======================================>              (88 + 32) / 120][Stage 50:============================================>        (101 + 19) / 120][Stage 50:====================================================> (117 + 3) / 120]                                                                                [Stage 51:===========================>                          (62 + 59) / 121][Stage 51:=================================>                    (76 + 45) / 121][Stage 51:============================================>        (101 + 20) / 121][Stage 51:===================================================>  (115 + 6) / 121][Stage 51:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.251187762 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  36  OR  partitionIndex = 37  OR  partitionIndex = 51  OR  partitionIndex = 52  O R  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75  OR  pa rtitionIndex = 76 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75  OR  partitionIndex = 76 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384124192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (83 + 32) / 115][Stage 52:============================================>         (95 + 20) / 115][Stage 52:===============================================>     (102 + 13) / 115][Stage 52:===================================================>  (110 + 5) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:=========================================>            (90 + 26) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 5.338173269 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 21 2  OR  partitionIndex = 213  OR  partitionIndex = 225  OR  partitionIndex = 226   OR  partitionIndex = 227 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.421520825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (76 + 37) / 113][Stage 54:=========================================>            (86 + 27) / 113][Stage 54:===============================================>     (101 + 12) / 113][Stage 54:===================================================>  (108 + 5) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:====================================>                 (76 + 38) / 114][Stage 55:========================================>             (86 + 28) / 114][Stage 55:=============================================>        (96 + 18) / 114][Stage 55:=================================================>    (105 + 9) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.035972699 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  O R  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  p artitionIndex = 110 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391524511 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===================================>                  (74 + 39) / 113][Stage 56:========================================>             (85 + 28) / 113][Stage 56:==============================================>      (100 + 13) / 113][Stage 56:====================================================> (109 + 4) / 113][Stage 56:=====================================================>(111 + 2) / 113]                                                                                [Stage 57:========================================>             (85 + 29) / 114][Stage 57:===========================================>          (91 + 23) / 114][Stage 57:==================================================>   (106 + 8) / 114][Stage 57:=====================================================>(112 + 2) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.184427273 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 16 0  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175   OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.445702101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:============================>                         (64 + 56) / 120][Stage 58:====================================>                 (82 + 38) / 120][Stage 58:============================================>        (101 + 19) / 120][Stage 58:====================================================> (117 + 3) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:=============================>                        (65 + 56) / 121][Stage 59:================================>                     (72 + 49) / 121][Stage 59:===========================================>         (100 + 21) / 121][Stage 59:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.633638493 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90  OR  partitionIndex = 91  OR  partitionIndex = 92  OR  partitionIndex = 93  O R  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR   partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39690851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:======================================>               (82 + 33) / 115][Stage 60:==============================================>       (98 + 17) / 115][Stage 60:===================================================>  (110 + 5) / 115]                                                                                [Stage 61:======================================>               (83 + 33) / 116][Stage 61:============================================>         (96 + 20) / 116][Stage 61:=================================================>    (107 + 9) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.766940087 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20  OR   partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  part itionIndex = 35 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368358715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:======================================>               (81 + 34) / 115][Stage 62:===========================================>          (93 + 22) / 115][Stage 62:===============================================>     (104 + 11) / 115][Stage 62:===================================================>  (110 + 5) / 115]                                                                                [Stage 63:======================================>               (82 + 34) / 116][Stage 63:==========================================>           (92 + 24) / 116][Stage 63:===========================================>          (93 + 23) / 116][Stage 63:==================================================>   (108 + 8) / 116][Stage 63:====================================================> (112 + 4) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.816031946 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20  OR   partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  part itionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438127542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:==================================>                   (72 + 41) / 113][Stage 64:============================================>         (94 + 19) / 113][Stage 64:===================================================>  (108 + 5) / 113]                                                                                [Stage 65:============================>                         (60 + 54) / 114][Stage 65:==================================>                   (72 + 42) / 114][Stage 65:===========================================>          (91 + 23) / 114][Stage 65:===============================================>     (103 + 11) / 114][Stage 65:===================================================>  (109 + 5) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.10144455 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  156  OR  partitionIndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 17 1  OR  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181   OR  partitionIndex = 195 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 195 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409735387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:====================================>                 (76 + 37) / 113][Stage 66:========================================>             (85 + 28) / 113][Stage 66:=============================================>        (96 + 17) / 113][Stage 66:===================================================>  (108 + 5) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:====================================>                 (77 + 37) / 114][Stage 67:=========================================>            (87 + 27) / 114][Stage 67:==============================================>      (101 + 13) / 114][Stage 67:====================================================> (110 + 4) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.97196779 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184  OR  partitionIndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 20 0  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227   OR  partitionIndex = 228 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407249207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (69 + 46) / 115][Stage 68:=========================================>            (88 + 27) / 115][Stage 68:==============================================>       (99 + 16) / 115][Stage 68:===================================================>  (110 + 5) / 115]                                                                                [Stage 69:===================================>                  (77 + 39) / 116][Stage 69:==========================================>           (91 + 25) / 116][Stage 69:===============================================>     (105 + 11) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.965052692 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133  OR  partitionIndex = 160  OR  partitionIndex = 16 1  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175   OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.464714718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:=============================>                        (65 + 55) / 120][Stage 70:====================================>                 (82 + 38) / 120][Stage 70:============================================>         (99 + 21) / 120][Stage 70:====================================================> (116 + 4) / 120][Stage 70:=====================================================>(119 + 1) / 120]                                                                                [Stage 71:===========================>                          (61 + 60) / 121][Stage 71:==============================>                       (68 + 53) / 121][Stage 71:====================================>                 (82 + 39) / 121][Stage 71:=============================================>       (104 + 17) / 121][Stage 71:====================================================> (117 + 4) / 121][Stage 71:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.237003305 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 16 9  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 172   OR  partitionIndex = 180 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413994886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:==================================>                   (73 + 40) / 113][Stage 72:=========================================>            (86 + 27) / 113][Stage 72:============================================>         (93 + 20) / 113][Stage 72:=================================================>    (104 + 9) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:======================================>               (81 + 33) / 114][Stage 73:=========================================>            (88 + 26) / 114][Stage 73:=============================================>        (97 + 17) / 114][Stage 73:================================================>    (104 + 10) / 114][Stage 73:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.238092623 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 96  OR   partitionIndex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  pa rtitionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387002372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:==================================>                   (73 + 40) / 113][Stage 74:=========================================>            (86 + 27) / 113][Stage 74:=============================================>        (95 + 18) / 113][Stage 74:===================================================>  (108 + 5) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:=======================================>              (84 + 30) / 114][Stage 75:============================================>         (93 + 21) / 114][Stage 75:===============================================>     (103 + 11) / 114][Stage 75:====================================================> (111 + 3) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.021863684 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 32  OR  partitionIndex = 33  OR   partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  part itionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.445413321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (58 + 55) / 113][Stage 76:=============================>                        (61 + 52) / 113][Stage 76:==================================>                   (72 + 41) / 113][Stage 76:============================================>         (93 + 20) / 113][Stage 76:==================================================>   (106 + 7) / 113]                                                                                [Stage 77:=============================>                        (62 + 52) / 114][Stage 77:====================================>                 (77 + 37) / 114][Stage 77:==============================================>       (98 + 16) / 114][Stage 77:====================================================> (110 + 4) / 114][Stage 77:====================================================> (111 + 3) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.885304508 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 14 0  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167   OR  partitionIndex = 168 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.422558765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:============================>                         (60 + 53) / 113][Stage 78:=================================>                    (70 + 43) / 113][Stage 78:==============================================>       (98 + 15) / 113][Stage 78:=====================================================>(111 + 2) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:===========================>                          (59 + 55) / 114][Stage 79:===============================>                      (66 + 48) / 114][Stage 79:====================================>                 (76 + 38) / 114][Stage 79:==========================================>           (90 + 24) / 114][Stage 79:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.484917419 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126  OR  partitionIndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 14 1  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155   OR  partitionIndex = 169 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 169 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405005628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:================================>                     (72 + 46) / 118][Stage 80:=====================================>                (83 + 35) / 118][Stage 80:=============================================>        (99 + 19) / 118][Stage 80:=================================================>    (109 + 9) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:===================================>                  (78 + 41) / 119][Stage 81:==========================================>           (93 + 26) / 119][Stage 81:===============================================>     (107 + 12) / 119][Stage 81:====================================================> (115 + 4) / 119][Stage 81:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.680407525 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 19 6  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210   OR  partitionIndex = 211 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 195  OR  partitionIndex = 196  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399963629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==================================>                   (74 + 41) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:===============================================>     (102 + 13) / 115][Stage 82:====================================================> (111 + 4) / 115]                                                                                [Stage 83:==================================>                   (74 + 42) / 116][Stage 83:=======================================>              (85 + 31) / 116][Stage 83:==================================================>   (109 + 7) / 116][Stage 83:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.884471466 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104   OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118   OR  partitionIndex = 119 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39002749 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:================================>                     (72 + 46) / 118][Stage 84:===================================>                  (78 + 40) / 118][Stage 84:===========================================>          (96 + 22) / 118][Stage 84:==================================================>   (111 + 7) / 118]                                                                                [Stage 85:=================================>                    (74 + 45) / 119][Stage 85:===================================>                  (78 + 41) / 119][Stage 85:============================================>         (98 + 21) / 119][Stage 85:===================================================>  (113 + 6) / 119][Stage 85:=====================================================>(117 + 2) / 119][Stage 85:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.04039874 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 193  OR  partitionIndex = 220  OR  partitionIndex = 22 1  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235   OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.401538488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:====================================>                 (77 + 38) / 115][Stage 86:===========================================>          (93 + 22) / 115][Stage 86:==================================================>   (107 + 8) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:=====================================>                (80 + 36) / 116][Stage 87:==============================================>      (101 + 15) / 116][Stage 87:====================================================> (112 + 4) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.835160635 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 18 9  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203   OR  partitionIndex = 204 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.425313984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (61 + 59) / 120][Stage 88:=============================>                        (66 + 54) / 120][Stage 88:========================================>             (90 + 30) / 120][Stage 88:================================================>    (110 + 10) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==============================>                       (69 + 52) / 121][Stage 89:=======================================>              (88 + 33) / 121][Stage 89:=============================================>       (105 + 16) / 121][Stage 89:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.060804676 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  O R  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  pa rtitionIndex = 58 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.362501095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=======================================>              (84 + 31) / 115][Stage 90:===========================================>          (92 + 23) / 115][Stage 90:==================================================>   (107 + 8) / 115][Stage 90:=====================================================>(114 + 1) / 115]                                                                                [Stage 91:======================================>               (83 + 33) / 116][Stage 91:========================================>             (88 + 28) / 116][Stage 91:===========================================>          (93 + 23) / 116][Stage 91:===============================================>     (105 + 11) / 116][Stage 91:====================================================> (112 + 4) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.819111024 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 19 5  OR  partitionIndex = 207  OR  partitionIndex = 208  OR  partitionIndex = 235   OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 194  OR  partitionIndex = 195  OR  partitionIndex = 207  OR  partitionIndex = 208  OR  partitionIndex = 235  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382883432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (73 + 40) / 113][Stage 92:========================================>             (84 + 29) / 113][Stage 92:===============================================>     (101 + 12) / 113][Stage 92:===================================================>  (107 + 6) / 113]                                                                                [Stage 93:====================================>                 (76 + 38) / 114][Stage 93:=======================================>              (83 + 31) / 114][Stage 93:===============================================>     (102 + 12) / 114][Stage 93:====================================================> (111 + 3) / 114][Stage 93:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.925261359 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101   OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115  O R  partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377094353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (71 + 42) / 113][Stage 94:=======================================>              (83 + 30) / 113][Stage 94:===========================================>          (90 + 23) / 113][Stage 94:===============================================>      (99 + 14) / 113][Stage 94:====================================================> (109 + 4) / 113]                                                                                [Stage 95:=====================================>                (79 + 35) / 114][Stage 95:==========================================>           (89 + 25) / 114][Stage 95:==============================================>       (98 + 16) / 114][Stage 95:====================================================> (110 + 4) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.104716187 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  137  OR  partitionIndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 15 1  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165   OR  partitionIndex = 166 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 165  OR  partitionIndex = 166 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.351995857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (80 + 35) / 115][Stage 96:========================================>             (87 + 28) / 115][Stage 96:============================================>         (95 + 20) / 115][Stage 96:===============================================>     (103 + 12) / 115]                                                                                [Stage 97:======================================>               (83 + 33) / 116][Stage 97:=============================================>        (97 + 19) / 116][Stage 97:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.640272909 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  164  OR  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 18 0  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203   OR  partitionIndex = 204 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359426915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (83 + 32) / 115][Stage 98:=============================================>        (97 + 18) / 115][Stage 98:==================================================>   (107 + 8) / 115][Stage 98:====================================================> (111 + 4) / 115]                                                                                [Stage 99:========================================>             (88 + 28) / 116][Stage 99:=============================================>        (98 + 18) / 116][Stage 99:==================================================>   (108 + 8) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.783483984 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  O R  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  pa rtitionIndex = 58 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358353916 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (80 + 33) / 113][Stage 100:========================================>            (86 + 27) / 113][Stage 100:==============================================>      (99 + 14) / 113][Stage 100:=================================================>   (105 + 8) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:======================================>              (82 + 32) / 114][Stage 101:=======================================>             (85 + 29) / 114][Stage 101:============================================>        (95 + 19) / 114][Stage 101:===============================================>    (104 + 10) / 114][Stage 101:===================================================> (111 + 3) / 114][Stage 101:====================================================>(112 + 2) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.076676538 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 12 0  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 135   OR  partitionIndex = 136 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 122  OR  partitionIndex = 135  OR  partitionIndex = 136 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.419188685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 60) / 120][Stage 102:============================>                        (65 + 55) / 120][Stage 102:====================================>                (83 + 37) / 120][Stage 102:============================================>       (103 + 17) / 120][Stage 102:===================================================> (116 + 4) / 120]                                                                                [Stage 103:===========================>                         (62 + 59) / 121][Stage 103:==================================>                  (78 + 43) / 121][Stage 103:============================================>       (104 + 17) / 121][Stage 103:==================================================>  (116 + 5) / 121][Stage 103:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.001714446 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  O R  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  pa rtitionIndex = 56 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 56 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385124951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:====================================>                (79 + 36) / 115][Stage 104:=========================================>           (89 + 26) / 115][Stage 104:=============================================>       (98 + 17) / 115][Stage 104:=================================================>   (108 + 7) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:===============================>                     (70 + 46) / 116][Stage 105:=====================================>               (81 + 35) / 116][Stage 105:==========================================>          (93 + 23) / 116][Stage 105:===============================================>    (106 + 10) / 116][Stage 105:================================================>    (107 + 9) / 116][Stage 105:==================================================>  (111 + 5) / 116][Stage 105:===================================================> (113 + 3) / 116][Stage 105:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.994395575 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 14 0  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154   OR  partitionIndex = 155 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140  OR  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413710606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===============================>                     (69 + 46) / 115][Stage 106:====================================>                (79 + 36) / 115][Stage 106:===========================================>         (94 + 21) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:==============================>                      (66 + 50) / 116][Stage 107:=======================================>             (86 + 30) / 116][Stage 107:=============================================>      (101 + 15) / 116][Stage 107:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.711177757 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  O R  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  pa rtitionIndex = 59 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.439407941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 61) / 121][Stage 108:============================>                        (64 + 57) / 121][Stage 108:=================================>                   (76 + 45) / 121][Stage 108:=============================================>      (105 + 16) / 121][Stage 108:====================================================>(119 + 2) / 121]                                                                                [Stage 109:==========================>                          (61 + 61) / 122][Stage 109:==============================>                      (71 + 51) / 122][Stage 109:=====================================>               (86 + 36) / 122][Stage 109:=============================================>      (106 + 16) / 122][Stage 109:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.764485809 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  O R  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  pa rtitionIndex = 113 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.394045169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=============================>                       (62 + 51) / 113][Stage 110:==================================>                  (73 + 40) / 113][Stage 110:============================================>        (94 + 19) / 113][Stage 110:===================================================> (109 + 4) / 113]                                                                                [Stage 111:===========================>                         (60 + 54) / 114][Stage 111:===============================>                     (67 + 47) / 114][Stage 111:===========================================>         (94 + 20) / 114][Stage 111:=================================================>   (106 + 8) / 114][Stage 111:===================================================> (111 + 3) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.691796424 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22  OR   partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  part itionIndex = 50 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376042112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:================================>                    (73 + 45) / 118][Stage 112:===================================>                 (80 + 38) / 118][Stage 112:======================================>              (85 + 33) / 118][Stage 112:============================================>       (100 + 18) / 118][Stage 112:===================================================> (114 + 4) / 118][Stage 112:====================================================>(117 + 1) / 118]                                                                                [Stage 113:================================>                    (73 + 46) / 119][Stage 113:=================================>                   (76 + 43) / 119][Stage 113:=====================================>               (84 + 35) / 119][Stage 113:============================================>       (101 + 18) / 119][Stage 113:==================================================>  (113 + 6) / 119][Stage 113:==================================================>  (114 + 5) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.490672579 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 14 4  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 231   OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.416768266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:==========================>                          (61 + 59) / 120][Stage 114:=================================>                   (75 + 45) / 120][Stage 114:============================================>       (102 + 18) / 120][Stage 114:==================================================>  (115 + 5) / 120]                                                                                [Stage 115:============================>                        (65 + 56) / 121][Stage 115:================================>                    (74 + 47) / 121][Stage 115:===========================================>        (101 + 20) / 121][Stage 115:===================================================> (117 + 4) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.539914969 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 20 8  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235   OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.340711119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=====================================>               (81 + 34) / 115][Stage 116:=========================================>           (91 + 24) / 115][Stage 116:==============================================>     (103 + 12) / 115][Stage 116:===================================================> (112 + 3) / 115]                                                                                [Stage 117:======================================>              (85 + 31) / 116][Stage 117:=============================================>      (101 + 15) / 116][Stage 117:===================================================> (113 + 3) / 116][Stage 117:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.74465693 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 15 5  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169   OR  partitionIndex = 170 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353085397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (71 + 42) / 113][Stage 118:======================================>              (83 + 30) / 113][Stage 118:=============================================>       (98 + 15) / 113][Stage 118:=================================================>   (105 + 8) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===================================>                 (76 + 38) / 114][Stage 119:========================================>            (87 + 27) / 114][Stage 119:=============================================>       (98 + 16) / 114][Stage 119:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.828873076 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 21 0  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 225   OR  partitionIndex = 226 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.338027879 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:======================================>              (84 + 31) / 115][Stage 120:============================================>        (96 + 19) / 115][Stage 120:=================================================>   (108 + 7) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:========================================>            (89 + 27) / 116][Stage 121:============================================>        (98 + 18) / 116][Stage 121:===================================================> (112 + 4) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.946463155 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 22 1  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235   OR  partitionIndex = 236 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 233  OR  partitionIndex = 234  OR  partitionIndex = 235  OR  partitionIndex = 236 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398189269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:===============================>                     (71 + 50) / 121][Stage 122:========================================>            (93 + 28) / 121][Stage 122:==================================================>  (115 + 6) / 121]                                                                                [Stage 123:==========================>                          (62 + 60) / 122][Stage 123:==============================>                      (71 + 51) / 122][Stage 123:==========================================>          (97 + 25) / 122][Stage 123:==============================================>     (109 + 13) / 122][Stage 123:====================================================>(120 + 2) / 122][Stage 123:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.064301495 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  O R  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  pa rtitionIndex = 69 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377771433 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:======================================>              (83 + 32) / 115][Stage 124:===========================================>         (95 + 20) / 115][Stage 124:==================================================>  (110 + 5) / 115]                                                                                [Stage 125:===============================>                     (68 + 48) / 116][Stage 125:======================================>              (84 + 32) / 116][Stage 125:=============================================>      (101 + 15) / 116][Stage 125:==================================================>  (110 + 6) / 116][Stage 125:===================================================> (112 + 4) / 116][Stage 125:====================================================>(114 + 2) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.709469404 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  210  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 21 3  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227   OR  partitionIndex = 228 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 225  OR  partitionIndex = 226  OR  partitionIndex = 227  OR  partitionIndex = 228 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402739089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 61) / 121][Stage 126:============================>                        (65 + 56) / 121][Stage 126:===================================>                 (82 + 39) / 121][Stage 126:==============================================>     (109 + 12) / 121][Stage 126:====================================================>(120 + 1) / 121]                                                                                [Stage 127:==========================>                          (61 + 61) / 122][Stage 127:=============================>                       (68 + 54) / 122][Stage 127:=====================================>               (87 + 35) / 122][Stage 127:==============================================>     (108 + 14) / 122][Stage 127:====================================================>(120 + 2) / 122][Stage 127:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.747192032 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  O R  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR   partitionIndex = 114 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380939632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (58 + 55) / 113][Stage 128:==============================>                      (64 + 49) / 113][Stage 128:====================================>                (77 + 36) / 113][Stage 128:=============================================>       (98 + 15) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:===========================>                         (59 + 55) / 114][Stage 129:=============================>                       (64 + 50) / 114][Stage 129:===================================>                 (77 + 37) / 114][Stage 129:=================================================>   (106 + 8) / 114][Stage 129:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.192805952 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 19 1  OR  partitionIndex = 203  OR  partitionIndex = 204  OR  partitionIndex = 205   OR  partitionIndex = 206 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204  OR  partitionIndex = 205  OR  partitionIndex = 206 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375497813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (72 + 46) / 118][Stage 130:==================================>                  (76 + 42) / 118][Stage 130:=========================================>           (93 + 25) / 118][Stage 130:==============================================>     (105 + 13) / 118][Stage 130:====================================================>(117 + 1) / 118]                                                                                [Stage 131:================================>                    (73 + 46) / 119][Stage 131:=================================>                   (75 + 44) / 119][Stage 131:======================================>              (86 + 33) / 119][Stage 131:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.290836034 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  104  OR  partitionIndex = 105  OR  partitionIndex = 118  OR  partitionIndex = 11 9  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121   OR  partitionIndex = 135 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386324491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===========================>                         (59 + 54) / 113][Stage 132:==============================>                      (64 + 49) / 113][Stage 132:====================================>                (78 + 35) / 113][Stage 132:===============================================>    (103 + 10) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:===========================>                         (60 + 54) / 114][Stage 133:===============================>                     (67 + 47) / 114][Stage 133:=========================================>           (90 + 24) / 114][Stage 133:=================================================>   (106 + 8) / 114][Stage 133:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.448520485 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  O R  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  pa rtitionIndex = 68 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 57  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404221528 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:============================>                        (61 + 52) / 113][Stage 134:=================================>                   (72 + 41) / 113][Stage 134:==========================================>          (90 + 23) / 113][Stage 134:================================================>    (104 + 9) / 113]                                                                                [Stage 135:============================>                        (61 + 53) / 114][Stage 135:===================================>                 (76 + 38) / 114][Stage 135:============================================>        (96 + 18) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:====================================================>(112 + 2) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.81689662 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  O R  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109  OR  p artitionIndex = 110 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109  OR  partitionIndex = 110 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.348506838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (71 + 42) / 113][Stage 136:======================================>              (83 + 30) / 113][Stage 136:============================================>        (94 + 19) / 113][Stage 136:==============================================>     (100 + 13) / 113][Stage 136:=================================================>   (106 + 7) / 113]                                                                                [Stage 137:======================================>              (82 + 32) / 114][Stage 137:===========================================>         (94 + 20) / 114][Stage 137:==============================================>     (103 + 11) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.873484447 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129  OR  partitionIndex = 216  OR  partitionIndex = 21 7  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231   OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.371888974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==============================>                      (66 + 49) / 115][Stage 138:=====================================>               (82 + 33) / 115][Stage 138:============================================>        (96 + 19) / 115][Stage 138:================================================>    (106 + 9) / 115][Stage 138:===================================================> (112 + 3) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:================================>                    (72 + 44) / 116][Stage 139:========================================>            (89 + 27) / 116][Stage 139:===============================================>    (106 + 10) / 116][Stage 139:==================================================>  (111 + 5) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.143454399 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  O R  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  p artitionIndex = 110 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionIndex = 110 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.33641714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:====================================>                (80 + 35) / 115][Stage 140:========================================>            (88 + 27) / 115][Stage 140:=============================================>      (100 + 15) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:=====================================>               (82 + 34) / 116][Stage 141:=======================================>             (86 + 30) / 116][Stage 141:==============================================>     (103 + 13) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.645114388 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 15 6  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170   OR  partitionIndex = 171 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384689152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (60 + 53) / 113][Stage 142:==================================>                  (73 + 40) / 113][Stage 142:=========================================>           (89 + 24) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:===========================>                         (59 + 55) / 114][Stage 143:==============================>                      (65 + 49) / 114][Stage 143:====================================>                (79 + 35) / 114][Stage 143:=============================================>      (100 + 14) / 114][Stage 143:=================================================>   (107 + 7) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.484583539 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 21 7  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231   OR  partitionIndex = 232 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 229  OR  partitionIndex = 230  OR  partitionIndex = 231  OR  partitionIndex = 232 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.483241154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:>                                                      (0 + 0) / 120][Stage 144:==========================>                          (60 + 60) / 120][Stage 144:===============================>                     (71 + 49) / 120][Stage 144:========================================>            (91 + 29) / 120][Stage 144:===========================================>        (101 + 19) / 120][Stage 144:===================================================> (117 + 3) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:=============================>                       (67 + 54) / 121][Stage 145:===================================>                 (80 + 41) / 121][Stage 145:===========================================>        (101 + 20) / 121][Stage 145:=================================================>   (112 + 9) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.543774069 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 11 8  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120   OR  partitionIndex = 121 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118  OR  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.3381894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:======================================>              (84 + 31) / 115][Stage 146:===========================================>         (94 + 21) / 115][Stage 146:=================================================>   (108 + 7) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:========================================>            (88 + 28) / 116][Stage 147:=============================================>      (101 + 15) / 116][Stage 147:=================================================>   (108 + 8) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.804855679 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  18  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 32  O R  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  pa rtitionIndex = 47 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368442374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:================================>                    (73 + 45) / 118][Stage 148:=====================================>               (83 + 35) / 118][Stage 148:============================================>        (98 + 20) / 118][Stage 148:==================================================>  (113 + 5) / 118][Stage 148:====================================================>(117 + 1) / 118]                                                                                [Stage 149:================================>                    (73 + 46) / 119][Stage 149:==================================>                  (77 + 42) / 119][Stage 149:======================================>              (86 + 33) / 119][Stage 149:============================================>        (99 + 20) / 119][Stage 149:==================================================>  (113 + 6) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.76202497 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 20 0  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214   OR  partitionIndex = 215 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39601217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (61 + 59) / 120][Stage 150:=================================>                   (76 + 44) / 120][Stage 150:===========================================>         (98 + 22) / 120][Stage 150:====================================================>(118 + 2) / 120]                                                                                [Stage 151:============================>                        (65 + 56) / 121][Stage 151:==================================>                  (78 + 43) / 121][Stage 151:===========================================>         (99 + 22) / 121][Stage 151:=================================================>   (113 + 8) / 121][Stage 151:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.408413254 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 100   OR  partitionIndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115  OR   partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365895735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (74 + 44) / 118][Stage 152:=======================================>             (89 + 29) / 118][Stage 152:============================================>       (102 + 16) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:=================================>                   (75 + 44) / 119][Stage 153:==================================>                  (77 + 42) / 119][Stage 153:========================================>            (92 + 27) / 119][Stage 153:================================================>    (110 + 9) / 119][Stage 153:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.790942764 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR   partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  part itionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 25  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368027834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (72 + 46) / 118][Stage 154:==================================>                  (76 + 42) / 118][Stage 154:=====================================>               (84 + 34) / 118][Stage 154:===========================================>         (97 + 21) / 118][Stage 154:====================================================>(116 + 2) / 118]                                                                                [Stage 155:================================>                    (73 + 46) / 119][Stage 155:=================================>                   (75 + 44) / 119][Stage 155:=====================================>               (84 + 35) / 119][Stage 155:=======================================>             (88 + 31) / 119][Stage 155:===========================================>         (98 + 21) / 119][Stage 155:==================================================>  (113 + 6) / 119][Stage 155:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.935973618 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 88  O R  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 115  OR   partitionIndex = 116 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 88  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 115  OR  partitionIndex = 116 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399815909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (62 + 58) / 120][Stage 156:=================================>                   (75 + 45) / 120][Stage 156:==========================================>          (96 + 24) / 120][Stage 156:==================================================>  (114 + 6) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:=============================>                       (68 + 53) / 121][Stage 157:====================================>                (84 + 37) / 121][Stage 157:=============================================>      (106 + 15) / 121][Stage 157:===================================================> (117 + 4) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.532145752 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84  O R  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  pa rtitionIndex = 99 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382872192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==================================>                  (75 + 40) / 115][Stage 158:==========================================>          (93 + 22) / 115][Stage 158:===============================================>    (105 + 10) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:====================================>                (80 + 36) / 116][Stage 159:=========================================>           (91 + 25) / 116][Stage 159:================================================>    (107 + 9) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.827691116 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 14 8  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 175   OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359926835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:=================================>                   (75 + 43) / 118][Stage 160:========================================>            (90 + 28) / 118][Stage 160:============================================>       (102 + 16) / 118][Stage 160:====================================================>(116 + 2) / 118]                                                                                [Stage 161:=================================>                   (75 + 44) / 119][Stage 161:===================================>                 (80 + 39) / 119][Stage 161:==========================================>          (95 + 24) / 119][Stage 161:=================================================>   (112 + 7) / 119][Stage 161:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.613211096 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 65  OR  partitionIndex = 92  OR  partitionIndex = 93  O R  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR   partitionIndex = 108 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106  OR  partitionIndex = 107  OR  partitionIndex = 108 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406847328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (61 + 60) / 121][Stage 162:===============================>                     (72 + 49) / 121][Stage 162:=======================================>             (90 + 31) / 121][Stage 162:===============================================>    (110 + 11) / 121]                                                                                [Stage 163:==========================>                          (61 + 61) / 122][Stage 163:=============================>                       (69 + 53) / 122][Stage 163:====================================>                (83 + 39) / 122][Stage 163:==============================================>     (109 + 13) / 122][Stage 163:===================================================> (118 + 4) / 122][Stage 163:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.252402662 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 14 7  OR  partitionIndex = 148  OR  partitionIndex = 161  OR  partitionIndex = 175   OR  partitionIndex = 176 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341726759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:====================================>                (80 + 35) / 115][Stage 164:=======================================>             (86 + 29) / 115][Stage 164:===============================================>    (104 + 11) / 115][Stage 164:===================================================> (112 + 3) / 115]                                                                                [Stage 165:=========================================>           (90 + 26) / 116][Stage 165:==============================================>     (104 + 12) / 116][Stage 165:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.480832178 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  O R  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  pa rtitionIndex = 30 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393954829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:============================>                        (65 + 55) / 120][Stage 166:=================================>                   (75 + 45) / 120][Stage 166:==========================================>          (96 + 24) / 120][Stage 166:=================================================>   (113 + 7) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:===============================>                     (73 + 48) / 121][Stage 167:========================================>            (93 + 28) / 121][Stage 167:=================================================>   (112 + 9) / 121][Stage 167:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.803233523 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  O R  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  pa rtitionIndex = 98 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84  OR  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406019228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:===========================>                         (63 + 57) / 120][Stage 168:===================================>                 (81 + 39) / 120][Stage 168:==============================================>     (108 + 12) / 120][Stage 168:====================================================>(118 + 2) / 120]                                                                                [Stage 169:============================>                        (65 + 56) / 121][Stage 169:===================================>                 (80 + 41) / 121][Stage 169:============================================>       (104 + 17) / 121][Stage 169:=================================================>   (114 + 7) / 121][Stage 169:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.288890595 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 15 7  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171   OR  partitionIndex = 172 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170  OR  partitionIndex = 171  OR  partitionIndex = 172 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.388181571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (70 + 45) / 115][Stage 170:====================================>                (80 + 35) / 115][Stage 170:=============================================>      (100 + 15) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:=================================>                   (74 + 42) / 116][Stage 171:=========================================>           (90 + 26) / 116][Stage 171:============================================>       (100 + 16) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.374898138 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100   OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114  OR   partitionIndex = 115 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114  OR  partitionIndex = 115 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349458938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (79 + 34) / 113][Stage 172:=========================================>           (88 + 25) / 113][Stage 172:==============================================>     (100 + 13) / 113][Stage 172:===================================================> (110 + 3) / 113][Stage 172:====================================================>(111 + 2) / 113]                                                                                [Stage 173:=====================================>               (80 + 34) / 114][Stage 173:==========================================>          (91 + 23) / 114][Stage 173:=============================================>       (98 + 16) / 114][Stage 173:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.129814101 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR   partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  part itionIndex = 49 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381535952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===========================>                         (59 + 54) / 113][Stage 174:===============================>                     (67 + 46) / 113][Stage 174:========================================>            (86 + 27) / 113][Stage 174:===================================================> (109 + 4) / 113]                                                                                [Stage 175:============================>                        (61 + 53) / 114][Stage 175:=================================>                   (72 + 42) / 114][Stage 175:======================================>              (83 + 31) / 114][Stage 175:================================================>    (105 + 9) / 114][Stage 175:====================================================>(112 + 2) / 114][Stage 175:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.618258077 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  44  OR  partitionIndex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59  O R  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69  OR  pa rtitionIndex = 83 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 83 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369834674 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==================================>                  (75 + 40) / 115][Stage 176:==========================================>          (93 + 22) / 115][Stage 176:===============================================>    (104 + 11) / 115][Stage 176:====================================================>(113 + 2) / 115]                                                                                [Stage 177:=================================>                   (73 + 43) / 116][Stage 177:=====================================>               (81 + 35) / 116][Stage 177:===========================================>         (96 + 20) / 116][Stage 177:================================================>    (107 + 9) / 116][Stage 177:==================================================>  (111 + 5) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.286526118 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 16 2  OR  partitionIndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 177   OR  partitionIndex = 178 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 177  OR  partitionIndex = 178 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405715947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:============================>                        (65 + 56) / 121][Stage 178:================================>                    (75 + 46) / 121][Stage 178:===========================================>         (99 + 22) / 121][Stage 178:==================================================>  (116 + 5) / 121]                                                                                [Stage 179:===========================>                         (63 + 59) / 122][Stage 179:===============================>                     (73 + 49) / 122][Stage 179:==========================================>          (98 + 24) / 122][Stage 179:==================================================>  (116 + 6) / 122][Stage 179:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.237999044 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR   partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  par titionIndex = 48 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 31  OR  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 45  OR  partitionIndex = 46  OR  partitionIndex = 47  OR  partitionIndex = 48 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.401492388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:============================>                        (65 + 55) / 120][Stage 180:=================================>                   (76 + 44) / 120][Stage 180:============================================>       (102 + 18) / 120][Stage 180:===================================================> (117 + 3) / 120]                                                                                [Stage 181:===========================>                         (63 + 58) / 121][Stage 181:===============================>                     (72 + 49) / 121][Stage 181:===========================================>        (101 + 20) / 121][Stage 181:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.387903976 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  O R  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionIndex = 53  OR  pa rtitionIndex = 54 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionIndex = 53  OR  partitionIndex = 54 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411542506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (72 + 43) / 115][Stage 182:=======================================>             (85 + 30) / 115][Stage 182:=============================================>      (100 + 15) / 115][Stage 182:===================================================> (112 + 3) / 115]                                                                                [Stage 183:==================================>                  (75 + 41) / 116][Stage 183:======================================>              (84 + 32) / 116][Stage 183:===========================================>         (95 + 21) / 116][Stage 183:===============================================>    (106 + 10) / 116][Stage 183:===================================================> (112 + 4) / 116][Stage 183:====================================================>(114 + 2) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.754531937 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 23  OR   partitionIndex = 24  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  par titionIndex = 112 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 10  OR  partitionIndex = 23  OR  partitionIndex = 24  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.374073013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===================================>                 (76 + 39) / 115][Stage 184:=======================================>             (86 + 29) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:===================================================> (112 + 3) / 115]                                                                                [Stage 185:==============================>                      (67 + 49) / 116][Stage 185:====================================>                (80 + 36) / 116][Stage 185:==========================================>          (93 + 23) / 116][Stage 185:==============================================>     (103 + 13) / 116][Stage 185:==================================================>  (110 + 6) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.615796436 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  O R  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  pa rtitionIndex = 94 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 79  OR  partitionIndex = 80  OR  partitionIndex = 81  OR  partitionIndex = 82  OR  partitionIndex = 94 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.333727701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:========================================>            (87 + 28) / 115][Stage 186:================================================>    (106 + 9) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:=======================================>             (86 + 30) / 116][Stage 187:===========================================>         (95 + 21) / 116][Stage 187:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.732801792 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 21 1  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 225   OR  partitionIndex = 226 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 225  OR  partitionIndex = 226 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.397240489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 61) / 121][Stage 188:============================>                        (65 + 56) / 121][Stage 188:===================================>                 (80 + 41) / 121][Stage 188:===========================================>         (99 + 22) / 121]                                                                                [Stage 189:==========================>                          (61 + 61) / 122][Stage 189:=============================>                       (67 + 55) / 122][Stage 189:=========================================>           (96 + 26) / 122][Stage 189:==================================================>  (116 + 6) / 122][Stage 189:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.595528359 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 14 8  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162   OR  partitionIndex = 163 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162  OR  partitionIndex = 163 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379786852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (58 + 55) / 113][Stage 190:=============================>                       (63 + 50) / 113][Stage 190:===================================>                 (75 + 38) / 113][Stage 190:==========================================>          (91 + 22) / 113][Stage 190:================================================>    (104 + 9) / 113]                                                                                [Stage 191:============================>                        (62 + 52) / 114][Stage 191:===================================>                 (77 + 37) / 114][Stage 191:============================================>        (96 + 18) / 114][Stage 191:===================================================> (110 + 4) / 114][Stage 191:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.846395814 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  186  OR  partitionIndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 20 2  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229   OR  partitionIndex = 230 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229  OR  partitionIndex = 230 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.362571375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:=================================>                   (74 + 44) / 118][Stage 192:===================================>                 (79 + 39) / 118][Stage 192:========================================>            (90 + 28) / 118][Stage 192:===================================================> (115 + 3) / 118][Stage 192:====================================================>(117 + 1) / 118]                                                                                [Stage 193:=================================>                   (75 + 44) / 119][Stage 193:======================================>              (87 + 32) / 119][Stage 193:==========================================>          (95 + 24) / 119][Stage 193:=============================================>      (105 + 14) / 119][Stage 193:===================================================> (115 + 4) / 119][Stage 193:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.994180287 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  O R  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  pa rtitionIndex = 61 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 49  OR  partitionIndex = 50  OR  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366108454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==================================>                  (74 + 39) / 113][Stage 194:======================================>              (82 + 31) / 113][Stage 194:===========================================>         (92 + 21) / 113][Stage 194:==============================================>     (101 + 12) / 113][Stage 194:===================================================> (109 + 4) / 113]                                                                                [Stage 195:==================================>                  (74 + 40) / 114][Stage 195:=======================================>             (85 + 29) / 114][Stage 195:==========================================>          (92 + 22) / 114][Stage 195:==============================================>     (103 + 11) / 114][Stage 195:=================================================>   (107 + 7) / 114][Stage 195:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 6.432179232 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  O R  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  pa rtitionIndex = 57 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 28  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341808359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=====================================>               (82 + 33) / 115][Stage 196:========================================>            (87 + 28) / 115][Stage 196:============================================>        (96 + 19) / 115][Stage 196:==============================================>     (103 + 12) / 115][Stage 196:==================================================>  (110 + 5) / 115]                                                                                [Stage 197:=====================================>               (82 + 34) / 116][Stage 197:=======================================>             (87 + 29) / 116][Stage 197:============================================>        (98 + 18) / 116][Stage 197:==============================================>     (103 + 13) / 116][Stage 197:==================================================>  (111 + 5) / 116][Stage 197:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 7.089792415 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  O R  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  pa rtitionIndex = 58 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.354908257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (72 + 41) / 113][Stage 198:======================================>              (83 + 30) / 113][Stage 198:============================================>        (94 + 19) / 113][Stage 198:================================================>    (104 + 9) / 113][Stage 198:===================================================> (109 + 4) / 113]                                                                                [Stage 199:=====================================>               (81 + 33) / 114][Stage 199:=========================================>           (89 + 25) / 114][Stage 199:============================================>        (96 + 18) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:==================================================>  (109 + 5) / 114][Stage 199:===================================================> (111 + 3) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.22959261 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  p artitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partit ionIndex = 22 ", 8))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20  OR  partitionIndex = 21  OR  partitionIndex = 22 ",8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384980871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (60 + 60) / 120][Stage 200:===============================>                     (71 + 49) / 120][Stage 200:==================================>                  (78 + 42) / 120][Stage 200:===========================================>         (98 + 22) / 120][Stage 200:===================================================> (116 + 4) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:===============================>                     (71 + 50) / 121][Stage 201:======================================>              (87 + 34) / 121][Stage 201:===========================================>         (99 + 22) / 121][Stage 201:===================================================> (118 + 3) / 121][Stage 201:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.044072938 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/24 23:52:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:51732) dropped. RpcEnv already stopped.
17/05/24 23:52:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:50256) dropped. RpcEnv already stopped.
17/05/24 23:52:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:57210) dropped. RpcEnv already stopped.
17/05/24 23:52:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.41:51732) dropped. RpcEnv already stopped.
17/05/24 23:52:08 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:57210) dropped. RpcEnv already stopped.

real	11m36.159s
user	12m15.652s
sys	1m34.840s
