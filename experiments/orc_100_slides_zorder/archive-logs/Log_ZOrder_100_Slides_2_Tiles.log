Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 04:25:35 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:25:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:25:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:25:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 04:25:52 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:26:03 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525042551-0636).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.446056413 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:====================>                                  (42 + 73) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115]                                                                                [Stage 1:=======================>                               (50 + 66) / 116][Stage 1:===========================>                           (59 + 57) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.827255569 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIn dex<=226", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.866459649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:==================>                                    (40 + 81) / 121][Stage 2:=======================>                               (51 + 70) / 121][Stage 2:===========================>                           (60 + 61) / 121][Stage 2:============================>                          (63 + 58) / 121][Stage 2:=============================>                         (65 + 56) / 121][Stage 2:==================================>                    (75 + 46) / 121][Stage 2:========================================>              (89 + 32) / 121][Stage 2:=================================================>    (111 + 10) / 121]                                                                                [Stage 3:==========================>                            (59 + 63) / 122][Stage 3:===========================>                           (61 + 61) / 122][Stage 3:============================>                          (64 + 58) / 122][Stage 3:===============================>                       (70 + 52) / 122][Stage 3:========================================>              (90 + 32) / 122][Stage 3:==============================================>       (106 + 16) / 122][Stage 3:=====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.726440131 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIn dex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.751744124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:===========================>                           (60 + 61) / 121][Stage 4:============================>                          (63 + 58) / 121][Stage 4:==============================>                        (67 + 54) / 121][Stage 4:=====================================>                 (82 + 39) / 121][Stage 4:=============================================>         (99 + 22) / 121]                                                                                [Stage 5:===========================>                           (60 + 62) / 122][Stage 5:============================>                          (64 + 58) / 122][Stage 5:================================>                      (71 + 51) / 122][Stage 5:====================================>                  (81 + 41) / 122][Stage 5:=============================================>        (103 + 19) / 122][Stage 5:===================================================>   (114 + 8) / 122][Stage 5:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.404909528 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIn dex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.56016264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:===============================>                       (68 + 50) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:==================================>                    (74 + 44) / 118][Stage 6:=======================================>               (84 + 34) / 118][Stage 6:===========================================>           (94 + 24) / 118][Stage 6:===============================================>      (103 + 15) / 118][Stage 6:===================================================>   (111 + 7) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:==================================>                    (75 + 44) / 119][Stage 7:========================================>              (87 + 32) / 119][Stage 7:=============================================>         (99 + 20) / 119][Stage 7:====================================================>  (113 + 6) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.980587496 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIn dex<=194", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=193 AND partitionZIndex<=194,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.573417004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:====================================>                  (74 + 39) / 113][Stage 8:=========================================>             (86 + 27) / 113][Stage 8:==============================================>        (95 + 18) / 113][Stage 8:================================================>     (101 + 12) / 113][Stage 8:====================================================>  (107 + 6) / 113][Stage 8:=====================================================> (109 + 4) / 113][Stage 8:=====================================================> (110 + 3) / 113][Stage 8:======================================================>(112 + 1) / 113]                                                                                [Stage 9:==================================>                    (72 + 42) / 114][Stage 9:========================================>              (83 + 31) / 114][Stage 9:============================================>          (92 + 22) / 114][Stage 9:==============================================>        (97 + 17) / 114][Stage 9:==================================================>    (105 + 9) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.367424086 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZInd ex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.633673862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:==========================>                           (60 + 61) / 121][Stage 10:===========================>                          (61 + 60) / 121][Stage 10:==============================>                       (68 + 53) / 121][Stage 10:======================================>               (86 + 35) / 121][Stage 10:============================================>        (102 + 19) / 121][Stage 10:===================================================>  (115 + 6) / 121]                                                                                [Stage 11:===========================>                          (61 + 61) / 122][Stage 11:=============================>                        (67 + 55) / 122][Stage 11:=========================================>            (93 + 29) / 122][Stage 11:=============================================>       (105 + 17) / 122][Stage 11:===================================================>  (116 + 6) / 122][Stage 11:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.82023362 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIn dex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.648925507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:===========================>                          (61 + 60) / 121][Stage 12:=============================>                        (65 + 56) / 121][Stage 12:====================================>                 (82 + 39) / 121][Stage 12:===============================================>     (108 + 13) / 121][Stage 12:==================================================>   (113 + 8) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:============================>                         (64 + 58) / 122][Stage 13:===================================>                  (80 + 42) / 122][Stage 13:============================================>        (103 + 19) / 122][Stage 13:===================================================>  (117 + 5) / 122][Stage 13:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.761619495 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIn dex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53609426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:============================>                         (59 + 54) / 113][Stage 14:================================>                     (69 + 44) / 113][Stage 14:=========================================>            (86 + 27) / 113][Stage 14:===============================================>      (99 + 14) / 113][Stage 14:===============================================>     (102 + 11) / 113][Stage 14:===================================================>  (108 + 5) / 113]                                                                                [Stage 15:============================>                         (61 + 53) / 114][Stage 15:==================================>                   (72 + 42) / 114][Stage 15:===========================================>          (91 + 23) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.784106432 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIn dex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501035092 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:==============================>                       (66 + 49) / 115][Stage 16:=====================================>                (79 + 36) / 115][Stage 16:============================================>         (94 + 21) / 115][Stage 16:===============================================>     (102 + 13) / 115][Stage 16:==================================================>   (107 + 8) / 115][Stage 16:===================================================>  (110 + 5) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:===============================>                      (68 + 48) / 116][Stage 17:====================================>                 (79 + 37) / 116][Stage 17:=========================================>            (89 + 27) / 116][Stage 17:==============================================>      (101 + 15) / 116][Stage 17:===================================================>  (110 + 6) / 116][Stage 17:===================================================>  (111 + 5) / 116][Stage 17:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.199177313 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIn dex<=166", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=165 AND partitionZIndex<=166,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539807584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:============================>                         (60 + 53) / 113][Stage 18:====================================>                 (76 + 37) / 113][Stage 18:===========================================>          (92 + 21) / 113][Stage 18:================================================>    (103 + 10) / 113][Stage 18:==================================================>   (105 + 8) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:===========================>                          (58 + 56) / 114][Stage 19:==============================>                       (64 + 50) / 114][Stage 19:====================================>                 (78 + 36) / 114][Stage 19:===========================================>          (91 + 23) / 114][Stage 19:==================================================>   (106 + 8) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.687474987 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIn dex<=161", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=161,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542614266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:===========================>                          (62 + 58) / 120][Stage 20:================================>                     (73 + 47) / 120][Stage 20:========================================>             (90 + 30) / 120][Stage 20:================================================>    (110 + 10) / 120][Stage 20:=====================================================>(118 + 2) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:==============================>                       (69 + 52) / 121][Stage 21:=======================================>              (89 + 32) / 121][Stage 21:==============================================>      (107 + 14) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.658083029 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIn dex<=189", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47701579 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:=================================>                    (74 + 44) / 118][Stage 22:===========================================>          (95 + 23) / 118][Stage 22:=================================================>    (109 + 9) / 118][Stage 22:=====================================================>(116 + 2) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (76 + 43) / 119][Stage 23:========================================>             (89 + 30) / 119][Stage 23:================================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.056524754 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZInd ex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456818425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:=================================>                    (73 + 45) / 118][Stage 24:=====================================>                (82 + 36) / 118][Stage 24:==========================================>           (92 + 26) / 118][Stage 24:=============================================>       (101 + 17) / 118][Stage 24:================================================>    (107 + 11) / 118][Stage 24:=====================================================>(117 + 1) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:===================================>                  (78 + 41) / 119][Stage 25:========================================>             (90 + 29) / 119][Stage 25:=============================================>       (102 + 17) / 119][Stage 25:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.63720056 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIn dex<=125", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427233138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:======================================>               (81 + 34) / 115][Stage 26:=======================================>              (85 + 30) / 115][Stage 26:==============================================>       (98 + 17) / 115][Stage 26:==================================================>   (108 + 7) / 115][Stage 26:=====================================================>(113 + 2) / 115][Stage 26:=====================================================>(114 + 1) / 115]                                                                                [Stage 27:======================================>               (83 + 33) / 116][Stage 27:==========================================>           (92 + 24) / 116][Stage 27:=============================================>        (98 + 18) / 116][Stage 27:==================================================>   (108 + 8) / 116][Stage 27:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.200753849 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIn dex<=128", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=127 AND partitionZIndex<=128,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455255567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:================================>                     (72 + 46) / 118][Stage 28:==================================>                   (75 + 43) / 118][Stage 28:=======================================>              (87 + 31) / 118][Stage 28:===============================================>     (105 + 13) / 118]                                                                                [Stage 29:=================================>                    (73 + 46) / 119][Stage 29:=====================================>                (82 + 37) / 119][Stage 29:==========================================>           (94 + 25) / 119][Stage 29:=================================================>    (110 + 9) / 119][Stage 29:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.083163463 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZInd ex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483366496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:===================================>                  (77 + 41) / 118][Stage 30:=========================================>            (91 + 27) / 118][Stage 30:================================================>    (107 + 11) / 118][Stage 30:====================================================> (114 + 4) / 118][Stage 30:=====================================================>(116 + 2) / 118]                                                                                [Stage 31:==================================>                   (75 + 44) / 119][Stage 31:====================================>                 (80 + 39) / 119][Stage 31:============================================>         (97 + 22) / 119][Stage 31:===================================================>  (114 + 5) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.580364531 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIn dex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504654903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:=============================>                        (65 + 56) / 121][Stage 32:=====================================>                (83 + 38) / 121][Stage 32:===========================================>          (98 + 23) / 121][Stage 32:==================================================>   (114 + 7) / 121]                                                                                [Stage 33:===========================>                          (61 + 61) / 122][Stage 33:==============================>                       (68 + 54) / 122][Stage 33:======================================>               (86 + 36) / 122][Stage 33:==================================================>   (113 + 9) / 122][Stage 33:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.412600732 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIn dex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493119641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:>                                                       (0 + 0) / 113][Stage 34:============================>                         (59 + 54) / 113][Stage 34:==============================>                       (64 + 49) / 113][Stage 34:=====================================>                (79 + 34) / 113][Stage 34:==============================================>      (100 + 13) / 113][Stage 34:=====================================================>(111 + 2) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:==============================>                       (65 + 49) / 114][Stage 35:========================================>             (86 + 28) / 114][Stage 35:==============================================>      (100 + 14) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.266616238 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIn dex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504955685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:===========================>                          (62 + 59) / 121][Stage 36:=================================>                    (75 + 46) / 121][Stage 36:===========================================>         (100 + 21) / 121][Stage 36:==================================================>   (113 + 8) / 121][Stage 36:=====================================================>(120 + 1) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:==============================>                       (68 + 54) / 122][Stage 37:========================================>             (92 + 30) / 122][Stage 37:================================================>    (112 + 10) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.263795165 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIn dex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429082005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=====================================>                (80 + 35) / 115][Stage 38:========================================>             (87 + 28) / 115][Stage 38:===============================================>     (102 + 13) / 115][Stage 38:====================================================> (111 + 4) / 115]                                                                                [Stage 39:=====================================>                (80 + 36) / 116][Stage 39:==========================================>           (91 + 25) / 116][Stage 39:==============================================>       (99 + 17) / 116][Stage 39:================================================>    (106 + 10) / 116][Stage 39:==================================================>   (109 + 7) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.98309447 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIn dex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487869203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===============================>                      (70 + 50) / 120][Stage 40:==========================================>           (95 + 25) / 120][Stage 40:=====================================================>(119 + 1) / 120]                                                                                [Stage 41:===========================>                          (62 + 59) / 121][Stage 41:=================================>                    (76 + 45) / 121][Stage 41:============================================>        (102 + 19) / 121][Stage 41:===================================================>  (115 + 6) / 121][Stage 41:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.50532733 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIn dex<=201", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484013843 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===============================>                      (68 + 47) / 115][Stage 42:=====================================>                (80 + 35) / 115][Stage 42:============================================>         (95 + 20) / 115][Stage 42:=================================================>    (106 + 9) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:===============================>                      (68 + 48) / 116][Stage 43:=====================================>                (80 + 36) / 116][Stage 43:=============================================>        (98 + 18) / 116][Stage 43:=================================================>    (107 + 9) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.017175014 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIn dex<=121", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428251868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:==================================>                   (73 + 40) / 113][Stage 44:=========================================>            (87 + 26) / 113][Stage 44:==============================================>      (100 + 13) / 113][Stage 44:===================================================>  (107 + 6) / 113]                                                                                [Stage 45:====================================>                 (77 + 37) / 114][Stage 45:=========================================>            (88 + 26) / 114][Stage 45:==============================================>       (99 + 15) / 114][Stage 45:==================================================>   (107 + 7) / 114][Stage 45:====================================================> (111 + 3) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.187894772 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIn dex<=139", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=139,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462820779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:===============================>                      (69 + 51) / 120][Stage 46:=======================================>              (87 + 33) / 120][Stage 46:=================================================>    (111 + 9) / 120][Stage 46:======================================================(120 + 0) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:=============================>                        (67 + 54) / 121][Stage 47:=====================================>                (84 + 37) / 121][Stage 47:==============================================>      (106 + 15) / 121][Stage 47:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.193203781 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIn dex<=190", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501976151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:=============================>                        (65 + 55) / 120][Stage 48:========================================>             (89 + 31) / 120][Stage 48:================================================>    (110 + 10) / 120][Stage 48:=====================================================>(118 + 2) / 120]                                                                                [Stage 49:===========================>                          (61 + 60) / 121][Stage 49:===============================>                      (71 + 50) / 121][Stage 49:===================================>                  (79 + 42) / 121][Stage 49:============================================>        (101 + 20) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.089569896 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIn dex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49003063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:=============================>                        (66 + 54) / 120][Stage 50:==================================>                   (77 + 43) / 120][Stage 50:===========================================>          (97 + 23) / 120][Stage 50:====================================================> (116 + 4) / 120][Stage 50:=====================================================>(119 + 1) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:=============================>                        (66 + 55) / 121][Stage 51:======================================>               (86 + 35) / 121][Stage 51:================================================>    (110 + 11) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.264348756 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIn dex<=247", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=247,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414429947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:=================================>                    (74 + 44) / 118][Stage 52:=====================================>                (82 + 36) / 118][Stage 52:=============================================>       (101 + 17) / 118][Stage 52:=====================================================>(116 + 2) / 118]                                                                                [Stage 53:==================================>                   (76 + 43) / 119][Stage 53:======================================>               (85 + 34) / 119][Stage 53:==============================================>      (104 + 15) / 119][Stage 53:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.049339158 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZInd ex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404478605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==================================>                   (73 + 40) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:============================================>         (94 + 19) / 113][Stage 54:=================================================>    (104 + 9) / 113][Stage 54:====================================================> (109 + 4) / 113][Stage 54:====================================================> (110 + 3) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:===================================>                  (75 + 39) / 114][Stage 55:========================================>             (85 + 29) / 114][Stage 55:============================================>         (94 + 20) / 114][Stage 55:=================================================>    (105 + 9) / 114][Stage 55:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.722117772 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIn dex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471043187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:==========================>                           (60 + 61) / 121][Stage 56:===========================>                          (62 + 59) / 121][Stage 56:=================================>                    (74 + 47) / 121][Stage 56:======================================>               (87 + 34) / 121][Stage 56:===============================================>     (109 + 12) / 121][Stage 56:====================================================> (117 + 4) / 121]                                                                                [Stage 57:============================>                         (65 + 57) / 122][Stage 57:==================================>                   (79 + 43) / 122][Stage 57:===========================================>          (99 + 23) / 122][Stage 57:==================================================>   (115 + 7) / 122][Stage 57:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.572375615 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZInd ex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421616192 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:==============================>                       (65 + 50) / 115][Stage 58:===================================>                  (75 + 40) / 115][Stage 58:===========================================>          (93 + 22) / 115][Stage 58:===============================================>     (102 + 13) / 115][Stage 58:=====================================================>(113 + 2) / 115]                                                                                [Stage 59:===================================>                  (76 + 40) / 116][Stage 59:============================================>         (96 + 20) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:===================================================>  (111 + 5) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.507332283 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZInde x<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458259185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:==============================>                       (66 + 49) / 115][Stage 60:====================================>                 (77 + 38) / 115][Stage 60:===========================================>          (93 + 22) / 115][Stage 60:==============================================>       (99 + 16) / 115][Stage 60:===================================================>  (109 + 6) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:===================================>                  (76 + 40) / 116][Stage 61:=========================================>            (89 + 27) / 116][Stage 61:==================================================>   (108 + 8) / 116][Stage 61:=====================================================>(114 + 2) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.809363626 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZInd ex<=24", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=23 AND partitionZIndex<=24,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422309355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:=================================>                    (73 + 45) / 118][Stage 62:==================================>                   (75 + 43) / 118][Stage 62:===================================>                  (77 + 41) / 118][Stage 62:=======================================>              (86 + 32) / 118][Stage 62:============================================>         (97 + 21) / 118][Stage 62:=================================================>    (109 + 9) / 118]                                                                                [Stage 63:=================================>                    (74 + 45) / 119][Stage 63:==================================>                   (75 + 44) / 119][Stage 63:====================================>                 (81 + 38) / 119][Stage 63:==========================================>           (93 + 26) / 119][Stage 63:==============================================>      (105 + 14) / 119]                                                                                Time elapsed: 3.700377321 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIn dex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37199098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:======================================>               (82 + 33) / 115][Stage 64:========================================>             (86 + 29) / 115][Stage 64:==============================================>       (99 + 16) / 115][Stage 64:=====================================================>(114 + 1) / 115]                                                                                [Stage 65:======================================>               (83 + 33) / 116][Stage 65:========================================>             (87 + 29) / 116][Stage 65:==============================================>       (99 + 17) / 116][Stage 65:=================================================>    (107 + 9) / 116][Stage 65:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.86085432 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIn dex<=145", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438907741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:==========================>                           (60 + 61) / 121][Stage 66:===========================>                          (61 + 60) / 121][Stage 66:===================================>                  (80 + 41) / 121][Stage 66:============================================>         (99 + 22) / 121][Stage 66:=================================================>    (112 + 9) / 121]                                                                                [Stage 67:===========================>                          (61 + 61) / 122][Stage 67:===============================>                      (72 + 50) / 122][Stage 67:======================================>               (87 + 35) / 122][Stage 67:=============================================>       (105 + 17) / 122]                                                                                Time elapsed: 3.227634524 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIn dex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40097377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:=======================================>              (85 + 30) / 115][Stage 68:============================================>         (94 + 21) / 115][Stage 68:==================================================>   (107 + 8) / 115][Stage 68:====================================================> (111 + 4) / 115]                                                                                [Stage 69:========================================>             (86 + 30) / 116][Stage 69:=============================================>       (100 + 16) / 116][Stage 69:===================================================>  (111 + 5) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.028365206 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZInde x<=2", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443478925 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:==========================>                           (60 + 61) / 121][Stage 70:=============================>                        (65 + 56) / 121][Stage 70:===================================>                  (80 + 41) / 121][Stage 70:=========================================>            (92 + 29) / 121][Stage 70:===================================================>  (115 + 6) / 121]                                                                                [Stage 71:=============================>                        (66 + 56) / 122][Stage 71:===============================>                      (72 + 50) / 122][Stage 71:=============================================>       (104 + 18) / 122][Stage 71:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.29493436 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIn dex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496242223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===============================>                      (68 + 47) / 115][Stage 72:=====================================>                (80 + 35) / 115][Stage 72:===============================================>     (102 + 13) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:======================================>               (83 + 33) / 116][Stage 73:============================================>         (95 + 21) / 116][Stage 73:===============================================>     (103 + 13) / 116][Stage 73:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.960499957 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZInd ex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434180723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:===========================>                          (62 + 58) / 120][Stage 74:=================================>                    (75 + 45) / 120][Stage 74:============================================>         (98 + 22) / 120][Stage 74:=====================================================>(118 + 2) / 120]                                                                                [Stage 75:=============================>                        (66 + 55) / 121][Stage 75:====================================>                 (81 + 40) / 121][Stage 75:===========================================>          (98 + 23) / 121][Stage 75:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.244359997 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZInd ex<=38", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408100916 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:==================================>                   (74 + 41) / 115][Stage 76:=========================================>            (88 + 27) / 115][Stage 76:==============================================>      (100 + 15) / 115][Stage 76:=====================================================>(113 + 2) / 115]                                                                                [Stage 77:=====================================>                (80 + 36) / 116][Stage 77:==========================================>           (91 + 25) / 116][Stage 77:=================================================>    (107 + 9) / 116][Stage 77:=====================================================>(114 + 2) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.930052794 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZInd ex<=100", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44416001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:==============================>                       (68 + 52) / 120][Stage 78:========================================>             (90 + 30) / 120][Stage 78:==================================================>   (112 + 8) / 120][Stage 78:=====================================================>(118 + 2) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:==============================>                       (69 + 52) / 121][Stage 79:======================================>               (86 + 35) / 121][Stage 79:==================================================>   (113 + 8) / 121][Stage 79:====================================================> (117 + 4) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.412158469 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZInd ex<=63", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=63,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425283423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (60 + 60) / 120][Stage 80:===============================>                      (71 + 49) / 120][Stage 80:=======================================>              (88 + 32) / 120][Stage 80:=============================================>       (102 + 18) / 120][Stage 80:=================================================>    (111 + 9) / 120]                                                                                [Stage 81:=============================>                        (65 + 56) / 121][Stage 81:====================================>                 (82 + 39) / 121][Stage 81:============================================>        (101 + 20) / 121][Stage 81:================================================>    (111 + 10) / 121][Stage 81:====================================================> (118 + 3) / 121][Stage 81:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.737030327 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIn dex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435918089 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:==========================>                           (60 + 61) / 121][Stage 82:============================>                         (63 + 58) / 121][Stage 82:==================================>                   (77 + 44) / 121][Stage 82:===========================================>          (98 + 23) / 121][Stage 82:===================================================>  (116 + 5) / 121][Stage 82:=====================================================>(120 + 1) / 121]                                                                                [Stage 83:===========================>                          (61 + 61) / 122][Stage 83:==============================>                       (68 + 54) / 122][Stage 83:======================================>               (86 + 36) / 122][Stage 83:===============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.169921062 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZInd ex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442764492 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:===========================>                          (62 + 58) / 120][Stage 84:==================================>                   (77 + 43) / 120][Stage 84:=============================================>       (102 + 18) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===============================>                      (70 + 51) / 121][Stage 85:========================================>             (91 + 30) / 121][Stage 85:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 2.953669274 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZInd ex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397187737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:================================>                     (70 + 45) / 115][Stage 86:==========================================>           (90 + 25) / 115][Stage 86:===============================================>     (104 + 11) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:===============================>                      (67 + 49) / 116][Stage 87:=======================================>              (85 + 31) / 116][Stage 87:==============================================>       (99 + 17) / 116][Stage 87:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.704236214 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIn dex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439009592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:=============================>                        (65 + 55) / 120][Stage 88:====================================>                 (82 + 38) / 120][Stage 88:=============================================>       (104 + 16) / 120][Stage 88:====================================================> (117 + 3) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==============================>                       (69 + 52) / 121][Stage 89:=========================================>            (92 + 29) / 121][Stage 89:==================================================>   (113 + 8) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.184364746 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIn dex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384613174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:==================================>                   (76 + 42) / 118][Stage 90:========================================>             (88 + 30) / 118][Stage 90:=============================================>       (101 + 17) / 118][Stage 90:====================================================> (115 + 3) / 118]                                                                                [Stage 91:=================================>                    (74 + 45) / 119][Stage 91:=====================================>                (83 + 36) / 119][Stage 91:==========================================>           (94 + 25) / 119][Stage 91:==============================================>      (105 + 14) / 119][Stage 91:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.103625225 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIn dex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497057595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:============================>                         (59 + 54) / 113][Stage 92:================================>                     (69 + 44) / 113][Stage 92:==========================================>           (88 + 25) / 113][Stage 92:===============================================>     (102 + 11) / 113]                                                                                [Stage 93:============================>                         (60 + 54) / 114][Stage 93:====================================>                 (78 + 36) / 114][Stage 93:==============================================>       (98 + 16) / 114][Stage 93:===================================================>  (109 + 5) / 114][Stage 93:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.193953362 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZInd ex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379616714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:=================================>                    (74 + 44) / 118][Stage 94:=====================================>                (81 + 37) / 118][Stage 94:================================================>    (107 + 11) / 118][Stage 94:=====================================================>(116 + 2) / 118]                                                                                [Stage 95:=================================>                    (73 + 46) / 119][Stage 95:==================================>                   (77 + 42) / 119][Stage 95:=======================================>              (87 + 32) / 119][Stage 95:===============================================>     (107 + 12) / 119][Stage 95:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.018361928 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIn dex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42226747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:============================>                         (63 + 58) / 121][Stage 96:====================================>                 (82 + 39) / 121][Stage 96:=============================================>       (105 + 16) / 121][Stage 96:====================================================> (118 + 3) / 121]                                                                                [Stage 97:============================>                         (65 + 57) / 122][Stage 97:====================================>                 (83 + 39) / 122][Stage 97:=============================================>       (104 + 18) / 122][Stage 97:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.049823824 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIn dex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371568652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:=====================================>                (80 + 35) / 115][Stage 98:=========================================>            (88 + 27) / 115][Stage 98:==============================================>      (100 + 15) / 115][Stage 98:==================================================>   (107 + 8) / 115]                                                                                [Stage 99:========================================>             (88 + 28) / 116][Stage 99:==============================================>       (99 + 17) / 116][Stage 99:====================================================> (113 + 3) / 116][Stage 99:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.747421422 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZInd ex<=36", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478979932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:================================>                    (70 + 45) / 115][Stage 100:=======================================>             (86 + 29) / 115][Stage 100:==============================================>     (103 + 12) / 115][Stage 100:====================================================>(113 + 2) / 115]                                                                                [Stage 101:===============================>                     (69 + 47) / 116][Stage 101:=======================================>             (86 + 30) / 116][Stage 101:============================================>        (97 + 19) / 116][Stage 101:=================================================>   (109 + 7) / 116][Stage 101:====================================================>(114 + 2) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.743931727 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIn dex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381500298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=================================>                   (72 + 41) / 113][Stage 102:========================================>            (87 + 26) / 113][Stage 102:==============================================>     (100 + 13) / 113][Stage 102:===================================================> (109 + 4) / 113][Stage 102:====================================================>(112 + 1) / 113]                                                                                [Stage 103:=====================================>               (81 + 33) / 114][Stage 103:==========================================>          (92 + 22) / 114][Stage 103:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 2.95347527 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIn dex<=185", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=185,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388889622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==============================>                      (67 + 48) / 115][Stage 104:=====================================>               (81 + 34) / 115][Stage 104:===========================================>         (95 + 20) / 115][Stage 104:===================================================> (111 + 4) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:================================>                    (71 + 45) / 116][Stage 105:=====================================>               (83 + 33) / 116][Stage 105:===============================================>    (105 + 11) / 116][Stage 105:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.842758575 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIn dex<=237", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=237,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401221447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:===========================>                         (59 + 54) / 113][Stage 106:============================>                        (61 + 52) / 113][Stage 106:=====================================>               (80 + 33) / 113][Stage 106:=============================================>       (98 + 15) / 113][Stage 106:====================================================>(111 + 2) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:==============================>                      (66 + 48) / 114][Stage 107:======================================>              (83 + 31) / 114][Stage 107:==============================================>     (103 + 11) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.362811831 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZInd ex<=99", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=99,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372190197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:======================================>              (83 + 32) / 115][Stage 108:=========================================>           (91 + 24) / 115][Stage 108:=============================================>      (101 + 14) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:========================================>            (89 + 27) / 116][Stage 109:=============================================>      (102 + 14) / 116][Stage 109:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.782600845 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIn dex<=115", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=114 AND partitionZIndex<=115,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408850931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:=============================>                       (66 + 54) / 120][Stage 110:=====================================>               (86 + 34) / 120][Stage 110:=============================================>      (106 + 14) / 120][Stage 110:====================================================>(119 + 1) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:============================>                        (64 + 57) / 121][Stage 111:========================================>            (92 + 29) / 121][Stage 111:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 2.910341477 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZInd ex<=43", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357126113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:===================================>                 (75 + 38) / 113][Stage 112:=========================================>           (88 + 25) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:=================================================>   (106 + 7) / 113][Stage 112:===================================================> (110 + 3) / 113]                                                                                [Stage 113:=======================================>             (84 + 30) / 114][Stage 113:==========================================>          (92 + 22) / 114][Stage 113:==============================================>     (101 + 13) / 114][Stage 113:==================================================>  (109 + 5) / 114][Stage 113:===================================================> (111 + 3) / 114][Stage 113:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.637280234 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIn dex<=173", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367315777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:=======================================>             (84 + 29) / 113][Stage 114:==========================================>          (91 + 22) / 113][Stage 114:==============================================>      (99 + 14) / 113][Stage 114:===================================================> (109 + 4) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:=======================================>             (85 + 29) / 114][Stage 115:=============================================>       (97 + 17) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.047250781 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIn dex<=122", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=122,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396626489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:===========================>                         (59 + 54) / 113][Stage 116:==============================>                      (66 + 47) / 113][Stage 116:=====================================>               (80 + 33) / 113][Stage 116:===========================================>         (93 + 20) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:=============================>                       (64 + 50) / 114][Stage 117:==================================>                  (74 + 40) / 114][Stage 117:==========================================>          (92 + 22) / 114][Stage 117:=================================================>   (107 + 7) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.392399157 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIn dex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361298117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:=====================================>               (79 + 34) / 113][Stage 118:==========================================>          (91 + 22) / 113][Stage 118:==============================================>     (102 + 11) / 113][Stage 118:===================================================> (109 + 4) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:========================================>            (87 + 27) / 114][Stage 119:============================================>        (95 + 19) / 114][Stage 119:==============================================>     (102 + 12) / 114][Stage 119:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.114608459 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIn dex<=180", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358219976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:=======================================>             (85 + 30) / 115][Stage 120:==========================================>          (93 + 22) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:======================================>              (84 + 32) / 116][Stage 121:========================================>            (89 + 27) / 116][Stage 121:=============================================>       (99 + 17) / 116][Stage 121:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.686797482 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZInd ex<=23", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=23,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36709466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:====================================>                (82 + 36) / 118][Stage 122:============================================>        (99 + 19) / 118][Stage 122:=================================================>   (111 + 7) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:====================================>                (82 + 37) / 119][Stage 123:===========================================>         (97 + 22) / 119][Stage 123:=================================================>   (111 + 8) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.107156568 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZInd ex<=64", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=63 AND partitionZIndex<=64,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377417984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:=================================>                   (74 + 44) / 118][Stage 124:===================================>                 (79 + 39) / 118][Stage 124:=======================================>             (89 + 29) / 118][Stage 124:===========================================>         (96 + 22) / 118][Stage 124:==================================================>  (112 + 6) / 118]                                                                                [Stage 125:================================>                    (74 + 45) / 119][Stage 125:===================================>                 (79 + 40) / 119][Stage 125:======================================>              (87 + 32) / 119][Stage 125:==========================================>          (96 + 23) / 119][Stage 125:===============================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.435952101 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIn dex<=183", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=182 AND partitionZIndex<=183,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484380547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:====================================>                (79 + 36) / 115][Stage 126:===========================================>         (95 + 20) / 115][Stage 126:==================================================>  (109 + 6) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:===============================>                     (70 + 46) / 116][Stage 127:=====================================>               (82 + 34) / 116][Stage 127:============================================>       (100 + 16) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.624241114 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZInd ex<=12", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=11 AND partitionZIndex<=12,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369665023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==================================>                  (73 + 40) / 113][Stage 128:=========================================>           (88 + 25) / 113][Stage 128:=============================================>       (97 + 16) / 113][Stage 128:=================================================>   (105 + 8) / 113]                                                                                [Stage 129:======================================>              (83 + 31) / 114][Stage 129:============================================>        (96 + 18) / 114][Stage 129:==============================================>     (102 + 12) / 114][Stage 129:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.237991477 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIn dex<=114", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=113 AND partitionZIndex<=114,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390494512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:===========================>                         (59 + 54) / 113][Stage 130:=============================>                       (63 + 50) / 113][Stage 130:====================================>                (77 + 36) / 113][Stage 130:==============================================>     (101 + 12) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:==============================>                      (65 + 49) / 114][Stage 131:==================================>                  (75 + 39) / 114][Stage 131:==========================================>          (92 + 22) / 114][Stage 131:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 4.243772939 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIn dex<=221", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40713042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:==========================>                          (60 + 61) / 121][Stage 132:============================>                        (66 + 55) / 121][Stage 132:===================================>                 (80 + 41) / 121][Stage 132:=================================================>   (114 + 7) / 121]                                                                                [Stage 133:===========================>                         (64 + 58) / 122][Stage 133:==============================>                      (70 + 52) / 122][Stage 133:=========================================>           (96 + 26) / 122][Stage 133:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.029483431 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIn dex<=167", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358083041 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==================================>                  (73 + 40) / 113][Stage 134:=======================================>             (84 + 29) / 113][Stage 134:=============================================>       (97 + 16) / 113][Stage 134:===============================================>    (103 + 10) / 113][Stage 134:===================================================> (109 + 4) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:===================================>                 (76 + 38) / 114][Stage 135:=======================================>             (86 + 28) / 114][Stage 135:=============================================>      (100 + 14) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.136943219 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIn dex<=160", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=160,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388545534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:=============================>                       (65 + 50) / 115][Stage 136:====================================>                (79 + 36) / 115][Stage 136:============================================>        (96 + 19) / 115][Stage 136:==================================================>  (109 + 6) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:================================>                    (71 + 45) / 116][Stage 137:========================================>            (88 + 28) / 116][Stage 137:============================================>       (100 + 16) / 116][Stage 137:===================================================> (113 + 3) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.903654853 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIn dex<=191", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=190 AND partitionZIndex<=191,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390934875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:============================>                        (60 + 53) / 113][Stage 138:===================================>                 (75 + 38) / 113][Stage 138:==============================================>     (100 + 13) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===========================>                         (59 + 55) / 114][Stage 139:==============================>                      (65 + 49) / 114][Stage 139:=======================================>             (85 + 29) / 114][Stage 139:==============================================>     (101 + 13) / 114]                                                                                Time elapsed: 2.876886627 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIn dex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340721896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:======================================>              (83 + 32) / 115][Stage 140:==========================================>          (93 + 22) / 115][Stage 140:===============================================>    (105 + 10) / 115]                                                                                [Stage 141:======================================>              (85 + 31) / 116][Stage 141:===========================================>         (96 + 20) / 116][Stage 141:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.545467039 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZInd ex<=66", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369703609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:================================>                    (73 + 45) / 118][Stage 142:=================================>                   (74 + 44) / 118][Stage 142:===================================>                 (78 + 40) / 118][Stage 142:=========================================>           (93 + 25) / 118][Stage 142:==============================================>     (106 + 12) / 118][Stage 142:===================================================> (114 + 4) / 118]                                                                                [Stage 143:================================>                    (74 + 45) / 119][Stage 143:==================================>                  (78 + 41) / 119][Stage 143:====================================>                (83 + 36) / 119][Stage 143:==========================================>          (96 + 23) / 119][Stage 143:================================================>    (110 + 9) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.634128943 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIn dex<=153", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355958044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:=================================>                   (72 + 41) / 113][Stage 144:=========================================>           (88 + 25) / 113][Stage 144:==============================================>      (99 + 14) / 113][Stage 144:==================================================>  (108 + 5) / 113][Stage 144:====================================================>(112 + 1) / 113]                                                                                [Stage 145:==================================>                  (74 + 40) / 114][Stage 145:========================================>            (87 + 27) / 114][Stage 145:===========================================>         (93 + 21) / 114][Stage 145:=================================================>   (106 + 8) / 114][Stage 145:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.963173539 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIn dex<=224", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=224,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34528168 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:=====================================>               (82 + 33) / 115][Stage 146:========================================>            (88 + 27) / 115][Stage 146:===============================================>    (105 + 10) / 115][Stage 146:===================================================> (111 + 4) / 115]                                                                                [Stage 147:======================================>              (84 + 32) / 116][Stage 147:=============================================>       (99 + 17) / 116][Stage 147:===================================================> (112 + 4) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.87751281 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIn dex<=235", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382015196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:>                                                      (0 + 0) / 115][Stage 148:===============================>                     (69 + 46) / 115][Stage 148:====================================>                (80 + 35) / 115][Stage 148:=============================================>      (101 + 14) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:==================================>                  (76 + 40) / 116][Stage 149:==========================================>          (94 + 22) / 116][Stage 149:==================================================>  (110 + 6) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.894759563 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIn dex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421389613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:==========================>                          (60 + 61) / 121][Stage 150:============================>                        (66 + 55) / 121][Stage 150:==================================>                  (78 + 43) / 121][Stage 150:============================================>       (104 + 17) / 121][Stage 150:===================================================> (117 + 4) / 121]                                                                                [Stage 151:==========================>                          (61 + 61) / 122][Stage 151:============================>                        (66 + 56) / 122][Stage 151:===================================>                 (81 + 41) / 122][Stage 151:==========================================>         (100 + 22) / 122][Stage 151:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.130666424 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZInd ex<=46", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409587728 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:============================>                        (65 + 55) / 120][Stage 152:==================================>                  (79 + 41) / 120][Stage 152:===========================================>        (101 + 19) / 120][Stage 152:==================================================>  (115 + 5) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:============================>                        (65 + 56) / 121][Stage 153:====================================>                (83 + 38) / 121][Stage 153:===========================================>        (101 + 20) / 121][Stage 153:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.180752291 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZInd ex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400343446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:=============================>                       (67 + 53) / 120][Stage 154:=====================================>               (86 + 34) / 120][Stage 154:===============================================>    (110 + 10) / 120]                                                                                [Stage 155:===========================>                         (63 + 58) / 121][Stage 155:=================================>                   (76 + 45) / 121][Stage 155:======================================>              (89 + 32) / 121][Stage 155:==============================================>     (109 + 12) / 121][Stage 155:===================================================> (118 + 3) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.292395524 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZInd ex<=96", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=95 AND partitionZIndex<=96,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38466138 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:=================================>                   (72 + 43) / 115][Stage 156:=======================================>             (86 + 29) / 115][Stage 156:===============================================>    (104 + 11) / 115][Stage 156:===================================================> (111 + 4) / 115]                                                                                [Stage 157:===================================>                 (78 + 38) / 116][Stage 157:==========================================>          (94 + 22) / 116][Stage 157:=================================================>   (108 + 8) / 116][Stage 157:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.819568394 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIn dex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35759389 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:========================================>            (87 + 28) / 115][Stage 158:=============================================>       (98 + 17) / 115][Stage 158:===================================================> (111 + 4) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=======================================>             (87 + 29) / 116][Stage 159:===========================================>         (96 + 20) / 116][Stage 159:=================================================>   (109 + 7) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.670728397 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZInd ex<=44", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40633181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:===========================>                         (62 + 59) / 121][Stage 160:====================================>                (84 + 37) / 121][Stage 160:=============================================>      (106 + 15) / 121][Stage 160:==================================================>  (116 + 5) / 121]                                                                                [Stage 161:============================>                        (65 + 57) / 122][Stage 161:================================>                    (74 + 48) / 122][Stage 161:=========================================>           (96 + 26) / 122][Stage 161:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.211391249 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZInd ex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348191427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:======================================>              (83 + 32) / 115][Stage 162:=============================================>       (98 + 17) / 115][Stage 162:================================================>    (106 + 9) / 115][Stage 162:==================================================>  (110 + 5) / 115]                                                                                [Stage 163:======================================>              (84 + 32) / 116][Stage 163:=========================================>           (90 + 26) / 116][Stage 163:================================================>    (107 + 9) / 116][Stage 163:====================================================>(114 + 2) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.542073635 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIn dex<=170", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363305174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:=====================================>               (81 + 32) / 113][Stage 164:=========================================>           (89 + 24) / 113][Stage 164:==============================================>     (100 + 13) / 113][Stage 164:===================================================> (110 + 3) / 113]                                                                                [Stage 165:==================================>                  (75 + 39) / 114][Stage 165:=========================================>           (90 + 24) / 114][Stage 165:==============================================>      (99 + 15) / 114][Stage 165:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.780206699 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZInd ex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357822953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===================================>                 (75 + 38) / 113][Stage 166:=======================================>             (84 + 29) / 113][Stage 166:============================================>        (94 + 19) / 113][Stage 166:==================================================>  (107 + 6) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:=======================================>             (84 + 30) / 114][Stage 167:============================================>        (95 + 19) / 114][Stage 167:================================================>    (105 + 9) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.987899112 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZInd ex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391683507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:=============================>                       (62 + 51) / 113][Stage 168:===================================>                 (76 + 37) / 113][Stage 168:=============================================>       (97 + 16) / 113][Stage 168:===================================================> (109 + 4) / 113]                                                                                [Stage 169:===========================>                         (60 + 54) / 114][Stage 169:===============================>                     (67 + 47) / 114][Stage 169:===========================================>         (94 + 20) / 114][Stage 169:=================================================>   (106 + 8) / 114][Stage 169:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.310225737 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIn dex<=214", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=213 AND partitionZIndex<=214,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405873394 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:===========================>                         (63 + 57) / 120][Stage 170:===================================>                 (81 + 39) / 120][Stage 170:============================================>       (102 + 18) / 120][Stage 170:===================================================> (116 + 4) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:============================>                        (64 + 57) / 121][Stage 171:===================================>                 (82 + 39) / 121][Stage 171:=============================================>      (105 + 16) / 121][Stage 171:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.239795472 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIn dex<=222", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=222,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407250155 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:==========================>                          (60 + 60) / 120][Stage 172:===========================>                         (63 + 57) / 120][Stage 172:===============================>                     (71 + 49) / 120][Stage 172:==========================================>          (96 + 24) / 120][Stage 172:====================================================>(118 + 2) / 120]                                                                                [Stage 173:============================>                        (66 + 55) / 121][Stage 173:================================>                    (74 + 47) / 121][Stage 173:==========================================>          (98 + 23) / 121][Stage 173:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.032188449 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZInd ex<=85", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=85,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371634561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===================================>                 (76 + 37) / 113][Stage 174:======================================>              (83 + 30) / 113][Stage 174:=============================================>       (96 + 17) / 113][Stage 174:===================================================> (109 + 4) / 113]                                                                                [Stage 175:=====================================>               (81 + 33) / 114][Stage 175:==========================================>          (92 + 22) / 114][Stage 175:==============================================>     (101 + 13) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.900793878 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZInd ex<=57", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=56 AND partitionZIndex<=57,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404475416 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:============================>                        (66 + 55) / 121][Stage 176:=======================================>             (90 + 31) / 121][Stage 176:=================================================>   (113 + 8) / 121]                                                                                [Stage 177:===========================>                         (63 + 59) / 122][Stage 177:====================================>                (83 + 39) / 122][Stage 177:===========================================>         (99 + 23) / 122][Stage 177:===================================================> (118 + 4) / 122][Stage 177:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.188411389 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZInd ex<=27", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=27,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341439929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:======================================>              (84 + 31) / 115][Stage 178:==========================================>          (93 + 22) / 115][Stage 178:===============================================>    (105 + 10) / 115][Stage 178:===================================================> (112 + 3) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:========================================>            (88 + 28) / 116][Stage 179:============================================>       (100 + 16) / 116][Stage 179:==================================================>  (110 + 6) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.289349099 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIn dex<=244", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=243 AND partitionZIndex<=244,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371791723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:================================>                    (72 + 46) / 118][Stage 180:=================================>                   (74 + 44) / 118][Stage 180:=====================================>               (84 + 34) / 118][Stage 180:===========================================>         (96 + 22) / 118][Stage 180:=================================================>   (111 + 7) / 118][Stage 180:====================================================>(117 + 1) / 118]                                                                                [Stage 181:================================>                    (74 + 45) / 119][Stage 181:===================================>                 (79 + 40) / 119][Stage 181:=========================================>           (94 + 25) / 119][Stage 181:==================================================>  (113 + 6) / 119][Stage 181:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.253260471 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZInd ex<=35", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461307103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==========================>                          (60 + 61) / 121][Stage 182:===========================>                         (63 + 58) / 121][Stage 182:==================================>                  (78 + 43) / 121][Stage 182:===========================================>        (101 + 20) / 121][Stage 182:===================================================> (117 + 4) / 121]                                                                                [Stage 183:==========================>                          (62 + 60) / 122][Stage 183:=================================>                   (76 + 46) / 122][Stage 183:===========================================>        (102 + 20) / 122][Stage 183:=================================================>   (114 + 8) / 122][Stage 183:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.342890376 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZInd ex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38387441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===================================>                 (76 + 39) / 115][Stage 184:=========================================>           (90 + 25) / 115][Stage 184:==============================================>     (103 + 12) / 115]                                                                                [Stage 185:==================================>                  (75 + 41) / 116][Stage 185:=========================================>           (90 + 26) / 116][Stage 185:===============================================>    (106 + 10) / 116][Stage 185:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.689303093 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIn dex<=188", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378770948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:===============================>                     (68 + 47) / 115][Stage 186:===================================>                 (78 + 37) / 115][Stage 186:============================================>        (96 + 19) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:==================================>                  (76 + 40) / 116][Stage 187:=======================================>             (87 + 29) / 116][Stage 187:================================================>    (107 + 9) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.676829511 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZInd ex<=13", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352755177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:===================================>                 (76 + 37) / 113][Stage 188:=======================================>             (84 + 29) / 113][Stage 188:============================================>        (94 + 19) / 113][Stage 188:==============================================>     (101 + 12) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:==================================>                  (75 + 39) / 114][Stage 189:========================================>            (88 + 26) / 114][Stage 189:=============================================>       (98 + 16) / 114][Stage 189:=================================================>   (106 + 8) / 114][Stage 189:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.380538851 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZInd ex<=52", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=52,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363419563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:=====================================>               (82 + 33) / 115][Stage 190:==========================================>          (92 + 23) / 115][Stage 190:===============================================>    (104 + 11) / 115][Stage 190:===================================================> (112 + 3) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:=====================================>               (83 + 33) / 116][Stage 191:=========================================>           (90 + 26) / 116][Stage 191:===============================================>    (105 + 11) / 116][Stage 191:===================================================> (113 + 3) / 116][Stage 191:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.775997237 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIn dex<=169", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353478839 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:=====================================>               (79 + 34) / 113][Stage 192:=========================================>           (89 + 24) / 113][Stage 192:=============================================>       (96 + 17) / 113][Stage 192:==================================================>  (107 + 6) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:===================================>                 (76 + 38) / 114][Stage 193:=========================================>           (89 + 25) / 114][Stage 193:============================================>        (96 + 18) / 114][Stage 193:================================================>    (105 + 9) / 114][Stage 193:===================================================> (110 + 4) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.232286498 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide98"
dataSource: String = /nidan/orc/individualORC/slide98

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIn dex<=181", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=181,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413143367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:==========================>                          (60 + 61) / 121][Stage 194:===========================>                         (63 + 58) / 121][Stage 194:=================================>                   (77 + 44) / 121][Stage 194:==========================================>         (100 + 21) / 121][Stage 194:==================================================>  (116 + 5) / 121]                                                                                [Stage 195:===========================>                         (63 + 59) / 122][Stage 195:==================================>                  (79 + 43) / 122][Stage 195:========================================>            (93 + 29) / 122][Stage 195:==================================================>  (116 + 6) / 122][Stage 195:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.468796192 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZInd ex<=17", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=17,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530384981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:===========================>                         (62 + 58) / 120][Stage 196:=================================>                   (76 + 44) / 120][Stage 196:=============================================>      (106 + 14) / 120][Stage 196:===================================================> (117 + 3) / 120]                                                                                [Stage 197:============================>                        (64 + 57) / 121][Stage 197:==================================>                  (79 + 42) / 121][Stage 197:========================================>            (92 + 29) / 121][Stage 197:==============================================>     (109 + 12) / 121][Stage 197:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.27160341 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIn dex<=179", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433885038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:============================>                        (64 + 57) / 121][Stage 198:===============================>                     (73 + 48) / 121][Stage 198:==============================================>     (108 + 13) / 121][Stage 198:====================================================>(120 + 1) / 121]                                                                                [Stage 199:==========================>                          (61 + 61) / 122][Stage 199:===========================>                         (63 + 59) / 122][Stage 199:=================================>                   (78 + 44) / 122][Stage 199:==========================================>         (100 + 22) / 122][Stage 199:====================================================>(120 + 2) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.175096132 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIn dex<=150", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=149 AND partitionZIndex<=150,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385189336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:=============================>                       (63 + 50) / 113][Stage 200:==================================>                  (74 + 39) / 113][Stage 200:==============================================>     (100 + 13) / 113][Stage 200:===================================================> (109 + 4) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:===========================>                         (60 + 54) / 114][Stage 201:==============================>                      (65 + 49) / 114][Stage 201:======================================>              (83 + 31) / 114][Stage 201:==============================================>     (102 + 12) / 114][Stage 201:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.148564465 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 04:35:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:60856) dropped. RpcEnv already stopped.
17/05/25 04:35:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:53232) dropped. RpcEnv already stopped.
17/05/25 04:35:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:60856) dropped. RpcEnv already stopped.
17/05/25 04:35:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:53232) dropped. RpcEnv already stopped.
17/05/25 04:35:35 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:60862) dropped. RpcEnv already stopped.

real	10m2.982s
user	11m32.748s
sys	0m37.288s
