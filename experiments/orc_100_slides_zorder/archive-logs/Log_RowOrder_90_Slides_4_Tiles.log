Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 03:31:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:32:11 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:32:11 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:32:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 03:32:13 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:32:24 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525033213-0631).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.364967448 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 114) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:===========================>                           (59 + 57) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 12.475321868 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionI ndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.722026215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:===============================>                       (66 + 49) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:===========================================>           (90 + 25) / 115][Stage 2:===============================================>       (99 + 16) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:===================================================>   (108 + 7) / 115]                                                                                [Stage 3:=====================================>                 (79 + 37) / 116][Stage 3:======================================>                (82 + 34) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:===========================================>           (92 + 24) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:=================================================>    (106 + 10) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.71096925 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.693637097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:===========================>                           (57 + 58) / 115][Stage 4:============================>                          (59 + 56) / 115][Stage 4:===============================>                       (66 + 49) / 115][Stage 4:===================================>                   (74 + 41) / 115][Stage 4:=======================================>               (83 + 32) / 115][Stage 4:===========================================>           (90 + 25) / 115][Stage 4:=============================================>         (96 + 19) / 115][Stage 4:===============================================>       (99 + 16) / 115][Stage 4:================================================>     (104 + 11) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:====================================================>  (110 + 5) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:==============================>                        (64 + 52) / 116][Stage 5:==================================>                    (72 + 44) / 116][Stage 5:===================================>                   (74 + 42) / 116][Stage 5:====================================>                  (77 + 39) / 116][Stage 5:========================================>              (85 + 31) / 116][Stage 5:=============================================>         (96 + 20) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.730286438 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionI ndex = 134  OR  partitionIndex = 147  OR  partitionIndex = 148 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 134  OR  partitionIndex = 147  OR  partitionIndex = 148 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.672992575 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=========================>                             (57 + 64) / 121][Stage 6:==========================>                            (58 + 63) / 121][Stage 6:==========================>                            (59 + 62) / 121][Stage 6:===============================>                       (69 + 52) / 121][Stage 6:==================================>                    (75 + 46) / 121][Stage 6:===================================>                   (79 + 42) / 121][Stage 6:========================================>              (89 + 32) / 121][Stage 6:===============================================>      (107 + 14) / 121]                                                                                [Stage 7:===========================>                           (61 + 61) / 122][Stage 7:===========================>                           (62 + 60) / 122][Stage 7:================================>                      (72 + 50) / 122][Stage 7:=====================================>                 (84 + 38) / 122][Stage 7:===============================================>      (107 + 15) / 122][Stage 7:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.432887858 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionI ndex = 215  OR  partitionIndex = 229  OR  partitionIndex = 230 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229  OR  partitionIndex = 230 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.633177851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:===========================>                           (60 + 61) / 121][Stage 8:==============================>                        (66 + 55) / 121][Stage 8:====================================>                  (80 + 41) / 121][Stage 8:=========================================>             (92 + 29) / 121][Stage 8:==============================================>       (104 + 17) / 121][Stage 8:==================================================>    (112 + 9) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:===============================>                       (69 + 53) / 122][Stage 9:======================================>                (85 + 37) / 122][Stage 9:=============================================>        (103 + 19) / 122][Stage 9:===============================================>      (108 + 14) / 122][Stage 9:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.324211295 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 33  OR  partitionIndex = 46  OR  partitionIndex = 47 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 46  OR  partitionIndex = 47 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.611474947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:===========================>                          (57 + 56) / 113][Stage 10:============================>                         (60 + 53) / 113][Stage 10:==================================>                   (73 + 40) / 113][Stage 10:===========================================>          (90 + 23) / 113][Stage 10:=================================================>    (104 + 9) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:===========================>                          (59 + 55) / 114][Stage 11:==============================>                       (64 + 50) / 114][Stage 11:===================================>                  (74 + 40) / 114][Stage 11:===========================================>          (92 + 22) / 114][Stage 11:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.605294006 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520049014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:================================>                     (69 + 44) / 113][Stage 12:====================================>                 (76 + 37) / 113][Stage 12:========================================>             (85 + 28) / 113][Stage 12:============================================>         (94 + 19) / 113][Stage 12:===============================================>     (101 + 12) / 113][Stage 12:===============================================>     (102 + 11) / 113][Stage 12:====================================================> (110 + 3) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:=================================>                    (71 + 43) / 114][Stage 13:=====================================>                (79 + 35) / 114][Stage 13:==========================================>           (89 + 25) / 114][Stage 13:==============================================>       (99 + 15) / 114][Stage 13:=================================================>    (105 + 9) / 114][Stage 13:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 6.216892589 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454904078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:====================================>                 (77 + 38) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:============================================>         (94 + 21) / 115][Stage 14:===============================================>     (103 + 12) / 115][Stage 14:==================================================>   (108 + 7) / 115][Stage 14:===================================================>  (110 + 5) / 115][Stage 14:=====================================================>(113 + 2) / 115]                                                                                [Stage 15:======================================>               (83 + 33) / 116][Stage 15:=============================================>        (98 + 18) / 116][Stage 15:===================================================>  (110 + 6) / 116][Stage 15:====================================================> (113 + 3) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.803503572 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 58  OR  partitionIndex = 59 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472382096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:=================================>                    (71 + 42) / 113][Stage 16:====================================>                 (77 + 36) / 113][Stage 16:========================================>             (84 + 29) / 113][Stage 16:===========================================>          (90 + 23) / 113][Stage 16:=============================================>        (96 + 17) / 113][Stage 16:==============================================>       (98 + 15) / 113][Stage 16:==================================================>   (105 + 8) / 113][Stage 16:====================================================> (110 + 3) / 113]                                                                                [Stage 17:====================================>                 (77 + 37) / 114][Stage 17:=======================================>              (84 + 30) / 114][Stage 17:=============================================>        (95 + 19) / 114][Stage 17:==============================================>      (101 + 13) / 114][Stage 17:===============================================>     (103 + 11) / 114][Stage 17:================================================>    (104 + 10) / 114][Stage 17:=====================================================>(112 + 2) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.316041444 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434528656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:======================================>               (82 + 33) / 115][Stage 18:==========================================>           (91 + 24) / 115][Stage 18:================================================>    (105 + 10) / 115][Stage 18:====================================================> (111 + 4) / 115][Stage 18:=====================================================>(113 + 2) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:===========================================>          (94 + 22) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.489491558 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473453899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:===================================>                  (74 + 39) / 113][Stage 20:=====================================>                (79 + 34) / 113][Stage 20:===========================================>          (92 + 21) / 113][Stage 20:=================================================>    (104 + 9) / 113][Stage 20:==================================================>   (106 + 7) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:===================================>                  (74 + 40) / 114][Stage 21:====================================>                 (78 + 36) / 114][Stage 21:=============================================>        (97 + 17) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.642468524 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 174  OR  partitionIndex = 175 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444950779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:======================================>               (81 + 34) / 115][Stage 22:======================================>               (83 + 32) / 115][Stage 22:=============================================>        (96 + 19) / 115][Stage 22:===============================================>     (104 + 11) / 115][Stage 22:====================================================> (111 + 4) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:========================================>             (86 + 30) / 116][Stage 23:==========================================>           (92 + 24) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.366453445 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionI ndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424007735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:=====================================>                (80 + 35) / 115][Stage 24:=======================================>              (84 + 31) / 115][Stage 24:=============================================>        (97 + 18) / 115][Stage 24:==================================================>   (107 + 8) / 115][Stage 24:===================================================>  (109 + 6) / 115][Stage 24:====================================================> (112 + 3) / 115]                                                                                [Stage 25:=====================================>                (81 + 35) / 116][Stage 25:==========================================>           (92 + 24) / 116][Stage 25:===============================================>     (105 + 11) / 116][Stage 25:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.46253361 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.523676586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:==========================>                           (60 + 61) / 121][Stage 26:============================>                         (63 + 58) / 121][Stage 26:==================================>                   (77 + 44) / 121][Stage 26:=========================================>            (93 + 28) / 121][Stage 26:=============================================>       (103 + 18) / 121][Stage 26:===================================================>  (115 + 6) / 121]                                                                                [Stage 27:===========================>                          (62 + 60) / 122][Stage 27:=============================>                        (67 + 55) / 122][Stage 27:===================================>                  (80 + 42) / 122][Stage 27:==========================================>           (97 + 25) / 122][Stage 27:===============================================>     (110 + 12) / 122][Stage 27:====================================================> (119 + 3) / 122][Stage 27:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.174166596 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionI ndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481807778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:=================================>                    (72 + 43) / 115][Stage 28:=========================================>            (89 + 26) / 115][Stage 28:===================================================>  (109 + 6) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:==================================>                   (75 + 41) / 116][Stage 29:========================================>             (87 + 29) / 116][Stage 29:=============================================>       (100 + 16) / 116][Stage 29:===================================================>  (111 + 5) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.302249137 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.604097597 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:==============================>                       (67 + 53) / 120][Stage 30:======================================>               (85 + 35) / 120][Stage 30:===============================================>     (107 + 13) / 120][Stage 30:=====================================================>(119 + 1) / 120]                                                                                [Stage 31:============================>                         (64 + 57) / 121][Stage 31:===================================>                  (80 + 41) / 121][Stage 31:==========================================>           (95 + 26) / 121][Stage 31:==================================================>   (113 + 8) / 121][Stage 31:=====================================================>(119 + 2) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.74200557 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIn dex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49201706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:===========================>                          (58 + 55) / 113][Stage 32:===============================>                      (66 + 47) / 113][Stage 32:========================================>             (84 + 29) / 113][Stage 32:================================================>    (103 + 10) / 113][Stage 32:====================================================> (110 + 3) / 113]                                                                                [Stage 33:==============================>                       (64 + 50) / 114][Stage 33:====================================>                 (77 + 37) / 114][Stage 33:==============================================>      (100 + 14) / 114][Stage 33:===================================================>  (109 + 5) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.463248164 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 202 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 202 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50588249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:===========================>                          (61 + 60) / 121][Stage 34:===================================>                  (80 + 41) / 121][Stage 34:============================================>        (101 + 20) / 121][Stage 34:===================================================>  (116 + 5) / 121]                                                                                [Stage 35:===========================>                          (61 + 61) / 122][Stage 35:=============================>                        (66 + 56) / 122][Stage 35:=================================>                    (75 + 47) / 122][Stage 35:=========================================>            (94 + 28) / 122][Stage 35:==============================================>      (108 + 14) / 122][Stage 35:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.749566412 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 47  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475977567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:============================>                         (59 + 54) / 113][Stage 36:=================================>                    (70 + 43) / 113][Stage 36:=====================================>                (79 + 34) / 113][Stage 36:=================================================>    (104 + 9) / 113][Stage 36:=====================================================>(111 + 2) / 113]                                                                                [Stage 37:=============================>                        (62 + 52) / 114][Stage 37:====================================>                 (77 + 37) / 114][Stage 37:==============================================>      (100 + 14) / 114][Stage 37:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.615262931 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 181  OR  partitionIndex = 195  OR  partitionIndex = 196 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 195  OR  partitionIndex = 196 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503019585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:============================>                         (60 + 53) / 113][Stage 38:================================>                     (67 + 46) / 113][Stage 38:========================================>             (85 + 28) / 113][Stage 38:==================================================>   (105 + 8) / 113][Stage 38:=====================================================>(111 + 2) / 113]                                                                                [Stage 39:============================>                         (61 + 53) / 114][Stage 39:===================================>                  (75 + 39) / 114][Stage 39:============================================>         (93 + 21) / 114][Stage 39:===================================================>  (108 + 6) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.496161102 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIn dex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35  OR  partitionIndex = 49  OR  partitionIndex = 50 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451159615 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===============================>                      (68 + 47) / 115][Stage 40:=====================================>                (79 + 36) / 115][Stage 40:==============================================>       (98 + 17) / 115][Stage 40:====================================================> (111 + 4) / 115]                                                                                [Stage 41:==============================>                       (66 + 50) / 116][Stage 41:=================================>                    (73 + 43) / 116][Stage 41:=======================================>              (84 + 32) / 116][Stage 41:=============================================>       (100 + 16) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:====================================================> (112 + 4) / 116][Stage 41:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.125474357 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65  OR  partitionIndex = 107  OR  partitionIndex = 108 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 107  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511663045 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:===============================>                      (69 + 51) / 120][Stage 42:====================================>                 (80 + 40) / 120][Stage 42:=============================================>       (104 + 16) / 120][Stage 42:=====================================================>(118 + 2) / 120]                                                                                [Stage 43:============================>                         (64 + 57) / 121][Stage 43:==================================>                   (77 + 44) / 121][Stage 43:==========================================>           (95 + 26) / 121][Stage 43:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.403002232 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488698795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:============================>                         (60 + 53) / 113][Stage 44:=================================>                    (71 + 42) / 113][Stage 44:=======================================>              (82 + 31) / 113][Stage 44:===============================================>      (99 + 14) / 113][Stage 44:===================================================>  (107 + 6) / 113][Stage 44:====================================================> (109 + 4) / 113][Stage 44:====================================================> (110 + 3) / 113]                                                                                [Stage 45:=============================>                        (62 + 52) / 114][Stage 45:==================================>                   (73 + 41) / 114][Stage 45:==========================================>           (89 + 25) / 114][Stage 45:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 4.260768393 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionI ndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 114  OR  partitionIndex = 115 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42890595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:====================================>                 (77 + 38) / 115][Stage 46:===========================================>          (93 + 22) / 115][Stage 46:===================================================>  (110 + 5) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:===============================>                      (67 + 49) / 116][Stage 47:=======================================>              (84 + 32) / 116][Stage 47:==========================================>           (92 + 24) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.114385965 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465133827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:===========================>                          (61 + 60) / 121][Stage 48:==============================>                       (68 + 53) / 121][Stage 48:=====================================>                (83 + 38) / 121][Stage 48:=============================================>       (104 + 17) / 121][Stage 48:===================================================>  (116 + 5) / 121][Stage 48:=====================================================>(119 + 2) / 121]                                                                                [Stage 49:===========================>                          (61 + 61) / 122][Stage 49:===============================>                      (72 + 50) / 122][Stage 49:=======================================>              (89 + 33) / 122][Stage 49:==============================================>      (108 + 14) / 122][Stage 49:=====================================================>(120 + 2) / 122][Stage 49:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.872136156 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5  OR  partitionIndex = 19  OR  partitionIndex = 48 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518229959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:==============================>                       (65 + 50) / 115][Stage 50:========================================>             (86 + 29) / 115][Stage 50:==============================================>       (98 + 17) / 115][Stage 50:====================================================> (111 + 4) / 115][Stage 50:=====================================================>(113 + 2) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:=================================>                    (72 + 44) / 116][Stage 51:=======================================>              (84 + 32) / 116][Stage 51:============================================>         (95 + 21) / 116][Stage 51:==================================================>   (108 + 8) / 116][Stage 51:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.529200934 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIn dex = 62  OR  partitionIndex = 75  OR  partitionIndex = 76 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 62  OR  partitionIndex = 75  OR  partitionIndex = 76 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437269989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:============================>                         (59 + 54) / 113][Stage 52:=============================>                        (62 + 51) / 113][Stage 52:=======================================>              (83 + 30) / 113][Stage 52:=================================================>    (104 + 9) / 113][Stage 52:===================================================>  (107 + 6) / 113][Stage 52:=====================================================>(111 + 2) / 113]                                                                                [Stage 53:===========================>                          (58 + 56) / 114][Stage 53:==============================>                       (64 + 50) / 114][Stage 53:=======================================>              (84 + 30) / 114][Stage 53:=============================================>        (97 + 17) / 114][Stage 53:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.850900718 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 148 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 148 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443064182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:=============================>                        (62 + 51) / 113][Stage 54:====================================>                 (77 + 36) / 113][Stage 54:=============================================>        (95 + 18) / 113][Stage 54:====================================================> (110 + 3) / 113]                                                                                [Stage 55:==============================>                       (65 + 49) / 114][Stage 55:====================================>                 (78 + 36) / 114][Stage 55:============================================>         (94 + 20) / 114][Stage 55:===================================================>  (109 + 5) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.729521904 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469234797 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:================================>                     (67 + 46) / 113][Stage 56:==============================================>       (97 + 16) / 113][Stage 56:====================================================> (110 + 3) / 113]                                                                                [Stage 57:============================>                         (61 + 53) / 114][Stage 57:=================================>                    (71 + 43) / 114][Stage 57:===============================================>     (102 + 12) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.132892438 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399055388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:=================================>                    (70 + 43) / 113][Stage 58:======================================>               (80 + 33) / 113][Stage 58:===========================================>          (91 + 22) / 113][Stage 58:===============================================>     (102 + 11) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:=======================================>              (83 + 31) / 114][Stage 59:===========================================>          (91 + 23) / 114][Stage 59:================================================>    (104 + 10) / 114][Stage 59:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.945263162 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionI ndex = 182  OR  partitionIndex = 195  OR  partitionIndex = 196 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 195  OR  partitionIndex = 196 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412413057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:==================================>                   (76 + 42) / 118][Stage 60:=======================================>              (87 + 31) / 118][Stage 60:==============================================>      (103 + 15) / 118][Stage 60:===================================================>  (112 + 6) / 118]                                                                                [Stage 61:=================================>                    (74 + 45) / 119][Stage 61:====================================>                 (80 + 39) / 119][Stage 61:===========================================>          (96 + 23) / 119][Stage 61:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.178905901 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462902764 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:============================>                         (63 + 57) / 120][Stage 62:================================>                     (72 + 48) / 120][Stage 62:=========================================>            (93 + 27) / 120][Stage 62:==================================================>   (112 + 8) / 120]                                                                                [Stage 63:============================>                         (63 + 58) / 121][Stage 63:=================================>                    (76 + 45) / 121][Stage 63:===========================================>          (98 + 23) / 121][Stage 63:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.212273674 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63  OR  partitionIndex = 76  OR  partitionIndex = 77 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456973912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:=============================>                        (65 + 55) / 120][Stage 64:==================================>                   (76 + 44) / 120][Stage 64:=============================================>       (104 + 16) / 120][Stage 64:=====================================================>(118 + 2) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:============================>                         (64 + 57) / 121][Stage 65:=======================================>              (88 + 33) / 121][Stage 65:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.089483055 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIn dex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383510396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:========================================>             (86 + 29) / 115][Stage 66:==============================================>      (100 + 15) / 115][Stage 66:====================================================> (112 + 3) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:=======================================>              (85 + 31) / 116][Stage 67:=============================================>        (97 + 19) / 116][Stage 67:==================================================>   (109 + 7) / 116][Stage 67:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.961781556 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionI ndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 173 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159  OR  partitionIndex = 173 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479328181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:=============================>                        (65 + 56) / 121][Stage 68:=======================================>              (89 + 32) / 121][Stage 68:================================================>    (111 + 10) / 121][Stage 68:=====================================================>(120 + 1) / 121]                                                                                [Stage 69:===========================>                          (61 + 61) / 122][Stage 69:=============================>                        (66 + 56) / 122][Stage 69:==================================>                   (79 + 43) / 122][Stage 69:==========================================>           (97 + 25) / 122][Stage 69:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.403454569 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionInd ex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475640493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:=============================>                        (66 + 54) / 120][Stage 70:=================================>                    (75 + 45) / 120][Stage 70:========================================>             (91 + 29) / 120][Stage 70:==============================================>      (105 + 15) / 120][Stage 70:====================================================> (117 + 3) / 120][Stage 70:=====================================================>(119 + 1) / 120]                                                                                [Stage 71:============================>                         (64 + 57) / 121][Stage 71:=================================>                    (74 + 47) / 121][Stage 71:=========================================>            (94 + 27) / 121][Stage 71:===============================================>     (109 + 12) / 121][Stage 71:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.753705358 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionI ndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396078544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 109)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120
-------------------------------------------------------------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIn dex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376404262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===================================>                  (74 + 39) / 113][Stage 72:======================================>               (81 + 32) / 113][Stage 72:============================================>         (94 + 19) / 113][Stage 72:==================================================>   (106 + 7) / 113][Stage 72:=====================================================>(111 + 2) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:====================================>                 (76 + 38) / 114][Stage 73:=========================================>            (87 + 27) / 114][Stage 73:=============================================>        (97 + 17) / 114][Stage 73:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.11957735 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400463454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:===================================>                  (75 + 40) / 115][Stage 74:=========================================>            (89 + 26) / 115][Stage 74:===================================================>  (109 + 6) / 115]                                                                                [Stage 75:================================>                     (70 + 46) / 116][Stage 75:========================================>             (86 + 30) / 116][Stage 75:===============================================>     (103 + 13) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.659663571 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIn dex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 14  OR  partitionIndex = 27  OR  partitionIndex = 28 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420202536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=====================================>                (79 + 34) / 113][Stage 76:==========================================>           (88 + 25) / 113][Stage 76:=============================================>        (95 + 18) / 113][Stage 76:==================================================>   (105 + 8) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:====================================>                 (77 + 37) / 114][Stage 77:=======================================>              (84 + 30) / 114][Stage 77:===========================================>          (91 + 23) / 114][Stage 77:==============================================>      (101 + 13) / 114][Stage 77:====================================================> (110 + 4) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.88895375 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionI ndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420637917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:===============================>                      (69 + 51) / 120][Stage 78:====================================>                 (82 + 38) / 120][Stage 78:==================================================>   (113 + 7) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:===============================>                      (71 + 50) / 121][Stage 79:======================================>               (87 + 34) / 121][Stage 79:==============================================>      (106 + 15) / 121][Stage 79:====================================================> (117 + 4) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.488571166 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 147  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390780015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===================================>                  (75 + 38) / 113][Stage 80:=========================================>            (86 + 27) / 113][Stage 80:============================================>         (94 + 19) / 113][Stage 80:===================================================>  (107 + 6) / 113][Stage 80:====================================================> (109 + 4) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:=======================================>              (83 + 31) / 114][Stage 81:============================================>         (94 + 20) / 114][Stage 81:===============================================>     (103 + 11) / 114][Stage 81:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.31585564 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390720854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:========================================>             (89 + 29) / 118][Stage 82:================================================>    (108 + 10) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:==================================>                   (75 + 44) / 119][Stage 83:=======================================>              (86 + 33) / 119][Stage 83:=============================================>       (103 + 16) / 119][Stage 83:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.279633864 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455455273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (62 + 58) / 120][Stage 84:====================================>                 (82 + 38) / 120][Stage 84:=========================================>            (92 + 28) / 120][Stage 84:=============================================>       (102 + 18) / 120][Stage 84:================================================>    (109 + 11) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===============================>                      (71 + 50) / 121][Stage 85:========================================>             (91 + 30) / 121][Stage 85:================================================>    (111 + 10) / 121][Stage 85:====================================================> (117 + 4) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.664284888 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165  OR  partitionIndex = 178  OR  partitionIndex = 179 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368283247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:====================================>                 (77 + 36) / 113][Stage 86:===========================================>          (90 + 23) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:==================================================>   (105 + 8) / 113][Stage 86:=====================================================>(111 + 2) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:====================================>                 (76 + 38) / 114][Stage 87:==========================================>           (89 + 25) / 114][Stage 87:=============================================>        (96 + 18) / 114][Stage 87:==================================================>   (106 + 8) / 114][Stage 87:====================================================> (110 + 4) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.503130767 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378434189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:====================================>                 (76 + 37) / 113][Stage 88:===========================================>          (91 + 22) / 113][Stage 88:==============================================>       (98 + 15) / 113][Stage 88:=====================================================>(111 + 2) / 113]                                                                                [Stage 89:======================================>               (81 + 33) / 114][Stage 89:=============================================>        (95 + 19) / 114][Stage 89:==================================================>   (106 + 8) / 114][Stage 89:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.933863373 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionI ndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37407254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:=====================================>                (79 + 34) / 113][Stage 90:=========================================>            (87 + 26) / 113][Stage 90:=============================================>        (96 + 17) / 113][Stage 90:==================================================>   (105 + 8) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:====================================>                 (77 + 37) / 114][Stage 91:=========================================>            (88 + 26) / 114][Stage 91:==============================================>      (101 + 13) / 114][Stage 91:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.124779523 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37  OR  partitionIndex = 50  OR  partitionIndex = 51 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399818255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:==============================>                       (65 + 50) / 115][Stage 92:====================================>                 (78 + 37) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:==================================================>   (108 + 7) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:====================================>                 (78 + 38) / 116][Stage 93:===========================================>          (93 + 23) / 116][Stage 93:==============================================>       (99 + 17) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.049880204 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIn dex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390772677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:=====================================>                (78 + 35) / 113][Stage 94:==========================================>           (88 + 25) / 113][Stage 94:==============================================>       (97 + 16) / 113][Stage 94:==================================================>   (106 + 7) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:=====================================>                (80 + 34) / 114][Stage 95:==========================================>           (90 + 24) / 114][Stage 95:=============================================>        (97 + 17) / 114][Stage 95:==================================================>   (107 + 7) / 114][Stage 95:===================================================>  (109 + 5) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.517596971 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 141 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 140  OR  partitionIndex = 141 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377369868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:=================================>                    (73 + 45) / 118][Stage 96:======================================>               (85 + 33) / 118][Stage 96:==============================================>      (104 + 14) / 118][Stage 96:=====================================================>(116 + 2) / 118]                                                                                [Stage 97:=================================>                    (73 + 46) / 119][Stage 97:=======================================>              (86 + 33) / 119][Stage 97:==============================================>      (105 + 14) / 119][Stage 97:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.157951802 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380231214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:=================================>                    (74 + 44) / 118][Stage 98:======================================>               (84 + 34) / 118][Stage 98:============================================>         (97 + 21) / 118][Stage 98:================================================>    (108 + 10) / 118][Stage 98:=====================================================>(117 + 1) / 118]                                                                                [Stage 99:=================================>                    (74 + 45) / 119][Stage 99:===================================>                  (79 + 40) / 119][Stage 99:=========================================>            (92 + 27) / 119][Stage 99:==============================================>      (104 + 15) / 119][Stage 99:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.259656023 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 20 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342754474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:====================================>                (80 + 35) / 115][Stage 100:=====================================>               (82 + 33) / 115][Stage 100:===========================================>         (95 + 20) / 115][Stage 100:===============================================>    (105 + 10) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:=====================================>               (82 + 34) / 116][Stage 101:=======================================>             (87 + 29) / 116][Stage 101:=============================================>      (102 + 14) / 116][Stage 101:=================================================>   (109 + 7) / 116][Stage 101:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.038014714 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89  OR  partitionIndex = 90  OR  partitionIndex = 102 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3731649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:========================================>            (88 + 27) / 115][Stage 102:=============================================>      (101 + 14) / 115][Stage 102:====================================================>(113 + 2) / 115]                                                                                [Stage 103:=====================================>               (82 + 34) / 116][Stage 103:===========================================>         (96 + 20) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.613604283 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48946525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:==============================>                      (70 + 50) / 120][Stage 104:=======================================>             (90 + 30) / 120][Stage 104:=================================================>   (113 + 7) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:===============================>                     (73 + 48) / 121][Stage 105:==========================================>          (97 + 24) / 121][Stage 105:===================================================> (117 + 4) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.372374972 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionI ndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 197 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 197 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371044175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:====================================>                (77 + 36) / 113][Stage 106:========================================>            (86 + 27) / 113][Stage 106:=============================================>       (98 + 15) / 113][Stage 106:==================================================>  (107 + 6) / 113][Stage 106:====================================================>(111 + 2) / 113]                                                                                [Stage 107:====================================>                (78 + 36) / 114][Stage 107:===========================================>         (93 + 21) / 114][Stage 107:==============================================>     (102 + 12) / 114][Stage 107:===================================================> (111 + 3) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.006443589 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356196484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (82 + 33) / 115][Stage 108:========================================>            (88 + 27) / 115][Stage 108:=============================================>       (98 + 17) / 115][Stage 108:=================================================>   (108 + 7) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:=====================================>               (83 + 33) / 116][Stage 109:=========================================>           (90 + 26) / 116][Stage 109:=============================================>      (102 + 14) / 116][Stage 109:===================================================> (112 + 4) / 116][Stage 109:===================================================> (113 + 3) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.842723966 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIn dex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375754707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:===================================>                 (80 + 38) / 118][Stage 110:============================================>       (100 + 18) / 118][Stage 110:===================================================> (115 + 3) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:==================================>                  (78 + 41) / 119][Stage 111:===========================================>         (97 + 22) / 119][Stage 111:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.961339056 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398491596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:===========================>                         (58 + 55) / 113][Stage 112:=============================>                       (63 + 50) / 113][Stage 112:=====================================>               (79 + 34) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:===============================================>    (103 + 10) / 113][Stage 112:====================================================>(111 + 2) / 113]                                                                                [Stage 113:===========================>                         (59 + 55) / 114][Stage 113:=============================>                       (63 + 51) / 114][Stage 113:=====================================>               (80 + 34) / 114][Stage 113:===========================================>         (94 + 20) / 114][Stage 113:==============================================>     (103 + 11) / 114][Stage 113:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.762062478 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIn dex = 40  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 40  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40072844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:==========================>                          (60 + 60) / 120][Stage 114:=============================>                       (67 + 53) / 120][Stage 114:=======================================>             (90 + 30) / 120][Stage 114:==================================================>  (114 + 6) / 120]                                                                                [Stage 115:============================>                        (66 + 55) / 121][Stage 115:==================================>                  (79 + 42) / 121][Stage 115:===========================================>        (102 + 19) / 121][Stage 115:===================================================> (118 + 3) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.287704962 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133  OR  partitionIndex = 175  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397878934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:==========================>                          (61 + 59) / 120][Stage 116:===============================>                     (71 + 49) / 120][Stage 116:========================================>            (91 + 29) / 120][Stage 116:====================================================>(118 + 2) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:=============================>                       (67 + 54) / 121][Stage 117:=====================================>               (85 + 36) / 121][Stage 117:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.060662217 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIn dex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41  OR  partitionIndex = 53  OR  partitionIndex = 54 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376166028 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:==============================>                      (66 + 49) / 115][Stage 118:====================================>                (80 + 35) / 115][Stage 118:==========================================>          (92 + 23) / 115][Stage 118:==============================================>     (102 + 13) / 115][Stage 118:====================================================>(114 + 1) / 115]                                                                                [Stage 119:=================================>                   (73 + 43) / 116][Stage 119:========================================>            (89 + 27) / 116][Stage 119:=============================================>      (102 + 14) / 116][Stage 119:=================================================>   (108 + 8) / 116][Stage 119:==================================================>  (111 + 5) / 116][Stage 119:====================================================>(114 + 2) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.272941734 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionInd ex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 17  OR  partitionIndex = 18 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356591266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:=====================================>               (79 + 34) / 113][Stage 120:==========================================>          (90 + 23) / 113][Stage 120:==============================================>      (99 + 14) / 113][Stage 120:==================================================>  (107 + 6) / 113]                                                                                [Stage 121:====================================>                (78 + 36) / 114][Stage 121:=========================================>           (90 + 24) / 114][Stage 121:==============================================>     (102 + 12) / 114][Stage 121:=================================================>   (107 + 7) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 6.177905927 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIn dex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339794951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:====================================>                (80 + 35) / 115][Stage 122:=========================================>           (89 + 26) / 115][Stage 122:=============================================>      (101 + 14) / 115][Stage 122:=================================================>   (108 + 7) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=====================================>               (83 + 33) / 116][Stage 123:==========================================>          (94 + 22) / 116][Stage 123:===============================================>    (105 + 11) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.949581446 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionInd ex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360112895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:=================================>                   (72 + 41) / 113][Stage 124:======================================>              (83 + 30) / 113][Stage 124:===========================================>         (92 + 21) / 113][Stage 124:==============================================>     (101 + 12) / 113][Stage 124:==================================================>  (108 + 5) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:=================================>                   (73 + 41) / 114][Stage 125:======================================>              (82 + 32) / 114][Stage 125:========================================>            (88 + 26) / 114][Stage 125:=============================================>       (98 + 16) / 114][Stage 125:=================================================>   (107 + 7) / 114][Stage 125:==================================================>  (108 + 6) / 114][Stage 125:==================================================>  (109 + 5) / 114][Stage 125:===================================================> (110 + 4) / 114][Stage 125:====================================================>(112 + 2) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.550211706 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIn dex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354065822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:=====================================>               (81 + 34) / 115][Stage 126:=========================================>           (89 + 26) / 115][Stage 126:===============================================>    (104 + 11) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:======================================>              (84 + 32) / 116][Stage 127:===========================================>         (95 + 21) / 116][Stage 127:===============================================>    (105 + 11) / 116][Stage 127:===================================================> (112 + 4) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.49724957 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413760011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:===============================>                     (71 + 49) / 120][Stage 128:=======================================>             (90 + 30) / 120][Stage 128:===================================================> (116 + 4) / 120]                                                                                [Stage 129:============================>                        (64 + 57) / 121][Stage 129:===============================>                     (73 + 48) / 121][Stage 129:=========================================>           (94 + 27) / 121][Stage 129:==================================================>  (115 + 6) / 121][Stage 129:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.383701508 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIn dex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90  OR  partitionIndex = 91  OR  partitionIndex = 105 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361398758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:================================>                    (72 + 46) / 118][Stage 130:================================>                    (73 + 45) / 118][Stage 130:====================================>                (82 + 36) / 118][Stage 130:==========================================>          (94 + 24) / 118][Stage 130:=================================================>   (111 + 7) / 118][Stage 130:====================================================>(117 + 1) / 118]                                                                                [Stage 131:================================>                    (73 + 46) / 119][Stage 131:==================================>                  (77 + 42) / 119][Stage 131:=====================================>               (84 + 35) / 119][Stage 131:=============================================>      (103 + 16) / 119][Stage 131:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.540122968 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionI ndex = 217  OR  partitionIndex = 230  OR  partitionIndex = 231 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 230  OR  partitionIndex = 231 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381739182 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:>                                                      (0 + 0) / 115][Stage 132:================================>                    (70 + 45) / 115][Stage 132:======================================>              (83 + 32) / 115][Stage 132:============================================>        (96 + 19) / 115][Stage 132:==================================================>  (109 + 6) / 115][Stage 132:===================================================> (111 + 4) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:===============================>                     (68 + 48) / 116][Stage 133:======================================>              (84 + 32) / 116][Stage 133:============================================>        (97 + 19) / 116][Stage 133:==================================================>  (111 + 5) / 116][Stage 133:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.178547111 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395862514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==========================>                          (60 + 61) / 121][Stage 134:===================================>                 (80 + 41) / 121][Stage 134:===========================================>        (102 + 19) / 121][Stage 134:====================================================>(119 + 2) / 121]                                                                                [Stage 135:==========================>                          (61 + 61) / 122][Stage 135:=============================>                       (68 + 54) / 122][Stage 135:=================================>                   (78 + 44) / 122][Stage 135:==========================================>          (98 + 24) / 122][Stage 135:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.14944041 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionI ndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219  OR  partitionIndex = 233 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373426386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:=============================>                       (64 + 51) / 115][Stage 136:===================================>                 (78 + 37) / 115][Stage 136:===========================================>         (94 + 21) / 115][Stage 136:================================================>    (106 + 9) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:===============================>                     (70 + 46) / 116][Stage 137:======================================>              (85 + 31) / 116][Stage 137:===========================================>         (96 + 20) / 116][Stage 137:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.827575099 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 169  OR  partitionIndex = 170 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374894369 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:===============================>                     (68 + 47) / 115][Stage 138:====================================>                (79 + 36) / 115][Stage 138:==============================================>     (102 + 13) / 115][Stage 138:==================================================>  (110 + 5) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:================================>                    (71 + 45) / 116][Stage 139:=======================================>             (87 + 29) / 116][Stage 139:=============================================>      (102 + 14) / 116][Stage 139:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.041965542 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionInd ex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36109506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:================================>                    (72 + 46) / 118][Stage 140:==================================>                  (77 + 41) / 118][Stage 140:========================================>            (90 + 28) / 118][Stage 140:=================================================>   (110 + 8) / 118]                                                                                [Stage 141:=================================>                   (75 + 44) / 119][Stage 141:========================================>            (91 + 28) / 119][Stage 141:================================================>    (110 + 9) / 119][Stage 141:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.923142648 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371270421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:===============================>                     (68 + 47) / 115][Stage 142:==================================>                  (75 + 40) / 115][Stage 142:=========================================>           (89 + 26) / 115][Stage 142:===============================================>    (104 + 11) / 115][Stage 142:===================================================> (112 + 3) / 115]                                                                                [Stage 143:===================================>                 (78 + 38) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:=============================================>      (101 + 15) / 116][Stage 143:===============================================>    (106 + 10) / 116][Stage 143:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.885190247 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionI ndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400398845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:==========================>                          (60 + 61) / 121][Stage 144:===========================>                         (62 + 59) / 121][Stage 144:===============================>                     (73 + 48) / 121][Stage 144:====================================>                (84 + 37) / 121][Stage 144:==================================================>  (115 + 6) / 121]                                                                                [Stage 145:==========================>                          (62 + 60) / 122][Stage 145:=============================>                       (69 + 53) / 122][Stage 145:=======================================>             (92 + 30) / 122][Stage 145:==============================================>     (108 + 14) / 122][Stage 145:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.661707168 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349956276 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:=====================================>               (80 + 33) / 113][Stage 146:===========================================>         (92 + 21) / 113][Stage 146:==============================================>     (100 + 13) / 113][Stage 146:===================================================> (109 + 4) / 113]                                                                                [Stage 147:======================================>              (83 + 31) / 114][Stage 147:===========================================>         (94 + 20) / 114][Stage 147:================================================>    (105 + 9) / 114][Stage 147:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.993731027 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29  OR  partitionIndex = 30  OR  partitionIndex = 42 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406114798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:=============================>                       (67 + 54) / 121][Stage 148:======================================>              (87 + 34) / 121][Stage 148:=============================================>      (105 + 16) / 121][Stage 148:==================================================>  (115 + 6) / 121][Stage 148:====================================================>(120 + 1) / 121]                                                                                [Stage 149:==========================>                          (61 + 61) / 122][Stage 149:=============================>                       (69 + 53) / 122][Stage 149:====================================>                (85 + 37) / 122][Stage 149:=============================================>      (107 + 15) / 122][Stage 149:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.370811964 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionI ndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371046202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:===============================>                     (71 + 47) / 118][Stage 150:==================================>                  (76 + 42) / 118][Stage 150:=======================================>             (89 + 29) / 118][Stage 150:==============================================>     (105 + 13) / 118]                                                                                [Stage 151:================================>                    (73 + 46) / 119][Stage 151:=====================================>               (84 + 35) / 119][Stage 151:=============================================>      (105 + 14) / 119][Stage 151:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 2.9421378 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460057915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:============================>                        (61 + 52) / 113][Stage 152:===================================>                 (75 + 38) / 113][Stage 152:===========================================>         (92 + 21) / 113][Stage 152:=================================================>   (106 + 7) / 113]                                                                                [Stage 153:===========================>                         (60 + 54) / 114][Stage 153:====================================>                (78 + 36) / 114][Stage 153:============================================>        (95 + 19) / 114][Stage 153:=================================================>   (107 + 7) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.263890077 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361464282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:================================>                    (72 + 46) / 118][Stage 154:=================================>                   (75 + 43) / 118][Stage 154:========================================>            (91 + 27) / 118][Stage 154:============================================>       (102 + 16) / 118][Stage 154:====================================================>(116 + 2) / 118]                                                                                [Stage 155:================================>                    (74 + 45) / 119][Stage 155:===================================>                 (80 + 39) / 119][Stage 155:============================================>        (99 + 20) / 119][Stage 155:==================================================>  (113 + 6) / 119][Stage 155:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.37929471 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIn dex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357960495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:================================>                    (72 + 46) / 118][Stage 156:=================================>                   (75 + 43) / 118][Stage 156:=========================================>           (92 + 26) / 118][Stage 156:==============================================>     (106 + 12) / 118][Stage 156:====================================================>(117 + 1) / 118]                                                                                [Stage 157:================================>                    (73 + 46) / 119][Stage 157:====================================>                (82 + 37) / 119][Stage 157:============================================>       (102 + 17) / 119][Stage 157:=================================================>   (112 + 7) / 119][Stage 157:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.426533794 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388604981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:=============================>                       (66 + 54) / 120][Stage 158:=================================>                   (76 + 44) / 120][Stage 158:============================================>       (103 + 17) / 120][Stage 158:====================================================>(119 + 1) / 120]                                                                                [Stage 159:===========================>                         (62 + 59) / 121][Stage 159:================================>                    (74 + 47) / 121][Stage 159:========================================>            (92 + 29) / 121][Stage 159:=================================================>   (112 + 9) / 121][Stage 159:====================================================>(119 + 2) / 121][Stage 159:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.799344564 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337651311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:====================================>                (79 + 36) / 115][Stage 160:========================================>            (87 + 28) / 115][Stage 160:============================================>        (97 + 18) / 115][Stage 160:================================================>    (106 + 9) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:=======================================>             (86 + 30) / 116][Stage 161:==========================================>          (92 + 24) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.769702862 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionI ndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340088976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:======================================>              (84 + 31) / 115][Stage 162:=========================================>           (91 + 24) / 115][Stage 162:=============================================>      (101 + 14) / 115][Stage 162:==================================================>  (110 + 5) / 115]                                                                                [Stage 163:=======================================>             (86 + 30) / 116][Stage 163:=============================================>      (102 + 14) / 116][Stage 163:====================================================>(114 + 2) / 116][Stage 163:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.78406317 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379510282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:===========================>                         (59 + 54) / 113][Stage 164:==============================>                      (65 + 48) / 113][Stage 164:=====================================>               (79 + 34) / 113][Stage 164:=============================================>       (96 + 17) / 113][Stage 164:====================================================>(111 + 2) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:===========================>                         (60 + 54) / 114][Stage 165:===============================>                     (67 + 47) / 114][Stage 165:====================================>                (78 + 36) / 114][Stage 165:==============================================>      (99 + 15) / 114][Stage 165:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.643065693 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIn dex = 30  OR  partitionIndex = 31  OR  partitionIndex = 45 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30  OR  partitionIndex = 31  OR  partitionIndex = 45 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331332858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:=====================================>               (82 + 33) / 115][Stage 166:=======================================>             (86 + 29) / 115][Stage 166:=============================================>       (98 + 17) / 115][Stage 166:==================================================>  (109 + 6) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:=======================================>             (86 + 30) / 116][Stage 167:=========================================>           (91 + 25) / 116][Stage 167:==============================================>     (104 + 12) / 116][Stage 167:=================================================>   (108 + 8) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.588854399 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360671002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:===================================>                 (75 + 38) / 113][Stage 168:======================================>              (83 + 30) / 113][Stage 168:============================================>        (95 + 18) / 113][Stage 168:================================================>    (104 + 9) / 113][Stage 168:====================================================>(111 + 2) / 113]                                                                                [Stage 169:=====================================>               (80 + 34) / 114][Stage 169:==========================================>          (91 + 23) / 114][Stage 169:============================================>        (96 + 18) / 114][Stage 169:===============================================>    (104 + 10) / 114][Stage 169:==================================================>  (109 + 5) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.600637746 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionI ndex = 164  OR  partitionIndex = 177  OR  partitionIndex = 178 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 164  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406527422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:============================>                        (65 + 55) / 120][Stage 170:==================================>                  (78 + 42) / 120][Stage 170:===========================================>        (101 + 19) / 120][Stage 170:=================================================>   (112 + 8) / 120][Stage 170:====================================================>(119 + 1) / 120]                                                                                [Stage 171:============================>                        (64 + 57) / 121][Stage 171:==================================>                  (78 + 43) / 121][Stage 171:===========================================>        (101 + 20) / 121][Stage 171:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.386789425 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 19  OR  partitionIndex = 20 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376960618 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:============================>                        (61 + 52) / 113][Stage 172:=================================>                   (72 + 41) / 113][Stage 172:========================================>            (86 + 27) / 113][Stage 172:=================================================>   (105 + 8) / 113]                                                                                [Stage 173:=============================>                       (63 + 51) / 114][Stage 173:=================================>                   (73 + 41) / 114][Stage 173:==========================================>          (92 + 22) / 114][Stage 173:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.267582829 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIn dex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390507227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:==========================>                          (60 + 61) / 121][Stage 174:===========================>                         (62 + 59) / 121][Stage 174:==================================>                  (79 + 42) / 121][Stage 174:==========================================>          (98 + 23) / 121][Stage 174:=================================================>   (113 + 8) / 121]                                                                                [Stage 175:==========================>                          (62 + 60) / 122][Stage 175:===============================>                     (73 + 49) / 122][Stage 175:==========================================>          (97 + 25) / 122][Stage 175:=================================================>   (115 + 7) / 122][Stage 175:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.360293793 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 172 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 172 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338471094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:====================================>                (80 + 35) / 115][Stage 176:=======================================>             (86 + 29) / 115][Stage 176:=============================================>       (99 + 16) / 115][Stage 176:===================================================> (111 + 4) / 115]                                                                                [Stage 177:======================================>              (85 + 31) / 116][Stage 177:============================================>        (97 + 19) / 116][Stage 177:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.669839396 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390331047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:=============================>                       (68 + 53) / 121][Stage 178:=====================================>               (86 + 35) / 121][Stage 178:=============================================>      (105 + 16) / 121][Stage 178:===================================================> (118 + 3) / 121]                                                                                [Stage 179:==========================>                          (62 + 60) / 122][Stage 179:=================================>                   (76 + 46) / 122][Stage 179:========================================>            (94 + 28) / 122][Stage 179:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.377901255 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionI ndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101  OR  partitionIndex = 113  OR  partitionIndex = 114 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407600185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:===============================>                     (68 + 47) / 115][Stage 180:=====================================>               (81 + 34) / 115][Stage 180:===========================================>         (95 + 20) / 115][Stage 180:==================================================>  (109 + 6) / 115]                                                                                [Stage 181:================================>                    (72 + 44) / 116][Stage 181:=========================================>           (91 + 25) / 116][Stage 181:===============================================>    (105 + 11) / 116][Stage 181:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.687727798 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIn dex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99  OR  partitionIndex = 113 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352398405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:=====================================>               (81 + 34) / 115][Stage 182:========================================>            (88 + 27) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:===================================================> (111 + 4) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=====================================>               (83 + 33) / 116][Stage 183:==========================================>          (92 + 24) / 116][Stage 183:================================================>    (107 + 9) / 116][Stage 183:==================================================>  (110 + 6) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.961723395 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45  OR  partitionIndex = 59  OR  partitionIndex = 60 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45  OR  partitionIndex = 59  OR  partitionIndex = 60 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35423641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:================================>                    (73 + 45) / 118][Stage 184:======================================>              (86 + 32) / 118][Stage 184:===========================================>         (96 + 22) / 118][Stage 184:=================================================>   (111 + 7) / 118][Stage 184:====================================================>(117 + 1) / 118]                                                                                [Stage 185:================================>                    (73 + 46) / 119][Stage 185:===================================>                 (79 + 40) / 119][Stage 185:========================================>            (90 + 29) / 119][Stage 185:=============================================>      (103 + 16) / 119][Stage 185:==================================================>  (114 + 5) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.774623304 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIn dex = 36  OR  partitionIndex = 49  OR  partitionIndex = 50 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 36  OR  partitionIndex = 49  OR  partitionIndex = 50 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345934492 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:===================================>                 (75 + 38) / 113][Stage 186:=======================================>             (85 + 28) / 113][Stage 186:============================================>        (94 + 19) / 113][Stage 186:==============================================>     (102 + 11) / 113][Stage 186:===================================================> (110 + 3) / 113]                                                                                [Stage 187:===================================>                 (77 + 37) / 114][Stage 187:========================================>            (87 + 27) / 114][Stage 187:=============================================>       (98 + 16) / 114][Stage 187:=================================================>   (107 + 7) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.28204149 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386177359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:===========================>                         (59 + 54) / 113][Stage 188:==============================>                      (64 + 49) / 113][Stage 188:====================================>                (78 + 35) / 113][Stage 188:===========================================>         (93 + 20) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:===========================>                         (59 + 55) / 114][Stage 189:=================================>                   (72 + 42) / 114][Stage 189:===========================================>         (93 + 21) / 114][Stage 189:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.335700055 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 161  OR  partitionIndex = 175  OR  partitionIndex = 176 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396213782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:==========================>                          (60 + 61) / 121][Stage 190:============================>                        (66 + 55) / 121][Stage 190:====================================>                (83 + 38) / 121][Stage 190:=============================================>      (106 + 15) / 121][Stage 190:==================================================>  (116 + 5) / 121]                                                                                [Stage 191:===========================>                         (63 + 59) / 122][Stage 191:===============================>                     (72 + 50) / 122][Stage 191:========================================>            (93 + 29) / 122][Stage 191:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.282420981 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIn dex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 110  OR  partitionIndex = 111 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382510232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:==========================>                          (60 + 60) / 120][Stage 192:=============================>                       (66 + 54) / 120][Stage 192:====================================>                (82 + 38) / 120][Stage 192:============================================>       (102 + 18) / 120][Stage 192:====================================================>(118 + 2) / 120]                                                                                [Stage 193:==========================>                          (61 + 60) / 121][Stage 193:============================>                        (66 + 55) / 121][Stage 193:===================================>                 (81 + 40) / 121][Stage 193:============================================>       (104 + 17) / 121][Stage 193:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.126568704 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIn dex = 69  OR  partitionIndex = 83  OR  partitionIndex = 84 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69  OR  partitionIndex = 83  OR  partitionIndex = 84 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392020494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:===========================>                         (58 + 55) / 113][Stage 194:=============================>                       (63 + 50) / 113][Stage 194:======================================>              (83 + 30) / 113][Stage 194:==============================================>     (101 + 12) / 113][Stage 194:===================================================> (110 + 3) / 113]                                                                                [Stage 195:============================>                        (61 + 53) / 114][Stage 195:===================================>                 (77 + 37) / 114][Stage 195:==========================================>          (92 + 22) / 114][Stage 195:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.394070328 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionI ndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203  OR  partitionIndex = 204 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384450257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:=============================>                       (64 + 51) / 115][Stage 196:===================================>                 (77 + 38) / 115][Stage 196:=========================================>           (90 + 25) / 115][Stage 196:=============================================>      (101 + 14) / 115][Stage 196:====================================================>(113 + 2) / 115]                                                                                [Stage 197:=====================================>               (81 + 35) / 116][Stage 197:============================================>       (100 + 16) / 116][Stage 197:===============================================>    (106 + 10) / 116][Stage 197:===================================================> (112 + 4) / 116][Stage 197:===================================================> (113 + 3) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.863465373 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIn dex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.326591112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:=====================================>               (81 + 34) / 115][Stage 198:===========================================>         (94 + 21) / 115][Stage 198:================================================>    (106 + 9) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:=======================================>             (87 + 29) / 116][Stage 199:=============================================>      (102 + 14) / 116][Stage 199:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.095706243 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m34.687s
user	12m13.828s
sys	1m1.716s
