Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 04:15:38 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:15:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:15:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:15:54 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 04:15:56 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 04:16:06 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525041555-0635).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.364362848 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:================>                                      (35 + 80) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:==========================================>            (89 + 26) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:============================>                          (61 + 55) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.464963295 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide93"
dataSource: String = /nidan/orc/individualORC/slide93

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.770892361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=============================>                         (61 + 52) / 113][Stage 2:================================>                      (67 + 46) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:====================================>                  (74 + 39) / 113][Stage 2:=========================================>             (86 + 27) / 113][Stage 2:============================================>          (92 + 21) / 113][Stage 2:=============================================>         (94 + 19) / 113][Stage 2:==================================================>    (104 + 9) / 113][Stage 2:======================================================>(112 + 1) / 113]                                                                                [Stage 3:===============================>                       (66 + 48) / 114][Stage 3:===================================>                   (74 + 40) / 114][Stage 3:====================================>                  (76 + 38) / 114][Stage 3:=======================================>               (81 + 33) / 114][Stage 3:============================================>          (92 + 22) / 114][Stage 3:==============================================>        (96 + 18) / 114][Stage 3:===================================================>   (106 + 8) / 114][Stage 3:=====================================================> (111 + 3) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.488587345 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.650387837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=========================>                             (53 + 60) / 113][Stage 4:============================>                          (58 + 55) / 113][Stage 4:==============================>                        (62 + 51) / 113][Stage 4:==================================>                    (71 + 42) / 113][Stage 4:====================================>                  (76 + 37) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:===============================================>       (97 + 16) / 113][Stage 4:====================================================>  (108 + 5) / 113][Stage 4:=====================================================> (109 + 4) / 113]                                                                                [Stage 5:=============================>                         (62 + 52) / 114][Stage 5:=================================>                     (69 + 45) / 114][Stage 5:=======================================>               (81 + 33) / 114][Stage 5:==============================================>        (96 + 18) / 114][Stage 5:===============================================>      (101 + 13) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.628822041 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.574354959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:==========================================>            (88 + 27) / 115][Stage 6:============================================>          (94 + 21) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:====================================================>  (110 + 5) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:========================================>              (85 + 31) / 116][Stage 7:===========================================>           (92 + 24) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:===================================================>   (108 + 8) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.883414732 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.586073512 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:============================>                          (60 + 55) / 115][Stage 8:================================>                      (67 + 48) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:============================================>          (93 + 22) / 115][Stage 8:===============================================>       (99 + 16) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:=====================================================> (112 + 3) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:=============================>                         (63 + 53) / 116][Stage 9:==================================>                    (72 + 44) / 116][Stage 9:=======================================>               (83 + 33) / 116][Stage 9:=============================================>         (95 + 21) / 116][Stage 9:===============================================>      (102 + 14) / 116][Stage 9:==================================================>    (107 + 9) / 116]                                                                                Time elapsed: 4.089062354 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485670868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=====================================>                (79 + 36) / 115][Stage 10:========================================>             (86 + 29) / 115][Stage 10:==========================================>           (91 + 24) / 115][Stage 10:=============================================>        (96 + 19) / 115][Stage 10:==============================================>      (101 + 14) / 115][Stage 10:==================================================>   (108 + 7) / 115][Stage 10:=====================================================>(113 + 2) / 115]                                                                                [Stage 11:======================================>               (83 + 33) / 116][Stage 11:=========================================>            (89 + 27) / 116][Stage 11:============================================>         (96 + 20) / 116][Stage 11:===============================================>     (104 + 12) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.990618057 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.608754978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:============================>                         (64 + 56) / 120][Stage 12:===================================>                  (79 + 41) / 120][Stage 12:==========================================>           (94 + 26) / 120][Stage 12:===============================================>     (107 + 13) / 120][Stage 12:====================================================> (117 + 3) / 120][Stage 12:=====================================================>(119 + 1) / 120]                                                                                [Stage 13:=========================>                            (58 + 63) / 121][Stage 13:=============================>                        (65 + 56) / 121][Stage 13:================================>                     (73 + 48) / 121][Stage 13:=======================================>              (89 + 32) / 121][Stage 13:============================================>        (101 + 20) / 121][Stage 13:==================================================>   (114 + 7) / 121][Stage 13:====================================================> (117 + 4) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.195675839 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538780546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:===========================>                          (57 + 56) / 113][Stage 14:===========================>                          (58 + 55) / 113][Stage 14:=============================>                        (61 + 52) / 113][Stage 14:=====================================>                (79 + 34) / 113][Stage 14:=============================================>        (96 + 17) / 113][Stage 14:=================================================>    (104 + 9) / 113][Stage 14:==================================================>   (105 + 8) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:==============================>                       (64 + 50) / 114][Stage 15:===================================>                  (75 + 39) / 114][Stage 15:===========================================>          (91 + 23) / 114][Stage 15:==============================================>      (101 + 13) / 114][Stage 15:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.977564097 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448350991 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:=====================================>                (80 + 35) / 115][Stage 16:========================================>             (86 + 29) / 115][Stage 16:==============================================>       (99 + 16) / 115][Stage 16:===================================================>  (110 + 5) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:=======================================>              (85 + 31) / 116][Stage 17:============================================>         (96 + 20) / 116][Stage 17:===============================================>     (103 + 13) / 116][Stage 17:==================================================>   (109 + 7) / 116][Stage 17:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.418174135 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53227142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:>                                                       (0 + 0) / 121][Stage 18:==========================>                           (60 + 61) / 121][Stage 18:===========================>                          (61 + 60) / 121][Stage 18:=================================>                    (76 + 45) / 121][Stage 18:=============================================>       (103 + 18) / 121][Stage 18:==================================================>   (114 + 7) / 121][Stage 18:===================================================>  (116 + 5) / 121]                                                                                [Stage 19:===========================>                          (62 + 60) / 122][Stage 19:==============================>                       (68 + 54) / 122][Stage 19:==================================>                   (79 + 43) / 122][Stage 19:============================================>        (102 + 20) / 122][Stage 19:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.631165584 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563825434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:================================>                     (70 + 45) / 115][Stage 20:=======================================>              (85 + 30) / 115][Stage 20:==============================================>      (101 + 14) / 115][Stage 20:===================================================>  (109 + 6) / 115][Stage 20:=====================================================>(113 + 2) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:===============================>                      (68 + 48) / 116][Stage 21:======================================>               (83 + 33) / 116][Stage 21:=============================================>       (100 + 16) / 116][Stage 21:====================================================> (112 + 4) / 116][Stage 21:====================================================> (113 + 3) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.613556491 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486489674 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:=================================>                    (74 + 44) / 118][Stage 22:========================================>             (89 + 29) / 118][Stage 22:================================================>    (107 + 11) / 118][Stage 22:====================================================> (114 + 4) / 118][Stage 22:=====================================================>(116 + 2) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (75 + 44) / 119][Stage 23:=========================================>            (91 + 28) / 119][Stage 23:===============================================>     (107 + 12) / 119][Stage 23:===================================================>  (114 + 5) / 119][Stage 23:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.478740554 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504147013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:================================>                     (67 + 46) / 113][Stage 24:=======================================>              (82 + 31) / 113][Stage 24:===============================================>     (101 + 12) / 113][Stage 24:====================================================> (110 + 3) / 113]                                                                                [Stage 25:=============================>                        (62 + 52) / 114][Stage 25:====================================>                 (76 + 38) / 114][Stage 25:==========================================>           (90 + 24) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:====================================================> (111 + 3) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.453349712 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452827479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:=====================================>                (78 + 35) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:==============================================>      (100 + 13) / 113][Stage 26:===================================================>  (108 + 5) / 113]                                                                                [Stage 27:====================================>                 (76 + 38) / 114][Stage 27:=========================================>            (87 + 27) / 114][Stage 27:==============================================>       (98 + 16) / 114][Stage 27:===============================================>     (103 + 11) / 114][Stage 27:==================================================>   (107 + 7) / 114][Stage 27:====================================================> (110 + 4) / 114][Stage 27:=====================================================>(112 + 2) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.71188449 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461407669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==============================>                       (65 + 50) / 115][Stage 28:====================================>                 (77 + 38) / 115][Stage 28:============================================>         (94 + 21) / 115][Stage 28:===============================================>     (103 + 12) / 115][Stage 28:====================================================> (111 + 4) / 115]                                                                                [Stage 29:==============================>                       (66 + 50) / 116][Stage 29:=====================================>                (81 + 35) / 116][Stage 29:===============================================>     (103 + 13) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.088264975 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455750244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===================================>                  (74 + 39) / 113][Stage 30:======================================>               (81 + 32) / 113][Stage 30:===============================================>      (99 + 14) / 113][Stage 30:===================================================>  (107 + 6) / 113][Stage 30:===================================================>  (108 + 5) / 113][Stage 30:====================================================> (110 + 3) / 113]                                                                                [Stage 31:====================================>                 (76 + 38) / 114][Stage 31:==========================================>           (89 + 25) / 114][Stage 31:==============================================>      (100 + 14) / 114][Stage 31:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.221446979 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447558735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:================================>                     (70 + 48) / 118][Stage 32:===================================>                  (77 + 41) / 118][Stage 32:=====================================>                (82 + 36) / 118][Stage 32:===========================================>          (96 + 22) / 118][Stage 32:=================================================>    (109 + 9) / 118]                                                                                [Stage 33:=================================>                    (74 + 45) / 119][Stage 33:=====================================>                (82 + 37) / 119][Stage 33:============================================>         (98 + 21) / 119][Stage 33:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.155401993 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436045344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:=================================>                    (71 + 42) / 113][Stage 34:=======================================>              (82 + 31) / 113][Stage 34:=============================================>        (95 + 18) / 113][Stage 34:================================================>    (103 + 10) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:=====================================>                (80 + 34) / 114][Stage 35:===========================================>          (91 + 23) / 114][Stage 35:==============================================>       (98 + 16) / 114][Stage 35:==================================================>   (106 + 8) / 114][Stage 35:===================================================>  (109 + 5) / 114][Stage 35:====================================================> (111 + 3) / 114][Stage 35:=====================================================>(112 + 2) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.029273469 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488769661 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:===========================>                          (58 + 55) / 113][Stage 36:===============================>                      (66 + 47) / 113][Stage 36:========================================>             (85 + 28) / 113][Stage 36:==================================================>   (105 + 8) / 113]                                                                                [Stage 37:===========================>                          (59 + 55) / 114][Stage 37:================================>                     (69 + 45) / 114][Stage 37:=========================================>            (87 + 27) / 114][Stage 37:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.039424439 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437198486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:>                                                       (0 + 0) / 113][Stage 38:====================================>                 (76 + 37) / 113][Stage 38:=========================================>            (87 + 26) / 113][Stage 38:=============================================>        (96 + 17) / 113][Stage 38:===================================================>  (107 + 6) / 113][Stage 38:====================================================> (110 + 3) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:======================================>               (82 + 32) / 114][Stage 39:===========================================>          (92 + 22) / 114][Stage 39:==============================================>       (99 + 15) / 114][Stage 39:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.521802757 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446055222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:=================================>                    (71 + 42) / 113][Stage 40:======================================>               (81 + 32) / 113][Stage 40:============================================>         (94 + 19) / 113][Stage 40:==================================================>   (105 + 8) / 113][Stage 40:====================================================> (110 + 3) / 113][Stage 40:=====================================================>(111 + 2) / 113]                                                                                [Stage 41:====================================>                 (76 + 38) / 114][Stage 41:==========================================>           (90 + 24) / 114][Stage 41:==============================================>       (99 + 15) / 114][Stage 41:==================================================>   (107 + 7) / 114][Stage 41:====================================================> (111 + 3) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.705198513 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501038693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:============================>                         (59 + 54) / 113][Stage 42:==============================>                       (64 + 49) / 113][Stage 42:====================================>                 (76 + 37) / 113][Stage 42:=============================================>        (96 + 17) / 113][Stage 42:=====================================================>(111 + 2) / 113]                                                                                [Stage 43:===========================>                          (59 + 55) / 114][Stage 43:=================================>                    (71 + 43) / 114][Stage 43:========================================>             (86 + 28) / 114][Stage 43:===================================================>  (109 + 5) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.046544543 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429338872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:===================================>                  (74 + 39) / 113][Stage 44:=======================================>              (82 + 31) / 113][Stage 44:==============================================>       (97 + 16) / 113][Stage 44:================================================>    (103 + 10) / 113][Stage 44:====================================================> (110 + 3) / 113][Stage 44:=====================================================>(111 + 2) / 113]                                                                                [Stage 45:===================================>                  (74 + 40) / 114][Stage 45:=======================================>              (84 + 30) / 114][Stage 45:===========================================>          (92 + 22) / 114][Stage 45:===============================================>     (103 + 11) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.220065857 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456954794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:==================================>                   (74 + 41) / 115][Stage 46:========================================>             (87 + 28) / 115][Stage 46:==============================================>      (101 + 14) / 115][Stage 46:=================================================>    (106 + 9) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:================================>                     (70 + 46) / 116][Stage 47:========================================>             (86 + 30) / 116][Stage 47:==============================================>       (99 + 17) / 116][Stage 47:====================================================> (112 + 4) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.980102917 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448122195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:===================================>                  (76 + 39) / 115][Stage 48:=======================================>              (85 + 30) / 115][Stage 48:==============================================>       (98 + 17) / 115][Stage 48:==================================================>   (108 + 7) / 115][Stage 48:===================================================>  (109 + 6) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:================================>                     (69 + 47) / 116][Stage 49:=====================================>                (81 + 35) / 116][Stage 49:=================================================>    (107 + 9) / 116][Stage 49:===================================================>  (111 + 5) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.349232277 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.576520081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:==========================>                           (60 + 61) / 121][Stage 50:===========================>                          (61 + 60) / 121][Stage 50:================================>                     (73 + 48) / 121][Stage 50:============================================>         (99 + 22) / 121][Stage 50:===================================================>  (116 + 5) / 121]                                                                                [Stage 51:==========================>                           (60 + 62) / 122][Stage 51:==============================>                       (70 + 52) / 122][Stage 51:========================================>             (92 + 30) / 122][Stage 51:==================================================>   (114 + 8) / 122][Stage 51:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.329842826 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451670858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:============================>                         (60 + 53) / 113][Stage 52:================================>                     (69 + 44) / 113][Stage 52:==========================================>           (88 + 25) / 113][Stage 52:===============================================>     (101 + 12) / 113][Stage 52:=====================================================>(111 + 2) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:===============================>                      (66 + 48) / 114][Stage 53:=========================================>            (88 + 26) / 114][Stage 53:=================================================>    (105 + 9) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.46837064 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46581708 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:===========================>                          (61 + 60) / 121][Stage 54:================================>                     (72 + 49) / 121][Stage 54:==========================================>           (95 + 26) / 121][Stage 54:==================================================>   (113 + 8) / 121][Stage 54:=====================================================>(119 + 2) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:============================>                         (64 + 58) / 122][Stage 55:==================================>                   (79 + 43) / 122][Stage 55:=============================================>       (104 + 18) / 122][Stage 55:====================================================> (118 + 4) / 122][Stage 55:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.518152572 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4499847 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:=============================>                        (66 + 54) / 120][Stage 56:=====================================>                (83 + 37) / 120][Stage 56:============================================>        (101 + 19) / 120][Stage 56:====================================================> (116 + 4) / 120][Stage 56:=====================================================>(119 + 1) / 120]                                                                                [Stage 57:===========================>                          (61 + 60) / 121][Stage 57:==============================>                       (68 + 53) / 121][Stage 57:======================================>               (86 + 35) / 121][Stage 57:===============================================>     (109 + 12) / 121][Stage 57:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.224680128 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41424802 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:===============================>                      (67 + 48) / 115][Stage 58:======================================>               (82 + 33) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:==================================================>   (107 + 8) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:=================================>                    (72 + 44) / 116][Stage 59:========================================>             (86 + 30) / 116][Stage 59:============================================>         (96 + 20) / 116][Stage 59:===================================================>  (111 + 5) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.075193829 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40335916 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:====================================>                 (77 + 36) / 113][Stage 60:==========================================>           (88 + 25) / 113][Stage 60:============================================>         (94 + 19) / 113][Stage 60:================================================>    (103 + 10) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:=======================================>              (84 + 30) / 114][Stage 61:===========================================>          (92 + 22) / 114][Stage 61:===============================================>     (103 + 11) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.984335292 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441380363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:===============================>                      (68 + 47) / 115][Stage 62:========================================>             (87 + 28) / 115][Stage 62:==============================================>      (100 + 15) / 115][Stage 62:====================================================> (112 + 3) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:=====================================>                (80 + 36) / 116][Stage 63:=============================================>        (98 + 18) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.0143269 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466004525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:============================>                         (64 + 57) / 121][Stage 64:===================================>                  (79 + 42) / 121][Stage 64:============================================>        (102 + 19) / 121][Stage 64:====================================================> (118 + 3) / 121]                                                                                [Stage 65:============================>                         (65 + 57) / 122][Stage 65:==================================>                   (78 + 44) / 122][Stage 65:=============================================>       (105 + 17) / 122][Stage 65:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.141795055 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386459602 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:======================================>               (81 + 34) / 115][Stage 66:=========================================>            (88 + 27) / 115][Stage 66:==============================================>       (98 + 17) / 115][Stage 66:===================================================>  (109 + 6) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:=====================================>                (81 + 35) / 116][Stage 67:========================================>             (86 + 30) / 116][Stage 67:============================================>         (95 + 21) / 116][Stage 67:===================================================>  (111 + 5) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.26680787 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404376044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:==============================>                       (66 + 49) / 115][Stage 68:===================================>                  (75 + 40) / 115][Stage 68:============================================>         (95 + 20) / 115][Stage 68:===================================================>  (109 + 6) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:===============================>                      (68 + 48) / 116][Stage 69:=======================================>              (84 + 32) / 116][Stage 69:==============================================>      (101 + 15) / 116][Stage 69:===================================================>  (110 + 6) / 116][Stage 69:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.934405517 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416826765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:===========================>                          (58 + 55) / 113][Stage 70:============================>                         (60 + 53) / 113][Stage 70:==================================>                   (72 + 41) / 113][Stage 70:==========================================>           (88 + 25) / 113][Stage 70:==================================================>   (106 + 7) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:============================>                         (61 + 53) / 114][Stage 71:==============================>                       (65 + 49) / 114][Stage 71:======================================>               (82 + 32) / 114][Stage 71:==============================================>       (98 + 16) / 114][Stage 71:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.266271926 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419227367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:>                                                       (0 + 0) / 113][Stage 72:===========================>                          (58 + 55) / 113][Stage 72:================================>                     (68 + 45) / 113][Stage 72:====================================>                 (76 + 37) / 113][Stage 72:=============================================>        (95 + 18) / 113][Stage 72:===================================================>  (107 + 6) / 113][Stage 72:=====================================================>(111 + 2) / 113]                                                                                [Stage 73:==============================>                       (64 + 50) / 114][Stage 73:====================================>                 (78 + 36) / 114][Stage 73:===========================================>          (91 + 23) / 114][Stage 73:================================================>    (104 + 10) / 114][Stage 73:=====================================================>(112 + 2) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.633982439 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470162672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:==========================>                           (60 + 61) / 121][Stage 74:===========================>                          (62 + 59) / 121][Stage 74:================================>                     (73 + 48) / 121][Stage 74:========================================>             (90 + 31) / 121][Stage 74:==================================================>   (114 + 7) / 121]                                                                                [Stage 75:============================>                         (64 + 58) / 122][Stage 75:================================>                     (74 + 48) / 122][Stage 75:============================================>        (102 + 20) / 122][Stage 75:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.063773829 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43457481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:===========================>                          (61 + 59) / 120][Stage 76:==================================>                   (77 + 43) / 120][Stage 76:==========================================>           (95 + 25) / 120][Stage 76:===============================================>     (108 + 12) / 120][Stage 76:====================================================> (116 + 4) / 120]                                                                                [Stage 77:===========================>                          (62 + 59) / 121][Stage 77:===============================>                      (71 + 50) / 121][Stage 77:=========================================>            (92 + 29) / 121][Stage 77:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.10952694 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404309889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:==============================>                       (66 + 49) / 115][Stage 78:====================================>                 (77 + 38) / 115][Stage 78:============================================>         (94 + 21) / 115][Stage 78:================================================>    (105 + 10) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:===============================>                      (67 + 49) / 116][Stage 79:====================================>                 (78 + 38) / 116][Stage 79:=============================================>        (98 + 18) / 116][Stage 79:==================================================>   (108 + 8) / 116][Stage 79:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.950375936 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372514587 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:=======================================>              (83 + 30) / 113][Stage 80:============================================>         (93 + 20) / 113][Stage 80:===============================================>     (101 + 12) / 113][Stage 80:===================================================>  (107 + 6) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:=====================================>                (80 + 34) / 114][Stage 81:=========================================>            (88 + 26) / 114][Stage 81:==============================================>       (98 + 16) / 114][Stage 81:==================================================>   (106 + 8) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.239038745 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363158088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:======================================>               (81 + 34) / 115][Stage 82:========================================>             (86 + 29) / 115][Stage 82:==============================================>       (99 + 16) / 115][Stage 82:==================================================>   (108 + 7) / 115]                                                                                [Stage 83:=======================================>              (85 + 31) / 116][Stage 83:============================================>         (95 + 21) / 116][Stage 83:===================================================>  (110 + 6) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.669333028 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416253292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:==============================>                       (64 + 51) / 115][Stage 84:=====================================>                (79 + 36) / 115][Stage 84:============================================>         (94 + 21) / 115][Stage 84:==================================================>   (108 + 7) / 115][Stage 84:=====================================================>(113 + 2) / 115]                                                                                [Stage 85:==================================>                   (75 + 41) / 116][Stage 85:==========================================>           (91 + 25) / 116][Stage 85:===============================================>     (105 + 11) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.063020586 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37054885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:=====================================>                (79 + 34) / 113][Stage 86:===========================================>          (91 + 22) / 113][Stage 86:==============================================>       (97 + 16) / 113][Stage 86:====================================================> (109 + 4) / 113][Stage 86:=====================================================>(112 + 1) / 113]                                                                                [Stage 87:====================================>                 (77 + 37) / 114][Stage 87:=========================================>            (88 + 26) / 114][Stage 87:==============================================>      (101 + 13) / 114][Stage 87:===================================================>  (109 + 5) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.087620115 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394734013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:=================================>                    (71 + 44) / 115][Stage 88:=========================================>            (89 + 26) / 115][Stage 88:==============================================>       (98 + 17) / 115][Stage 88:====================================================> (111 + 4) / 115]                                                                                [Stage 89:=====================================>                (80 + 36) / 116][Stage 89:============================================>         (95 + 21) / 116][Stage 89:=================================================>    (107 + 9) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.814782979 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371789552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:=================================>                    (74 + 44) / 118][Stage 90:=======================================>              (87 + 31) / 118][Stage 90:==============================================>      (103 + 15) / 118][Stage 90:====================================================> (114 + 4) / 118][Stage 90:=====================================================>(117 + 1) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:===================================>                  (78 + 41) / 119][Stage 91:========================================>             (89 + 30) / 119][Stage 91:==================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.009046123 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370012853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:=================================>                    (70 + 43) / 113][Stage 92:=====================================>                (79 + 34) / 113][Stage 92:===========================================>          (92 + 21) / 113][Stage 92:================================================>    (103 + 10) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:======================================>               (82 + 32) / 114][Stage 93:===========================================>          (92 + 22) / 114][Stage 93:===================================================>  (108 + 6) / 114][Stage 93:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.916896321 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432263779 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:=============================>                        (66 + 54) / 120][Stage 94:======================================>               (86 + 34) / 120][Stage 94:=================================================>    (111 + 9) / 120]                                                                                [Stage 95:============================>                         (63 + 58) / 121][Stage 95:=================================>                    (75 + 46) / 121][Stage 95:==========================================>           (96 + 25) / 121][Stage 95:================================================>    (111 + 10) / 121][Stage 95:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.232429217 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360983754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:=================================>                    (70 + 43) / 113][Stage 96:======================================>               (81 + 32) / 113][Stage 96:============================================>         (94 + 19) / 113][Stage 96:===============================================>     (101 + 12) / 113][Stage 96:====================================================> (109 + 4) / 113]                                                                                [Stage 97:=======================================>              (83 + 31) / 114][Stage 97:============================================>         (93 + 21) / 114][Stage 97:===============================================>     (103 + 11) / 114][Stage 97:==================================================>   (106 + 8) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.222108923 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397764018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (58 + 55) / 113][Stage 98:===============================>                      (65 + 48) / 113][Stage 98:=======================================>              (82 + 31) / 113][Stage 98:==================================================>   (105 + 8) / 113]                                                                                [Stage 99:=============================>                        (62 + 52) / 114][Stage 99:====================================>                 (77 + 37) / 114][Stage 99:===========================================>          (92 + 22) / 114][Stage 99:=================================================>    (105 + 9) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.067578757 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407949039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==========================>                          (61 + 60) / 121][Stage 100:===============================>                     (73 + 48) / 121][Stage 100:========================================>            (93 + 28) / 121][Stage 100:====================================================>(119 + 2) / 121]                                                                                [Stage 101:==========================>                          (61 + 61) / 122][Stage 101:=============================>                       (68 + 54) / 122][Stage 101:===================================>                 (81 + 41) / 122][Stage 101:===========================================>        (102 + 20) / 122][Stage 101:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.917984648 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390515659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=================================>                   (72 + 43) / 115][Stage 102:=========================================>           (90 + 25) / 115][Stage 102:=============================================>       (98 + 17) / 115][Stage 102:=================================================>   (108 + 7) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:===============================>                     (68 + 48) / 116][Stage 103:=====================================>               (83 + 33) / 116][Stage 103:=============================================>      (102 + 14) / 116][Stage 103:===================================================> (112 + 4) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.037464608 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38515184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:====================================>                (81 + 37) / 118][Stage 104:=========================================>           (92 + 26) / 118][Stage 104:===============================================>    (107 + 11) / 118][Stage 104:===================================================> (115 + 3) / 118]                                                                                [Stage 105:================================>                    (73 + 46) / 119][Stage 105:==================================>                  (77 + 42) / 119][Stage 105:=======================================>             (89 + 30) / 119][Stage 105:===============================================>    (108 + 11) / 119][Stage 105:====================================================>(117 + 2) / 119][Stage 105:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.285196361 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377016559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:================================>                    (73 + 45) / 118][Stage 106:===================================>                 (79 + 39) / 118][Stage 106:==========================================>          (95 + 23) / 118][Stage 106:==============================================>     (105 + 13) / 118][Stage 106:==================================================>  (113 + 5) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:================================>                    (74 + 45) / 119][Stage 107:=======================================>             (88 + 31) / 119][Stage 107:==========================================>          (96 + 23) / 119][Stage 107:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.224707882 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37457368 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:======================================>              (82 + 31) / 113][Stage 108:===========================================>         (93 + 20) / 113][Stage 108:===============================================>    (103 + 10) / 113][Stage 108:====================================================>(111 + 2) / 113]                                                                                [Stage 109:===================================>                 (77 + 37) / 114][Stage 109:=======================================>             (86 + 28) / 114][Stage 109:============================================>        (95 + 19) / 114][Stage 109:===================================================> (110 + 4) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.033416649 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386815962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:==================================>                  (76 + 42) / 118][Stage 110:=========================================>           (93 + 25) / 118][Stage 110:=================================================>   (110 + 8) / 118][Stage 110:====================================================>(116 + 2) / 118]                                                                                [Stage 111:==================================>                  (77 + 42) / 119][Stage 111:=====================================>               (85 + 34) / 119][Stage 111:============================================>        (99 + 20) / 119][Stage 111:================================================>    (110 + 9) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.356412132 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376368562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:================================>                    (72 + 46) / 118][Stage 112:==================================>                  (76 + 42) / 118][Stage 112:=======================================>             (88 + 30) / 118][Stage 112:=================================================>   (111 + 7) / 118]                                                                                [Stage 113:=================================>                   (76 + 43) / 119][Stage 113:=====================================>               (84 + 35) / 119][Stage 113:==============================================>     (106 + 13) / 119][Stage 113:==================================================>  (114 + 5) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.052720586 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34658584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:=====================================>               (82 + 33) / 115][Stage 114:===========================================>         (94 + 21) / 115][Stage 114:=================================================>   (107 + 8) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:=====================================>               (83 + 33) / 116][Stage 115:==========================================>          (93 + 23) / 116][Stage 115:================================================>    (107 + 9) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.68308421 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390322126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:===========================>                         (58 + 55) / 113][Stage 116:===============================>                     (68 + 45) / 113][Stage 116:======================================>              (83 + 30) / 113][Stage 116:==============================================>     (102 + 11) / 113]                                                                                [Stage 117:============================>                        (62 + 52) / 114][Stage 117:================================>                    (69 + 45) / 114][Stage 117:=========================================>           (89 + 25) / 114][Stage 117:================================================>    (105 + 9) / 114][Stage 117:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.033373637 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3394662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:========================================>            (88 + 27) / 115][Stage 118:=============================================>       (98 + 17) / 115][Stage 118:===================================================> (111 + 4) / 115]                                                                                [Stage 119:======================================>              (84 + 32) / 116][Stage 119:===========================================>         (96 + 20) / 116][Stage 119:==============================================>     (103 + 13) / 116][Stage 119:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.937803432 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453303074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:=====================================>               (79 + 34) / 113][Stage 120:==========================================>          (91 + 22) / 113][Stage 120:==============================================>     (102 + 11) / 113][Stage 120:==================================================>  (108 + 5) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===================================>                 (77 + 37) / 114][Stage 121:==========================================>          (92 + 22) / 114][Stage 121:==============================================>     (103 + 11) / 114][Stage 121:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.136163944 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364189225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:======================================>              (85 + 33) / 118][Stage 122:==========================================>          (94 + 24) / 118][Stage 122:================================================>    (109 + 9) / 118][Stage 122:====================================================>(117 + 1) / 118]                                                                                [Stage 123:==================================>                  (77 + 42) / 119][Stage 123:======================================>              (86 + 33) / 119][Stage 123:============================================>       (101 + 18) / 119][Stage 123:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.297879811 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339276562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:=======================================>             (85 + 30) / 115][Stage 124:=========================================>           (89 + 26) / 115][Stage 124:=============================================>      (100 + 15) / 115][Stage 124:=================================================>   (108 + 7) / 115]                                                                                [Stage 125:=====================================>               (83 + 33) / 116][Stage 125:=========================================>           (90 + 26) / 116][Stage 125:============================================>        (98 + 18) / 116][Stage 125:==================================================>  (111 + 5) / 116][Stage 125:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.092687812 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377563248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:================================>                    (71 + 44) / 115][Stage 126:==========================================>          (92 + 23) / 115][Stage 126:==============================================>     (102 + 13) / 115][Stage 126:===================================================> (111 + 4) / 115][Stage 126:====================================================>(114 + 1) / 115]                                                                                [Stage 127:================================>                    (71 + 45) / 116][Stage 127:======================================>              (84 + 32) / 116][Stage 127:==============================================>     (103 + 13) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.239515759 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428662356 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:================================>                    (74 + 46) / 120][Stage 128:==========================================>          (96 + 24) / 120][Stage 128:===================================================> (117 + 3) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:=============================>                       (67 + 54) / 121][Stage 129:===================================>                 (80 + 41) / 121][Stage 129:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 2.869229057 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392977212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:============================>                        (61 + 52) / 113][Stage 130:================================>                    (70 + 43) / 113][Stage 130:=========================================>           (89 + 24) / 113][Stage 130:==================================================>  (107 + 6) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:===========================>                         (59 + 55) / 114][Stage 131:==============================>                      (65 + 49) / 114][Stage 131:=======================================>             (86 + 28) / 114][Stage 131:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.025819125 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36773795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:=================================>                   (72 + 41) / 113][Stage 132:========================================>            (86 + 27) / 113][Stage 132:===========================================>         (93 + 20) / 113][Stage 132:==================================================>  (107 + 6) / 113][Stage 132:====================================================>(111 + 2) / 113]                                                                                [Stage 133:==================================>                  (74 + 40) / 114][Stage 133:========================================>            (88 + 26) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:=================================================>   (107 + 7) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.080224879 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504882109 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:===========================>                         (62 + 58) / 120][Stage 134:===============================>                     (72 + 48) / 120][Stage 134:===========================================>        (101 + 19) / 120][Stage 134:====================================================>(118 + 2) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:=============================>                       (68 + 53) / 121][Stage 135:======================================>              (88 + 33) / 121][Stage 135:=============================================>      (107 + 14) / 121]                                                                                Time elapsed: 2.989952894 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389986834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:===========================>                         (59 + 54) / 113][Stage 136:===============================>                     (68 + 45) / 113][Stage 136:=======================================>             (84 + 29) / 113][Stage 136:===============================================>    (103 + 10) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:============================>                        (61 + 53) / 114][Stage 137:=================================>                   (72 + 42) / 114][Stage 137:===========================================>         (94 + 20) / 114][Stage 137:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.042441308 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338990388 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:======================================>              (83 + 32) / 115][Stage 138:=============================================>       (98 + 17) / 115][Stage 138:===================================================> (111 + 4) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:========================================>            (89 + 27) / 116][Stage 139:==============================================>     (103 + 13) / 116][Stage 139:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.776759016 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406960959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:==========================>                          (60 + 61) / 121][Stage 140:=============================>                       (68 + 53) / 121][Stage 140:=====================================>               (86 + 35) / 121][Stage 140:==============================================>     (109 + 12) / 121]                                                                                [Stage 141:==========================>                          (61 + 61) / 122][Stage 141:============================>                        (66 + 56) / 122][Stage 141:====================================>                (83 + 39) / 122][Stage 141:==========================================>         (100 + 22) / 122][Stage 141:===================================================> (119 + 3) / 122][Stage 141:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.23488271 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359382813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:====================================>                (81 + 37) / 118][Stage 142:=======================================>             (89 + 29) / 118][Stage 142:==============================================>     (106 + 12) / 118][Stage 142:====================================================>(117 + 1) / 118]                                                                                [Stage 143:================================>                    (73 + 46) / 119][Stage 143:=================================>                   (75 + 44) / 119][Stage 143:====================================>                (81 + 38) / 119][Stage 143:=======================================>             (89 + 30) / 119][Stage 143:===========================================>         (98 + 21) / 119][Stage 143:===================================================> (115 + 4) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.476982833 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363198354 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:================================>                    (73 + 45) / 118][Stage 144:=======================================>             (88 + 30) / 118][Stage 144:===============================================>    (108 + 10) / 118]                                                                                [Stage 145:================================>                    (74 + 45) / 119][Stage 145:=====================================>               (84 + 35) / 119][Stage 145:==========================================>          (95 + 24) / 119][Stage 145:================================================>    (110 + 9) / 119][Stage 145:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.047522237 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348989053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:==================================>                  (74 + 39) / 113][Stage 146:=========================================>           (88 + 25) / 113][Stage 146:============================================>        (94 + 19) / 113][Stage 146:==================================================>  (108 + 5) / 113][Stage 146:====================================================>(111 + 2) / 113]                                                                                [Stage 147:=======================================>             (84 + 30) / 114][Stage 147:============================================>        (95 + 19) / 114][Stage 147:==================================================>  (108 + 6) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.432234363 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396973301 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:==========================>                          (61 + 59) / 120][Stage 148:==============================>                      (69 + 51) / 120][Stage 148:=======================================>             (90 + 30) / 120][Stage 148:===============================================>    (109 + 11) / 120][Stage 148:===================================================> (117 + 3) / 120]                                                                                [Stage 149:==========================>                          (61 + 60) / 121][Stage 149:==============================>                      (69 + 52) / 121][Stage 149:====================================>                (84 + 37) / 121][Stage 149:=============================================>      (107 + 14) / 121][Stage 149:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.085374517 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343721673 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:=====================================>               (82 + 33) / 115][Stage 150:============================================>        (96 + 19) / 115][Stage 150:===================================================> (112 + 3) / 115]                                                                                [Stage 151:======================================>              (84 + 32) / 116][Stage 151:===========================================>         (96 + 20) / 116][Stage 151:=================================================>   (108 + 8) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.624584351 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359868596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==================================>                  (74 + 39) / 113][Stage 152:=======================================>             (84 + 29) / 113][Stage 152:=============================================>       (98 + 15) / 113][Stage 152:=================================================>   (106 + 7) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:===================================>                 (76 + 38) / 114][Stage 153:========================================>            (88 + 26) / 114][Stage 153:=============================================>       (98 + 16) / 114][Stage 153:===================================================> (111 + 3) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.004958017 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334801754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:=====================================>               (81 + 34) / 115][Stage 154:=====================================>               (82 + 33) / 115][Stage 154:===========================================>         (95 + 20) / 115][Stage 154:=================================================>   (107 + 8) / 115][Stage 154:===================================================> (112 + 3) / 115][Stage 154:====================================================>(114 + 1) / 115]                                                                                [Stage 155:=====================================>               (83 + 33) / 116][Stage 155:========================================>            (88 + 28) / 116][Stage 155:=============================================>      (101 + 15) / 116][Stage 155:===================================================> (112 + 4) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.171904951 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413731647 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:=============================>                       (68 + 53) / 121][Stage 156:======================================>              (88 + 33) / 121][Stage 156:=================================================>   (113 + 8) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:==============================>                      (71 + 51) / 122][Stage 157:=======================================>             (91 + 31) / 122][Stage 157:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.00101581 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392352824 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:===========================>                         (59 + 54) / 113][Stage 158:==============================>                      (65 + 48) / 113][Stage 158:=========================================>           (89 + 24) / 113][Stage 158:==================================================>  (108 + 5) / 113][Stage 158:====================================================>(112 + 1) / 113]                                                                                [Stage 159:===========================>                         (59 + 55) / 114][Stage 159:================================>                    (70 + 44) / 114][Stage 159:======================================>              (82 + 32) / 114][Stage 159:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 2.911111361 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35572472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:===================================>                 (75 + 38) / 113][Stage 160:========================================>            (87 + 26) / 113][Stage 160:==============================================>      (99 + 14) / 113][Stage 160:===================================================> (110 + 3) / 113]                                                                                [Stage 161:====================================>                (79 + 35) / 114][Stage 161:=========================================>           (89 + 25) / 114][Stage 161:=============================================>      (100 + 14) / 114][Stage 161:===================================================> (110 + 4) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.950750615 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362000501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==================================>                  (74 + 39) / 113][Stage 162:=======================================>             (84 + 29) / 113][Stage 162:=============================================>       (96 + 17) / 113][Stage 162:================================================>    (104 + 9) / 113][Stage 162:===================================================> (109 + 4) / 113][Stage 162:====================================================>(112 + 1) / 113]                                                                                [Stage 163:===================================>                 (76 + 38) / 114][Stage 163:========================================>            (87 + 27) / 114][Stage 163:============================================>        (96 + 18) / 114][Stage 163:==============================================>     (102 + 12) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.11981375 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392157188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==========================>                          (60 + 60) / 120][Stage 164:===============================>                     (72 + 48) / 120][Stage 164:===========================================>         (99 + 21) / 120][Stage 164:==================================================>  (115 + 5) / 120]                                                                                [Stage 165:==========================>                          (61 + 60) / 121][Stage 165:===============================>                     (72 + 49) / 121][Stage 165:=======================================>             (90 + 31) / 121][Stage 165:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.0176131 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497236926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===========================>                         (62 + 58) / 120][Stage 166:==================================>                  (77 + 43) / 120][Stage 166:==========================================>          (97 + 23) / 120][Stage 166:===================================================> (117 + 3) / 120]                                                                                [Stage 167:=============================>                       (68 + 53) / 121][Stage 167:====================================>                (84 + 37) / 121][Stage 167:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 2.887885844 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369077784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:======================================>              (84 + 31) / 115][Stage 168:=============================================>      (100 + 15) / 115][Stage 168:===================================================> (111 + 4) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:======================================>              (84 + 32) / 116][Stage 169:===========================================>         (96 + 20) / 116][Stage 169:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.961915563 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413687013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:============================>                        (65 + 56) / 121][Stage 170:====================================>                (84 + 37) / 121][Stage 170:=============================================>      (106 + 15) / 121]                                                                                [Stage 171:==========================>                          (61 + 61) / 122][Stage 171:=============================>                       (68 + 54) / 122][Stage 171:======================================>              (89 + 33) / 122][Stage 171:=============================================>      (107 + 15) / 122][Stage 171:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.1297855 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide92"
dataSource: String = /nidan/orc/individualORC/slide92

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396463431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:============================>                        (60 + 53) / 113][Stage 172:================================>                    (69 + 44) / 113][Stage 172:========================================>            (87 + 26) / 113][Stage 172:==============================================>     (102 + 11) / 113][Stage 172:====================================================>(112 + 1) / 113]                                                                                [Stage 173:===========================>                         (60 + 54) / 114][Stage 173:=============================>                       (64 + 50) / 114][Stage 173:===================================>                 (76 + 38) / 114][Stage 173:===========================================>         (94 + 20) / 114][Stage 173:==================================================>  (108 + 6) / 114][Stage 173:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.36883533 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390371591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:============================>                        (61 + 52) / 113][Stage 174:==================================>                  (74 + 39) / 113][Stage 174:==============================================>      (99 + 14) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:===========================>                         (60 + 54) / 114][Stage 175:================================>                    (70 + 44) / 114][Stage 175:=====================================>               (81 + 33) / 114][Stage 175:=============================================>      (100 + 14) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.995102129 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351702485 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==================================>                  (74 + 39) / 113][Stage 176:=======================================>             (85 + 28) / 113][Stage 176:=============================================>       (98 + 15) / 113][Stage 176:===================================================> (110 + 3) / 113][Stage 176:====================================================>(112 + 1) / 113]                                                                                [Stage 177:=======================================>             (85 + 29) / 114][Stage 177:===========================================>         (93 + 21) / 114][Stage 177:=================================================>   (106 + 8) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.035934364 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401244835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:===========================>                         (62 + 59) / 121][Stage 178:===================================>                 (81 + 40) / 121][Stage 178:=============================================>      (105 + 16) / 121][Stage 178:====================================================>(120 + 1) / 121]                                                                                [Stage 179:==========================>                          (61 + 61) / 122][Stage 179:============================>                        (65 + 57) / 122][Stage 179:===================================>                 (82 + 40) / 122][Stage 179:===========================================>        (103 + 19) / 122][Stage 179:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 2.914717948 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37114879 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:=================================>                   (73 + 42) / 115][Stage 180:===========================================>         (94 + 21) / 115][Stage 180:================================================>    (106 + 9) / 115][Stage 180:===================================================> (112 + 3) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:==============================>                      (66 + 50) / 116][Stage 181:===================================>                 (77 + 39) / 116][Stage 181:=========================================>           (91 + 25) / 116][Stage 181:===============================================>    (105 + 11) / 116][Stage 181:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.10777067 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422588441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:============================>                        (60 + 53) / 113][Stage 182:=============================>                       (63 + 50) / 113][Stage 182:=====================================>               (80 + 33) / 113][Stage 182:==============================================>     (100 + 13) / 113][Stage 182:==================================================>  (108 + 5) / 113]                                                                                [Stage 183:============================>                        (62 + 52) / 114][Stage 183:==================================>                  (75 + 39) / 114][Stage 183:============================================>        (96 + 18) / 114][Stage 183:=================================================>   (107 + 7) / 114][Stage 183:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.250405665 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341746046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:======================================>              (84 + 31) / 115][Stage 184:============================================>        (97 + 18) / 115][Stage 184:=================================================>   (107 + 8) / 115]                                                                                [Stage 185:======================================>              (84 + 32) / 116][Stage 185:===========================================>         (96 + 20) / 116][Stage 185:================================================>    (107 + 9) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.653551096 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349205228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==================================>                  (74 + 39) / 113][Stage 186:=======================================>             (85 + 28) / 113][Stage 186:=============================================>       (96 + 17) / 113][Stage 186:=================================================>   (105 + 8) / 113][Stage 186:====================================================>(111 + 2) / 113][Stage 186:====================================================>(112 + 1) / 113]                                                                                [Stage 187:=======================================>             (85 + 29) / 114][Stage 187:============================================>        (96 + 18) / 114][Stage 187:==============================================>     (102 + 12) / 114][Stage 187:===================================================> (111 + 3) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.320442733 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391410358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:==========================>                          (61 + 59) / 120][Stage 188:==================================>                  (77 + 43) / 120][Stage 188:===========================================>        (101 + 19) / 120][Stage 188:===================================================> (116 + 4) / 120]                                                                                [Stage 189:===========================>                         (63 + 58) / 121][Stage 189:===============================>                     (72 + 49) / 121][Stage 189:=========================================>           (95 + 26) / 121][Stage 189:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.024820061 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469590154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:==================================>                  (76 + 42) / 118][Stage 190:========================================>            (91 + 27) / 118][Stage 190:===================================================> (115 + 3) / 118]                                                                                [Stage 191:================================>                    (73 + 46) / 119][Stage 191:======================================>              (87 + 32) / 119][Stage 191:=============================================>      (105 + 14) / 119][Stage 191:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 2.858880334 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378990257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:===========================>                         (58 + 55) / 113][Stage 192:================================>                    (69 + 44) / 113][Stage 192:========================================>            (86 + 27) / 113][Stage 192:===============================================>    (103 + 10) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:===========================>                         (59 + 55) / 114][Stage 193:=============================>                       (64 + 50) / 114][Stage 193:====================================>                (79 + 35) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.023091534 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410539263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:==========================>                          (60 + 61) / 121][Stage 194:===========================>                         (62 + 59) / 121][Stage 194:================================>                    (74 + 47) / 121][Stage 194:==========================================>          (98 + 23) / 121][Stage 194:==================================================>  (116 + 5) / 121]                                                                                [Stage 195:===========================>                         (64 + 58) / 122][Stage 195:==================================>                  (79 + 43) / 122][Stage 195:==============================================>     (110 + 12) / 122][Stage 195:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 2.953231006 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347565352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:====================================>                (80 + 35) / 115][Stage 196:========================================>            (87 + 28) / 115][Stage 196:===========================================>         (94 + 21) / 115][Stage 196:=================================================>   (107 + 8) / 115][Stage 196:====================================================>(113 + 2) / 115]                                                                                [Stage 197:======================================>              (84 + 32) / 116][Stage 197:==========================================>          (94 + 22) / 116][Stage 197:=================================================>   (109 + 7) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.053364553 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411073466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:===========================>                         (59 + 54) / 113][Stage 198:================================>                    (69 + 44) / 113][Stage 198:=======================================>             (85 + 28) / 113][Stage 198:=================================================>   (106 + 7) / 113]                                                                                [Stage 199:============================>                        (61 + 53) / 114][Stage 199:================================>                    (70 + 44) / 114][Stage 199:=======================================>             (84 + 30) / 114][Stage 199:==============================================>     (101 + 13) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.077202966 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ", 1))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50 ",1))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392820382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:==========================>                          (60 + 61) / 121][Stage 200:===========================>                         (62 + 59) / 121][Stage 200:=================================>                   (77 + 44) / 121][Stage 200:===========================================>        (102 + 19) / 121][Stage 200:====================================================>(120 + 1) / 121]                                                                                [Stage 201:==========================>                          (61 + 61) / 122][Stage 201:===========================>                         (63 + 59) / 122][Stage 201:=================================>                   (77 + 45) / 122][Stage 201:============================================>       (105 + 17) / 122][Stage 201:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.951894486 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 04:25:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:32802) dropped. RpcEnv already stopped.
17/05/25 04:25:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51618) dropped. RpcEnv already stopped.
17/05/25 04:25:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51618) dropped. RpcEnv already stopped.
17/05/25 04:25:31 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:32802) dropped. RpcEnv already stopped.

real	9m55.581s
user	11m23.704s
sys	0m27.936s
