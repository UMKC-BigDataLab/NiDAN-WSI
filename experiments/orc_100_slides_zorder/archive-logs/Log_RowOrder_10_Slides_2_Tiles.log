Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 15:55:33 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 15:55:47 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 15:55:47 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 15:55:47 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 15:55:49 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 15:56:00 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524155549-0565).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.396685226 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.873676107 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.615236744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:====================================>                  (76 + 39) / 115][Stage 2:=====================================>                 (78 + 37) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:========================================>              (85 + 30) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:====================================================>  (109 + 6) / 115][Stage 2:=====================================================> (112 + 3) / 115]                                                                                [Stage 3:======================================>                (81 + 35) / 116][Stage 3:========================================>              (86 + 30) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:=============================================>         (97 + 19) / 116][Stage 3:==============================================>       (100 + 16) / 116][Stage 3:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.36269883 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.663806119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=============================>                         (62 + 53) / 115][Stage 4:=================================>                     (69 + 46) / 115][Stage 4:=================================>                     (70 + 45) / 115][Stage 4:====================================>                  (77 + 38) / 115][Stage 4:========================================>              (84 + 31) / 115][Stage 4:==============================================>        (97 + 18) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:=====================================================> (112 + 3) / 115]                                                                                [Stage 5:==============================>                        (65 + 51) / 116][Stage 5:=================================>                     (70 + 46) / 116][Stage 5:==================================>                    (73 + 43) / 116][Stage 5:======================================>                (82 + 34) / 116][Stage 5:==========================================>            (89 + 27) / 116][Stage 5:===============================================>      (101 + 15) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.657368558 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.659048341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (58 + 57) / 115][Stage 6:==============================>                        (63 + 52) / 115][Stage 6:================================>                      (67 + 48) / 115][Stage 6:==================================>                    (72 + 43) / 115][Stage 6:========================================>              (84 + 31) / 115][Stage 6:=============================================>         (95 + 20) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:=====================================================> (111 + 4) / 115]                                                                                [Stage 7:=============================>                         (62 + 54) / 116][Stage 7:==================================>                    (73 + 43) / 116][Stage 7:=======================================>               (84 + 32) / 116][Stage 7:==========================================>            (89 + 27) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:===================================================>   (108 + 8) / 116][Stage 7:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.355107356 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.696117897 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==========================>                            (57 + 63) / 120][Stage 8:===========================>                           (59 + 61) / 120][Stage 8:==============================>                        (67 + 53) / 120][Stage 8:===================================>                   (77 + 43) / 120][Stage 8:========================================>              (88 + 32) / 120][Stage 8:===========================================>           (95 + 25) / 120][Stage 8:===================================================>   (112 + 8) / 120]                                                                                [Stage 9:===========================>                           (61 + 60) / 121][Stage 9:===============================>                       (70 + 51) / 121][Stage 9:====================================>                  (80 + 41) / 121][Stage 9:===========================================>           (96 + 25) / 121][Stage 9:================================================>     (109 + 12) / 121][Stage 9:=====================================================> (117 + 4) / 121][Stage 9:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.635189346 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.595175494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (59 + 61) / 120][Stage 10:===========================>                          (60 + 60) / 120][Stage 10:==============================>                       (67 + 53) / 120][Stage 10:====================================>                 (80 + 40) / 120][Stage 10:============================================>         (98 + 22) / 120][Stage 10:================================================>    (109 + 11) / 120][Stage 10:====================================================> (116 + 4) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:==============================>                       (68 + 53) / 121][Stage 11:===================================>                  (79 + 42) / 121][Stage 11:========================================>             (90 + 31) / 121][Stage 11:===============================================>     (108 + 13) / 121][Stage 11:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.014312106 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.653627107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:==============================>                       (67 + 53) / 120][Stage 12:=================================>                    (74 + 46) / 120][Stage 12:==========================================>           (95 + 25) / 120][Stage 12:==============================================>      (106 + 14) / 120][Stage 12:====================================================> (117 + 3) / 120]                                                                                [Stage 13:===========================>                          (62 + 59) / 121][Stage 13:==============================>                       (69 + 52) / 121][Stage 13:=====================================>                (85 + 36) / 121][Stage 13:==============================================>      (106 + 15) / 121][Stage 13:====================================================> (117 + 4) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.807285225 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.583114139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:================================>                     (72 + 49) / 121][Stage 14:========================================>             (90 + 31) / 121][Stage 14:===============================================>     (108 + 13) / 121][Stage 14:===================================================>  (115 + 6) / 121][Stage 14:=====================================================>(120 + 1) / 121]                                                                                [Stage 15:===========================>                          (61 + 61) / 122][Stage 15:===========================>                          (63 + 59) / 122][Stage 15:==================================>                   (78 + 44) / 122][Stage 15:==============================================>      (106 + 16) / 122][Stage 15:====================================================> (118 + 4) / 122][Stage 15:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.821873351 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 80 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448959899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:======================================>               (83 + 32) / 115][Stage 16:=======================================>              (85 + 30) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:====================================================> (111 + 4) / 115]                                                                                [Stage 17:=======================================>              (85 + 31) / 116][Stage 17:============================================>         (95 + 21) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.974698894 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.552277386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:==============================>                       (64 + 49) / 113][Stage 18:======================================>               (81 + 32) / 113][Stage 18:====================================================> (110 + 3) / 113]                                                                                [Stage 19:============================>                         (60 + 54) / 114][Stage 19:==================================>                   (73 + 41) / 114][Stage 19:===========================================>          (91 + 23) / 114][Stage 19:===============================================>     (103 + 11) / 114][Stage 19:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.370356207 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.592511421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:===========================>                          (61 + 59) / 120][Stage 20:==================================>                   (76 + 44) / 120][Stage 20:===========================================>          (96 + 24) / 120][Stage 20:==================================================>   (113 + 7) / 120][Stage 20:====================================================> (116 + 4) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:===============================>                      (70 + 51) / 121][Stage 21:======================================>               (87 + 34) / 121][Stage 21:===================================================>  (116 + 5) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.722817028 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526892191 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:=================================>                    (74 + 46) / 120][Stage 22:=======================================>              (87 + 33) / 120][Stage 22:============================================>        (101 + 19) / 120][Stage 22:=====================================================>(118 + 2) / 120]                                                                                [Stage 23:===========================>                          (61 + 60) / 121][Stage 23:=============================>                        (67 + 54) / 121][Stage 23:=====================================>                (85 + 36) / 121][Stage 23:=============================================>       (104 + 17) / 121][Stage 23:====================================================> (117 + 4) / 121][Stage 23:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.620476909 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481979558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=================================>                    (70 + 43) / 113][Stage 24:=======================================>              (82 + 31) / 113][Stage 24:============================================>         (93 + 20) / 113][Stage 24:================================================>    (103 + 10) / 113][Stage 24:====================================================> (109 + 4) / 113]                                                                                [Stage 25:=====================================>                (79 + 35) / 114][Stage 25:==========================================>           (90 + 24) / 114][Stage 25:==============================================>      (100 + 14) / 114][Stage 25:==================================================>   (106 + 8) / 114][Stage 25:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.342655632 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450037603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===================================>                  (74 + 39) / 113][Stage 26:========================================>             (84 + 29) / 113][Stage 26:============================================>         (93 + 20) / 113][Stage 26:===================================================>  (107 + 6) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:===================================>                  (75 + 39) / 114][Stage 27:=======================================>              (84 + 30) / 114][Stage 27:============================================>         (93 + 21) / 114][Stage 27:==============================================>       (99 + 15) / 114][Stage 27:===================================================>  (109 + 5) / 114][Stage 27:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.631613485 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508822164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (61 + 59) / 120][Stage 28:================================>                     (72 + 48) / 120][Stage 28:========================================>             (90 + 30) / 120][Stage 28:================================================>    (110 + 10) / 120][Stage 28:=====================================================>(119 + 1) / 120]                                                                                [Stage 29:===========================>                          (61 + 60) / 121][Stage 29:=================================>                    (74 + 47) / 121][Stage 29:======================================>               (87 + 34) / 121][Stage 29:=============================================>       (103 + 18) / 121][Stage 29:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.27073814 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508474826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:===========================>                          (62 + 58) / 120][Stage 30:================================>                     (73 + 47) / 120][Stage 30:======================================>               (86 + 34) / 120][Stage 30:================================================>    (109 + 11) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:===============================>                      (70 + 51) / 121][Stage 31:====================================>                 (81 + 40) / 121][Stage 31:============================================>         (99 + 22) / 121][Stage 31:===================================================>  (115 + 6) / 121][Stage 31:======================================================(121 + 0) / 121]                                                                                Time elapsed: 3.38249366 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538247812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:==============================>                       (69 + 52) / 121][Stage 32:==========================================>           (96 + 25) / 121][Stage 32:================================================>    (110 + 11) / 121]                                                                                [Stage 33:===========================>                          (62 + 60) / 122][Stage 33:===============================>                      (71 + 51) / 122][Stage 33:=======================================>              (90 + 32) / 122][Stage 33:================================================>    (111 + 11) / 122][Stage 33:===================================================>  (117 + 5) / 122][Stage 33:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.80449118 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513926899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:================================>                     (72 + 48) / 120][Stage 34:=======================================>              (87 + 33) / 120][Stage 34:==============================================>      (106 + 14) / 120][Stage 34:=====================================================>(119 + 1) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:==============================>                       (69 + 52) / 121][Stage 35:===================================>                  (79 + 42) / 121][Stage 35:==============================================>      (107 + 14) / 121][Stage 35:===================================================>  (116 + 5) / 121][Stage 35:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.386140433 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 112 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.538744714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (61 + 59) / 120][Stage 36:==================================>                   (77 + 43) / 120][Stage 36:=======================================>              (88 + 32) / 120][Stage 36:==============================================>      (105 + 15) / 120][Stage 36:=====================================================>(118 + 2) / 120]                                                                                [Stage 37:=============================>                        (66 + 55) / 121][Stage 37:=================================>                    (74 + 47) / 121][Stage 37:=========================================>            (94 + 27) / 121][Stage 37:==============================================>      (106 + 15) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.761593343 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449448483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=================================>                    (71 + 42) / 113][Stage 38:======================================>               (81 + 32) / 113][Stage 38:=============================================>        (95 + 18) / 113][Stage 38:================================================>    (103 + 10) / 113][Stage 38:====================================================> (109 + 4) / 113]                                                                                [Stage 39:======================================>               (82 + 32) / 114][Stage 39:===========================================>          (91 + 23) / 114][Stage 39:===============================================>     (102 + 12) / 114][Stage 39:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.3391267 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45662893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:=================================>                    (73 + 45) / 118][Stage 40:===================================>                  (77 + 41) / 118][Stage 40:=====================================>                (83 + 35) / 118][Stage 40:=============================================>        (99 + 19) / 118][Stage 40:=================================================>    (109 + 9) / 118][Stage 40:====================================================> (115 + 3) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:====================================>                 (80 + 39) / 119][Stage 41:=========================================>            (91 + 28) / 119][Stage 41:==============================================>      (104 + 15) / 119][Stage 41:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.790258131 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513367646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (62 + 59) / 121][Stage 42:=================================>                    (75 + 46) / 121][Stage 42:===========================================>          (97 + 24) / 121][Stage 42:==================================================>   (114 + 7) / 121]                                                                                [Stage 43:===========================>                          (62 + 60) / 122][Stage 43:==============================>                       (70 + 52) / 122][Stage 43:======================================>               (88 + 34) / 122][Stage 43:==============================================>      (106 + 16) / 122][Stage 43:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.275748438 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.534435029 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (58 + 55) / 113][Stage 44:================================>                     (68 + 45) / 113][Stage 44:=========================================>            (87 + 26) / 113][Stage 44:================================================>    (103 + 10) / 113][Stage 44:=====================================================>(112 + 1) / 113]                                                                                [Stage 45:===========================>                          (59 + 55) / 114][Stage 45:=================================>                    (70 + 44) / 114][Stage 45:===========================================>          (92 + 22) / 114][Stage 45:=================================================>    (105 + 9) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.158373025 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.474762281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:=============================>                        (66 + 54) / 120][Stage 46:====================================>                 (81 + 39) / 120][Stage 46:=========================================>            (93 + 27) / 120][Stage 46:===================================================>  (115 + 5) / 120]                                                                                [Stage 47:============================>                         (64 + 57) / 121][Stage 47:===================================>                  (79 + 42) / 121][Stage 47:============================================>         (99 + 22) / 121][Stage 47:==================================================>   (114 + 7) / 121][Stage 47:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.423123083 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49230539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==========================>                           (60 + 61) / 121][Stage 48:=============================>                        (66 + 55) / 121][Stage 48:======================================>               (86 + 35) / 121][Stage 48:==============================================>      (106 + 15) / 121][Stage 48:=====================================================>(120 + 1) / 121]                                                                                [Stage 49:===========================>                          (61 + 61) / 122][Stage 49:==============================>                       (68 + 54) / 122][Stage 49:======================================>               (86 + 36) / 122][Stage 49:==============================================>      (107 + 15) / 122][Stage 49:===================================================>  (116 + 6) / 122]                                                                                Time elapsed: 3.301849897 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403338275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===================================>                  (74 + 39) / 113][Stage 50:==========================================>           (89 + 24) / 113][Stage 50:===============================================>     (101 + 12) / 113][Stage 50:===================================================>  (108 + 5) / 113]                                                                                [Stage 51:====================================>                 (78 + 36) / 114][Stage 51:=========================================>            (88 + 26) / 114][Stage 51:=============================================>        (97 + 17) / 114][Stage 51:===============================================>     (103 + 11) / 114][Stage 51:==================================================>   (107 + 7) / 114][Stage 51:====================================================> (111 + 3) / 114][Stage 51:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.492249274 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455498 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==========================>                           (60 + 61) / 121][Stage 52:===============================>                      (70 + 51) / 121][Stage 52:======================================>               (87 + 34) / 121][Stage 52:=============================================>       (105 + 16) / 121][Stage 52:=====================================================>(119 + 2) / 121]                                                                                [Stage 53:===========================>                          (61 + 61) / 122][Stage 53:===============================>                      (71 + 51) / 122][Stage 53:=============================================>       (104 + 18) / 122][Stage 53:==================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.351729883 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463970966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (60 + 60) / 120][Stage 54:=============================>                        (66 + 54) / 120][Stage 54:====================================>                 (80 + 40) / 120][Stage 54:================================================>    (109 + 11) / 120][Stage 54:=====================================================>(118 + 2) / 120]                                                                                [Stage 55:===========================>                          (61 + 60) / 121][Stage 55:=================================>                    (75 + 46) / 121][Stage 55:=====================================>                (85 + 36) / 121][Stage 55:===============================================>     (108 + 13) / 121][Stage 55:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.351646873 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403790298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==================================>                   (73 + 40) / 113][Stage 56:=========================================>            (86 + 27) / 113][Stage 56:===============================================>     (101 + 12) / 113][Stage 56:===================================================>  (108 + 5) / 113]                                                                                [Stage 57:=======================================>              (83 + 31) / 114][Stage 57:============================================>         (93 + 21) / 114][Stage 57:================================================>    (104 + 10) / 114][Stage 57:====================================================> (110 + 4) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.207172407 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4574493 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:============================>                         (64 + 56) / 120][Stage 58:=================================>                    (74 + 46) / 120][Stage 58:======================================>               (86 + 34) / 120][Stage 58:==================================================>   (112 + 8) / 120][Stage 58:=====================================================>(119 + 1) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:==============================>                       (69 + 52) / 121][Stage 59:=====================================>                (83 + 38) / 121][Stage 59:=============================================>       (105 + 16) / 121][Stage 59:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.318159252 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415030739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=================================>                    (71 + 42) / 113][Stage 60:========================================>             (85 + 28) / 113][Stage 60:============================================>         (94 + 19) / 113][Stage 60:==============================================>      (100 + 13) / 113][Stage 60:===================================================>  (108 + 5) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:======================================>               (81 + 33) / 114][Stage 61:============================================>         (93 + 21) / 114][Stage 61:===============================================>     (102 + 12) / 114][Stage 61:==================================================>   (107 + 7) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.649259934 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468134883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:============================>                         (60 + 53) / 113][Stage 62:==================================>                   (73 + 40) / 113][Stage 62:============================================>         (94 + 19) / 113][Stage 62:====================================================> (109 + 4) / 113]                                                                                [Stage 63:============================>                         (60 + 54) / 114][Stage 63:=============================>                        (63 + 51) / 114][Stage 63:====================================>                 (78 + 36) / 114][Stage 63:===============================================>     (102 + 12) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.037203204 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389071589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (73 + 40) / 113][Stage 64:======================================>               (81 + 32) / 113][Stage 64:===========================================>          (92 + 21) / 113][Stage 64:================================================>    (103 + 10) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:=========================================>            (88 + 26) / 114][Stage 65:=============================================>        (95 + 19) / 114][Stage 65:===============================================>     (103 + 11) / 114][Stage 65:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.952349847 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388137411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:======================================>               (82 + 33) / 115][Stage 66:=========================================>            (89 + 26) / 115][Stage 66:=================================================>    (106 + 9) / 115][Stage 66:====================================================> (112 + 3) / 115]                                                                                [Stage 67:=====================================>                (81 + 35) / 116][Stage 67:========================================>             (86 + 30) / 116][Stage 67:=============================================>        (98 + 18) / 116][Stage 67:===================================================>  (110 + 6) / 116][Stage 67:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.824080008 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496035216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===================================>                  (74 + 39) / 113][Stage 68:========================================>             (84 + 29) / 113][Stage 68:============================================>         (93 + 20) / 113][Stage 68:===============================================>      (99 + 14) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:===================================>                  (75 + 39) / 114][Stage 69:========================================>             (86 + 28) / 114][Stage 69:=============================================>        (95 + 19) / 114][Stage 69:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.853648281 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43930142 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:===============================>                      (66 + 47) / 113][Stage 70:=========================================>            (87 + 26) / 113][Stage 70:=================================================>    (104 + 9) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:============================>                         (60 + 54) / 114][Stage 71:===============================>                      (66 + 48) / 114][Stage 71:======================================>               (82 + 32) / 114][Stage 71:==================================================>   (106 + 8) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.203171972 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41785382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=================================>                    (71 + 42) / 113][Stage 72:======================================>               (81 + 32) / 113][Stage 72:===========================================>          (90 + 23) / 113][Stage 72:===============================================>      (99 + 14) / 113][Stage 72:==================================================>   (105 + 8) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:====================================>                 (78 + 36) / 114][Stage 73:==========================================>           (89 + 25) / 114][Stage 73:==============================================>      (100 + 14) / 114][Stage 73:====================================================> (111 + 3) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.647207574 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 114 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427649864 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:===============================>                      (69 + 51) / 120][Stage 74:======================================>               (85 + 35) / 120][Stage 74:====================================================> (116 + 4) / 120]                                                                                [Stage 75:===========================>                          (61 + 60) / 121][Stage 75:================================>                     (73 + 48) / 121][Stage 75:======================================>               (87 + 34) / 121][Stage 75:============================================>        (102 + 19) / 121][Stage 75:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.250040784 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428142784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:============================>                         (59 + 54) / 113][Stage 76:=============================>                        (62 + 51) / 113][Stage 76:========================================>             (85 + 28) / 113][Stage 76:===============================================>     (101 + 12) / 113][Stage 76:=====================================================>(112 + 1) / 113]                                                                                [Stage 77:==============================>                       (64 + 50) / 114][Stage 77:========================================>             (86 + 28) / 114][Stage 77:==============================================>      (101 + 13) / 114][Stage 77:===================================================>  (109 + 5) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.199763484 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392626629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:====================================>                 (77 + 36) / 113][Stage 78:========================================>             (85 + 28) / 113][Stage 78:============================================>         (93 + 20) / 113][Stage 78:=================================================>    (104 + 9) / 113][Stage 78:====================================================> (110 + 3) / 113][Stage 78:=====================================================>(112 + 1) / 113]                                                                                [Stage 79:======================================>               (82 + 32) / 114][Stage 79:============================================>         (93 + 21) / 114][Stage 79:==============================================>       (99 + 15) / 114][Stage 79:===================================================>  (108 + 6) / 114][Stage 79:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.428972157 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384218305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (76 + 37) / 113][Stage 80:=========================================>            (87 + 26) / 113][Stage 80:=============================================>        (96 + 17) / 113][Stage 80:===================================================>  (108 + 5) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:====================================>                 (76 + 38) / 114][Stage 81:=========================================>            (88 + 26) / 114][Stage 81:==============================================>      (101 + 13) / 114][Stage 81:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.102572896 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437107871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (61 + 59) / 120][Stage 82:===============================>                      (70 + 50) / 120][Stage 82:======================================>               (86 + 34) / 120][Stage 82:==================================================>   (112 + 8) / 120]                                                                                [Stage 83:===========================>                          (62 + 59) / 121][Stage 83:==============================>                       (69 + 52) / 121][Stage 83:===========================================>          (97 + 24) / 121][Stage 83:=====================================================>(119 + 2) / 121][Stage 83:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.274393274 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430616244 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:================================>                     (72 + 48) / 120][Stage 84:========================================>             (89 + 31) / 120][Stage 84:=============================================>       (103 + 17) / 120][Stage 84:====================================================> (116 + 4) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:================================>                     (72 + 49) / 121][Stage 85:========================================>             (91 + 30) / 121][Stage 85:===============================================>     (108 + 13) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.278369575 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424038637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:=============================>                        (66 + 54) / 120][Stage 86:===================================>                  (79 + 41) / 120][Stage 86:============================================>         (98 + 22) / 120][Stage 86:==================================================>   (113 + 7) / 120][Stage 86:=====================================================>(118 + 2) / 120]                                                                                [Stage 87:===========================>                          (62 + 59) / 121][Stage 87:===============================>                      (71 + 50) / 121][Stage 87:======================================>               (86 + 35) / 121][Stage 87:=============================================>       (105 + 16) / 121]                                                                                Time elapsed: 3.154351287 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414844295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:============================>                         (59 + 54) / 113][Stage 88:=============================>                        (62 + 51) / 113][Stage 88:====================================>                 (76 + 37) / 113][Stage 88:===================================================>  (108 + 5) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:==============================>                       (65 + 49) / 114][Stage 89:=======================================>              (84 + 30) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.063400278 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440015571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (61 + 60) / 121][Stage 90:================================>                     (72 + 49) / 121][Stage 90:===========================================>          (98 + 23) / 121][Stage 90:================================================>    (111 + 10) / 121]                                                                                [Stage 91:===========================>                          (62 + 60) / 122][Stage 91:==============================>                       (70 + 52) / 122][Stage 91:======================================>               (88 + 34) / 122][Stage 91:================================================>    (111 + 11) / 122][Stage 91:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.301055379 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371550594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (72 + 41) / 113][Stage 92:=====================================>                (78 + 35) / 113][Stage 92:=========================================>            (87 + 26) / 113][Stage 92:==============================================>      (100 + 13) / 113][Stage 92:=====================================================>(111 + 2) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:========================================>             (86 + 28) / 114][Stage 93:=============================================>        (97 + 17) / 114][Stage 93:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.960411497 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412857761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:=================================>                    (70 + 43) / 113][Stage 94:========================================>             (85 + 28) / 113][Stage 94:===============================================>     (102 + 11) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:===========================>                          (59 + 55) / 114][Stage 95:=============================>                        (63 + 51) / 114][Stage 95:========================================>             (86 + 28) / 114][Stage 95:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.014071649 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 178 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383223835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==================================>                   (75 + 43) / 118][Stage 96:====================================>                 (80 + 38) / 118][Stage 96:=========================================>            (91 + 27) / 118][Stage 96:==================================================>   (110 + 8) / 118][Stage 96:=====================================================>(117 + 1) / 118]                                                                                [Stage 97:=================================>                    (73 + 46) / 119][Stage 97:====================================>                 (81 + 38) / 119][Stage 97:=========================================>            (91 + 28) / 119][Stage 97:============================================>        (100 + 19) / 119][Stage 97:===================================================>  (113 + 6) / 119][Stage 97:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.362548054 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373133514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===================================>                  (74 + 39) / 113][Stage 98:========================================>             (84 + 29) / 113][Stage 98:============================================>         (93 + 20) / 113][Stage 98:===============================================>     (102 + 11) / 113][Stage 98:====================================================> (110 + 3) / 113]                                                                                [Stage 99:========================================>             (85 + 29) / 114][Stage 99:==========================================>           (90 + 24) / 114][Stage 99:===============================================>     (103 + 11) / 114][Stage 99:====================================================> (110 + 4) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.186875775 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419203472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:==========================>                          (61 + 60) / 121][Stage 100:===================================>                 (80 + 41) / 121][Stage 100:===========================================>         (99 + 22) / 121][Stage 100:=================================================>   (114 + 7) / 121][Stage 100:====================================================>(119 + 2) / 121]                                                                                [Stage 101:==========================>                          (61 + 61) / 122][Stage 101:=============================>                       (67 + 55) / 122][Stage 101:======================================>              (88 + 34) / 122][Stage 101:===============================================>    (112 + 10) / 122][Stage 101:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.148009133 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377840687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:===================================>                 (78 + 40) / 118][Stage 102:========================================>            (90 + 28) / 118][Stage 102:============================================>        (99 + 19) / 118][Stage 102:================================================>    (109 + 9) / 118][Stage 102:====================================================>(116 + 2) / 118]                                                                                [Stage 103:================================>                    (73 + 46) / 119][Stage 103:====================================>                (81 + 38) / 119][Stage 103:==========================================>          (95 + 24) / 119][Stage 103:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.341487037 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390855165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===================================>                 (76 + 37) / 113][Stage 104:========================================>            (86 + 27) / 113][Stage 104:===========================================>         (92 + 21) / 113][Stage 104:================================================>    (104 + 9) / 113][Stage 104:====================================================>(111 + 2) / 113]                                                                                [Stage 105:======================================>              (83 + 31) / 114][Stage 105:=========================================>           (90 + 24) / 114][Stage 105:==============================================>     (103 + 11) / 114][Stage 105:===================================================> (111 + 3) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.255797497 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36622421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:======================================>              (82 + 31) / 113][Stage 106:==========================================>          (90 + 23) / 113][Stage 106:==============================================>     (101 + 12) / 113][Stage 106:==================================================>  (107 + 6) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:=================================>                   (72 + 42) / 114][Stage 107:=======================================>             (84 + 30) / 114][Stage 107:===========================================>         (93 + 21) / 114][Stage 107:================================================>    (105 + 9) / 114][Stage 107:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.307982152 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358910803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:======================================>              (84 + 31) / 115][Stage 108:===========================================>         (95 + 20) / 115][Stage 108:===================================================> (112 + 3) / 115]                                                                                [Stage 109:=====================================>               (81 + 35) / 116][Stage 109:==========================================>          (94 + 22) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.742534742 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 170 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374462257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:===================================>                 (78 + 40) / 118][Stage 110:=======================================>             (88 + 30) / 118][Stage 110:=============================================>      (103 + 15) / 118][Stage 110:================================================>    (109 + 9) / 118][Stage 110:==================================================>  (112 + 6) / 118][Stage 110:==================================================>  (113 + 5) / 118][Stage 110:===================================================> (114 + 4) / 118]                                                                                [Stage 111:=================================>                   (75 + 44) / 119][Stage 111:======================================>              (87 + 32) / 119][Stage 111:=========================================>           (94 + 25) / 119][Stage 111:=============================================>      (105 + 14) / 119][Stage 111:===================================================> (115 + 4) / 119][Stage 111:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.318504542 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361834321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (80 + 33) / 113][Stage 112:==========================================>          (90 + 23) / 113][Stage 112:==============================================>      (99 + 14) / 113][Stage 112:================================================>    (104 + 9) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:===================================>                 (77 + 37) / 114][Stage 113:=========================================>           (89 + 25) / 114][Stage 113:=============================================>       (98 + 16) / 114][Stage 113:===================================================> (111 + 3) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.287016595 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36839351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:===================================>                 (80 + 38) / 118][Stage 114:=======================================>             (87 + 31) / 118][Stage 114:=============================================>      (104 + 14) / 118][Stage 114:====================================================>(117 + 1) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:=====================================>               (84 + 35) / 119][Stage 115:===========================================>        (100 + 19) / 119][Stage 115:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.239692146 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509913382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 61) / 121][Stage 116:=============================>                       (68 + 53) / 121][Stage 116:=====================================>               (86 + 35) / 121][Stage 116:============================================>       (103 + 18) / 121][Stage 116:====================================================>(119 + 2) / 121]                                                                                [Stage 117:==========================>                          (61 + 61) / 122][Stage 117:=============================>                       (67 + 55) / 122][Stage 117:======================================>              (88 + 34) / 122][Stage 117:=================================================>   (114 + 8) / 122][Stage 117:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.165250146 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392453169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (59 + 54) / 113][Stage 118:=============================>                       (62 + 51) / 113][Stage 118:====================================>                (77 + 36) / 113][Stage 118:==============================================>      (99 + 14) / 113][Stage 118:===================================================> (109 + 4) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:==================================>                  (75 + 39) / 114][Stage 119:========================================>            (88 + 26) / 114][Stage 119:==================================================>  (109 + 5) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.225261889 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365368078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=====================================>               (81 + 32) / 113][Stage 120:==========================================>          (90 + 23) / 113][Stage 120:==============================================>      (99 + 14) / 113][Stage 120:==================================================>  (108 + 5) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:==================================>                  (74 + 40) / 114][Stage 121:========================================>            (87 + 27) / 114][Stage 121:===========================================>         (93 + 21) / 114][Stage 121:==============================================>     (101 + 13) / 114][Stage 121:=================================================>   (107 + 7) / 114][Stage 121:==================================================>  (109 + 5) / 114][Stage 121:===================================================> (110 + 4) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.203879958 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379121255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:================================>                    (70 + 45) / 115][Stage 122:========================================>            (87 + 28) / 115][Stage 122:===========================================>         (94 + 21) / 115][Stage 122:=================================================>   (108 + 7) / 115]                                                                                [Stage 123:=======================================>             (87 + 29) / 116][Stage 123:=============================================>      (101 + 15) / 116][Stage 123:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.698317929 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372264568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:==================================>                  (76 + 42) / 118][Stage 124:=======================================>             (87 + 31) / 118][Stage 124:=============================================>      (104 + 14) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:=================================>                   (76 + 43) / 119][Stage 125:====================================>                (82 + 37) / 119][Stage 125:=========================================>           (94 + 25) / 119][Stage 125:=============================================>      (104 + 15) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.31242032 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408581566 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (67 + 48) / 115][Stage 126:====================================>                (79 + 36) / 115][Stage 126:===========================================>         (94 + 21) / 115][Stage 126:===============================================>    (105 + 10) / 115][Stage 126:====================================================>(113 + 2) / 115]                                                                                [Stage 127:==============================>                      (67 + 49) / 116][Stage 127:=====================================>               (83 + 33) / 116][Stage 127:============================================>        (97 + 19) / 116][Stage 127:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.828189395 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378492419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (81 + 32) / 113][Stage 128:==========================================>          (91 + 22) / 113][Stage 128:==============================================>     (101 + 12) / 113][Stage 128:===================================================> (110 + 3) / 113][Stage 128:====================================================>(112 + 1) / 113]                                                                                [Stage 129:=====================================>               (81 + 33) / 114][Stage 129:==========================================>          (92 + 22) / 114][Stage 129:==============================================>      (99 + 15) / 114][Stage 129:=================================================>   (107 + 7) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.251013563 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358292255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (74 + 39) / 113][Stage 130:=========================================>           (88 + 25) / 113][Stage 130:=============================================>       (97 + 16) / 113][Stage 130:=================================================>   (106 + 7) / 113][Stage 130:====================================================>(111 + 2) / 113]                                                                                [Stage 131:=======================================>             (84 + 30) / 114][Stage 131:=============================================>       (97 + 17) / 114][Stage 131:===============================================>    (104 + 10) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.367306948 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405143014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:===========================>                         (62 + 58) / 120][Stage 132:================================>                    (74 + 46) / 120][Stage 132:=========================================>           (93 + 27) / 120][Stage 132:==================================================>  (115 + 5) / 120]                                                                                [Stage 133:============================>                        (66 + 55) / 121][Stage 133:===================================>                 (82 + 39) / 121][Stage 133:=============================================>      (105 + 16) / 121]                                                                                Time elapsed: 3.002685732 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392468017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:===========================>                         (58 + 55) / 113][Stage 134:===============================>                     (67 + 46) / 113][Stage 134:=======================================>             (84 + 29) / 113][Stage 134:=============================================>       (97 + 16) / 113][Stage 134:===================================================> (109 + 4) / 113]                                                                                [Stage 135:===========================>                         (59 + 55) / 114][Stage 135:==============================>                      (66 + 48) / 114][Stage 135:=====================================>               (80 + 34) / 114][Stage 135:==============================================>     (102 + 12) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.21442377 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 204 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386720448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:===========================>                         (58 + 55) / 113][Stage 136:=============================>                       (62 + 51) / 113][Stage 136:====================================>                (77 + 36) / 113][Stage 136:=============================================>       (96 + 17) / 113][Stage 136:==================================================>  (108 + 5) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:===========================>                         (60 + 54) / 114][Stage 137:===============================>                     (68 + 46) / 114][Stage 137:=======================================>             (85 + 29) / 114][Stage 137:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.127863008 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401911223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===========================>                         (62 + 58) / 120][Stage 138:================================>                    (74 + 46) / 120][Stage 138:=====================================>               (84 + 36) / 120][Stage 138:============================================>       (103 + 17) / 120][Stage 138:====================================================>(119 + 1) / 120]                                                                                [Stage 139:==========================>                          (61 + 60) / 121][Stage 139:============================>                        (66 + 55) / 121][Stage 139:===================================>                 (82 + 39) / 121][Stage 139:=========================================>           (94 + 27) / 121][Stage 139:=================================================>   (114 + 7) / 121][Stage 139:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.318497006 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 140 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398792469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (58 + 55) / 113][Stage 140:==================================>                  (73 + 40) / 113][Stage 140:==========================================>          (91 + 22) / 113][Stage 140:=================================================>   (105 + 8) / 113]                                                                                [Stage 141:===========================>                         (60 + 54) / 114][Stage 141:================================>                    (70 + 44) / 114][Stage 141:=========================================>           (90 + 24) / 114][Stage 141:=================================================>   (106 + 8) / 114][Stage 141:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.269958718 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357187122 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=====================================>               (81 + 32) / 113][Stage 142:==========================================>          (91 + 22) / 113][Stage 142:==============================================>     (102 + 11) / 113][Stage 142:===================================================> (110 + 3) / 113][Stage 142:====================================================>(111 + 2) / 113]                                                                                [Stage 143:=====================================>               (80 + 34) / 114][Stage 143:=========================================>           (90 + 24) / 114][Stage 143:==============================================>      (99 + 15) / 114][Stage 143:=================================================>   (107 + 7) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.858079669 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392072343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===================================>                 (78 + 37) / 115][Stage 144:============================================>        (96 + 19) / 115][Stage 144:=================================================>   (108 + 7) / 115]                                                                                [Stage 145:==================================>                  (76 + 40) / 116][Stage 145:===========================================>         (95 + 21) / 116][Stage 145:===============================================>    (106 + 10) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.077532526 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379814804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (72 + 46) / 118][Stage 146:=================================>                   (75 + 43) / 118][Stage 146:=======================================>             (88 + 30) / 118][Stage 146:============================================>        (98 + 20) / 118][Stage 146:=================================================>   (111 + 7) / 118]                                                                                [Stage 147:=================================>                   (75 + 44) / 119][Stage 147:====================================>                (82 + 37) / 119][Stage 147:========================================>            (91 + 28) / 119][Stage 147:=============================================>      (104 + 15) / 119][Stage 147:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.448869234 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404669063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:==============================>                      (70 + 51) / 121][Stage 148:======================================>              (87 + 34) / 121][Stage 148:==================================================>  (115 + 6) / 121]                                                                                [Stage 149:==========================>                          (61 + 61) / 122][Stage 149:==============================>                      (70 + 52) / 122][Stage 149:=====================================>               (86 + 36) / 122][Stage 149:===============================================>    (112 + 10) / 122][Stage 149:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.073700148 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405563662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:==============================>                      (69 + 51) / 120][Stage 150:======================================>              (88 + 32) / 120][Stage 150:=================================================>   (112 + 8) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:================================>                    (74 + 47) / 121][Stage 151:=======================================>             (91 + 30) / 121][Stage 151:===============================================>    (110 + 11) / 121][Stage 151:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.300216447 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385482838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==============================>                      (66 + 49) / 115][Stage 152:===================================>                 (76 + 39) / 115][Stage 152:==========================================>          (92 + 23) / 115][Stage 152:=============================================>      (101 + 14) / 115][Stage 152:===================================================> (111 + 4) / 115]                                                                                [Stage 153:===============================>                     (70 + 46) / 116][Stage 153:=====================================>               (83 + 33) / 116][Stage 153:=============================================>       (99 + 17) / 116][Stage 153:===================================================> (113 + 3) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.59089636 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362900458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=======================================>             (85 + 28) / 113][Stage 154:===========================================>         (92 + 21) / 113][Stage 154:==============================================>      (99 + 14) / 113][Stage 154:===================================================> (110 + 3) / 113]                                                                                [Stage 155:====================================>                (79 + 35) / 114][Stage 155:===========================================>         (93 + 21) / 114][Stage 155:===============================================>    (104 + 10) / 114][Stage 155:=================================================>   (107 + 7) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.400625213 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395912422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:============================>                        (65 + 55) / 120][Stage 156:====================================>                (83 + 37) / 120][Stage 156:=================================================>   (113 + 7) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:===============================>                     (73 + 48) / 121][Stage 157:========================================>            (93 + 28) / 121][Stage 157:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.020226432 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398909718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:============================>                        (65 + 55) / 120][Stage 158:===================================>                 (80 + 40) / 120][Stage 158:===========================================>        (101 + 19) / 120][Stage 158:==================================================>  (115 + 5) / 120]                                                                                [Stage 159:============================>                        (66 + 55) / 121][Stage 159:====================================>                (83 + 38) / 121][Stage 159:============================================>       (103 + 18) / 121][Stage 159:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.982360564 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 136 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396121283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:===============================>                     (71 + 49) / 120][Stage 160:========================================>            (92 + 28) / 120][Stage 160:=================================================>   (111 + 9) / 120][Stage 160:====================================================>(119 + 1) / 120]                                                                                [Stage 161:============================>                        (64 + 57) / 121][Stage 161:=================================>                   (76 + 45) / 121][Stage 161:============================================>       (104 + 17) / 121][Stage 161:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.222734401 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378555674 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (72 + 46) / 118][Stage 162:=================================>                   (74 + 44) / 118][Stage 162:====================================>                (82 + 36) / 118][Stage 162:==========================================>          (94 + 24) / 118][Stage 162:==============================================>     (105 + 13) / 118][Stage 162:====================================================>(117 + 1) / 118]                                                                                [Stage 163:================================>                    (73 + 46) / 119][Stage 163:====================================>                (83 + 36) / 119][Stage 163:==========================================>          (96 + 23) / 119][Stage 163:===============================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.332017762 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351378961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===================================>                 (76 + 37) / 113][Stage 164:========================================>            (87 + 26) / 113][Stage 164:=============================================>       (96 + 17) / 113][Stage 164:====================================================>(112 + 1) / 113]                                                                                [Stage 165:==================================>                  (75 + 39) / 114][Stage 165:=======================================>             (85 + 29) / 114][Stage 165:============================================>        (96 + 18) / 114][Stage 165:==================================================>  (108 + 6) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.324575543 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335695509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:======================================>              (84 + 31) / 115][Stage 166:===========================================>         (95 + 20) / 115][Stage 166:===============================================>    (105 + 10) / 115][Stage 166:===================================================> (112 + 3) / 115]                                                                                [Stage 167:=====================================>               (81 + 35) / 116][Stage 167:=======================================>             (87 + 29) / 116][Stage 167:===============================================>    (106 + 10) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.762836725 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414958915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (61 + 60) / 121][Stage 168:=============================>                       (68 + 53) / 121][Stage 168:=======================================>             (90 + 31) / 121][Stage 168:=============================================>      (107 + 14) / 121]                                                                                [Stage 169:==========================>                          (61 + 61) / 122][Stage 169:==============================>                      (71 + 51) / 122][Stage 169:=====================================>               (87 + 35) / 122][Stage 169:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 2.974166772 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393189093 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (59 + 54) / 113][Stage 170:==============================>                      (66 + 47) / 113][Stage 170:=========================================>           (89 + 24) / 113][Stage 170:=============================================>       (98 + 15) / 113][Stage 170:===================================================> (109 + 4) / 113]                                                                                [Stage 171:===========================>                         (59 + 55) / 114][Stage 171:==================================>                  (75 + 39) / 114][Stage 171:============================================>        (96 + 18) / 114][Stage 171:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.261466573 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355730638 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==================================>                  (73 + 40) / 113][Stage 172:=======================================>             (84 + 29) / 113][Stage 172:===========================================>         (93 + 20) / 113][Stage 172:=================================================>   (105 + 8) / 113][Stage 172:====================================================>(111 + 2) / 113]                                                                                [Stage 173:=======================================>             (85 + 29) / 114][Stage 173:=========================================>           (89 + 25) / 114][Stage 173:===============================================>    (104 + 10) / 114][Stage 173:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.985727547 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366839699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:================================>                    (72 + 46) / 118][Stage 174:================================>                    (73 + 45) / 118][Stage 174:====================================>                (82 + 36) / 118][Stage 174:=======================================>             (89 + 29) / 118][Stage 174:===============================================>    (107 + 11) / 118]                                                                                [Stage 175:================================>                    (74 + 45) / 119][Stage 175:==================================>                  (78 + 41) / 119][Stage 175:======================================>              (86 + 33) / 119][Stage 175:=============================================>      (105 + 14) / 119][Stage 175:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.332487128 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352432305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=================================>                   (72 + 41) / 113][Stage 176:=======================================>             (85 + 28) / 113][Stage 176:============================================>        (95 + 18) / 113][Stage 176:===============================================>    (103 + 10) / 113][Stage 176:===================================================> (110 + 3) / 113]                                                                                [Stage 177:======================================>              (83 + 31) / 114][Stage 177:==========================================>          (91 + 23) / 114][Stage 177:==============================================>      (99 + 15) / 114][Stage 177:==================================================>  (108 + 6) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.110110971 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4032302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 60) / 120][Stage 178:=============================>                       (66 + 54) / 120][Stage 178:==================================>                  (77 + 43) / 120][Stage 178:==========================================>          (97 + 23) / 120][Stage 178:===================================================> (117 + 3) / 120]                                                                                [Stage 179:==========================>                          (61 + 60) / 121][Stage 179:=============================>                       (68 + 53) / 121][Stage 179:===================================>                 (81 + 40) / 121][Stage 179:============================================>       (104 + 17) / 121][Stage 179:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.142991723 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45727471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (81 + 32) / 113][Stage 180:==========================================>          (90 + 23) / 113][Stage 180:=============================================>       (96 + 17) / 113][Stage 180:=================================================>   (106 + 7) / 113][Stage 180:====================================================>(111 + 2) / 113]                                                                                [Stage 181:=====================================>               (80 + 34) / 114][Stage 181:============================================>        (95 + 19) / 114][Stage 181:=============================================>       (98 + 16) / 114][Stage 181:=================================================>   (106 + 8) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.221551578 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441249118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 59) / 120][Stage 182:================================>                    (73 + 47) / 120][Stage 182:==========================================>          (97 + 23) / 120][Stage 182:===================================================> (117 + 3) / 120]                                                                                [Stage 183:============================>                        (66 + 55) / 121][Stage 183:=================================>                   (77 + 44) / 121][Stage 183:=============================================>      (105 + 16) / 121][Stage 183:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.263868755 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387569129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=================================>                   (74 + 44) / 118][Stage 184:===================================>                 (79 + 39) / 118][Stage 184:=======================================>             (88 + 30) / 118][Stage 184:==============================================>     (105 + 13) / 118][Stage 184:====================================================>(116 + 2) / 118]                                                                                [Stage 185:================================>                    (74 + 45) / 119][Stage 185:==================================>                  (77 + 42) / 119][Stage 185:======================================>              (87 + 32) / 119][Stage 185:============================================>       (102 + 17) / 119][Stage 185:==================================================>  (113 + 6) / 119][Stage 185:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.457905277 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396391955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:=============================>                       (67 + 53) / 120][Stage 186:====================================>                (83 + 37) / 120][Stage 186:=============================================>      (104 + 16) / 120][Stage 186:====================================================>(118 + 2) / 120]                                                                                [Stage 187:=============================>                       (68 + 53) / 121][Stage 187:======================================>              (87 + 34) / 121][Stage 187:===============================================>    (111 + 10) / 121][Stage 187:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.160626243 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336866656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:====================================>                (80 + 35) / 115][Stage 188:======================================>              (84 + 31) / 115][Stage 188:===========================================>         (95 + 20) / 115][Stage 188:==================================================>  (110 + 5) / 115][Stage 188:====================================================>(113 + 2) / 115]                                                                                [Stage 189:=====================================>               (83 + 33) / 116][Stage 189:=========================================>           (90 + 26) / 116][Stage 189:============================================>       (100 + 16) / 116][Stage 189:==================================================>  (110 + 6) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.308366324 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398387934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:=================================>                   (76 + 44) / 120][Stage 190:=======================================>             (90 + 30) / 120][Stage 190:==================================================>  (114 + 6) / 120][Stage 190:====================================================>(119 + 1) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:=============================>                       (68 + 53) / 121][Stage 191:=======================================>             (90 + 31) / 121][Stage 191:===============================================>    (110 + 11) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.13529338 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390962507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (59 + 54) / 113][Stage 192:==============================>                      (66 + 47) / 113][Stage 192:========================================>            (86 + 27) / 113][Stage 192:=================================================>   (105 + 8) / 113]                                                                                [Stage 193:=============================>                       (63 + 51) / 114][Stage 193:===================================>                 (77 + 37) / 114][Stage 193:==============================================>      (99 + 15) / 114][Stage 193:=================================================>   (106 + 8) / 114][Stage 193:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.210894462 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38381834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=============================>                       (65 + 50) / 115][Stage 194:====================================>                (79 + 36) / 115][Stage 194:=============================================>       (99 + 16) / 115][Stage 194:===================================================> (112 + 3) / 115]                                                                                [Stage 195:====================================>                (79 + 37) / 116][Stage 195:=======================================>             (87 + 29) / 116][Stage 195:============================================>        (97 + 19) / 116][Stage 195:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.025518918 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362711936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=================================>                   (71 + 42) / 113][Stage 196:=======================================>             (85 + 28) / 113][Stage 196:============================================>        (94 + 19) / 113][Stage 196:================================================>    (104 + 9) / 113][Stage 196:====================================================>(111 + 2) / 113]                                                                                [Stage 197:=================================>                   (71 + 43) / 114][Stage 197:=======================================>             (85 + 29) / 114][Stage 197:==========================================>          (91 + 23) / 114][Stage 197:==============================================>     (102 + 12) / 114][Stage 197:==================================================>  (109 + 5) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.081579612 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399847475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (68 + 47) / 115][Stage 198:=====================================>               (81 + 34) / 115][Stage 198:============================================>        (96 + 19) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:====================================>                (80 + 36) / 116][Stage 199:==========================================>          (93 + 23) / 116][Stage 199:==============================================>     (103 + 13) / 116]                                                                                Time elapsed: 2.597989822 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375920936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:====================================>                (82 + 36) / 118][Stage 200:===========================================>         (96 + 22) / 118][Stage 200:===============================================>    (107 + 11) / 118]                                                                                [Stage 201:================================>                    (73 + 46) / 119][Stage 201:==================================>                  (77 + 42) / 119][Stage 201:========================================>            (92 + 27) / 119][Stage 201:=============================================>      (103 + 16) / 119][Stage 201:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.203377403 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/24 16:05:36 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:49364) dropped. Could not find BlockManagerMaster.

real	10m6.183s
user	11m39.844s
sys	0m39.100s
