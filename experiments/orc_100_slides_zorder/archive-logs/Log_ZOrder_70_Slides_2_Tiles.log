Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 00:12:03 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:12:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:12:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:12:18 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 00:12:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:12:31 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525001220-0612).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.384571728 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:========>                                              (17 + 98) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:===============================================>       (99 + 16) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:=========================>                             (53 + 63) / 116][Stage 1:===========================>                           (58 + 58) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:=========================================>             (88 + 28) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.37086051 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 54 AND partitionZIndex<=155", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.707664861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (46 + 69) / 115][Stage 2:=======================>                               (50 + 65) / 115][Stage 2:=============================>                         (61 + 54) / 115][Stage 2:==============================>                        (64 + 51) / 115][Stage 2:=================================>                     (70 + 45) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:================================================>     (103 + 12) / 115][Stage 2:====================================================>  (110 + 5) / 115][Stage 2:======================================================>(113 + 2) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:===============================>                       (66 + 50) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:====================================>                  (77 + 39) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:=============================================>         (96 + 20) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:=================================================>    (106 + 10) / 116][Stage 3:=====================================================> (112 + 4) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.565040665 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 39 AND partitionZIndex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.590615334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:====================================>                  (76 + 39) / 115][Stage 4:======================================>                (81 + 34) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:=============================================>         (95 + 20) / 115][Stage 4:==============================================>       (100 + 15) / 115][Stage 4:=====================================================> (111 + 4) / 115]                                                                                [Stage 5:======================================>                (82 + 34) / 116][Stage 5:==========================================>            (89 + 27) / 116][Stage 5:=============================================>         (97 + 19) / 116][Stage 5:===============================================>      (101 + 15) / 116][Stage 5:=================================================>    (106 + 10) / 116][Stage 5:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.163619224 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6  AND partitionZIndex<=7", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.569999509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===================================>                   (74 + 41) / 115][Stage 6:====================================>                  (77 + 38) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:=============================================>         (96 + 19) / 115][Stage 6:=================================================>    (105 + 10) / 115][Stage 6:===================================================>   (108 + 7) / 115]                                                                                [Stage 7:=====================================>                 (79 + 37) / 116][Stage 7:======================================>                (82 + 34) / 116][Stage 7:============================================>          (94 + 22) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:=================================================>    (106 + 10) / 116][Stage 7:====================================================>  (111 + 5) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.64549881 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 1 AND partitionZIndex<=42", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.550095584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:=======================================>               (82 + 33) / 115][Stage 8:==========================================>            (89 + 26) / 115][Stage 8:================================================>     (103 + 12) / 115][Stage 8:==================================================>    (106 + 9) / 115][Stage 8:=====================================================> (112 + 3) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:======================================>                (82 + 34) / 116][Stage 9:========================================>              (85 + 31) / 116][Stage 9:============================================>          (93 + 23) / 116][Stage 9:===============================================>      (101 + 15) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:======================================================>(114 + 2) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.471658526 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 8 AND partitionZIndex<=19", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.471005506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=====================================>                (79 + 36) / 115][Stage 10:======================================>               (82 + 33) / 115][Stage 10:===========================================>          (92 + 23) / 115][Stage 10:==============================================>       (98 + 17) / 115][Stage 10:===============================================>     (103 + 12) / 115][Stage 10:===================================================>  (109 + 6) / 115]                                                                                [Stage 11:=====================================>                (81 + 35) / 116][Stage 11:======================================>               (83 + 33) / 116][Stage 11:==========================================>           (92 + 24) / 116][Stage 11:==============================================>      (102 + 14) / 116][Stage 11:=================================================>    (107 + 9) / 116][Stage 11:====================================================> (112 + 4) / 116][Stage 11:====================================================> (113 + 3) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.394116566 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 42 AND partitionZIndex<=143", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=142 AND partitionZIndex<=143,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.592130793 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:=============================>                        (66 + 54) / 120][Stage 12:====================================>                 (82 + 38) / 120][Stage 12:============================================>         (98 + 22) / 120][Stage 12:===============================================>     (108 + 12) / 120][Stage 12:===================================================>  (114 + 6) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:===============================>                      (70 + 51) / 121][Stage 13:===================================>                  (80 + 41) / 121][Stage 13:===========================================>          (97 + 24) / 121][Stage 13:==================================================>   (113 + 8) / 121][Stage 13:===================================================>  (116 + 5) / 121][Stage 13:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.018724999 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 1 AND partitionZIndex<=62", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=61 AND partitionZIndex<=62,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.719475641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:=============================>                        (65 + 56) / 121][Stage 14:==================================>                   (78 + 43) / 121][Stage 14:============================================>        (102 + 19) / 121][Stage 14:===================================================>  (116 + 5) / 121]                                                                                [Stage 15:===========================>                          (61 + 61) / 122][Stage 15:============================>                         (65 + 57) / 122][Stage 15:====================================>                 (83 + 39) / 122][Stage 15:=============================================>       (104 + 18) / 122][Stage 15:==================================================>   (113 + 9) / 122][Stage 15:===================================================>  (117 + 5) / 122][Stage 15:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.013206236 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2  AND partitionZIndex<=3", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.512958314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===================================>                  (75 + 38) / 113][Stage 16:==========================================>           (88 + 25) / 113][Stage 16:===========================================>          (92 + 21) / 113][Stage 16:==============================================>      (100 + 13) / 113][Stage 16:=================================================>    (104 + 9) / 113][Stage 16:====================================================> (109 + 4) / 113]                                                                                [Stage 17:=====================================>                (79 + 35) / 114][Stage 17:==========================================>           (90 + 24) / 114][Stage 17:==============================================>      (101 + 13) / 114][Stage 17:===============================================>     (103 + 11) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:====================================================> (110 + 4) / 114][Stage 17:=====================================================>(112 + 2) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.510895685 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 7 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.4512247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (80 + 35) / 115][Stage 18:=======================================>              (85 + 30) / 115][Stage 18:=============================================>        (97 + 18) / 115][Stage 18:===============================================>     (104 + 11) / 115][Stage 18:===================================================>  (109 + 6) / 115]                                                                                [Stage 19:======================================>               (82 + 34) / 116][Stage 19:=========================================>            (89 + 27) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:=============================================>        (97 + 19) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:=====================================================>(114 + 2) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.644621287 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 6 AND partitionZIndex<=77", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.49623677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:=====================================>                (80 + 35) / 115][Stage 20:=============================================>        (96 + 19) / 115][Stage 20:===================================================>  (109 + 6) / 115][Stage 20:====================================================> (111 + 4) / 115]                                                                                [Stage 21:===================================>                  (77 + 39) / 116][Stage 21:========================================>             (88 + 28) / 116][Stage 21:==============================================>       (99 + 17) / 116][Stage 21:=============================================>       (100 + 16) / 116][Stage 21:===============================================>     (104 + 12) / 116]                                                                                Time elapsed: 3.363664124 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 4 AND partitionZIndex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.506775232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==============================>                       (64 + 51) / 115][Stage 22:=================================>                    (71 + 44) / 115][Stage 22:==========================================>           (90 + 25) / 115][Stage 22:===============================================>     (104 + 11) / 115][Stage 22:==================================================>   (108 + 7) / 115][Stage 22:===================================================>  (110 + 5) / 115][Stage 22:====================================================> (111 + 4) / 115][Stage 22:====================================================> (112 + 3) / 115]                                                                                [Stage 23:==============================>                       (65 + 51) / 116][Stage 23:==================================>                   (75 + 41) / 116][Stage 23:========================================>             (88 + 28) / 116][Stage 23:============================================>         (96 + 20) / 116][Stage 23:===============================================>     (105 + 11) / 116][Stage 23:==================================================>   (108 + 8) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.35135636 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 64 AND partitionZIndex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427808574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:======================================>               (82 + 33) / 115][Stage 24:===========================================>          (92 + 23) / 115][Stage 24:==============================================>       (99 + 16) / 115][Stage 24:===============================================>     (104 + 11) / 115][Stage 24:==================================================>   (108 + 7) / 115][Stage 24:=====================================================>(113 + 2) / 115]                                                                                [Stage 25:========================================>             (87 + 29) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:=================================================>    (107 + 9) / 116][Stage 25:===================================================>  (110 + 6) / 116][Stage 25:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.855679108 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 95 AND partitionZIndex<=196", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=195 AND partitionZIndex<=196,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.474901144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:==================================>                   (75 + 43) / 118][Stage 26:===================================>                  (78 + 40) / 118][Stage 26:======================================>               (84 + 34) / 118][Stage 26:==============================================>      (103 + 15) / 118][Stage 26:===================================================>  (112 + 6) / 118][Stage 26:====================================================> (115 + 3) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:==================================>                   (77 + 42) / 119][Stage 27:=======================================>              (88 + 31) / 119][Stage 27:===========================================>          (96 + 23) / 119][Stage 27:==================================================>   (111 + 8) / 119][Stage 27:====================================================> (116 + 3) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.169428455 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 7 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.568136785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (57 + 56) / 113][Stage 28:============================>                         (60 + 53) / 113][Stage 28:===================================>                  (74 + 39) / 113][Stage 28:===========================================>          (91 + 22) / 113][Stage 28:==============================================>      (100 + 13) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:===========================>                          (59 + 55) / 114][Stage 29:===============================>                      (66 + 48) / 114][Stage 29:=======================================>              (84 + 30) / 114][Stage 29:==============================================>       (99 + 15) / 114][Stage 29:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.369044137 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 4 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.449612299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (71 + 47) / 118][Stage 30:==================================>                   (75 + 43) / 118][Stage 30:====================================>                 (80 + 38) / 118][Stage 30:=========================================>            (90 + 28) / 118][Stage 30:===============================================>     (105 + 13) / 118][Stage 30:==================================================>   (110 + 8) / 118][Stage 30:===================================================>  (113 + 5) / 118]                                                                                [Stage 31:=================================>                    (73 + 46) / 119][Stage 31:===================================>                  (78 + 41) / 119][Stage 31:=====================================>                (83 + 36) / 119][Stage 31:===========================================>          (95 + 24) / 119][Stage 31:================================================>    (109 + 10) / 119][Stage 31:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.89712027 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 37 AND partitionZIndex<=238", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=237 AND partitionZIndex<=238,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.445788038 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:==================================>                   (75 + 43) / 118][Stage 32:=========================================>            (90 + 28) / 118][Stage 32:================================================>    (107 + 11) / 118][Stage 32:=====================================================>(116 + 2) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:======================================>               (84 + 35) / 119][Stage 33:==============================================>      (105 + 14) / 119][Stage 33:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.17124533 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 05 AND partitionZIndex<=206", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=206,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.5534435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:==================================>                   (72 + 41) / 113][Stage 34:===========================================>          (90 + 23) / 113][Stage 34:==================================================>   (105 + 8) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:============================>                         (60 + 54) / 114][Stage 35:================================>                     (69 + 45) / 114][Stage 35:======================================>               (81 + 33) / 114][Stage 35:===============================================>     (102 + 12) / 114][Stage 35:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.463024212 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 05 AND partitionZIndex<=106", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.434732254 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=====================================>                (80 + 35) / 115][Stage 36:=======================================>              (84 + 31) / 115][Stage 36:=============================================>        (96 + 19) / 115][Stage 36:==================================================>   (108 + 7) / 115][Stage 36:====================================================> (111 + 4) / 115]                                                                                [Stage 37:========================================>             (86 + 30) / 116][Stage 37:==========================================>           (92 + 24) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.073197405 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 29 AND partitionZIndex<=130", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399272046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (80 + 35) / 115][Stage 38:=========================================>            (88 + 27) / 115][Stage 38:===============================================>     (102 + 13) / 115][Stage 38:=====================================================>(113 + 2) / 115]                                                                                [Stage 39:========================================>             (86 + 30) / 116][Stage 39:=============================================>        (97 + 19) / 116][Stage 39:===================================================>  (110 + 6) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.739069512 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 09 AND partitionZIndex<=110", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478652623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:==================================>                   (76 + 42) / 118][Stage 40:========================================>             (89 + 29) / 118][Stage 40:==================================================>   (110 + 8) / 118][Stage 40:====================================================> (115 + 3) / 118]                                                                                [Stage 41:==================================>                   (75 + 44) / 119][Stage 41:===================================>                  (79 + 40) / 119][Stage 41:=========================================>            (92 + 27) / 119][Stage 41:==============================================>      (105 + 14) / 119]                                                                                Time elapsed: 3.371014407 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 44 AND partitionZIndex<=145", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=144 AND partitionZIndex<=145,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.478242203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===============================>                      (68 + 47) / 115][Stage 42:======================================>               (82 + 33) / 115][Stage 42:==============================================>       (98 + 17) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:================================>                     (69 + 47) / 116][Stage 43:=====================================>                (80 + 36) / 116][Stage 43:============================================>         (96 + 20) / 116][Stage 43:===============================================>     (105 + 11) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.25403816 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 5 AND partitionZIndex<=66", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=65 AND partitionZIndex<=66,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.525863053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:==============================>                       (69 + 52) / 121][Stage 44:===========================================>          (98 + 23) / 121][Stage 44:===================================================>  (116 + 5) / 121]                                                                                [Stage 45:===========================>                          (61 + 61) / 122][Stage 45:=============================>                        (67 + 55) / 122][Stage 45:======================================>               (86 + 36) / 122][Stage 45:===========================================>         (101 + 21) / 122][Stage 45:================================================>    (112 + 10) / 122][Stage 45:====================================================> (118 + 4) / 122][Stage 45:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.558382504 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 41 AND partitionZIndex<=242", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403074607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:======================================>               (81 + 34) / 115][Stage 46:==========================================>           (90 + 25) / 115][Stage 46:===============================================>     (102 + 13) / 115]                                                                                [Stage 47:======================================>               (83 + 33) / 116][Stage 47:==========================================>           (92 + 24) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.661027049 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 3 AND partitionZIndex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395590584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:======================================>               (82 + 33) / 115][Stage 48:========================================>             (87 + 28) / 115][Stage 48:==============================================>      (100 + 15) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:======================================>               (83 + 33) / 116][Stage 49:===========================================>          (94 + 22) / 116][Stage 49:==================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.701921937 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 24 AND partitionZIndex<=125", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=125,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.491307205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==========================>                           (60 + 61) / 121][Stage 50:============================>                         (63 + 58) / 121][Stage 50:===================================>                  (79 + 42) / 121][Stage 50:============================================>        (101 + 20) / 121][Stage 50:==================================================>   (113 + 8) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:================================>                     (74 + 48) / 122][Stage 51:=======================================>              (89 + 33) / 122][Stage 51:==================================================>   (115 + 7) / 122][Stage 51:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.302629324 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3  AND partitionZIndex<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.497452726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=================================>                    (70 + 43) / 113][Stage 52:========================================>             (84 + 29) / 113][Stage 52:===========================================>          (91 + 22) / 113][Stage 52:==============================================>      (100 + 13) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:=====================================>                (79 + 35) / 114][Stage 53:=======================================>              (84 + 30) / 114][Stage 53:==============================================>       (99 + 15) / 114][Stage 53:==================================================>   (106 + 8) / 114][Stage 53:===================================================>  (109 + 5) / 114][Stage 53:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.846321778 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 2 AND partitionZIndex<=23", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=23,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.486006503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:=============================>                        (62 + 51) / 113][Stage 54:=====================================>                (78 + 35) / 113][Stage 54:============================================>         (94 + 19) / 113][Stage 54:====================================================> (109 + 4) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:===========================>                          (58 + 56) / 114][Stage 55:============================>                         (61 + 53) / 114][Stage 55:===================================>                  (74 + 40) / 114][Stage 55:============================================>         (94 + 20) / 114][Stage 55:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.356667732 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 84 AND partitionZIndex<=185", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=185,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382524001 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:>                                                       (0 + 0) / 115][Stage 56:======================================>               (83 + 32) / 115][Stage 56:===========================================>          (93 + 22) / 115][Stage 56:================================================>    (105 + 10) / 115][Stage 56:====================================================> (112 + 3) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:======================================>               (82 + 34) / 116][Stage 57:=========================================>            (89 + 27) / 116][Stage 57:===============================================>     (104 + 12) / 116][Stage 57:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.876565568 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 12 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.480073021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=====================================>                (79 + 36) / 115][Stage 58:=======================================>              (84 + 31) / 115][Stage 58:============================================>         (95 + 20) / 115][Stage 58:===================================================>  (109 + 6) / 115]                                                                                [Stage 59:======================================>               (83 + 33) / 116][Stage 59:==========================================>           (92 + 24) / 116][Stage 59:==============================================>      (102 + 14) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.74505516 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 8 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.461586337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=============================>                        (62 + 51) / 113][Stage 60:================================>                     (69 + 44) / 113][Stage 60:=======================================>              (82 + 31) / 113][Stage 60:==================================================>   (105 + 8) / 113][Stage 60:=====================================================>(111 + 2) / 113]                                                                                [Stage 61:===========================>                          (59 + 55) / 114][Stage 61:=============================>                        (63 + 51) / 114][Stage 61:====================================>                 (78 + 36) / 114][Stage 61:===========================================>          (92 + 22) / 114][Stage 61:===================================================>  (108 + 6) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.445151786 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 00 AND partitionZIndex<=201", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=200 AND partitionZIndex<=201,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.431500571 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (58 + 55) / 113][Stage 62:==============================>                       (64 + 49) / 113][Stage 62:=========================================>            (86 + 27) / 113][Stage 62:===============================================>      (99 + 14) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:============================>                         (60 + 54) / 114][Stage 63:==============================>                       (65 + 49) / 114][Stage 63:=====================================>                (79 + 35) / 114][Stage 63:===============================================>     (103 + 11) / 114][Stage 63:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.144085781 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 4 AND partitionZIndex<=75", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=74 AND partitionZIndex<=75,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459300036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:==============================>                       (69 + 52) / 121][Stage 64:=======================================>              (89 + 32) / 121][Stage 64:=============================================>       (103 + 18) / 121][Stage 64:====================================================> (117 + 4) / 121]                                                                                [Stage 65:===========================>                          (63 + 59) / 122][Stage 65:===================================>                  (81 + 41) / 122][Stage 65:===============================================>     (109 + 13) / 122]                                                                                Time elapsed: 3.089585588 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 0 AND partitionZIndex<=51", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.552942195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===============================>                      (68 + 47) / 115][Stage 66:====================================>                 (78 + 37) / 115][Stage 66:=============================================>        (96 + 19) / 115][Stage 66:==================================================>   (107 + 8) / 115][Stage 66:=====================================================>(114 + 1) / 115]                                                                                [Stage 67:=================================>                    (71 + 45) / 116][Stage 67:========================================>             (87 + 29) / 116][Stage 67:===============================================>     (104 + 12) / 116][Stage 67:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.775790669 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 04 AND partitionZIndex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404247025 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (80 + 33) / 113][Stage 68:===========================================>          (92 + 21) / 113][Stage 68:=============================================>        (96 + 17) / 113][Stage 68:=================================================>    (104 + 9) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:=====================================>                (79 + 35) / 114][Stage 69:===========================================>          (92 + 22) / 114][Stage 69:==============================================>      (100 + 14) / 114][Stage 69:================================================>    (104 + 10) / 114][Stage 69:===================================================>  (108 + 6) / 114][Stage 69:====================================================> (110 + 4) / 114][Stage 69:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.892932572 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 09 AND partitionZIndex<=210", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.459528915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:===========================>                          (62 + 58) / 120][Stage 70:====================================>                 (80 + 40) / 120][Stage 70:=============================================>       (104 + 16) / 120][Stage 70:===================================================>  (115 + 5) / 120]                                                                                [Stage 71:=============================>                        (66 + 55) / 121][Stage 71:=================================>                    (76 + 45) / 121][Stage 71:===========================================>          (98 + 23) / 121][Stage 71:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.272016581 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 6 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.525520709 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:>                                                       (0 + 0) / 120][Stage 72:===========================>                          (60 + 60) / 120][Stage 72:============================>                         (63 + 57) / 120][Stage 72:====================================>                 (81 + 39) / 120][Stage 72:===========================================>          (97 + 23) / 120][Stage 72:==================================================>   (113 + 7) / 120][Stage 72:=====================================================>(119 + 1) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:===============================>                      (70 + 51) / 121][Stage 73:=======================================>              (88 + 33) / 121][Stage 73:=============================================>       (104 + 17) / 121][Stage 73:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.307981527 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 0 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400779723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:=================================>                    (74 + 44) / 118][Stage 74:=======================================>              (87 + 31) / 118][Stage 74:=============================================>       (102 + 16) / 118][Stage 74:====================================================> (114 + 4) / 118]                                                                                [Stage 75:=================================>                    (74 + 45) / 119][Stage 75:=====================================>                (83 + 36) / 119][Stage 75:=============================================>       (103 + 16) / 119][Stage 75:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.078008457 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 0 AND partitionZIndex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.458228855 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (61 + 59) / 120][Stage 76:=============================>                        (66 + 54) / 120][Stage 76:=======================================>              (88 + 32) / 120][Stage 76:===============================================>     (107 + 13) / 120][Stage 76:=====================================================>(119 + 1) / 120]                                                                                [Stage 77:===========================>                          (61 + 60) / 121][Stage 77:===============================>                      (70 + 51) / 121][Stage 77:=====================================>                (84 + 37) / 121][Stage 77:==============================================>      (107 + 14) / 121][Stage 77:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.33808939 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 10 AND partitionZIndex<=111", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=110 AND partitionZIndex<=111,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38776448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:========================================>             (86 + 29) / 115][Stage 78:==============================================>       (98 + 17) / 115][Stage 78:===================================================>  (110 + 5) / 115]                                                                                [Stage 79:======================================>               (82 + 34) / 116][Stage 79:=============================================>        (97 + 19) / 116][Stage 79:==================================================>   (109 + 7) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.820499201 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 37 AND partitionZIndex<=138", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=137 AND partitionZIndex<=138,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.412925665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:================================>                     (67 + 46) / 113][Stage 80:========================================>             (85 + 28) / 113][Stage 80:===============================================>     (101 + 12) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:==============================>                       (65 + 49) / 114][Stage 81:=======================================>              (84 + 30) / 114][Stage 81:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.15718399 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 97 AND partitionZIndex<=198", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=197 AND partitionZIndex<=198,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.409024004 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (58 + 55) / 113][Stage 82:=============================>                        (61 + 52) / 113][Stage 82:==================================>                   (73 + 40) / 113][Stage 82:=============================================>        (96 + 17) / 113][Stage 82:====================================================> (110 + 3) / 113]                                                                                [Stage 83:=============================>                        (63 + 51) / 114][Stage 83:====================================>                 (77 + 37) / 114][Stage 83:==============================================>       (98 + 16) / 114][Stage 83:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.058272107 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 7 AND partitionZIndex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427491128 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:===========================>                          (62 + 58) / 120][Stage 84:=====================================>                (83 + 37) / 120][Stage 84:============================================>         (99 + 21) / 120][Stage 84:===================================================>  (114 + 6) / 120]                                                                                [Stage 85:=============================>                        (65 + 56) / 121][Stage 85:===================================>                  (80 + 41) / 121][Stage 85:=============================================>       (103 + 18) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.998529034 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 63 AND partitionZIndex<=164", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=164,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349472592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:========================================>             (87 + 28) / 115][Stage 86:==============================================>       (99 + 16) / 115][Stage 86:===================================================>  (109 + 6) / 115]                                                                                [Stage 87:======================================>               (82 + 34) / 116][Stage 87:===========================================>          (93 + 23) / 116][Stage 87:===============================================>     (103 + 13) / 116][Stage 87:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.777688207 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 5 AND partitionZIndex<=26", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379464698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=====================================>                (78 + 35) / 113][Stage 88:===========================================>          (91 + 22) / 113][Stage 88:===============================================>      (99 + 14) / 113][Stage 88:====================================================> (109 + 4) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:====================================>                 (77 + 37) / 114][Stage 89:==========================================>           (89 + 25) / 114][Stage 89:==============================================>      (100 + 14) / 114][Stage 89:====================================================> (110 + 4) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.606766375 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 73 AND partitionZIndex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399670901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===============================>                      (67 + 48) / 115][Stage 90:====================================>                 (78 + 37) / 115][Stage 90:==========================================>           (90 + 25) / 115][Stage 90:====================================================> (111 + 4) / 115]                                                                                [Stage 91:=====================================>                (80 + 36) / 116][Stage 91:============================================>         (96 + 20) / 116][Stage 91:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.70185867 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 6 AND partitionZIndex<=67", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=66 AND partitionZIndex<=67,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407229763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:==================================>                   (75 + 43) / 118][Stage 92:=======================================>              (87 + 31) / 118][Stage 92:=============================================>       (101 + 17) / 118][Stage 92:===================================================>  (113 + 5) / 118]                                                                                [Stage 93:=================================>                    (74 + 45) / 119][Stage 93:======================================>               (84 + 35) / 119][Stage 93:============================================>         (99 + 20) / 119][Stage 93:================================================>    (108 + 11) / 119][Stage 93:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.377612305 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 53 AND partitionZIndex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418308345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:================================>                     (73 + 47) / 120][Stage 94:============================================>        (101 + 19) / 120][Stage 94:===================================================>  (115 + 5) / 120]                                                                                [Stage 95:=============================>                        (65 + 56) / 121][Stage 95:=================================>                    (76 + 45) / 121][Stage 95:===========================================>         (100 + 21) / 121][Stage 95:====================================================> (117 + 4) / 121][Stage 95:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.266626961 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 2 AND partitionZIndex<=93", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=92 AND partitionZIndex<=93,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.354571252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:============================================>         (95 + 20) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:=======================================>              (84 + 32) / 116][Stage 97:=============================================>        (98 + 18) / 116][Stage 97:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.737528853 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 0 AND partitionZIndex<=61", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=61,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.430167947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:===========================>                          (61 + 60) / 121][Stage 98:===============================>                      (71 + 50) / 121][Stage 98:==========================================>           (95 + 26) / 121][Stage 98:==================================================>   (114 + 7) / 121]                                                                                [Stage 99:============================>                         (64 + 58) / 122][Stage 99:=================================>                    (75 + 47) / 122][Stage 99:==========================================>           (96 + 26) / 122][Stage 99:===================================================>  (117 + 5) / 122][Stage 99:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.339427773 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 61 AND partitionZIndex<=162", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=161 AND partitionZIndex<=162,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365020414 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=======================================>             (84 + 29) / 113][Stage 100:===========================================>         (93 + 20) / 113][Stage 100:==============================================>     (102 + 11) / 113][Stage 100:===================================================> (110 + 3) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:====================================>                (78 + 36) / 114][Stage 101:========================================>            (87 + 27) / 114][Stage 101:=============================================>       (98 + 16) / 114][Stage 101:=================================================>   (107 + 7) / 114][Stage 101:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.355009214 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 40 AND partitionZIndex<=141", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=140 AND partitionZIndex<=141,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372604055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (73 + 45) / 118][Stage 102:====================================>                (81 + 37) / 118][Stage 102:============================================>       (100 + 18) / 118][Stage 102:==================================================>  (113 + 5) / 118][Stage 102:====================================================>(117 + 1) / 118]                                                                                [Stage 103:================================>                    (73 + 46) / 119][Stage 103:===================================>                 (80 + 39) / 119][Stage 103:==========================================>          (95 + 24) / 119][Stage 103:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.098683362 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 47 AND partitionZIndex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.34875331 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:====================================>                (80 + 35) / 115][Stage 104:=========================================>           (89 + 26) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:===================================================> (111 + 4) / 115]                                                                                [Stage 105:=======================================>             (86 + 30) / 116][Stage 105:=============================================>      (101 + 15) / 116][Stage 105:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.520490584 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 0 AND partitionZIndex<=91", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.361129532 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:====================================>                (80 + 35) / 115][Stage 106:======================================>              (84 + 31) / 115][Stage 106:=========================================>           (90 + 25) / 115][Stage 106:==============================================>     (102 + 13) / 115][Stage 106:==================================================>  (110 + 5) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:=====================================>               (83 + 33) / 116][Stage 107:========================================>            (89 + 27) / 116][Stage 107:=============================================>      (102 + 14) / 116][Stage 107:=================================================>   (108 + 8) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.25202431 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 87 AND partitionZIndex<=188", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=188,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.423799665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:=============================>                       (66 + 54) / 120][Stage 108:====================================>                (83 + 37) / 120][Stage 108:============================================>       (102 + 18) / 120][Stage 108:===================================================> (116 + 4) / 120]                                                                                [Stage 109:============================>                        (65 + 56) / 121][Stage 109:=================================>                   (76 + 45) / 121][Stage 109:=============================================>      (105 + 16) / 121][Stage 109:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.307495899 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 0 AND partitionZIndex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.403468621 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (59 + 54) / 113][Stage 110:==============================>                      (64 + 49) / 113][Stage 110:=======================================>             (84 + 29) / 113][Stage 110:==============================================>     (102 + 11) / 113][Stage 110:===================================================> (110 + 3) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:===========================>                         (60 + 54) / 114][Stage 111:==============================>                      (65 + 49) / 114][Stage 111:========================================>            (88 + 26) / 114][Stage 111:==============================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.138461124 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 5 AND partitionZIndex<=86", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398733279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (58 + 55) / 113][Stage 112:==============================>                      (66 + 47) / 113][Stage 112:=====================================>               (80 + 33) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:===========================>                         (59 + 55) / 114][Stage 113:==============================>                      (66 + 48) / 114][Stage 113:======================================>              (82 + 32) / 114][Stage 113:==============================================>     (101 + 13) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.989619753 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 50 AND partitionZIndex<=151", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389854397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==============================>                      (67 + 48) / 115][Stage 114:====================================>                (80 + 35) / 115][Stage 114:============================================>        (96 + 19) / 115][Stage 114:================================================>    (106 + 9) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:==================================>                  (75 + 41) / 116][Stage 115:=========================================>           (90 + 26) / 116][Stage 115:=================================================>   (109 + 7) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.911347876 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 0 AND partitionZIndex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.484913896 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (71 + 44) / 115][Stage 116:=======================================>             (86 + 29) / 115][Stage 116:=============================================>       (98 + 17) / 115][Stage 116:==================================================>  (110 + 5) / 115]                                                                                [Stage 117:===================================>                 (78 + 38) / 116][Stage 117:=========================================>           (90 + 26) / 116][Stage 117:==============================================>     (104 + 12) / 116][Stage 117:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.129685718 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 06 AND partitionZIndex<=207", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=206 AND partitionZIndex<=207,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382714655 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (59 + 54) / 113][Stage 118:=============================>                       (63 + 50) / 113][Stage 118:====================================>                (77 + 36) / 113][Stage 118:===========================================>         (92 + 21) / 113][Stage 118:===================================================> (110 + 3) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:===============================>                     (67 + 47) / 114][Stage 119:====================================>                (79 + 35) / 114][Stage 119:==============================================>      (99 + 15) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.022478655 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 2 AND partitionZIndex<=43", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393244478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=============================>                       (62 + 51) / 113][Stage 120:=================================>                   (71 + 42) / 113][Stage 120:======================================>              (83 + 30) / 113][Stage 120:================================================>    (104 + 9) / 113]                                                                                [Stage 121:============================>                        (62 + 52) / 114][Stage 121:=================================>                   (72 + 42) / 114][Stage 121:==========================================>          (92 + 22) / 114][Stage 121:===============================================>    (104 + 10) / 114]                                                                                Time elapsed: 2.998894809 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 31 AND partitionZIndex<=132", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=132,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399448298 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 60) / 120][Stage 122:==============================>                      (69 + 51) / 120][Stage 122:=====================================>               (86 + 34) / 120][Stage 122:===============================================>    (109 + 11) / 120][Stage 122:====================================================>(119 + 1) / 120]                                                                                [Stage 123:============================>                        (66 + 55) / 121][Stage 123:==================================>                  (78 + 43) / 121][Stage 123:===========================================>        (101 + 20) / 121][Stage 123:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.168485081 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 58 AND partitionZIndex<=159", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391639237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 60) / 120][Stage 124:============================>                        (64 + 56) / 120][Stage 124:===================================>                 (81 + 39) / 120][Stage 124:===========================================>        (100 + 20) / 120][Stage 124:====================================================>(118 + 2) / 120]                                                                                [Stage 125:==========================>                          (61 + 60) / 121][Stage 125:==============================>                      (69 + 52) / 121][Stage 125:===================================>                 (81 + 40) / 121][Stage 125:===========================================>        (101 + 20) / 121][Stage 125:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.196110665 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 9 AND partitionZIndex<=100", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=100,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395214637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:==============================>                      (66 + 47) / 113][Stage 126:=====================================>               (79 + 34) / 113][Stage 126:=================================================>   (106 + 7) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:==============================>                      (65 + 49) / 114][Stage 127:====================================>                (78 + 36) / 114][Stage 127:=============================================>       (97 + 17) / 114][Stage 127:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.256496635 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 03 AND partitionZIndex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393367716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==================================>                  (74 + 41) / 115][Stage 128:========================================>            (87 + 28) / 115][Stage 128:=============================================>       (99 + 16) / 115][Stage 128:==================================================>  (110 + 5) / 115][Stage 128:====================================================>(113 + 2) / 115]                                                                                [Stage 129:===================================>                 (78 + 38) / 116][Stage 129:=========================================>           (91 + 25) / 116][Stage 129:===============================================>    (105 + 11) / 116][Stage 129:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.139316111 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 33 AND partitionZIndex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399816018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 59) / 120][Stage 130:===============================>                     (71 + 49) / 120][Stage 130:==========================================>          (96 + 24) / 120][Stage 130:==================================================>  (115 + 5) / 120]                                                                                [Stage 131:============================>                        (65 + 56) / 121][Stage 131:===================================>                 (80 + 41) / 121][Stage 131:============================================>       (104 + 17) / 121][Stage 131:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.50267442 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 6 AND partitionZIndex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.527602502 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:===================================>                 (78 + 40) / 118][Stage 132:========================================>            (90 + 28) / 118][Stage 132:==============================================>     (106 + 12) / 118][Stage 132:====================================================>(116 + 2) / 118]                                                                                [Stage 133:==================================>                  (77 + 42) / 119][Stage 133:======================================>              (87 + 32) / 119][Stage 133:=============================================>      (105 + 14) / 119][Stage 133:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.229176786 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 03 AND partitionZIndex<=104", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=104,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381302634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==============================>                      (66 + 49) / 115][Stage 134:===================================>                 (78 + 37) / 115][Stage 134:=========================================>           (91 + 24) / 115][Stage 134:=================================================>   (108 + 7) / 115][Stage 134:====================================================>(114 + 1) / 115]                                                                                [Stage 135:===================================>                 (78 + 38) / 116][Stage 135:===========================================>         (95 + 21) / 116][Stage 135:==============================================>     (104 + 12) / 116]                                                                                Time elapsed: 2.79737106 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 9 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407800519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 61) / 121][Stage 136:================================>                    (74 + 47) / 121][Stage 136:=======================================>             (90 + 31) / 121][Stage 136:===============================================>    (110 + 11) / 121][Stage 136:====================================================>(120 + 1) / 121]                                                                                [Stage 137:==========================>                          (61 + 61) / 122][Stage 137:===========================>                         (64 + 58) / 122][Stage 137:==================================>                  (80 + 42) / 122][Stage 137:===========================================>        (103 + 19) / 122][Stage 137:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.129313403 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 8 AND partitionZIndex<=99", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=99,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.337825805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:======================================>              (84 + 31) / 115][Stage 138:===========================================>         (95 + 20) / 115][Stage 138:==============================================>     (103 + 12) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:======================================>              (85 + 31) / 116][Stage 139:==========================================>          (94 + 22) / 116][Stage 139:==================================================>  (110 + 6) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.749219929 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 3 AND partitionZIndex<=44", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=43 AND partitionZIndex<=44,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.351054567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=====================================>               (80 + 33) / 113][Stage 140:===========================================>         (92 + 21) / 113][Stage 140:================================================>    (104 + 9) / 113][Stage 140:==================================================>  (108 + 5) / 113]                                                                                [Stage 141:=====================================>               (81 + 33) / 114][Stage 141:===========================================>         (93 + 21) / 114][Stage 141:==============================================>     (102 + 12) / 114][Stage 141:===================================================> (110 + 4) / 114][Stage 141:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.466050725 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 34 AND partitionZIndex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36291009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:================================>                    (73 + 45) / 118][Stage 142:=======================================>             (87 + 31) / 118][Stage 142:===============================================>    (107 + 11) / 118][Stage 142:====================================================>(116 + 2) / 118]                                                                                [Stage 143:=================================>                   (75 + 44) / 119][Stage 143:====================================>                (83 + 36) / 119][Stage 143:==============================================>     (106 + 13) / 119][Stage 143:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.110025556 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 7 AND partitionZIndex<=38", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.335219944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=======================================>             (85 + 30) / 115][Stage 144:=========================================>           (89 + 26) / 115][Stage 144:==============================================>     (103 + 12) / 115][Stage 144:===================================================> (111 + 4) / 115]                                                                                [Stage 145:======================================>              (85 + 31) / 116][Stage 145:==========================================>          (93 + 23) / 116][Stage 145:================================================>    (107 + 9) / 116][Stage 145:===================================================> (112 + 4) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.589080165 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 35 AND partitionZIndex<=236", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=235 AND partitionZIndex<=236,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.395406295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (59 + 54) / 113][Stage 146:=============================>                       (63 + 50) / 113][Stage 146:=====================================>               (80 + 33) / 113][Stage 146:================================================>    (104 + 9) / 113][Stage 146:====================================================>(112 + 1) / 113]                                                                                [Stage 147:=============================>                       (63 + 51) / 114][Stage 147:======================================>              (82 + 32) / 114][Stage 147:==============================================>     (102 + 12) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.113053293 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 4 AND partitionZIndex<=15", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=15,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.351025766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===================================>                 (76 + 37) / 113][Stage 148:=======================================>             (85 + 28) / 113][Stage 148:============================================>        (95 + 18) / 113][Stage 148:===============================================>    (103 + 10) / 113][Stage 148:====================================================>(111 + 2) / 113]                                                                                [Stage 149:====================================>                (79 + 35) / 114][Stage 149:=======================================>             (86 + 28) / 114][Stage 149:============================================>        (95 + 19) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:===================================================> (111 + 3) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.806255823 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 21 AND partitionZIndex<=122", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=122,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.363695529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:==================================>                  (76 + 42) / 118][Stage 150:====================================>                (82 + 36) / 118][Stage 150:=========================================>           (92 + 26) / 118][Stage 150:============================================>       (101 + 17) / 118][Stage 150:=================================================>   (111 + 7) / 118][Stage 150:==================================================>  (112 + 6) / 118][Stage 150:====================================================>(116 + 2) / 118]                                                                                [Stage 151:================================>                    (74 + 45) / 119][Stage 151:=====================================>               (85 + 34) / 119][Stage 151:============================================>       (102 + 17) / 119][Stage 151:=================================================>   (111 + 8) / 119][Stage 151:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 4.156261008 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 8 AND partitionZIndex<=59", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=59,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410377857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 61) / 121][Stage 152:==============================>                      (70 + 51) / 121][Stage 152:======================================>              (89 + 32) / 121][Stage 152:==============================================>     (109 + 12) / 121]                                                                                [Stage 153:==========================>                          (62 + 60) / 122][Stage 153:==============================>                      (70 + 52) / 122][Stage 153:====================================>                (83 + 39) / 122][Stage 153:=============================================>      (107 + 15) / 122][Stage 153:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.366076476 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 5 AND partitionZIndex<=56", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=56,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.347779906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==================================>                  (73 + 40) / 113][Stage 154:====================================>                (78 + 35) / 113][Stage 154:===========================================>         (92 + 21) / 113][Stage 154:==============================================>     (102 + 11) / 113][Stage 154:===================================================> (110 + 3) / 113]                                                                                [Stage 155:====================================>                (79 + 35) / 114][Stage 155:========================================>            (87 + 27) / 114][Stage 155:=============================================>       (98 + 16) / 114][Stage 155:================================================>    (105 + 9) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.44766889 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 07 AND partitionZIndex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380185371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:=================================>                   (72 + 43) / 115][Stage 156:========================================>            (88 + 27) / 115][Stage 156:===============================================>    (104 + 11) / 115][Stage 156:==================================================>  (110 + 5) / 115]                                                                                [Stage 157:==================================>                  (76 + 40) / 116][Stage 157:==========================================>          (92 + 24) / 116][Stage 157:===============================================>    (105 + 11) / 116][Stage 157:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.886056203 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 01 AND partitionZIndex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.338248844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:========================================>            (87 + 28) / 115][Stage 158:=============================================>       (98 + 17) / 115][Stage 158:====================================================>(113 + 2) / 115]                                                                                [Stage 159:=======================================>             (87 + 29) / 116][Stage 159:==============================================>     (103 + 13) / 116][Stage 159:=================================================>   (109 + 7) / 116][Stage 159:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.746094435 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 38 AND partitionZIndex<=239", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=238 AND partitionZIndex<=239,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398696534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:============================>                        (66 + 55) / 121][Stage 160:====================================>                (84 + 37) / 121][Stage 160:=============================================>      (106 + 15) / 121][Stage 160:====================================================>(119 + 2) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:============================>                        (65 + 57) / 122][Stage 161:==================================>                  (79 + 43) / 122][Stage 161:===========================================>        (102 + 20) / 122][Stage 161:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.069918215 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 9 AND partitionZIndex<=60", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392457694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:==============================>                      (64 + 49) / 113][Stage 162:=====================================>               (79 + 34) / 113][Stage 162:==============================================>     (102 + 11) / 113]                                                                                [Stage 163:===========================>                         (60 + 54) / 114][Stage 163:================================>                    (69 + 45) / 114][Stage 163:======================================>              (83 + 31) / 114][Stage 163:==============================================>     (102 + 12) / 114][Stage 163:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.150862249 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 26 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369942909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==============================>                      (67 + 48) / 115][Stage 164:===================================>                 (78 + 37) / 115][Stage 164:==========================================>          (92 + 23) / 115][Stage 164:===================================================> (112 + 3) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:==================================>                  (76 + 40) / 116][Stage 165:==========================================>          (92 + 24) / 116][Stage 165:==============================================>     (104 + 12) / 116][Stage 165:===================================================> (112 + 4) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.180294313 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 7 AND partitionZIndex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390567473 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:================================>                    (71 + 44) / 115][Stage 166:========================================>            (87 + 28) / 115][Stage 166:==============================================>     (103 + 12) / 115][Stage 166:===================================================> (111 + 4) / 115]                                                                                [Stage 167:===============================>                     (70 + 46) / 116][Stage 167:======================================>              (85 + 31) / 116][Stage 167:=============================================>      (101 + 15) / 116][Stage 167:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.936981566 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9 6 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349482105 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (80 + 33) / 113][Stage 168:=======================================>             (85 + 28) / 113][Stage 168:=============================================>       (96 + 17) / 113][Stage 168:==================================================>  (107 + 6) / 113][Stage 168:====================================================>(112 + 1) / 113]                                                                                [Stage 169:=================================>                   (73 + 41) / 114][Stage 169:======================================>              (83 + 31) / 114][Stage 169:==============================================>      (99 + 15) / 114][Stage 169:=================================================>   (106 + 8) / 114][Stage 169:===================================================> (111 + 3) / 114][Stage 169:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.216974057 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 02 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.368165969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===============================>                     (68 + 47) / 115][Stage 170:=======================================>             (85 + 30) / 115][Stage 170:=============================================>       (98 + 17) / 115][Stage 170:=================================================>   (108 + 7) / 115][Stage 170:===================================================> (112 + 3) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:================================>                    (71 + 45) / 116][Stage 171:=======================================>             (86 + 30) / 116][Stage 171:============================================>        (97 + 19) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.279515687 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 08 AND partitionZIndex<=209", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392692033 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 61) / 121][Stage 172:===========================>                         (62 + 59) / 121][Stage 172:==================================>                  (78 + 43) / 121][Stage 172:===========================================>         (99 + 22) / 121][Stage 172:=================================================>   (114 + 7) / 121]                                                                                [Stage 173:===========================>                         (63 + 59) / 122][Stage 173:==============================>                      (71 + 51) / 122][Stage 173:=======================================>             (91 + 31) / 122][Stage 173:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.133563158 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 69 AND partitionZIndex<=170", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=170,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372283069 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===============================>                     (68 + 47) / 115][Stage 174:=======================================>             (86 + 29) / 115][Stage 174:===============================================>    (105 + 10) / 115][Stage 174:===================================================> (112 + 3) / 115]                                                                                [Stage 175:=================================>                   (74 + 42) / 116][Stage 175:==========================================>          (93 + 23) / 116][Stage 175:=================================================>   (108 + 8) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.833533682 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 85 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369152868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (67 + 48) / 115][Stage 176:====================================>                (79 + 36) / 115][Stage 176:===========================================>         (94 + 21) / 115][Stage 176:=================================================>   (107 + 8) / 115][Stage 176:====================================================>(113 + 2) / 115]                                                                                [Stage 177:===============================>                     (70 + 46) / 116][Stage 177:=======================================>             (86 + 30) / 116][Stage 177:===============================================>    (106 + 10) / 116][Stage 177:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.680798973 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 7 AND partitionZIndex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411601176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (60 + 61) / 121][Stage 178:=============================>                       (68 + 53) / 121][Stage 178:=======================================>             (90 + 31) / 121][Stage 178:============================================>       (103 + 18) / 121][Stage 178:===================================================> (118 + 3) / 121]                                                                                [Stage 179:==========================>                          (61 + 61) / 122][Stage 179:============================>                        (66 + 56) / 122][Stage 179:=================================>                   (78 + 44) / 122][Stage 179:===========================================>         (99 + 23) / 122][Stage 179:===================================================> (118 + 4) / 122][Stage 179:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.551363091 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 20 AND partitionZIndex<=121", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=121,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358091565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:>                                                      (0 + 0) / 115][Stage 180:======================================>              (83 + 32) / 115][Stage 180:==========================================>          (93 + 22) / 115][Stage 180:================================================>    (106 + 9) / 115][Stage 180:====================================================>(114 + 1) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:==========================================>          (92 + 24) / 116][Stage 181:=================================================>   (109 + 7) / 116][Stage 181:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.705589075 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 19 AND partitionZIndex<=220", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=219 AND partitionZIndex<=220,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.44115164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (60 + 61) / 121][Stage 182:============================>                        (65 + 56) / 121][Stage 182:=================================>                   (77 + 44) / 121][Stage 182:===========================================>        (101 + 20) / 121][Stage 182:===================================================> (118 + 3) / 121]                                                                                [Stage 183:============================>                        (65 + 57) / 122][Stage 183:=================================>                   (78 + 44) / 122][Stage 183:==============================================>     (109 + 13) / 122][Stage 183:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.056599238 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 08 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.402353934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:============================>                        (60 + 53) / 113][Stage 184:==================================>                  (73 + 40) / 113][Stage 184:========================================>            (87 + 26) / 113][Stage 184:==================================================>  (107 + 6) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:===========================>                         (59 + 55) / 114][Stage 185:================================>                    (69 + 45) / 114][Stage 185:=======================================>             (86 + 28) / 114][Stage 185:==============================================>     (102 + 12) / 114][Stage 185:===================================================> (110 + 4) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.35554757 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 5 AND partitionZIndex<=16", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=16,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389777831 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (62 + 58) / 120][Stage 186:===============================>                     (72 + 48) / 120][Stage 186:========================================>            (92 + 28) / 120][Stage 186:=================================================>   (113 + 7) / 120]                                                                                [Stage 187:===========================>                         (62 + 59) / 121][Stage 187:=================================>                   (76 + 45) / 121][Stage 187:===========================================>        (102 + 19) / 121][Stage 187:==================================================>  (115 + 6) / 121][Stage 187:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.444195945 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 07 AND partitionZIndex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389204931 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==============================>                      (67 + 48) / 115][Stage 188:=====================================>               (81 + 34) / 115][Stage 188:==========================================>          (93 + 22) / 115][Stage 188:===============================================>    (105 + 10) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:================================>                    (72 + 44) / 116][Stage 189:======================================>              (85 + 31) / 116][Stage 189:============================================>        (98 + 18) / 116][Stage 189:==================================================>  (110 + 6) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.014964306 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=9  AND partitionZIndex<=10", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=9 AND partitionZIndex<=10,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396760332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 61) / 121][Stage 190:============================>                        (65 + 56) / 121][Stage 190:==================================>                  (79 + 42) / 121][Stage 190:==========================================>          (97 + 24) / 121][Stage 190:==================================================>  (115 + 6) / 121]                                                                                [Stage 191:============================>                        (66 + 56) / 122][Stage 191:==================================>                  (80 + 42) / 122][Stage 191:===========================================>         (99 + 23) / 122][Stage 191:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.194276377 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 28 AND partitionZIndex<=229", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=228 AND partitionZIndex<=229,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.356595124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:=================================>                   (75 + 43) / 118][Stage 192:=========================================>           (92 + 26) / 118][Stage 192:=================================================>   (110 + 8) / 118]                                                                                [Stage 193:=================================>                   (75 + 44) / 119][Stage 193:=======================================>             (88 + 31) / 119][Stage 193:===============================================>    (108 + 11) / 119][Stage 193:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.044971469 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 38 AND partitionZIndex<=139", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=139,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.367586286 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (73 + 45) / 118][Stage 194:====================================>                (81 + 37) / 118][Stage 194:============================================>       (101 + 17) / 118][Stage 194:====================================================>(117 + 1) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:==================================>                  (78 + 41) / 119][Stage 195:============================================>        (99 + 20) / 119][Stage 195:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 2.821081207 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8  AND partitionZIndex<=9", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377811548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (59 + 54) / 113][Stage 196:===============================>                     (67 + 46) / 113][Stage 196:=========================================>           (88 + 25) / 113][Stage 196:================================================>    (104 + 9) / 113][Stage 196:====================================================>(111 + 2) / 113]                                                                                [Stage 197:=============================>                       (63 + 51) / 114][Stage 197:==================================>                  (75 + 39) / 114][Stage 197:========================================>            (87 + 27) / 114][Stage 197:=================================================>   (106 + 8) / 114][Stage 197:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.67733962 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 3 AND partitionZIndex<=54", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=54,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.363235125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=====================================>               (79 + 34) / 113][Stage 198:==========================================>          (90 + 23) / 113][Stage 198:==============================================>     (102 + 11) / 113][Stage 198:====================================================>(111 + 2) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:===================================>                 (77 + 37) / 114][Stage 199:========================================>            (87 + 27) / 114][Stage 199:============================================>        (95 + 19) / 114][Stage 199:================================================>    (105 + 9) / 114][Stage 199:===================================================> (110 + 4) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.475785582 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 5 AND partitionZIndex<=46", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=46,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39358151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (59 + 54) / 113][Stage 200:============================>                        (61 + 52) / 113][Stage 200:=================================>                   (72 + 41) / 113][Stage 200:==========================================>          (90 + 23) / 113][Stage 200:=================================================>   (105 + 8) / 113]                                                                                [Stage 201:===========================>                         (60 + 54) / 114][Stage 201:================================>                    (70 + 44) / 114][Stage 201:==========================================>          (91 + 23) / 114][Stage 201:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.19658071 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 00:22:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:50092) dropped. RpcEnv already stopped.
17/05/25 00:22:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:55664) dropped. RpcEnv already stopped.
17/05/25 00:22:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:50092) dropped. RpcEnv already stopped.
17/05/25 00:22:05 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.2:55664) dropped. RpcEnv already stopped.

real	10m4.788s
user	11m14.112s
sys	0m40.288s
