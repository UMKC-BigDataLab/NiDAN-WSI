Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/24 21:53:51 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:54:06 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:54:06 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:54:06 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/24 21:54:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/24 21:54:19 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170524215408-0599).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.576729676 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (1 + 114) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:=============================>                         (61 + 54) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:==========================================>            (88 + 27) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:===================================================>   (107 + 8) / 115]                                                                                [Stage 1:========================>                              (52 + 64) / 116][Stage 1:===========================>                           (58 + 58) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.521265247 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  151  OR  partitionIndex = 152  OR  partitionIndex = 165  OR  partitionIndex = 16 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 152  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.689418589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===============================>                       (64 + 49) / 113][Stage 2:==================================>                    (70 + 43) / 113][Stage 2:===================================>                   (72 + 41) / 113][Stage 2:=====================================>                 (77 + 36) / 113][Stage 2:======================================>                (79 + 34) / 113][Stage 2:==========================================>            (88 + 25) / 113][Stage 2:==============================================>        (96 + 17) / 113][Stage 2:================================================>      (99 + 14) / 113][Stage 2:===================================================>   (106 + 7) / 113][Stage 2:======================================================>(111 + 2) / 113]                                                                                [Stage 3:===================================>                   (73 + 41) / 114][Stage 3:=====================================>                 (78 + 36) / 114][Stage 3:=======================================>               (82 + 32) / 114][Stage 3:===========================================>           (91 + 23) / 114][Stage 3:==============================================>        (97 + 17) / 114][Stage 3:================================================>     (102 + 12) / 114][Stage 3:==================================================>    (105 + 9) / 114][Stage 3:====================================================>  (108 + 6) / 114]                                                                                Time elapsed: 5.109874822 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 33  OR  partitionIndex = 47  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.646735139 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===================================>                   (74 + 41) / 115][Stage 4:===================================>                   (75 + 40) / 115][Stage 4:========================================>              (85 + 30) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:=============================================>         (95 + 20) / 115][Stage 4:================================================>     (104 + 11) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:======================================>                (82 + 34) / 116][Stage 5:========================================>              (85 + 31) / 116][Stage 5:===========================================>           (91 + 25) / 116][Stage 5:==============================================>        (98 + 18) / 116][Stage 5:================================================>     (105 + 11) / 116][Stage 5:====================================================>  (110 + 6) / 116][Stage 5:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.328107558 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.633668146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:===========================>                           (56 + 57) / 113][Stage 6:============================>                          (58 + 55) / 113][Stage 6:==============================>                        (63 + 50) / 113][Stage 6:===================================>                   (73 + 40) / 113][Stage 6:==========================================>            (87 + 26) / 113][Stage 6:===============================================>       (97 + 16) / 113][Stage 6:==================================================>    (104 + 9) / 113][Stage 6:======================================================>(111 + 2) / 113]                                                                                [Stage 7:============================>                          (60 + 54) / 114][Stage 7:==============================>                        (64 + 50) / 114][Stage 7:==================================>                    (72 + 42) / 114][Stage 7:==============================================>        (96 + 18) / 114][Stage 7:===================================================>   (107 + 7) / 114]                                                                                Time elapsed: 4.447937449 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  63  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77  OR  partitionIndex = 78  OR  partitionIndex = 90 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.488304849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:=======================================>               (83 + 32) / 115][Stage 8:=========================================>             (87 + 28) / 115][Stage 8:==============================================>        (98 + 17) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:====================================================>  (110 + 5) / 115][Stage 8:=====================================================> (112 + 3) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:======================================>                (82 + 34) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:===============================================>      (102 + 14) / 116][Stage 9:================================================>     (104 + 12) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.249601181 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 24  OR  partitionIndex = 25 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.604490355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=================================>                    (70 + 43) / 113][Stage 10:===================================>                  (75 + 38) / 113][Stage 10:=========================================>            (87 + 26) / 113][Stage 10:=============================================>        (96 + 17) / 113][Stage 10:==================================================>   (106 + 7) / 113][Stage 10:====================================================> (109 + 4) / 113][Stage 10:=====================================================>(111 + 2) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:==================================>                   (73 + 41) / 114][Stage 11:======================================>               (82 + 32) / 114][Stage 11:========================================>             (86 + 28) / 114][Stage 11:============================================>         (93 + 21) / 114][Stage 11:==============================================>       (99 + 15) / 114][Stage 11:==================================================>   (107 + 7) / 114][Stage 11:====================================================> (110 + 4) / 114][Stage 11:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.589330679 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  202  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 22 9 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214  OR  partitionIndex = 215  OR  partitionIndex = 229 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.701837541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=========================>                            (57 + 64) / 121][Stage 12:===========================>                          (61 + 60) / 121][Stage 12:=============================>                        (66 + 55) / 121][Stage 12:=====================================>                (84 + 37) / 121][Stage 12:===========================================>          (97 + 24) / 121][Stage 12:=============================================>       (105 + 16) / 121][Stage 12:=====================================================>(119 + 2) / 121][Stage 12:=====================================================>(120 + 1) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:==============================>                       (70 + 52) / 122][Stage 13:=====================================>                (85 + 37) / 122][Stage 13:===========================================>          (99 + 23) / 122][Stage 13:===============================================>     (110 + 12) / 122][Stage 13:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.503061461 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  185  OR  partitionIndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 20 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 186  OR  partitionIndex = 199  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.513736927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===============================>                      (68 + 47) / 115][Stage 14:===================================>                  (75 + 40) / 115][Stage 14:==========================================>           (91 + 24) / 115][Stage 14:===============================================>     (104 + 11) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:===============================>                      (68 + 48) / 116][Stage 15:===================================>                  (76 + 40) / 116][Stage 15:=======================================>              (85 + 31) / 116][Stage 15:===========================================>          (93 + 23) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.45800636 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34  OR  partitionIndex = 35 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.58627962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:=============================>                        (67 + 54) / 121][Stage 16:=====================================>                (85 + 36) / 121][Stage 16:=============================================>       (105 + 16) / 121][Stage 16:===================================================>  (115 + 6) / 121][Stage 16:====================================================> (117 + 4) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:============================>                         (65 + 57) / 122][Stage 17:==================================>                   (77 + 45) / 122][Stage 17:===========================================>          (98 + 24) / 122][Stage 17:==================================================>   (113 + 9) / 122][Stage 17:====================================================> (118 + 4) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.273428484 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 13  OR  partitionIndex = 27  OR  partitionIndex = 56 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 27  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.471810738 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:>                                                       (0 + 0) / 118][Stage 18:================================>                     (72 + 46) / 118][Stage 18:=================================>                    (74 + 44) / 118][Stage 18:=======================================>              (87 + 31) / 118][Stage 18:==============================================>      (104 + 14) / 118][Stage 18:==================================================>   (111 + 7) / 118][Stage 18:====================================================> (115 + 3) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:===================================>                  (79 + 40) / 119][Stage 19:==========================================>           (94 + 25) / 119][Stage 19:===============================================>     (107 + 12) / 119][Stage 19:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.715912372 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 11 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.475368663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (76 + 37) / 113][Stage 20:========================================>             (84 + 29) / 113][Stage 20:=============================================>        (95 + 18) / 113][Stage 20:================================================>    (103 + 10) / 113][Stage 20:====================================================> (109 + 4) / 113][Stage 20:====================================================> (110 + 3) / 113]                                                                                [Stage 21:=====================================>                (80 + 34) / 114][Stage 21:===========================================>          (91 + 23) / 114][Stage 21:=============================================>        (96 + 18) / 114][Stage 21:==================================================>   (106 + 8) / 114][Stage 21:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.63282966 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 21 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.543435772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==========================>                           (60 + 61) / 121][Stage 22:==============================>                       (68 + 53) / 121][Stage 22:=======================================>              (89 + 32) / 121][Stage 22:==================================================>   (113 + 8) / 121][Stage 22:====================================================> (118 + 3) / 121][Stage 22:=====================================================>(119 + 2) / 121][Stage 22:=====================================================>(120 + 1) / 121]                                                                                [Stage 23:===========================>                          (61 + 61) / 122][Stage 23:============================>                         (65 + 57) / 122][Stage 23:==================================>                   (77 + 45) / 122][Stage 23:==========================================>           (95 + 27) / 122][Stage 23:================================================>    (112 + 10) / 122][Stage 23:===================================================>  (117 + 5) / 122][Stage 23:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 4.110645183 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 23 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 220  OR  partitionIndex = 233  OR  partitionIndex = 234 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.528452875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 61) / 121][Stage 24:=============================>                        (66 + 55) / 121][Stage 24:=====================================>                (83 + 38) / 121][Stage 24:============================================>        (101 + 20) / 121][Stage 24:=====================================================>(119 + 2) / 121]                                                                                [Stage 25:===========================>                          (62 + 60) / 122][Stage 25:====================================>                 (82 + 40) / 122][Stage 25:==========================================>           (96 + 26) / 122][Stage 25:================================================>    (111 + 11) / 122][Stage 25:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.728695088 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9  OR  partitionIndex = 23  OR  partitionIndex = 24 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.50721423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:==============================>                       (67 + 53) / 120][Stage 26:==================================>                   (77 + 43) / 120][Stage 26:============================================>         (99 + 21) / 120][Stage 26:=====================================================>(118 + 2) / 120][Stage 26:=====================================================>(119 + 1) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:================================>                     (72 + 49) / 121][Stage 27:=========================================>            (93 + 28) / 121][Stage 27:================================================>    (110 + 11) / 121][Stage 27:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.550360113 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  215  OR  partitionIndex = 216  OR  partitionIndex = 229  OR  partitionIndex = 23 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 216  OR  partitionIndex = 229  OR  partitionIndex = 230 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.423034623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (79 + 34) / 113][Stage 28:==========================================>           (89 + 24) / 113][Stage 28:=============================================>        (96 + 17) / 113][Stage 28:===================================================>  (107 + 6) / 113]                                                                                [Stage 29:=====================================>                (79 + 35) / 114][Stage 29:=========================================>            (88 + 26) / 114][Stage 29:=============================================>        (96 + 18) / 114][Stage 29:===================================================>  (109 + 5) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.044663734 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 19 5 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180  OR  partitionIndex = 181  OR  partitionIndex = 195 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.538437313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:=================================>                    (74 + 46) / 120][Stage 30:=========================================>            (92 + 28) / 120][Stage 30:=====================================================>(118 + 2) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:============================>                         (63 + 58) / 121][Stage 31:===================================>                  (79 + 42) / 121][Stage 31:================================================>    (110 + 11) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.409477193 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60  OR  partitionIndex = 68  OR  partitionIndex = 69 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.499487144 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (61 + 59) / 120][Stage 32:=================================>                    (74 + 46) / 120][Stage 32:========================================>             (91 + 29) / 120][Stage 32:================================================>    (109 + 11) / 120][Stage 32:===================================================>  (115 + 5) / 120][Stage 32:=====================================================>(118 + 2) / 120]                                                                                [Stage 33:============================>                         (64 + 57) / 121][Stage 33:=================================>                    (76 + 45) / 121][Stage 33:===========================================>         (100 + 21) / 121][Stage 33:====================================================> (118 + 3) / 121][Stage 33:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.265116791 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39  OR  partitionIndex = 53 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.522881736 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:==========================>                           (60 + 61) / 121][Stage 34:===============================>                      (70 + 51) / 121][Stage 34:=====================================>                (84 + 37) / 121][Stage 34:==================================================>   (113 + 8) / 121][Stage 34:=====================================================>(120 + 1) / 121]                                                                                [Stage 35:===========================>                          (61 + 61) / 122][Stage 35:==============================>                       (69 + 53) / 122][Stage 35:===================================>                  (81 + 41) / 122][Stage 35:==============================================>      (107 + 15) / 122][Stage 35:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.479622828 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  7  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22  OR  partitionIndex = 34 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.518383132 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:=============================>                        (66 + 54) / 120][Stage 36:=====================================>                (83 + 37) / 120][Stage 36:================================================>    (109 + 11) / 120]                                                                                [Stage 37:===========================>                          (61 + 60) / 121][Stage 37:===============================>                      (71 + 50) / 121][Stage 37:===========================================>         (100 + 21) / 121][Stage 37:==================================================>   (114 + 7) / 121][Stage 37:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.31090296 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 15 9 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158  OR  partitionIndex = 159 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427763036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:================================>                     (72 + 46) / 118][Stage 38:===================================>                  (77 + 41) / 118][Stage 38:============================================>         (97 + 21) / 118][Stage 38:==================================================>   (111 + 7) / 118]                                                                                [Stage 39:=================================>                    (73 + 46) / 119][Stage 39:===================================>                  (78 + 41) / 119][Stage 39:============================================>        (100 + 19) / 119][Stage 39:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.125697589 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 20 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 203  OR  partitionIndex = 204 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.458156537 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (69 + 46) / 115][Stage 40:======================================>               (81 + 34) / 115][Stage 40:============================================>         (95 + 20) / 115][Stage 40:====================================================> (111 + 4) / 115]                                                                                [Stage 41:=====================================>                (81 + 35) / 116][Stage 41:===========================================>          (93 + 23) / 116][Stage 41:==================================================>   (108 + 8) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.826282248 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  123  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 15 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 138  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.518931018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==========================>                           (60 + 61) / 121][Stage 42:=============================>                        (65 + 56) / 121][Stage 42:===================================>                  (79 + 42) / 121][Stage 42:===========================================>          (98 + 23) / 121][Stage 42:==================================================>   (114 + 7) / 121][Stage 42:=====================================================>(120 + 1) / 121]                                                                                [Stage 43:===========================>                          (61 + 61) / 122][Stage 43:============================>                         (65 + 57) / 122][Stage 43:===================================>                  (81 + 41) / 122][Stage 43:============================================>        (103 + 19) / 122][Stage 43:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.507846508 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 22 5 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.41976939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:=====================================>                (81 + 37) / 118][Stage 44:=============================================>        (99 + 19) / 118][Stage 44:=====================================================>(116 + 2) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:======================================>               (85 + 34) / 119][Stage 45:=============================================>       (103 + 16) / 119][Stage 45:==================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.198030952 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 20 3 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188  OR  partitionIndex = 189  OR  partitionIndex = 203 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427897602 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:===================================>                  (76 + 39) / 115][Stage 46:=============================================>        (96 + 19) / 115][Stage 46:===================================================>  (109 + 6) / 115]                                                                                [Stage 47:==================================>                   (74 + 42) / 116][Stage 47:==========================================>           (91 + 25) / 116][Stage 47:==============================================>       (99 + 17) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:====================================================> (112 + 4) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.35587657 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 11 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103  OR  partitionIndex = 117  OR  partitionIndex = 118 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.496438614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==========================>                           (60 + 61) / 121][Stage 48:==============================>                       (68 + 53) / 121][Stage 48:==========================================>           (96 + 25) / 121][Stage 48:====================================================> (118 + 3) / 121]                                                                                [Stage 49:============================>                         (65 + 57) / 122][Stage 49:=================================>                    (75 + 47) / 122][Stage 49:=========================================>            (93 + 29) / 122][Stage 49:==================================================>   (115 + 7) / 122][Stage 49:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.345631006 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 " , 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.479819893 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:>                                                       (0 + 0) / 121][Stage 50:==========================>                           (60 + 61) / 121][Stage 50:===========================>                          (62 + 59) / 121][Stage 50:================================>                     (73 + 48) / 121][Stage 50:============================================>         (99 + 22) / 121][Stage 50:=================================================>    (112 + 9) / 121][Stage 50:====================================================> (117 + 4) / 121][Stage 50:=====================================================>(119 + 2) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:============================>                         (64 + 58) / 122][Stage 51:==================================>                   (78 + 44) / 122][Stage 51:===============================================>     (110 + 12) / 122][Stage 51:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.822047387 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  184  OR  partitionIndex = 185  OR  partitionIndex = 227  OR  partitionIndex = 22 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185  OR  partitionIndex = 227  OR  partitionIndex = 228 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.445937889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 60) / 121][Stage 52:================================>                     (73 + 48) / 121][Stage 52:===========================================>          (98 + 23) / 121][Stage 52:===================================================>  (116 + 5) / 121][Stage 52:=====================================================>(120 + 1) / 121]                                                                                [Stage 53:===========================>                          (61 + 61) / 122][Stage 53:==============================>                       (70 + 52) / 122][Stage 53:====================================>                 (83 + 39) / 122][Stage 53:===========================================>          (99 + 23) / 122][Stage 53:====================================================> (119 + 3) / 122][Stage 53:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.572148208 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418545395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==================================>                   (73 + 42) / 115][Stage 54:==========================================>           (90 + 25) / 115][Stage 54:==============================================>      (101 + 14) / 115][Stage 54:====================================================> (112 + 3) / 115]                                                                                [Stage 55:===============================>                      (68 + 48) / 116][Stage 55:=======================================>              (84 + 32) / 116][Stage 55:=============================================>        (97 + 19) / 116][Stage 55:=================================================>    (107 + 9) / 116][Stage 55:===================================================>  (110 + 6) / 116][Stage 55:=====================================================>(114 + 2) / 116][Stage 55:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.324750045 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  187  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 21 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201  OR  partitionIndex = 202  OR  partitionIndex = 214 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380845087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=====================================>                (80 + 35) / 115][Stage 56:=======================================>              (85 + 30) / 115][Stage 56:=============================================>        (97 + 18) / 115][Stage 56:================================================>    (105 + 10) / 115][Stage 56:====================================================> (111 + 4) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:======================================>               (82 + 34) / 116][Stage 57:========================================>             (87 + 29) / 116][Stage 57:===========================================>          (93 + 23) / 116][Stage 57:==================================================>   (109 + 7) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.241814958 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 14 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399429193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (72 + 46) / 118][Stage 58:=======================================>              (87 + 31) / 118][Stage 58:============================================>         (98 + 20) / 118][Stage 58:=====================================================>(116 + 2) / 118]                                                                                [Stage 59:=================================>                    (73 + 46) / 119][Stage 59:==================================>                   (75 + 44) / 119][Stage 59:=======================================>              (88 + 31) / 119][Stage 59:============================================>         (99 + 20) / 119][Stage 59:==================================================>   (111 + 8) / 119][Stage 59:=====================================================>(117 + 2) / 119][Stage 59:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.6404917 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  120  OR  partitionIndex = 121  OR  partitionIndex = 135  OR  partitionIndex = 13 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135  OR  partitionIndex = 136 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.570742503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:============================>                         (59 + 54) / 113][Stage 60:===================================>                  (74 + 39) / 113][Stage 60:==========================================>           (88 + 25) / 113][Stage 60:====================================================> (109 + 4) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:===============================>                      (66 + 48) / 114][Stage 61:==========================================>           (89 + 25) / 114][Stage 61:==================================================>   (107 + 7) / 114][Stage 61:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.312465673 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 47  OR  partitionIndex = 48 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 47  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.383244653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=====================================>                (80 + 35) / 115][Stage 62:========================================>             (86 + 29) / 115][Stage 62:==============================================>       (98 + 17) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:======================================>               (82 + 34) / 116][Stage 63:==========================================>           (91 + 25) / 116][Stage 63:===============================================>     (103 + 13) / 116][Stage 63:==================================================>   (108 + 8) / 116][Stage 63:====================================================> (113 + 3) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.339628381 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40920573 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===============================>                      (67 + 48) / 115][Stage 64:======================================>               (81 + 34) / 115][Stage 64:==============================================>       (98 + 17) / 115][Stage 64:==================================================>   (107 + 8) / 115]                                                                                [Stage 65:=================================>                    (73 + 43) / 116][Stage 65:========================================>             (86 + 30) / 116][Stage 65:==============================================>      (101 + 15) / 116][Stage 65:====================================================> (113 + 3) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.623411159 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93  OR  partitionIndex = 105  OR  partitionIndex = 106 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.43050078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (58 + 55) / 113][Stage 66:==============================>                       (64 + 49) / 113][Stage 66:===================================>                  (75 + 38) / 113][Stage 66:==========================================>           (88 + 25) / 113][Stage 66:====================================================> (109 + 4) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:===============================>                      (66 + 48) / 114][Stage 67:======================================>               (81 + 33) / 114][Stage 67:===============================================>     (102 + 12) / 114][Stage 67:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.64575684 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  216  OR  partitionIndex = 217  OR  partitionIndex = 230  OR  partitionIndex = 23 1 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 230  OR  partitionIndex = 231 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372559983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (83 + 32) / 115][Stage 68:=======================================>              (85 + 30) / 115][Stage 68:=============================================>        (97 + 18) / 115][Stage 68:==================================================>   (108 + 7) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:=======================================>              (85 + 31) / 116][Stage 69:=============================================>        (98 + 18) / 116][Stage 69:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.848397712 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26  OR  partitionIndex = 38  OR  partitionIndex = 39 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.443747501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=============================>                        (61 + 52) / 113][Stage 70:=================================>                    (71 + 42) / 113][Stage 70:===========================================>          (91 + 22) / 113][Stage 70:===================================================>  (107 + 6) / 113]                                                                                [Stage 71:=============================>                        (62 + 52) / 114][Stage 71:================================>                     (69 + 45) / 114][Stage 71:========================================>             (86 + 28) / 114][Stage 71:=================================================>    (105 + 9) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.362911697 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 21 9 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218  OR  partitionIndex = 219 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.440853798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (62 + 58) / 120][Stage 72:===============================>                      (70 + 50) / 120][Stage 72:========================================>             (91 + 29) / 120][Stage 72:===================================================>  (115 + 5) / 120][Stage 72:=====================================================>(118 + 2) / 120]                                                                                [Stage 73:===========================>                          (62 + 59) / 121][Stage 73:=================================>                    (74 + 47) / 121][Stage 73:============================================>         (99 + 22) / 121][Stage 73:=====================================================>(119 + 2) / 121][Stage 73:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.531272795 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  155  OR  partitionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 17 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 156  OR  partitionIndex = 169  OR  partitionIndex = 170 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372114486 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (81 + 32) / 113][Stage 74:===========================================>          (90 + 23) / 113][Stage 74:==============================================>      (100 + 13) / 113][Stage 74:===================================================>  (107 + 6) / 113][Stage 74:=====================================================>(111 + 2) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:====================================>                 (76 + 38) / 114][Stage 75:=========================================>            (87 + 27) / 114][Stage 75:==============================================>      (100 + 14) / 114][Stage 75:===================================================>  (109 + 5) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.202067638 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 16 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153  OR  partitionIndex = 167  OR  partitionIndex = 168 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.367717781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:======================================>               (83 + 32) / 115][Stage 76:=============================================>        (96 + 19) / 115][Stage 76:==================================================>   (108 + 7) / 115][Stage 76:===================================================>  (110 + 5) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:========================================>             (86 + 30) / 116][Stage 77:==============================================>      (101 + 15) / 116][Stage 77:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.003460816 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 93  OR  partitionIndex = 107  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.448177152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:==============================>                       (68 + 52) / 120][Stage 78:==========================================>           (94 + 26) / 120][Stage 78:====================================================> (116 + 4) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:==================================>                   (77 + 44) / 121][Stage 79:============================================>         (99 + 22) / 121][Stage 79:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.145354478 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  32  OR  partitionIndex = 33  OR  partitionIndex = 46  OR  partitionIndex = 47 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33  OR  partitionIndex = 46  OR  partitionIndex = 47 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399014446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:==============================>                       (63 + 50) / 113][Stage 80:=====================================>                (79 + 34) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:====================================================> (110 + 3) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:=============================>                        (63 + 51) / 114][Stage 81:=======================================>              (83 + 31) / 114][Stage 81:==============================================>      (100 + 14) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.518666219 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 19 7 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183  OR  partitionIndex = 196  OR  partitionIndex = 197 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.439850184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:>                                                       (0 + 0) / 121][Stage 82:==========================>                           (60 + 61) / 121][Stage 82:============================>                         (63 + 58) / 121][Stage 82:================================>                     (73 + 48) / 121][Stage 82:==========================================>           (96 + 25) / 121][Stage 82:====================================================> (117 + 4) / 121]                                                                                [Stage 83:===========================>                          (63 + 59) / 122][Stage 83:==================================>                   (79 + 43) / 122][Stage 83:===========================================>         (101 + 21) / 122][Stage 83:===================================================>  (116 + 6) / 122][Stage 83:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.450651578 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 17 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163  OR  partitionIndex = 177  OR  partitionIndex = 178 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.438864404 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:==========================>                           (60 + 61) / 121][Stage 84:================================>                     (73 + 48) / 121][Stage 84:=======================================>              (88 + 33) / 121][Stage 84:===================================================>  (115 + 6) / 121]                                                                                [Stage 85:=============================>                        (66 + 56) / 122][Stage 85:====================================>                 (83 + 39) / 122][Stage 85:============================================>        (103 + 19) / 122]                                                                                Time elapsed: 3.13951218 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 21  OR  partitionIndex = 22 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413159429 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:=============================>                        (66 + 54) / 120][Stage 86:==================================>                   (76 + 44) / 120][Stage 86:============================================>        (101 + 19) / 120][Stage 86:====================================================> (117 + 3) / 120]                                                                                [Stage 87:===========================>                          (62 + 59) / 121][Stage 87:===============================>                      (70 + 51) / 121][Stage 87:=======================================>              (88 + 33) / 121][Stage 87:==============================================>      (107 + 14) / 121][Stage 87:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.442143726 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418061397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 109)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119  OR  partitionIndex = 120  partitionIndex = 120
-------------------------------------------------------------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  157  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 18 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171  OR  partitionIndex = 172  OR  partitionIndex = 180 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.41969032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:==============================>                       (68 + 52) / 120][Stage 88:=======================================>              (87 + 33) / 120][Stage 88:===============================================>     (108 + 12) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==============================>                       (69 + 52) / 121][Stage 89:======================================>               (86 + 35) / 121][Stage 89:================================================>    (110 + 11) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.379446913 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  5  OR  partitionIndex = 6  OR  partitionIndex = 19  OR  partitionIndex = 20 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 6  OR  partitionIndex = 19  OR  partitionIndex = 20 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369688212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:=================================>                    (71 + 42) / 113][Stage 90:=======================================>              (83 + 30) / 113][Stage 90:============================================>         (94 + 19) / 113][Stage 90:=================================================>    (104 + 9) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:====================================>                 (76 + 38) / 114][Stage 91:========================================>             (85 + 29) / 114][Stage 91:=============================================>        (95 + 19) / 114][Stage 91:==================================================>   (106 + 8) / 114][Stage 91:=====================================================>(112 + 2) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.31348446 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 41  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377504784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=================================>                    (73 + 45) / 118][Stage 92:=====================================>                (83 + 35) / 118][Stage 92:===============================================>     (106 + 12) / 118][Stage 92:=====================================================>(117 + 1) / 118]                                                                                [Stage 93:=================================>                    (73 + 46) / 119][Stage 93:=================================>                    (74 + 45) / 119][Stage 93:========================================>             (89 + 30) / 119][Stage 93:=============================================>       (102 + 17) / 119][Stage 93:====================================================> (115 + 4) / 119][Stage 93:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.286086646 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 14 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396068651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:================================>                     (69 + 46) / 115][Stage 94:=======================================>              (85 + 30) / 115][Stage 94:==============================================>      (100 + 15) / 115][Stage 94:====================================================> (111 + 4) / 115][Stage 94:=====================================================>(114 + 1) / 115]                                                                                [Stage 95:=================================>                    (71 + 45) / 116][Stage 95:========================================>             (86 + 30) / 116][Stage 95:===============================================>     (104 + 12) / 116][Stage 95:====================================================> (112 + 4) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.991221484 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 " , 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65  OR  partitionIndex = 79  OR  partitionIndex = 108 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413353976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:==============================>                       (66 + 49) / 115][Stage 96:===================================>                  (76 + 39) / 115][Stage 96:===========================================>          (93 + 22) / 115][Stage 96:===============================================>     (104 + 11) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:===================================>                  (76 + 40) / 116][Stage 97:==========================================>           (92 + 24) / 116][Stage 97:===============================================>     (104 + 12) / 116][Stage 97:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.048009212 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 14 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125  OR  partitionIndex = 139  OR  partitionIndex = 140 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.354846935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:>                                                       (0 + 0) / 115][Stage 98:======================================>               (82 + 33) / 115][Stage 98:========================================>             (87 + 28) / 115][Stage 98:==============================================>       (98 + 17) / 115][Stage 98:====================================================> (112 + 3) / 115]                                                                                [Stage 99:=======================================>              (85 + 31) / 116][Stage 99:=============================================>        (98 + 18) / 116][Stage 99:===============================================>     (104 + 12) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.796943289 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  181  OR  partitionIndex = 182  OR  partitionIndex = 195  OR  partitionIndex = 19 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 182  OR  partitionIndex = 195  OR  partitionIndex = 196 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366145212 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (71 + 42) / 113][Stage 100:=======================================>             (84 + 29) / 113][Stage 100:============================================>        (94 + 19) / 113][Stage 100:================================================>    (104 + 9) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:==================================>                  (75 + 39) / 114][Stage 101:=======================================>             (86 + 28) / 114][Stage 101:=============================================>       (97 + 17) / 114][Stage 101:==================================================>  (109 + 5) / 114][Stage 101:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.866164473 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  122  OR  partitionIndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 13 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 137  OR  partitionIndex = 138 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.405244628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 60) / 120][Stage 102:============================>                        (65 + 55) / 120][Stage 102:==================================>                  (77 + 43) / 120][Stage 102:==========================================>          (96 + 24) / 120][Stage 102:==================================================>  (114 + 6) / 120]                                                                                [Stage 103:===========================>                         (62 + 59) / 121][Stage 103:================================>                    (75 + 46) / 121][Stage 103:==========================================>          (97 + 24) / 121][Stage 103:==================================================>  (116 + 5) / 121][Stage 103:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.466876643 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 22 7 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213  OR  partitionIndex = 226  OR  partitionIndex = 227 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39131959 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=======================================>             (85 + 30) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:====================================================>(113 + 2) / 115]                                                                                [Stage 105:=====================================>               (82 + 34) / 116][Stage 105:=========================================>           (90 + 26) / 116][Stage 105:===============================================>    (105 + 11) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.558925997 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86  OR  partitionIndex = 98  OR  partitionIndex = 99 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.410394677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (58 + 55) / 113][Stage 106:=============================>                       (62 + 51) / 113][Stage 106:=====================================>               (80 + 33) / 113][Stage 106:==============================================>     (100 + 13) / 113][Stage 106:====================================================>(112 + 1) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:==============================>                      (66 + 48) / 114][Stage 107:=====================================>               (81 + 33) / 114][Stage 107:==============================================>     (102 + 12) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.642035689 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 81  OR  partitionIndex = 82 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.380167096 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=================================>                   (73 + 42) / 115][Stage 108:===========================================>         (94 + 21) / 115][Stage 108:===============================================>    (105 + 10) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:===============================>                     (69 + 47) / 116][Stage 109:=====================================>               (81 + 35) / 116][Stage 109:=============================================>       (99 + 17) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.655425567 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  94  OR  partitionIndex = 95  OR  partitionIndex = 109  OR  partitionIndex = 110  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95  OR  partitionIndex = 109  OR  partitionIndex = 110 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400144966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:============================>                        (64 + 56) / 120][Stage 110:=====================================>               (84 + 36) / 120][Stage 110:===========================================>        (100 + 20) / 120][Stage 110:===================================================> (116 + 4) / 120][Stage 110:====================================================>(119 + 1) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:============================>                        (66 + 55) / 121][Stage 111:===================================>                 (80 + 41) / 121][Stage 111:=============================================>      (106 + 15) / 121][Stage 111:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.590565336 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  211  OR  partitionIndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 22 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 212  OR  partitionIndex = 225  OR  partitionIndex = 226 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406301195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 61) / 121][Stage 112:===========================>                         (63 + 58) / 121][Stage 112:=====================================>               (85 + 36) / 121][Stage 112:==============================================>     (109 + 12) / 121][Stage 112:====================================================>(119 + 2) / 121]                                                                                [Stage 113:==========================>                          (61 + 61) / 122][Stage 113:============================>                        (66 + 56) / 122][Stage 113:====================================>                (83 + 39) / 122][Stage 113:===========================================>        (101 + 21) / 122][Stage 113:===================================================> (118 + 4) / 122][Stage 113:=====================================================(122 + 0) / 122]                                                                                Time elapsed: 3.314114775 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359168989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:>                                                      (0 + 0) / 113][Stage 114:====================================>                (78 + 35) / 113][Stage 114:=======================================>             (85 + 28) / 113][Stage 114:===========================================>         (93 + 20) / 113][Stage 114:===============================================>    (103 + 10) / 113][Stage 114:===================================================> (109 + 4) / 113]                                                                                [Stage 115:=====================================>               (81 + 33) / 114][Stage 115:==========================================>          (92 + 22) / 114][Stage 115:============================================>        (95 + 19) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 4.014979799 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 12 1 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391763176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (58 + 55) / 113][Stage 116:==============================>                      (64 + 49) / 113][Stage 116:=======================================>             (85 + 28) / 113][Stage 116:==================================================>  (107 + 6) / 113]                                                                                [Stage 117:============================>                        (62 + 52) / 114][Stage 117:================================>                    (69 + 45) / 114][Stage 117:=========================================>           (89 + 25) / 114][Stage 117:=============================================>      (100 + 14) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.36741597 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  186  OR  partitionIndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 20 1 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 200  OR  partitionIndex = 201 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404969777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 61) / 121][Stage 118:=============================>                       (67 + 54) / 121][Stage 118:===================================>                 (81 + 40) / 121][Stage 118:=============================================>      (106 + 15) / 121][Stage 118:====================================================>(119 + 2) / 121]                                                                                [Stage 119:===========================>                         (64 + 58) / 122][Stage 119:=================================>                   (78 + 44) / 122][Stage 119:==========================================>         (100 + 22) / 122][Stage 119:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.403278271 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 13 5 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 120  OR  partitionIndex = 121  OR  partitionIndex = 135 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.338575383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:====================================>                (80 + 35) / 115][Stage 120:======================================>              (84 + 31) / 115][Stage 120:=============================================>       (98 + 17) / 115][Stage 120:==================================================>  (110 + 5) / 115]                                                                                [Stage 121:======================================>              (84 + 32) / 116][Stage 121:============================================>        (98 + 18) / 116][Stage 121:==================================================>  (111 + 5) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.725269932 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 14 5 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131  OR  partitionIndex = 144  OR  partitionIndex = 145 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385617311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===============================>                     (68 + 47) / 115][Stage 122:===================================>                 (77 + 38) / 115][Stage 122:=========================================>           (90 + 25) / 115][Stage 122:====================================================>(113 + 2) / 115]                                                                                [Stage 123:====================================>                (79 + 37) / 116][Stage 123:==========================================>          (92 + 24) / 116][Stage 123:==================================================>  (111 + 5) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.891287236 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 115  OR  partitionIndex = 116  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 115  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.359725975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:====================================>                (79 + 36) / 115][Stage 124:========================================>            (87 + 28) / 115][Stage 124:============================================>        (96 + 19) / 115][Stage 124:===================================================> (111 + 4) / 115]                                                                                [Stage 125:======================================>              (85 + 31) / 116][Stage 125:============================================>       (100 + 16) / 116][Stage 125:=================================================>   (108 + 8) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.713103068 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 20 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193  OR  partitionIndex = 207  OR  partitionIndex = 208 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.407473765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (60 + 60) / 120][Stage 126:============================>                        (64 + 56) / 120][Stage 126:===============================>                     (71 + 49) / 120][Stage 126:===========================================>         (98 + 22) / 120][Stage 126:====================================================>(119 + 1) / 120]                                                                                [Stage 127:==========================>                          (61 + 60) / 121][Stage 127:==============================>                      (69 + 52) / 121][Stage 127:========================================>            (93 + 28) / 121][Stage 127:=================================================>   (112 + 9) / 121][Stage 127:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.339507735 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 21 1 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198  OR  partitionIndex = 210  OR  partitionIndex = 211 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36224782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=================================>                   (74 + 44) / 118][Stage 128:===================================>                 (80 + 38) / 118][Stage 128:============================================>       (102 + 16) / 118][Stage 128:=================================================>   (110 + 8) / 118]                                                                                [Stage 129:================================>                    (73 + 46) / 119][Stage 129:=====================================>               (85 + 34) / 119][Stage 129:============================================>       (102 + 17) / 119][Stage 129:================================================>    (110 + 9) / 119][Stage 129:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.446218118 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 14 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 130  OR  partitionIndex = 143  OR  partitionIndex = 144 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.369712113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (73 + 45) / 118][Stage 130:=====================================>               (83 + 35) / 118][Stage 130:===========================================>         (96 + 22) / 118][Stage 130:==================================================>  (113 + 5) / 118]                                                                                [Stage 131:=================================>                   (76 + 43) / 119][Stage 131:=====================================>               (85 + 34) / 119][Stage 131:=============================================>      (104 + 15) / 119][Stage 131:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.044410587 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 88 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 88 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.335610544 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:=====================================>               (81 + 34) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:==================================================>  (109 + 6) / 115]                                                                                [Stage 133:=====================================>               (83 + 33) / 116][Stage 133:============================================>        (98 + 18) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.476901575 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15  OR  partitionIndex = 27  OR  partitionIndex = 28 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.353892692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:>                                                      (0 + 0) / 113][Stage 134:==================================>                  (74 + 39) / 113][Stage 134:========================================>            (87 + 26) / 113][Stage 134:============================================>        (94 + 19) / 113][Stage 134:==================================================>  (107 + 6) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:=======================================>             (84 + 30) / 114][Stage 135:==========================================>          (91 + 23) / 114][Stage 135:==============================================>     (101 + 13) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.918990516 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 18 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179  OR  partitionIndex = 180  OR  partitionIndex = 188 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.343254758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:====================================>                (80 + 35) / 115][Stage 136:========================================>            (88 + 27) / 115][Stage 136:===============================================>    (104 + 11) / 115][Stage 136:===================================================> (112 + 3) / 115]                                                                                [Stage 137:=======================================>             (87 + 29) / 116][Stage 137:===========================================>         (96 + 20) / 116][Stage 137:==================================================>  (110 + 6) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.828895881 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionIndex = 110  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 109  OR  partitionIndex = 110 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.337190729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=======================================>             (85 + 30) / 115][Stage 138:============================================>        (97 + 18) / 115][Stage 138:===================================================> (111 + 4) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:=====================================>               (81 + 35) / 116][Stage 139:========================================>            (89 + 27) / 116][Stage 139:=================================================>   (109 + 7) / 116][Stage 139:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.758597126 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  126  OR  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 14 2 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127  OR  partitionIndex = 141  OR  partitionIndex = 142 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38555562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (59 + 54) / 113][Stage 140:=================================>                   (72 + 41) / 113][Stage 140:===========================================>         (92 + 21) / 113][Stage 140:=================================================>   (106 + 7) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:===========================>                         (59 + 55) / 114][Stage 141:=============================>                       (64 + 50) / 114][Stage 141:=======================================>             (84 + 30) / 114][Stage 141:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.371419924 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  69  OR  partitionIndex = 70  OR  partitionIndex = 83  OR  partitionIndex = 84 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 70  OR  partitionIndex = 83  OR  partitionIndex = 84 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385915522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (59 + 54) / 113][Stage 142:===============================>                     (67 + 46) / 113][Stage 142:=======================================>             (84 + 29) / 113][Stage 142:==============================================>     (101 + 12) / 113][Stage 142:===================================================> (110 + 3) / 113]                                                                                [Stage 143:===========================>                         (60 + 54) / 114][Stage 143:===============================>                     (67 + 47) / 114][Stage 143:====================================>                (78 + 36) / 114][Stage 143:==========================================>          (91 + 23) / 114][Stage 143:==================================================>  (109 + 5) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.642427269 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 16 2 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150  OR  partitionIndex = 162 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.346431186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=================================>                   (71 + 42) / 113][Stage 144:=====================================>               (79 + 34) / 113][Stage 144:=============================================>       (98 + 15) / 113][Stage 144:=================================================>   (105 + 8) / 113]                                                                                [Stage 145:=====================================>               (80 + 34) / 114][Stage 145:==========================================>          (92 + 22) / 114][Stage 145:=============================================>      (100 + 14) / 114][Stage 145:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.808139641 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71  OR  partitionIndex = 83  OR  partitionIndex = 84 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398103622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:==============================>                      (69 + 52) / 121][Stage 146:======================================>              (87 + 34) / 121][Stage 146:==============================================>     (109 + 12) / 121]                                                                                [Stage 147:==========================>                          (61 + 61) / 122][Stage 147:==============================>                      (70 + 52) / 122][Stage 147:=======================================>             (90 + 32) / 122][Stage 147:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.189081045 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7  OR  partitionIndex = 20  OR  partitionIndex = 21 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.376914692 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==============================>                      (67 + 48) / 115][Stage 148:===================================>                 (77 + 38) / 115][Stage 148:=========================================>           (90 + 25) / 115][Stage 148:===============================================>    (104 + 11) / 115][Stage 148:====================================================>(114 + 1) / 115]                                                                                [Stage 149:================================>                    (71 + 45) / 116][Stage 149:=====================================>               (82 + 34) / 116][Stage 149:============================================>        (98 + 18) / 116][Stage 149:=================================================>   (108 + 8) / 116][Stage 149:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.992613892 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  0  OR  partitionIndex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1  OR  partitionIndex = 15  OR  partitionIndex = 16 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.46290424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:=============================>                       (67 + 53) / 120][Stage 150:======================================>              (87 + 33) / 120][Stage 150:=================================================>   (111 + 9) / 120][Stage 150:===================================================> (117 + 3) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:===============================>                     (73 + 48) / 121][Stage 151:======================================>              (87 + 34) / 121][Stage 151:=============================================>      (105 + 16) / 121][Stage 151:====================================================>(119 + 2) / 121][Stage 151:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.705391804 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 96  OR  partitionIndex = 109  OR  partitionIndex = 110 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393407478 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:============================>                        (65 + 55) / 120][Stage 152:====================================>                (82 + 38) / 120][Stage 152:===============================================>    (109 + 11) / 120][Stage 152:===================================================> (117 + 3) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:=============================>                       (67 + 54) / 121][Stage 153:======================================>              (88 + 33) / 121][Stage 153:==============================================>     (109 + 12) / 121][Stage 153:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.317851124 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  150  OR  partitionIndex = 151  OR  partitionIndex = 165  OR  partitionIndex = 16 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151  OR  partitionIndex = 165  OR  partitionIndex = 166 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377676237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:============================>                        (60 + 53) / 113][Stage 154:================================>                    (69 + 44) / 113][Stage 154:====================================>                (78 + 35) / 113][Stage 154:=============================================>       (96 + 17) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:===========================>                         (60 + 54) / 114][Stage 155:=============================>                       (64 + 50) / 114][Stage 155:=====================================>               (81 + 33) / 114][Stage 155:============================================>        (95 + 19) / 114][Stage 155:==================================================>  (109 + 5) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.45826258 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  122  OR  partitionIndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 13 7 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123  OR  partitionIndex = 136  OR  partitionIndex = 137 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.470371714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:===========================>                         (63 + 58) / 121][Stage 156:==================================>                  (78 + 43) / 121][Stage 156:==========================================>          (97 + 24) / 121][Stage 156:===================================================> (117 + 4) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:============================>                        (65 + 57) / 122][Stage 157:==================================>                  (80 + 42) / 122][Stage 157:===========================================>         (99 + 23) / 122][Stage 157:=================================================>   (115 + 7) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.462097216 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11  OR  partitionIndex = 25  OR  partitionIndex = 26 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392932861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:==========================>                          (60 + 60) / 120][Stage 158:=============================>                       (67 + 53) / 120][Stage 158:=====================================>               (86 + 34) / 120][Stage 158:=============================================>      (106 + 14) / 120][Stage 158:====================================================>(119 + 1) / 120]                                                                                [Stage 159:===========================>                         (62 + 59) / 121][Stage 159:=============================>                       (68 + 53) / 121][Stage 159:====================================>                (84 + 37) / 121][Stage 159:===========================================>        (101 + 20) / 121][Stage 159:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.390443539 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 48 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5  OR  partitionIndex = 19  OR  partitionIndex = 48 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.378895842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (69 + 46) / 115][Stage 160:====================================>                (80 + 35) / 115][Stage 160:=============================================>       (99 + 16) / 115][Stage 160:=================================================>   (108 + 7) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:===============================>                     (70 + 46) / 116][Stage 161:========================================>            (88 + 28) / 116][Stage 161:=============================================>      (101 + 15) / 116][Stage 161:===================================================> (112 + 4) / 116][Stage 161:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.44225697 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67  OR  partitionIndex = 80  OR  partitionIndex = 81 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.412971933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:=============================>                       (66 + 54) / 120][Stage 162:====================================>                (83 + 37) / 120][Stage 162:===========================================>         (99 + 21) / 120][Stage 162:==================================================>  (114 + 6) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:=============================>                       (68 + 53) / 121][Stage 163:=======================================>             (91 + 30) / 121][Stage 163:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.122706921 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 14 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 147  OR  partitionIndex = 148 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.36276474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 46) / 118][Stage 164:==================================>                  (77 + 41) / 118][Stage 164:==========================================>          (94 + 24) / 118][Stage 164:=================================================>   (110 + 8) / 118]                                                                                [Stage 165:================================>                    (74 + 45) / 119][Stage 165:====================================>                (81 + 38) / 119][Stage 165:===========================================>         (98 + 21) / 119][Stage 165:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.083751772 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 21 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206  OR  partitionIndex = 218 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.391931984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=====================================>               (79 + 34) / 113][Stage 166:==========================================>          (91 + 22) / 113][Stage 166:==============================================>     (100 + 13) / 113][Stage 166:=================================================>   (105 + 8) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:==================================>                  (75 + 39) / 114][Stage 167:=========================================>           (89 + 25) / 114][Stage 167:=============================================>       (97 + 17) / 114][Stage 167:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.904788153 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  134  OR  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 15 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135  OR  partitionIndex = 149  OR  partitionIndex = 150 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.396631332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 61) / 121][Stage 168:============================>                        (66 + 55) / 121][Stage 168:=================================>                   (77 + 44) / 121][Stage 168:===========================================>         (99 + 22) / 121][Stage 168:==================================================>  (115 + 6) / 121]                                                                                [Stage 169:==========================>                          (61 + 61) / 122][Stage 169:==============================>                      (71 + 51) / 122][Stage 169:======================================>              (88 + 34) / 122][Stage 169:=================================================>   (113 + 9) / 122][Stage 169:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.508386582 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  159  OR  partitionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 17 4 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 160  OR  partitionIndex = 173  OR  partitionIndex = 174 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.341611891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:======================================>              (84 + 31) / 115][Stage 170:=============================================>       (98 + 17) / 115][Stage 170:===================================================> (111 + 4) / 115]                                                                                [Stage 171:=====================================>               (83 + 33) / 116][Stage 171:==========================================>          (93 + 23) / 116][Stage 171:================================================>    (107 + 9) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.615206135 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 116 " , 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73  OR  partitionIndex = 87  OR  partitionIndex = 116 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.357532475 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:===================================>                 (78 + 40) / 118][Stage 172:==========================================>          (94 + 24) / 118][Stage 172:==================================================>  (113 + 5) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:====================================>                (83 + 36) / 119][Stage 173:============================================>       (101 + 18) / 119][Stage 173:=================================================>   (112 + 7) / 119][Stage 173:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.322949102 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  65  OR  partitionIndex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 66  OR  partitionIndex = 79  OR  partitionIndex = 80 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.327279291 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (85 + 30) / 115][Stage 174:===========================================>         (94 + 21) / 115][Stage 174:=================================================>   (108 + 7) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:======================================>              (85 + 31) / 116][Stage 175:=============================================>       (99 + 17) / 116][Stage 175:=================================================>   (108 + 8) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.799799585 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13  OR  partitionIndex = 55  OR  partitionIndex = 56 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.367202852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=============================>                       (65 + 50) / 115][Stage 176:====================================>                (79 + 36) / 115][Stage 176:=============================================>       (99 + 16) / 115][Stage 176:================================================>    (106 + 9) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:====================================>                (79 + 37) / 116][Stage 177:=========================================>           (91 + 25) / 116][Stage 177:=============================================>      (101 + 15) / 116][Stage 177:=================================================>   (108 + 8) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.511381489 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60  OR  partitionIndex = 61  OR  partitionIndex = 75 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.337866889 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:========================================>            (87 + 28) / 115][Stage 178:===========================================>         (94 + 21) / 115][Stage 178:===============================================>    (104 + 11) / 115][Stage 178:====================================================>(113 + 2) / 115]                                                                                [Stage 179:=====================================>               (82 + 34) / 116][Stage 179:========================================>            (88 + 28) / 116][Stage 179:============================================>        (97 + 19) / 116][Stage 179:=============================================>      (102 + 14) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.450754783 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 15 8 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145  OR  partitionIndex = 146  OR  partitionIndex = 158 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.362410427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (81 + 34) / 115][Stage 180:=========================================>           (90 + 25) / 115][Stage 180:===============================================>    (105 + 10) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:========================================>            (89 + 27) / 116][Stage 181:==============================================>     (103 + 13) / 116][Stage 181:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.672497696 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 20 0 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187  OR  partitionIndex = 199  OR  partitionIndex = 200 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418797933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (62 + 58) / 120][Stage 182:================================>                    (74 + 46) / 120][Stage 182:=========================================>           (94 + 26) / 120][Stage 182:==================================================>  (115 + 5) / 120]                                                                                [Stage 183:============================>                        (66 + 55) / 121][Stage 183:==================================>                  (79 + 42) / 121][Stage 183:============================================>       (103 + 18) / 121][Stage 183:===================================================> (117 + 4) / 121][Stage 183:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.432404753 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17 ", 4 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3  OR  partitionIndex = 16  OR  partitionIndex = 17 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.382275359 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:=================================>                   (71 + 42) / 113][Stage 184:======================================>              (82 + 31) / 113][Stage 184:==============================================>     (102 + 11) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:============================>                        (61 + 53) / 114][Stage 185:==================================>                  (75 + 39) / 114][Stage 185:=========================================>           (90 + 24) / 114][Stage 185:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.435140306 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 23 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358114704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (72 + 46) / 118][Stage 186:=================================>                   (75 + 43) / 118][Stage 186:======================================>              (85 + 33) / 118][Stage 186:============================================>        (98 + 20) / 118][Stage 186:===================================================> (114 + 4) / 118]                                                                                [Stage 187:================================>                    (73 + 46) / 119][Stage 187:==================================>                  (78 + 41) / 119][Stage 187:======================================>              (87 + 32) / 119][Stage 187:=============================================>      (104 + 15) / 119][Stage 187:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.282337883 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  216  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 23 2 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217  OR  partitionIndex = 231  OR  partitionIndex = 232 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.347854788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===================================>                 (76 + 37) / 113][Stage 188:========================================>            (87 + 26) / 113][Stage 188:=============================================>       (97 + 16) / 113][Stage 188:===================================================> (109 + 4) / 113][Stage 188:====================================================>(112 + 1) / 113]                                                                                [Stage 189:===================================>                 (76 + 38) / 114][Stage 189:=====================================>               (80 + 34) / 114][Stage 189:=========================================>           (90 + 24) / 114][Stage 189:==============================================>     (103 + 11) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.971409759 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",  4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 44  OR  partitionIndex = 57  OR  partitionIndex = 58 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.370211663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==============================>                      (66 + 49) / 115][Stage 190:=====================================>               (81 + 34) / 115][Stage 190:============================================>        (96 + 19) / 115][Stage 190:===============================================>    (104 + 11) / 115][Stage 190:====================================================>(113 + 2) / 115]                                                                                [Stage 191:====================================>                (79 + 37) / 116][Stage 191:==========================================>          (93 + 23) / 116][Stage 191:==============================================>     (104 + 12) / 116][Stage 191:=================================================>   (109 + 7) / 116][Stage 191:===================================================> (112 + 4) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.452242689 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 20 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191  OR  partitionIndex = 205  OR  partitionIndex = 206 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.327558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=====================================>               (82 + 33) / 115][Stage 192:=============================================>      (100 + 15) / 115][Stage 192:==================================================>  (109 + 6) / 115][Stage 192:===================================================> (112 + 3) / 115]                                                                                [Stage 193:=======================================>             (87 + 29) / 116][Stage 193:==============================================>     (103 + 13) / 116][Stage 193:==================================================>  (110 + 6) / 116][Stage 193:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.843581982 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 23 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 221  OR  partitionIndex = 235  OR  partitionIndex = 236 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.357000245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (76 + 37) / 113][Stage 194:=========================================>           (89 + 24) / 113][Stage 194:==============================================>     (100 + 13) / 113][Stage 194:=================================================>   (106 + 7) / 113]                                                                                [Stage 195:======================================>              (83 + 31) / 114][Stage 195:==========================================>          (92 + 22) / 114][Stage 195:==============================================>     (103 + 11) / 114][Stage 195:==================================================>  (108 + 6) / 114][Stage 195:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.052445288 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  210  OR  partitionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 22 6 ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211  OR  partitionIndex = 225  OR  partitionIndex = 226 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.361535334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=====================================>               (81 + 32) / 113][Stage 196:==========================================>          (90 + 23) / 113][Stage 196:================================================>    (104 + 9) / 113][Stage 196:==================================================>  (107 + 6) / 113][Stage 196:====================================================>(111 + 2) / 113]                                                                                [Stage 197:======================================>              (82 + 32) / 114][Stage 197:===========================================>         (94 + 20) / 114][Stage 197:==============================================>     (103 + 11) / 114][Stage 197:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.222548617 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112  ", 4))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97  OR  partitionIndex = 111  OR  partitionIndex = 112 ",4))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.448269207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===================================>                 (75 + 38) / 113][Stage 198:========================================>            (86 + 27) / 113][Stage 198:==============================================>     (101 + 12) / 113][Stage 198:===================================================> (110 + 3) / 113]                                                                                [Stage 199:=====================================>               (81 + 33) / 114][Stage 199:========================================>            (87 + 27) / 114][Stage 199:=============================================>       (98 + 16) / 114][Stage 199:===================================================> (110 + 4) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.014131505 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:38344) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:38344) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:47028) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:60252) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:39466) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:60252) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:47028) dropped. RpcEnv already stopped.
17/05/24 22:04:11 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.18:39466) dropped. RpcEnv already stopped.

real	10m23.333s
user	11m45.068s
sys	0m56.780s
