Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 00:22:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:22:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:22:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:22:23 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 00:22:25 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 00:22:36 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525002225-0613).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@12d28106

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 4.362267861 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 00 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:==================================>                    (72 + 43) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:============================================>          (93 + 22) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:====================================================>  (109 + 6) / 115]                                                                                [Stage 1:===========================>                           (58 + 58) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:================================================>     (105 + 11) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.249432367 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  155  OR  partitionIndex = 169 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.705638822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=======================>                               (50 + 65) / 115][Stage 2:=============================>                         (61 + 54) / 115][Stage 2:==============================>                        (63 + 52) / 115][Stage 2:================================>                      (68 + 47) / 115][Stage 2:====================================>                  (77 + 38) / 115][Stage 2:=========================================>             (87 + 28) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:============================================>          (94 + 21) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:============================>                          (60 + 56) / 116][Stage 3:==============================>                        (65 + 51) / 116][Stage 3:=================================>                     (70 + 46) / 116][Stage 3:===================================>                   (74 + 42) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:=============================================>         (96 + 20) / 116][Stage 3:===================================================>   (108 + 8) / 116][Stage 3:======================================================>(114 + 2) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.309750676 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  165  OR  partitionIndex = 166 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.601454283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===============================>                       (66 + 49) / 115][Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:========================================>              (84 + 31) / 115][Stage 4:==========================================>            (89 + 26) / 115][Stage 4:============================================>          (92 + 23) / 115][Stage 4:==============================================>       (100 + 15) / 115][Stage 4:====================================================>  (110 + 5) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:=====================================>                 (79 + 37) / 116][Stage 5:======================================>                (82 + 34) / 116][Stage 5:==========================================>            (90 + 26) / 116][Stage 5:=============================================>         (96 + 20) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.153857834 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.646621611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (73 + 42) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:=========================================>             (87 + 28) / 115][Stage 6:============================================>          (93 + 22) / 115][Stage 6:==============================================>        (98 + 17) / 115][Stage 6:===================================================>   (108 + 7) / 115]                                                                                [Stage 7:======================================>                (82 + 34) / 116][Stage 7:==========================================>            (89 + 27) / 116][Stage 7:=============================================>         (97 + 19) / 116][Stage 7:==============================================>       (100 + 16) / 116][Stage 7:==================================================>    (107 + 9) / 116][Stage 7:===================================================>   (108 + 8) / 116][Stage 7:====================================================>  (111 + 5) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.605918488 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90  OR  partitionIndex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.507021247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 8:======================================>                (81 + 34) / 115][Stage 8:=========================================>             (86 + 29) / 115][Stage 8:==============================================>        (97 + 18) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:====================================================>  (109 + 6) / 115]                                                                                [Stage 9:=======================================>               (84 + 32) / 116][Stage 9:===========================================>           (91 + 25) / 116][Stage 9:===============================================>      (101 + 15) / 116][Stage 9:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.331368908 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.484312642 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=====================================>                (80 + 35) / 115][Stage 10:========================================>             (87 + 28) / 115][Stage 10:===========================================>          (92 + 23) / 115][Stage 10:==============================================>      (101 + 14) / 115][Stage 10:===================================================>  (110 + 5) / 115]                                                                                [Stage 11:======================================>               (82 + 34) / 116][Stage 11:========================================>             (88 + 28) / 116][Stage 11:==============================================>      (101 + 15) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:==================================================>   (109 + 7) / 116][Stage 11:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.792440905 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  153  OR  partitionIndex = 167 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.592346861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:===========================>                          (61 + 59) / 120][Stage 12:==============================>                       (68 + 52) / 120][Stage 12:====================================>                 (82 + 38) / 120][Stage 12:===========================================>          (96 + 24) / 120][Stage 12:===============================================>     (107 + 13) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:==============================>                       (69 + 52) / 121][Stage 13:=======================================>              (88 + 33) / 121][Stage 13:==========================================>           (96 + 25) / 121][Stage 13:==================================================>   (113 + 8) / 121][Stage 13:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.791729482 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96  OR  partitionIndex = 97 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.617252185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 14:==========================>                           (60 + 61) / 121][Stage 14:=============================>                        (65 + 56) / 121][Stage 14:====================================>                 (81 + 40) / 121][Stage 14:===========================================>          (98 + 23) / 121][Stage 14:================================================>    (110 + 11) / 121][Stage 14:===================================================>  (116 + 5) / 121][Stage 14:=====================================================>(120 + 1) / 121]                                                                                [Stage 15:===========================>                          (61 + 61) / 122][Stage 15:============================>                         (64 + 58) / 122][Stage 15:==================================>                   (78 + 44) / 122][Stage 15:===========================================>         (100 + 22) / 122][Stage 15:==================================================>   (113 + 9) / 122][Stage 15:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.84882491 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  1  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.490079342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===================================>                  (74 + 39) / 113][Stage 16:========================================>             (85 + 28) / 113][Stage 16:==============================================>       (98 + 15) / 113][Stage 16:================================================>    (103 + 10) / 113][Stage 16:===================================================>  (107 + 6) / 113][Stage 16:====================================================> (110 + 3) / 113]                                                                                [Stage 17:====================================>                 (78 + 36) / 114][Stage 17:======================================>               (82 + 32) / 114][Stage 17:=============================================>        (95 + 19) / 114][Stage 17:==================================================>   (106 + 8) / 114][Stage 17:====================================================> (111 + 3) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.297792843 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.473737719 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=====================================>                (79 + 36) / 115][Stage 18:======================================>               (82 + 33) / 115][Stage 18:========================================>             (87 + 28) / 115][Stage 18:===========================================>          (93 + 22) / 115][Stage 18:==============================================>       (99 + 16) / 115][Stage 18:==================================================>   (107 + 8) / 115][Stage 18:===================================================>  (110 + 5) / 115]                                                                                [Stage 19:=======================================>              (84 + 32) / 116][Stage 19:=========================================>            (89 + 27) / 116][Stage 19:=============================================>        (98 + 18) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:===================================================>  (111 + 5) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.007548513 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  40  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.487109981 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===============================>                      (67 + 48) / 115][Stage 20:======================================>               (81 + 34) / 115][Stage 20:==============================================>       (99 + 16) / 115][Stage 20:===============================================>     (102 + 13) / 115][Stage 20:=================================================>    (106 + 9) / 115][Stage 20:=====================================================>(113 + 2) / 115]                                                                                [Stage 21:=================================>                    (73 + 43) / 116][Stage 21:======================================>               (82 + 34) / 116][Stage 21:=============================================>        (97 + 19) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.361351209 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92  OR  partitionIndex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.541920451 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===============================>                      (68 + 47) / 115][Stage 22:=====================================>                (80 + 35) / 115][Stage 22:============================================>         (95 + 20) / 115][Stage 22:==============================================>      (101 + 14) / 115][Stage 22:==================================================>   (108 + 7) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:================================>                     (70 + 46) / 116][Stage 23:=======================================>              (85 + 31) / 116][Stage 23:==========================================>           (91 + 25) / 116][Stage 23:=============================================>        (98 + 18) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.795356253 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  182  OR  partitionIndex = 196 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.42493585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 24:======================================>               (82 + 33) / 115][Stage 24:===========================================>          (92 + 23) / 115][Stage 24:==================================================>   (108 + 7) / 115][Stage 24:====================================================> (111 + 4) / 115][Stage 24:=====================================================>(113 + 2) / 115]                                                                                [Stage 25:========================================>             (86 + 30) / 116][Stage 25:=============================================>       (100 + 16) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:===================================================>  (110 + 6) / 116][Stage 25:====================================================> (112 + 4) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.637367124 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  143  OR  partitionIndex = 144 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.474016398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (74 + 44) / 118][Stage 26:====================================>                 (79 + 39) / 118][Stage 26:=========================================>            (91 + 27) / 118][Stage 26:===========================================>          (95 + 23) / 118][Stage 26:=================================================>    (109 + 9) / 118][Stage 26:===================================================>  (113 + 5) / 118][Stage 26:=====================================================>(116 + 2) / 118]                                                                                [Stage 27:==================================>                   (76 + 43) / 119][Stage 27:=====================================>                (82 + 37) / 119][Stage 27:=========================================>            (91 + 28) / 119][Stage 27:==============================================>      (105 + 14) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.858674179 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  68  OR  partitionIndex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.501603083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (58 + 55) / 113][Stage 28:=============================>                        (62 + 51) / 113][Stage 28:======================================>               (80 + 33) / 113][Stage 28:=============================================>        (96 + 17) / 113][Stage 28:===============================================>     (101 + 12) / 113][Stage 28:===================================================>  (108 + 5) / 113]                                                                                [Stage 29:============================>                         (60 + 54) / 114][Stage 29:==================================>                   (72 + 42) / 114][Stage 29:=========================================>            (88 + 26) / 114][Stage 29:===============================================>     (102 + 12) / 114][Stage 29:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.567310449 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 112 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.451973835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:===================================>                  (77 + 41) / 118][Stage 30:======================================>               (84 + 34) / 118][Stage 30:=========================================>            (91 + 27) / 118][Stage 30:=================================================>    (109 + 9) / 118][Stage 30:====================================================> (115 + 3) / 118]                                                                                [Stage 31:=================================>                    (73 + 46) / 119][Stage 31:====================================>                 (81 + 38) / 119][Stage 31:========================================>             (89 + 30) / 119][Stage 31:============================================>        (101 + 18) / 119][Stage 31:=================================================>    (110 + 9) / 119][Stage 31:===================================================>  (114 + 5) / 119][Stage 31:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.030360163 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  220  OR  partitionIndex = 221 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.443011973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=================================>                    (73 + 45) / 118][Stage 32:====================================>                 (79 + 39) / 118][Stage 32:==========================================>           (93 + 25) / 118][Stage 32:================================================>    (107 + 11) / 118][Stage 32:====================================================> (114 + 4) / 118][Stage 32:=====================================================>(117 + 1) / 118]                                                                                [Stage 33:==================================>                   (76 + 43) / 119][Stage 33:=========================================>            (92 + 27) / 119][Stage 33:===============================================>     (107 + 12) / 119][Stage 33:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.335182907 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  160  OR  partitionIndex = 161 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.499052581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 34:============================>                         (59 + 54) / 113][Stage 34:================================>                     (67 + 46) / 113][Stage 34:=========================================>            (86 + 27) / 113][Stage 34:===============================================>     (101 + 12) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:==============================>                       (65 + 49) / 114][Stage 35:======================================>               (81 + 33) / 114][Stage 35:==============================================>      (100 + 14) / 114][Stage 35:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.165002498 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  98  OR  partitionIndex = 99 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.437962672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 36:======================================>               (83 + 32) / 115][Stage 36:==========================================>           (91 + 24) / 115][Stage 36:===============================================>     (103 + 12) / 115][Stage 36:====================================================> (111 + 4) / 115][Stage 36:=====================================================>(114 + 1) / 115]                                                                                [Stage 37:========================================>             (87 + 29) / 116][Stage 37:=============================================>        (97 + 19) / 116][Stage 37:===============================================>     (104 + 12) / 116][Stage 37:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.026397314 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  120  OR  partitionIndex = 121 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.502944522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 38:======================================>               (81 + 34) / 115][Stage 38:==========================================>           (90 + 25) / 115][Stage 38:===============================================>     (104 + 11) / 115][Stage 38:==================================================>   (107 + 8) / 115][Stage 38:=====================================================>(114 + 1) / 115]                                                                                [Stage 39:======================================>               (83 + 33) / 116][Stage 39:===========================================>          (94 + 22) / 116][Stage 39:===================================================>  (110 + 6) / 116][Stage 39:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.867073447 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  100  OR  partitionIndex = 101 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.447192652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:==================================>                   (75 + 43) / 118][Stage 40:=====================================>                (82 + 36) / 118][Stage 40:===========================================>          (96 + 22) / 118][Stage 40:==================================================>   (110 + 8) / 118][Stage 40:=====================================================>(116 + 2) / 118]                                                                                [Stage 41:==================================>                   (77 + 42) / 119][Stage 41:=====================================>                (83 + 36) / 119][Stage 41:============================================>         (97 + 22) / 119][Stage 41:================================================>    (108 + 11) / 119][Stage 41:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.472507284 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  124  OR  partitionIndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.468811636 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===============================>                      (67 + 48) / 115][Stage 42:====================================>                 (78 + 37) / 115][Stage 42:=============================================>        (97 + 18) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:================================>                     (70 + 46) / 116][Stage 43:====================================>                 (78 + 38) / 116][Stage 43:============================================>         (96 + 20) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:=====================================================>(114 + 2) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.124389586 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.506209282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:=============================>                        (67 + 54) / 121][Stage 44:=======================================>              (88 + 33) / 121][Stage 44:================================================>    (111 + 10) / 121]                                                                                [Stage 45:===========================>                          (61 + 61) / 122][Stage 45:=============================>                        (66 + 56) / 122][Stage 45:======================================>               (88 + 34) / 122][Stage 45:================================================>    (112 + 10) / 122][Stage 45:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.253143865 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  192  OR  partitionIndex = 193 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.415009387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 46:====================================>                 (78 + 37) / 115][Stage 46:======================================>               (83 + 32) / 115][Stage 46:==============================================>       (99 + 16) / 115][Stage 46:================================================>    (105 + 10) / 115][Stage 46:=====================================================>(114 + 1) / 115]                                                                                [Stage 47:======================================>               (83 + 33) / 116][Stage 47:============================================>         (95 + 21) / 116][Stage 47:==================================================>   (109 + 7) / 116][Stage 47:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.72905606 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  38  OR  partitionIndex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390389622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 48:======================================>               (81 + 34) / 115][Stage 48:==========================================>           (91 + 24) / 115][Stage 48:===============================================>     (103 + 12) / 115][Stage 48:====================================================> (112 + 3) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:======================================>               (82 + 34) / 116][Stage 49:========================================>             (87 + 29) / 116][Stage 49:==============================================>      (102 + 14) / 116][Stage 49:===================================================>  (111 + 5) / 116][Stage 49:====================================================> (113 + 3) / 116][Stage 49:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.518143925 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  104  OR  partitionIndex = 118 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.461625454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (61 + 60) / 121][Stage 50:===============================>                      (70 + 51) / 121][Stage 50:=======================================>              (89 + 32) / 121][Stage 50:====================================================> (118 + 3) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:==============================>                       (69 + 53) / 122][Stage 51:===========================================>          (98 + 24) / 122][Stage 51:==================================================>   (114 + 8) / 122][Stage 51:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.286752346 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  15  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398644624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 52:=================================>                    (70 + 43) / 113][Stage 52:=====================================>                (78 + 35) / 113][Stage 52:=========================================>            (86 + 27) / 113][Stage 52:==============================================>       (97 + 16) / 113][Stage 52:==================================================>   (106 + 7) / 113][Stage 52:===================================================>  (108 + 5) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:==================================>                   (73 + 41) / 114][Stage 53:=========================================>            (87 + 27) / 114][Stage 53:=============================================>        (96 + 18) / 114][Stage 53:===============================================>     (103 + 11) / 114][Stage 53:===================================================>  (108 + 6) / 114][Stage 53:=====================================================>(112 + 2) / 114][Stage 53:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.110063736 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.467500974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:================================>                     (67 + 46) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:===============================================>     (102 + 11) / 113][Stage 54:====================================================> (109 + 4) / 113]                                                                                [Stage 55:============================>                         (60 + 54) / 114][Stage 55:===================================>                  (74 + 40) / 114][Stage 55:=========================================>            (87 + 27) / 114][Stage 55:================================================>    (104 + 10) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.426137265 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  202  OR  partitionIndex = 214 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.38010376 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 56:======================================>               (82 + 33) / 115][Stage 56:===========================================>          (92 + 23) / 115][Stage 56:================================================>    (105 + 10) / 115][Stage 56:===================================================>  (110 + 5) / 115][Stage 56:====================================================> (112 + 3) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:=======================================>              (85 + 31) / 116][Stage 57:==========================================>           (92 + 24) / 116][Stage 57:==============================================>      (101 + 15) / 116][Stage 57:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.14994258 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  134  OR  partitionIndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385099861 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 58:>                                                       (0 + 0) / 115][Stage 58:======================================>               (81 + 34) / 115][Stage 58:=========================================>            (88 + 27) / 115][Stage 58:=============================================>        (96 + 19) / 115][Stage 58:===================================================>  (109 + 6) / 115]                                                                                [Stage 59:======================================>               (83 + 33) / 116][Stage 59:============================================>         (95 + 21) / 116][Stage 59:===============================================>     (103 + 13) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.939544405 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.44133523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:==============================>                       (63 + 50) / 113][Stage 60:======================================>               (81 + 32) / 113][Stage 60:=============================================>        (95 + 18) / 113][Stage 60:===================================================>  (107 + 6) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:==============================>                       (65 + 49) / 114][Stage 61:======================================>               (82 + 32) / 114][Stage 61:============================================>         (93 + 21) / 114][Stage 61:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.473097508 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  146  OR  partitionIndex = 158 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453625531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 62:============================>                         (60 + 53) / 113][Stage 62:===============================>                      (65 + 48) / 113][Stage 62:============================================>         (93 + 20) / 113][Stage 62:==================================================>   (106 + 7) / 113]                                                                                [Stage 63:=============================>                        (63 + 51) / 114][Stage 63:===================================>                  (74 + 40) / 114][Stage 63:=============================================>        (96 + 18) / 114][Stage 63:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.091764007 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  39  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.453643331 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==========================>                           (60 + 61) / 121][Stage 64:================================>                     (73 + 48) / 121][Stage 64:===========================================>          (98 + 23) / 121][Stage 64:=====================================================>(119 + 2) / 121]                                                                                [Stage 65:===========================>                          (62 + 60) / 122][Stage 65:==================================>                   (78 + 44) / 122][Stage 65:==========================================>           (95 + 27) / 122][Stage 65:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.467213985 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  65  OR  partitionIndex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.406329704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (73 + 42) / 115][Stage 66:==========================================>           (91 + 24) / 115][Stage 66:==================================================>   (108 + 7) / 115][Stage 66:=====================================================>(113 + 2) / 115]                                                                                [Stage 67:===============================>                      (68 + 48) / 116][Stage 67:=====================================>                (81 + 35) / 116][Stage 67:===========================================>          (93 + 23) / 116][Stage 67:================================================>    (106 + 10) / 116][Stage 67:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.965367265 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  86  OR  partitionIndex = 98 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.417766325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 68:====================================>                 (76 + 37) / 113][Stage 68:===========================================>          (91 + 22) / 113][Stage 68:===============================================>     (101 + 12) / 113][Stage 68:===================================================>  (107 + 6) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:======================================>               (81 + 33) / 114][Stage 69:==========================================>           (89 + 25) / 114][Stage 69:============================================>         (94 + 20) / 114][Stage 69:==================================================>   (106 + 8) / 114][Stage 69:====================================================> (111 + 3) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.449044339 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 133 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.44871405 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:============================>                         (63 + 57) / 120][Stage 70:==================================>                   (77 + 43) / 120][Stage 70:===========================================>          (96 + 24) / 120][Stage 70:=================================================>    (111 + 9) / 120][Stage 70:====================================================> (117 + 3) / 120]                                                                                [Stage 71:============================>                         (63 + 58) / 121][Stage 71:================================>                     (72 + 49) / 121][Stage 71:===========================================>          (98 + 23) / 121][Stage 71:=================================================>    (112 + 9) / 121][Stage 71:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.672813593 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  93  OR  partitionIndex = 107 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.437386968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (60 + 60) / 120][Stage 72:============================>                         (63 + 57) / 120][Stage 72:====================================>                 (81 + 39) / 120][Stage 72:==========================================>           (94 + 26) / 120][Stage 72:================================================>    (109 + 11) / 120][Stage 72:=====================================================>(119 + 1) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:=============================>                        (66 + 55) / 121][Stage 73:===================================>                  (80 + 41) / 121][Stage 73:===========================================>          (97 + 24) / 121][Stage 73:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.396637508 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  12  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.420127765 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (73 + 45) / 118][Stage 74:===================================>                  (78 + 40) / 118][Stage 74:===========================================>          (95 + 23) / 118][Stage 74:=================================================>    (109 + 9) / 118][Stage 74:====================================================> (115 + 3) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:===================================>                  (78 + 41) / 119][Stage 75:=========================================>            (91 + 28) / 119][Stage 75:============================================>        (101 + 18) / 119][Stage 75:===================================================>  (114 + 5) / 119][Stage 75:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.402465268 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  31  OR  partitionIndex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.523170381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:============================>                         (64 + 56) / 120][Stage 76:=======================================>              (87 + 33) / 120][Stage 76:=================================================>    (111 + 9) / 120][Stage 76:=====================================================>(119 + 1) / 120]                                                                                [Stage 77:===========================>                          (61 + 60) / 121][Stage 77:==============================>                       (69 + 52) / 121][Stage 77:=====================================>                (83 + 38) / 121][Stage 77:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 2.979153501 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  101  OR  partitionIndex = 115 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.366144117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 78:======================================>               (81 + 34) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:==============================================>       (98 + 17) / 115][Stage 78:===================================================>  (110 + 5) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:======================================>               (83 + 33) / 116][Stage 79:========================================>             (88 + 28) / 116][Stage 79:==============================================>      (101 + 15) / 116][Stage 79:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.774126988 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  150  OR  partitionIndex = 151 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.419529825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:==============================>                       (64 + 49) / 113][Stage 80:======================================>               (81 + 32) / 113][Stage 80:==============================================>       (97 + 16) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:===============================>                      (66 + 48) / 114][Stage 81:====================================>                 (76 + 38) / 114][Stage 81:==================================================>   (106 + 8) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.12305322 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  130  OR  partitionIndex = 131 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.400788101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (58 + 55) / 113][Stage 82:=============================>                        (62 + 51) / 113][Stage 82:====================================>                 (76 + 37) / 113][Stage 82:==========================================>           (88 + 25) / 113][Stage 82:==================================================>   (106 + 7) / 113]                                                                                [Stage 83:============================>                         (60 + 54) / 114][Stage 83:=====================================>                (79 + 35) / 114][Stage 83:=============================================>        (96 + 18) / 114][Stage 83:====================================================> (110 + 4) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.230018935 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.427570425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:============================>                         (64 + 56) / 120][Stage 84:====================================>                 (80 + 40) / 120][Stage 84:============================================>        (101 + 19) / 120][Stage 84:==================================================>   (113 + 7) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===============================>                      (70 + 51) / 121][Stage 85:=========================================>            (94 + 27) / 121][Stage 85:===============================================>     (109 + 12) / 121][Stage 85:====================================================> (117 + 4) / 121][Stage 85:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.710920027 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  195  OR  partitionIndex = 196 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.348575773 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=====================================>                (80 + 35) / 115][Stage 86:=======================================>              (85 + 30) / 115][Stage 86:==============================================>      (100 + 15) / 115][Stage 86:===================================================>  (109 + 6) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:=======================================>              (85 + 31) / 116][Stage 87:============================================>         (95 + 21) / 116][Stage 87:=================================================>    (107 + 9) / 116][Stage 87:====================================================> (112 + 4) / 116][Stage 87:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.886471321 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  34  OR  partitionIndex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377542197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=================================>                    (71 + 42) / 113][Stage 88:======================================>               (80 + 33) / 113][Stage 88:===========================================>          (92 + 21) / 113][Stage 88:=================================================>    (104 + 9) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:====================================>                 (78 + 36) / 114][Stage 89:=========================================>            (88 + 26) / 114][Stage 89:=============================================>        (97 + 17) / 114][Stage 89:================================================>    (104 + 10) / 114][Stage 89:===================================================>  (109 + 5) / 114][Stage 89:====================================================> (110 + 4) / 114][Stage 89:=====================================================>(112 + 2) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.417339871 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  212  OR  partitionIndex = 213 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.39684888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 90:====================================>                 (78 + 37) / 115][Stage 90:============================================>         (95 + 20) / 115][Stage 90:================================================>    (105 + 10) / 115][Stage 90:=====================================================>(113 + 2) / 115]                                                                                [Stage 91:==================================>                   (75 + 41) / 116][Stage 91:===========================================>          (93 + 23) / 116][Stage 91:==================================================>   (108 + 8) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.965012009 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.3952727 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 92:================================>                     (72 + 46) / 118][Stage 92:===================================>                  (78 + 40) / 118][Stage 92:=======================================>              (87 + 31) / 118][Stage 92:==============================================>      (103 + 15) / 118][Stage 92:====================================================> (115 + 3) / 118][Stage 92:=====================================================>(116 + 2) / 118]                                                                                [Stage 93:=================================>                    (73 + 46) / 119][Stage 93:===================================>                  (79 + 40) / 119][Stage 93:========================================>             (90 + 29) / 119][Stage 93:============================================>         (98 + 21) / 119][Stage 93:================================================>    (109 + 10) / 119][Stage 93:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.750193727 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  154  OR  partitionIndex = 155 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.418313683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:==============================>                       (67 + 53) / 120][Stage 94:=====================================>                (83 + 37) / 120][Stage 94:==================================================>   (112 + 8) / 120]                                                                                [Stage 95:============================>                         (64 + 57) / 121][Stage 95:===================================>                  (80 + 41) / 121][Stage 95:===========================================>          (98 + 23) / 121][Stage 95:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 2.98633943 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  44  OR  partitionIndex = 58 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.356651134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (79 + 36) / 115][Stage 96:========================================>             (87 + 28) / 115][Stage 96:==================================================>   (108 + 7) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:======================================>               (82 + 34) / 116][Stage 97:==========================================>           (91 + 25) / 116][Stage 97:===============================================>     (104 + 12) / 116][Stage 97:=====================================================>(114 + 2) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.042408538 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  96  OR  partitionIndex = 110 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.509544657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (61 + 60) / 121][Stage 98:================================>                     (72 + 49) / 121][Stage 98:==========================================>           (95 + 26) / 121][Stage 98:=================================================>    (112 + 9) / 121]                                                                                [Stage 99:=========================>                            (57 + 65) / 122][Stage 99:=============================>                        (66 + 56) / 122][Stage 99:=====================================>                (84 + 38) / 122][Stage 99:===============================================>     (110 + 12) / 122][Stage 99:====================================================> (118 + 4) / 122][Stage 99:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.661509849 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  180  OR  partitionIndex = 181 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.361717814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==================================>                  (74 + 39) / 113][Stage 100:=======================================>             (85 + 28) / 113][Stage 100:============================================>        (94 + 19) / 113][Stage 100:=================================================>   (105 + 8) / 113][Stage 100:===================================================> (110 + 3) / 113]                                                                                [Stage 101:=================================>                   (72 + 42) / 114][Stage 101:=======================================>             (85 + 29) / 114][Stage 101:=============================================>       (97 + 17) / 114][Stage 101:==============================================>     (103 + 11) / 114][Stage 101:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.294732712 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  152  OR  partitionIndex = 166 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.375900996 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:===================================>                 (78 + 40) / 118][Stage 102:=========================================>           (93 + 25) / 118][Stage 102:=================================================>   (110 + 8) / 118][Stage 102:====================================================>(116 + 2) / 118]                                                                                [Stage 103:==================================>                  (77 + 42) / 119][Stage 103:====================================>                (82 + 37) / 119][Stage 103:============================================>       (102 + 17) / 119][Stage 103:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.265492466 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  139  OR  partitionIndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.342665411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 104:======================================>              (83 + 32) / 115][Stage 104:============================================>        (96 + 19) / 115][Stage 104:==================================================>  (110 + 5) / 115]                                                                                [Stage 105:=======================================>             (87 + 29) / 116][Stage 105:=============================================>       (99 + 17) / 116][Stage 105:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.511193013 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  43  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349903592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=======================================>             (85 + 30) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:==============================================>     (102 + 13) / 115][Stage 106:==================================================>  (109 + 6) / 115]                                                                                [Stage 107:=======================================>             (86 + 30) / 116][Stage 107:============================================>        (98 + 18) / 116][Stage 107:==============================================>     (104 + 12) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.16753259 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  229  OR  partitionIndex = 230 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.455815908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 59) / 120][Stage 108:===============================>                     (72 + 48) / 120][Stage 108:========================================>            (92 + 28) / 120][Stage 108:=================================================>   (113 + 7) / 120]                                                                                [Stage 109:===========================>                         (63 + 58) / 121][Stage 109:================================>                    (75 + 46) / 121][Stage 109:=========================================>           (95 + 26) / 121][Stage 109:=================================================>   (113 + 8) / 121][Stage 109:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.144786845 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  11  OR  partitionIndex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.413451881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (58 + 55) / 113][Stage 110:=============================>                       (62 + 51) / 113][Stage 110:====================================>                (77 + 36) / 113][Stage 110:==============================================>     (100 + 13) / 113][Stage 110:===================================================> (110 + 3) / 113]                                                                                [Stage 111:============================>                        (61 + 53) / 114][Stage 111:================================>                    (69 + 45) / 114][Stage 111:========================================>            (87 + 27) / 114][Stage 111:==================================================>  (109 + 5) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.464069265 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  14  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390011494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=============================>                       (62 + 51) / 113][Stage 112:================================>                    (69 + 44) / 113][Stage 112:=====================================>               (81 + 32) / 113][Stage 112:==============================================>     (101 + 12) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:===========================>                         (60 + 54) / 114][Stage 113:==============================>                      (66 + 48) / 114][Stage 113:===================================>                 (76 + 38) / 114][Stage 113:===========================================>         (93 + 21) / 114][Stage 113:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.376314258 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  127  OR  partitionIndex = 141 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399076471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==============================>                      (66 + 49) / 115][Stage 114:=======================================>             (85 + 30) / 115][Stage 114:=============================================>       (98 + 17) / 115][Stage 114:===================================================> (111 + 4) / 115]                                                                                [Stage 115:=================================>                   (74 + 42) / 116][Stage 115:=========================================>           (90 + 26) / 116][Stage 115:============================================>        (98 + 18) / 116][Stage 115:=================================================>   (108 + 8) / 116][Stage 115:===================================================> (112 + 4) / 116][Stage 115:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.980198519 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  37  OR  partitionIndex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.458651233 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==================================>                  (74 + 41) / 115][Stage 116:=========================================>           (90 + 25) / 115][Stage 116:=============================================>      (101 + 14) / 115][Stage 116:==================================================>  (109 + 6) / 115]                                                                                [Stage 117:==================================>                  (75 + 41) / 116][Stage 117:========================================>            (89 + 27) / 116][Stage 117:===========================================>         (96 + 20) / 116][Stage 117:=================================================>   (109 + 7) / 116][Stage 117:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.594673105 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  161  OR  partitionIndex = 175 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387719289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (58 + 55) / 113][Stage 118:=============================>                       (63 + 50) / 113][Stage 118:====================================>                (78 + 35) / 113][Stage 118:===========================================>         (93 + 20) / 113][Stage 118:=================================================>   (105 + 8) / 113]                                                                                [Stage 119:============================>                        (61 + 53) / 114][Stage 119:=================================>                   (72 + 42) / 114][Stage 119:=======================================>             (86 + 28) / 114][Stage 119:================================================>    (105 + 9) / 114][Stage 119:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.340591501 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  91  OR  partitionIndex = 105 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.387291868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (59 + 54) / 113][Stage 120:==============================>                      (64 + 49) / 113][Stage 120:=====================================>               (79 + 34) / 113][Stage 120:==============================================>     (101 + 12) / 113][Stage 120:====================================================>(111 + 2) / 113]                                                                                [Stage 121:============================>                        (61 + 53) / 114][Stage 121:================================>                    (69 + 45) / 114][Stage 121:=======================================>             (86 + 28) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.197826631 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  135  OR  partitionIndex = 136 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.399749868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (61 + 59) / 120][Stage 122:================================>                    (73 + 47) / 120][Stage 122:========================================>            (92 + 28) / 120][Stage 122:=================================================>   (112 + 8) / 120]                                                                                [Stage 123:===========================>                         (62 + 59) / 121][Stage 123:================================>                    (75 + 46) / 121][Stage 123:==========================================>          (97 + 24) / 121][Stage 123:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.070974427 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  157  OR  partitionIndex = 171 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.390316431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 124:==========================>                          (60 + 60) / 120][Stage 124:============================>                        (65 + 55) / 120][Stage 124:======================================>              (88 + 32) / 120][Stage 124:============================================>       (102 + 18) / 120][Stage 124:==================================================>  (115 + 5) / 120]                                                                                [Stage 125:===========================>                         (63 + 58) / 121][Stage 125:==================================>                  (78 + 43) / 121][Stage 125:========================================>            (93 + 28) / 121][Stage 125:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.185268259 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  83  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.384736902 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:============================>                        (60 + 53) / 113][Stage 126:==================================>                  (73 + 40) / 113][Stage 126:==============================================>     (102 + 11) / 113][Stage 126:===================================================> (110 + 3) / 113]                                                                                [Stage 127:=============================>                       (63 + 51) / 114][Stage 127:===================================>                 (77 + 37) / 114][Stage 127:==============================================>     (101 + 13) / 114]                                                                                Time elapsed: 3.076642748 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  173  OR  partitionIndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372215939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (70 + 45) / 115][Stage 128:======================================>              (83 + 32) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:================================================>    (106 + 9) / 115][Stage 128:===================================================> (112 + 3) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:==============================>                      (67 + 49) / 116][Stage 129:======================================>              (84 + 32) / 116][Stage 129:============================================>        (98 + 18) / 116][Stage 129:=================================================>   (109 + 7) / 116][Stage 129:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.322303524 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  122  OR  partitionIndex = 123 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.404595014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (60 + 60) / 120][Stage 130:==============================>                      (69 + 51) / 120][Stage 130:====================================>                (83 + 37) / 120][Stage 130:==============================================>     (108 + 12) / 120][Stage 130:===================================================> (117 + 3) / 120]                                                                                [Stage 131:============================>                        (65 + 56) / 121][Stage 131:===================================>                 (80 + 41) / 121][Stage 131:==========================================>          (96 + 25) / 121][Stage 131:==================================================>  (116 + 5) / 121][Stage 131:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.370904362 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  62  OR  partitionIndex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.374213922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:================================>                    (73 + 45) / 118][Stage 132:=======================================>             (87 + 31) / 118][Stage 132:============================================>       (101 + 17) / 118][Stage 132:====================================================>(116 + 2) / 118]                                                                                [Stage 133:=================================>                   (76 + 43) / 119][Stage 133:======================================>              (86 + 33) / 119][Stage 133:===========================================>         (97 + 22) / 119][Stage 133:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.210970703 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  85  OR  partitionIndex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381891194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=============================>                       (64 + 51) / 115][Stage 134:===================================>                 (76 + 39) / 115][Stage 134:===========================================>         (94 + 21) / 115][Stage 134:================================================>    (106 + 9) / 115]                                                                                [Stage 135:====================================>                (79 + 37) / 116][Stage 135:========================================>            (89 + 27) / 116][Stage 135:==============================================>     (103 + 13) / 116][Stage 135:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.655681707 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.40316939 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 61) / 121][Stage 136:============================>                        (66 + 55) / 121][Stage 136:===================================>                 (82 + 39) / 121][Stage 136:===============================================>    (110 + 11) / 121][Stage 136:====================================================>(120 + 1) / 121]                                                                                [Stage 137:==========================>                          (61 + 61) / 122][Stage 137:===========================>                         (64 + 58) / 122][Stage 137:===============================>                     (72 + 50) / 122][Stage 137:=========================================>           (96 + 26) / 122][Stage 137:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.104948313 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  69  OR  partitionIndex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.336344535 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 138:======================================>              (83 + 32) / 115][Stage 138:=============================================>       (99 + 16) / 115][Stage 138:==================================================>  (109 + 6) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:======================================>              (85 + 31) / 116][Stage 139:==========================================>          (93 + 23) / 116][Stage 139:================================================>    (107 + 9) / 116][Stage 139:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.967543133 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349376517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 140:>                                                      (0 + 0) / 113][Stage 140:==================================>                  (74 + 39) / 113][Stage 140:=======================================>             (84 + 29) / 113][Stage 140:=============================================>       (97 + 16) / 113][Stage 140:===================================================> (110 + 3) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:=================================>                   (73 + 41) / 114][Stage 141:=======================================>             (86 + 28) / 114][Stage 141:============================================>        (96 + 18) / 114][Stage 141:=================================================>   (106 + 8) / 114][Stage 141:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.036223286 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  123  OR  partitionIndex = 137 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360211315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:=================================>                   (75 + 43) / 118][Stage 142:=========================================>           (93 + 25) / 118][Stage 142:================================================>    (109 + 9) / 118][Stage 142:====================================================>(117 + 1) / 118]                                                                                [Stage 143:================================>                    (73 + 46) / 119][Stage 143:==================================>                  (78 + 41) / 119][Stage 143:===========================================>         (97 + 22) / 119][Stage 143:================================================>    (110 + 9) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.150177916 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  62  OR  partitionIndex = 63 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.334288131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 144:======================================>              (83 + 32) / 115][Stage 144:========================================>            (88 + 27) / 115][Stage 144:=============================================>       (99 + 16) / 115][Stage 144:=================================================>   (108 + 7) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:======================================>              (84 + 32) / 116][Stage 145:=========================================>           (90 + 26) / 116][Stage 145:=============================================>       (99 + 17) / 116][Stage 145:==================================================>  (111 + 5) / 116][Stage 145:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.122352824 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  233  OR  partitionIndex = 234 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.392092568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:==============================>                      (64 + 49) / 113][Stage 146:======================================>              (83 + 30) / 113][Stage 146:==============================================>     (102 + 11) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:================================>                    (70 + 44) / 114][Stage 147:=======================================>             (85 + 29) / 114][Stage 147:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.966986814 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  33  OR  partitionIndex = 47 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.349795355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==================================>                  (74 + 39) / 113][Stage 148:========================================>            (86 + 27) / 113][Stage 148:==========================================>          (91 + 22) / 113][Stage 148:==============================================>     (100 + 13) / 113][Stage 148:===================================================> (110 + 3) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:=================================>                   (73 + 41) / 114][Stage 149:=======================================>             (85 + 29) / 114][Stage 149:=============================================>       (98 + 16) / 114][Stage 149:=================================================>   (107 + 7) / 114][Stage 149:===================================================> (111 + 3) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.637692411 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  102  OR  partitionIndex = 103 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.360966794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:===================================>                 (79 + 39) / 118][Stage 150:=======================================>             (89 + 29) / 118][Stage 150:============================================>        (98 + 20) / 118][Stage 150:==================================================>  (113 + 5) / 118][Stage 150:====================================================>(117 + 1) / 118]                                                                                [Stage 151:=================================>                   (75 + 44) / 119][Stage 151:====================================>                (81 + 38) / 119][Stage 151:========================================>            (92 + 27) / 119][Stage 151:===============================================>    (109 + 10) / 119][Stage 151:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.589401043 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  95  OR  partitionIndex = 109 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.485440565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (61 + 60) / 121][Stage 152:============================>                        (65 + 56) / 121][Stage 152:=====================================>               (85 + 36) / 121][Stage 152:===============================================>    (110 + 11) / 121][Stage 152:====================================================>(119 + 2) / 121]                                                                                [Stage 153:==========================>                          (61 + 61) / 122][Stage 153:============================>                        (65 + 57) / 122][Stage 153:==============================>                      (71 + 51) / 122][Stage 153:=========================================>           (95 + 27) / 122][Stage 153:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.292242672 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  81  OR  partitionIndex = 82 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.35312776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==================================>                  (73 + 40) / 113][Stage 154:======================================>              (83 + 30) / 113][Stage 154:============================================>        (94 + 19) / 113][Stage 154:===============================================>    (103 + 10) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:======================================>              (83 + 31) / 114][Stage 155:=========================================>           (89 + 25) / 114][Stage 155:==============================================>      (99 + 15) / 114][Stage 155:=================================================>   (107 + 7) / 114][Stage 155:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.098432479 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  113  OR  partitionIndex = 114 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.379700884 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===============================>                     (68 + 47) / 115][Stage 156:=====================================>               (82 + 33) / 115][Stage 156:==============================================>     (103 + 12) / 115][Stage 156:===================================================> (112 + 3) / 115]                                                                                [Stage 157:===============================>                     (70 + 46) / 116][Stage 157:========================================>            (88 + 28) / 116][Stage 157:=============================================>      (101 + 15) / 116][Stage 157:==================================================>  (111 + 5) / 116][Stage 157:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.963332185 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  70  OR  partitionIndex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.340663957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 158:======================================>              (83 + 32) / 115][Stage 158:=========================================>           (89 + 26) / 115][Stage 158:===============================================>    (105 + 10) / 115]                                                                                [Stage 159:======================================>              (84 + 32) / 116][Stage 159:==========================================>          (94 + 22) / 116][Stage 159:=================================================>   (108 + 8) / 116][Stage 159:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.622796683 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  221  OR  partitionIndex = 235 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.398042554 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:==============================>                      (69 + 52) / 121][Stage 160:========================================>            (92 + 29) / 121][Stage 160:=============================================>      (105 + 16) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:=============================>                       (69 + 53) / 122][Stage 161:======================================>              (88 + 34) / 122][Stage 161:===========================================>        (103 + 19) / 122][Stage 161:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.226151322 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  109  OR  partitionIndex = 110 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.386809815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 162:============================>                        (60 + 53) / 113][Stage 162:===============================>                     (68 + 45) / 113][Stage 162:======================================>              (82 + 31) / 113][Stage 162:=================================================>   (106 + 7) / 113][Stage 162:====================================================>(111 + 2) / 113]                                                                                [Stage 163:===========================>                         (59 + 55) / 114][Stage 163:================================>                    (70 + 44) / 114][Stage 163:=========================================>           (89 + 25) / 114][Stage 163:==============================================>      (99 + 15) / 114][Stage 163:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.426648955 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  105  OR  partitionIndex = 119 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.365934098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==============================>                      (66 + 49) / 115][Stage 164:====================================>                (79 + 36) / 115][Stage 164:==============================================>     (102 + 13) / 115][Stage 164:==================================================>  (110 + 5) / 115]                                                                                [Stage 165:====================================>                (79 + 37) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:================================================>    (107 + 9) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.804430078 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  29  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.367724242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (73 + 42) / 115][Stage 166:==========================================>          (92 + 23) / 115][Stage 166:==============================================>     (103 + 12) / 115][Stage 166:===================================================> (112 + 3) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:=================================>                   (74 + 42) / 116][Stage 167:=====================================>               (83 + 33) / 116][Stage 167:==============================================>     (104 + 12) / 116][Stage 167:==================================================>  (111 + 5) / 116][Stage 167:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.231214451 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  60  OR  partitionIndex = 68 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.358577304 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (80 + 33) / 113][Stage 168:=========================================>           (88 + 25) / 113][Stage 168:=============================================>       (96 + 17) / 113][Stage 168:=================================================>   (106 + 7) / 113]                                                                                [Stage 169:===================================>                 (76 + 38) / 114][Stage 169:=========================================>           (90 + 24) / 114][Stage 169:==============================================>     (101 + 13) / 114][Stage 169:=================================================>   (107 + 7) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.048909682 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  159  OR  partitionIndex = 173 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.372067647 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===================================>                 (77 + 38) / 115][Stage 170:======================================>              (83 + 32) / 115][Stage 170:=============================================>      (101 + 14) / 115][Stage 170:====================================================>(113 + 2) / 115]                                                                                [Stage 171:================================>                    (72 + 44) / 116][Stage 171:=====================================>               (83 + 33) / 116][Stage 171:============================================>        (97 + 19) / 116][Stage 171:===============================================>    (105 + 11) / 116][Stage 171:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.093612012 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  132  OR  partitionIndex = 176 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.401520937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 172:==========================>                          (60 + 61) / 121][Stage 172:============================>                        (65 + 56) / 121][Stage 172:===================================>                 (81 + 40) / 121][Stage 172:==========================================>          (97 + 24) / 121][Stage 172:====================================================>(120 + 1) / 121]                                                                                [Stage 173:==========================>                          (62 + 60) / 122][Stage 173:=============================>                       (69 + 53) / 122][Stage 173:=====================================>               (87 + 35) / 122][Stage 173:===========================================>        (103 + 19) / 122][Stage 173:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.183386138 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  210  OR  partitionIndex = 211 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.373539929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 174:===============================>                     (69 + 46) / 115][Stage 174:=======================================>             (85 + 30) / 115][Stage 174:=============================================>       (98 + 17) / 115][Stage 174:===================================================> (111 + 4) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:================================>                    (71 + 45) / 116][Stage 175:=======================================>             (87 + 29) / 116][Stage 175:==============================================>     (104 + 12) / 116][Stage 175:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.805758299 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  214  OR  partitionIndex = 215 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.371148204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==============================>                      (67 + 48) / 115][Stage 176:====================================>                (80 + 35) / 115][Stage 176:==============================================>     (102 + 13) / 115][Stage 176:===================================================> (111 + 4) / 115]                                                                                [Stage 177:===================================>                 (78 + 38) / 116][Stage 177:===========================================>         (95 + 21) / 116][Stage 177:================================================>    (107 + 9) / 116][Stage 177:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.801722908 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  107  OR  partitionIndex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.411303151 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==========================>                          (61 + 60) / 121][Stage 178:==============================>                      (69 + 52) / 121][Stage 178:======================================>              (89 + 32) / 121][Stage 178:=================================================>   (114 + 7) / 121]                                                                                [Stage 179:===========================>                         (63 + 59) / 122][Stage 179:===============================>                     (72 + 50) / 122][Stage 179:===========================================>        (101 + 21) / 122][Stage 179:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.147526305 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  90  OR  partitionIndex = 102 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.331869937 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (81 + 34) / 115][Stage 180:==========================================>          (92 + 23) / 115][Stage 180:=============================================>       (99 + 16) / 115][Stage 180:=================================================>   (108 + 7) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:===========================================>         (95 + 21) / 116][Stage 181:==================================================>  (110 + 6) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.821926894 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  177  OR  partitionIndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.435992471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==========================>                          (61 + 60) / 121][Stage 182:==============================>                      (70 + 51) / 121][Stage 182:===================================>                 (81 + 40) / 121][Stage 182:=============================================>      (107 + 14) / 121][Stage 182:====================================================>(119 + 2) / 121]                                                                                [Stage 183:==========================>                          (61 + 61) / 122][Stage 183:=============================>                       (68 + 54) / 122][Stage 183:======================================>              (89 + 33) / 122][Stage 183:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 2.984307262 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  100  OR  partitionIndex = 114 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385900726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 184:============================>                        (60 + 53) / 113][Stage 184:==================================>                  (73 + 40) / 113][Stage 184:=========================================>           (89 + 24) / 113][Stage 184:==============================================>     (100 + 13) / 113][Stage 184:===================================================> (110 + 3) / 113]                                                                                [Stage 185:===========================>                         (60 + 54) / 114][Stage 185:=================================>                   (71 + 43) / 114][Stage 185:=========================================>           (90 + 24) / 114][Stage 185:==================================================>  (109 + 5) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.448331475 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  47  OR  partitionIndex = 48 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.389287812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:=============================>                       (66 + 54) / 120][Stage 186:====================================>                (82 + 38) / 120][Stage 186:===========================================>         (99 + 21) / 120][Stage 186:====================================================>(119 + 1) / 120]                                                                                [Stage 187:==========================>                          (61 + 60) / 121][Stage 187:==============================>                      (69 + 52) / 121][Stage 187:======================================>              (87 + 34) / 121][Stage 187:===========================================>        (101 + 20) / 121][Stage 187:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.033434335 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  175  OR  partitionIndex = 176 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377812712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===================================>                 (77 + 38) / 115][Stage 188:=======================================>             (86 + 29) / 115][Stage 188:=============================================>      (100 + 15) / 115][Stage 188:===================================================> (112 + 3) / 115]                                                                                [Stage 189:================================>                    (72 + 44) / 116][Stage 189:=======================================>             (87 + 29) / 116][Stage 189:=============================================>       (99 + 17) / 116][Stage 189:===============================================>    (106 + 10) / 116][Stage 189:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.038357398 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.393801918 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 61) / 121][Stage 190:============================>                        (65 + 56) / 121][Stage 190:==================================>                  (79 + 42) / 121][Stage 190:=========================================>           (95 + 26) / 121][Stage 190:===================================================> (117 + 4) / 121][Stage 190:====================================================>(120 + 1) / 121]                                                                                [Stage 191:==========================>                          (61 + 61) / 122][Stage 191:============================>                        (66 + 56) / 122][Stage 191:====================================>                (85 + 37) / 122][Stage 191:==================================================>  (116 + 6) / 122][Stage 191:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.194593096 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  190  OR  partitionIndex = 204 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.356806956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:==================================>                  (76 + 42) / 118][Stage 192:======================================>              (86 + 32) / 118][Stage 192:==============================================>     (106 + 12) / 118][Stage 192:====================================================>(116 + 2) / 118]                                                                                [Stage 193:================================>                    (72 + 47) / 119][Stage 193:==================================>                  (78 + 41) / 119][Stage 193:==========================================>          (95 + 24) / 119][Stage 193:==================================================>  (113 + 6) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.97223872 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  151  OR  partitionIndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.381463136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:==================================>                  (77 + 41) / 118][Stage 194:=========================================>           (93 + 25) / 118][Stage 194:=================================================>   (110 + 8) / 118][Stage 194:====================================================>(117 + 1) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:===================================>                 (79 + 40) / 119][Stage 195:===========================================>        (100 + 19) / 119][Stage 195:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.018456253 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  18  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.385884044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (59 + 54) / 113][Stage 196:===============================>                     (68 + 45) / 113][Stage 196:======================================>              (83 + 30) / 113][Stage 196:=================================================>   (105 + 8) / 113]                                                                                [Stage 197:===========================>                         (60 + 54) / 114][Stage 197:==============================>                      (66 + 48) / 114][Stage 197:===========================================>         (94 + 20) / 114][Stage 197:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.099307642 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  66  OR  partitionIndex = 67 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.3603259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==================================>                  (74 + 39) / 113][Stage 198:=========================================>           (89 + 24) / 113][Stage 198:=============================================>       (97 + 16) / 113][Stage 198:===============================================>    (103 + 10) / 113][Stage 198:====================================================>(111 + 2) / 113][Stage 198:====================================================>(112 + 1) / 113]                                                                                [Stage 199:====================================>                (78 + 36) / 114][Stage 199:========================================>            (87 + 27) / 114][Stage 199:=============================================>       (98 + 16) / 114][Stage 199:==================================================>  (108 + 6) / 114][Stage 199:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.200414126 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex =  92  OR  partitionIndex = 93 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data ")}
Time elapsed: 0.377494348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rd d.zipWithIndex.map{case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.c ollect.map(writeToLocal).filter(_ => false).size}
[Stage 200:===========================>                         (59 + 54) / 113][Stage 200:====================================>                (78 + 35) / 113][Stage 200:============================================>        (95 + 18) / 113][Stage 200:==================================================>  (107 + 6) / 113]                                                                                [Stage 201:============================>                        (61 + 53) / 114][Stage 201:==================================>                  (74 + 40) / 114][Stage 201:========================================>            (88 + 26) / 114][Stage 201:=================================================>   (106 + 8) / 114][Stage 201:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.414719498 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 00:32:12 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:37024) dropped. RpcEnv already stopped.
17/05/25 00:32:12 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:37024) dropped. RpcEnv already stopped.

real	10m7.258s
user	11m35.268s
sys	0m39.232s
