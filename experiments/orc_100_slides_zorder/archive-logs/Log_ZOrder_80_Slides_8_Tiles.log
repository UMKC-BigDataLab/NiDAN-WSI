Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 02:17:42 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:17:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:17:57 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:17:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 02:18:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 02:18:10 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525021759-0624).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.533492285 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:===========>                                           (23 + 92) / 115][Stage 0:============================>                          (59 + 56) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:==============================================>        (98 + 17) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:=====================================================> (111 + 4) / 115]                                                                                [Stage 1:==========================>                            (56 + 60) / 116][Stage 1:=============================>                         (62 + 54) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:====================================>                  (78 + 38) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.43219183 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZInd ex<=105", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=105,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.784632734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:==============>                                        (31 + 89) / 120][Stage 2:=====================>                                 (47 + 73) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:============================>                          (63 + 57) / 120][Stage 2:================================>                      (71 + 49) / 120][Stage 2:=====================================>                 (81 + 39) / 120][Stage 2:=======================================>               (87 + 33) / 120][Stage 2:=============================================>        (102 + 18) / 120][Stage 2:====================================================>  (114 + 6) / 120]                                                                                [Stage 3:===========================>                           (61 + 60) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:================================>                      (71 + 50) / 121][Stage 3:=========================================>             (91 + 30) / 121][Stage 3:=================================================>    (111 + 10) / 121][Stage 3:====================================================>  (116 + 5) / 121][Stage 3:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 6.231398523 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIn dex<=157", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=157,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.685516873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:==============================>                        (64 + 51) / 115][Stage 4:================================>                      (67 + 48) / 115][Stage 4:==================================>                    (73 + 42) / 115][Stage 4:=======================================>               (82 + 33) / 115][Stage 4:===========================================>           (91 + 24) / 115][Stage 4:=============================================>         (96 + 19) / 115][Stage 4:================================================>     (103 + 12) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:============================>                          (60 + 56) / 116][Stage 5:==============================>                        (65 + 51) / 116][Stage 5:==================================>                    (72 + 44) / 116][Stage 5:======================================>                (82 + 34) / 116][Stage 5:=========================================>             (88 + 28) / 116][Stage 5:===============================================>      (101 + 15) / 116][Stage 5:==================================================>    (107 + 9) / 116][Stage 5:====================================================>  (110 + 6) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.676518694 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIn dex<=215", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=215,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496017868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:==================================>                    (72 + 43) / 115][Stage 6:===================================>                   (75 + 40) / 115][Stage 6:=======================================>               (83 + 32) / 115][Stage 6:============================================>          (93 + 22) / 115][Stage 6:===============================================>      (101 + 14) / 115][Stage 6:===================================================>   (108 + 7) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:==========================================>            (90 + 26) / 116][Stage 7:=============================================>         (97 + 19) / 116][Stage 7:===============================================>      (101 + 15) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.106925609 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIn dex<=190", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=190,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.544858613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:===================================>                   (73 + 40) / 113][Stage 8:=======================================>               (82 + 31) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:===============================================>       (97 + 16) / 113][Stage 8:=================================================>    (103 + 10) / 113][Stage 8:=====================================================> (110 + 3) / 113]                                                                                [Stage 9:==================================>                    (71 + 43) / 114][Stage 9:=====================================>                 (78 + 36) / 114][Stage 9:========================================>              (83 + 31) / 114][Stage 9:=============================================>         (94 + 20) / 114][Stage 9:====================================================>  (109 + 5) / 114][Stage 9:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.788197623 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZInd ex<=96", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=89 AND partitionZIndex<=96,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.643980808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=============================>                        (63 + 52) / 115][Stage 10:==================================>                   (73 + 42) / 115][Stage 10:======================================>               (83 + 32) / 115][Stage 10:===========================================>          (93 + 22) / 115][Stage 10:==============================================>      (100 + 15) / 115][Stage 10:===============================================>     (102 + 13) / 115][Stage 10:=================================================>    (106 + 9) / 115][Stage 10:=====================================================>(113 + 2) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:===============================>                      (67 + 49) / 116][Stage 11:==================================>                   (75 + 41) / 116][Stage 11:========================================>             (86 + 30) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:==================================================>   (109 + 7) / 116][Stage 11:===================================================>  (110 + 6) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.981773404 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZInd ex<=62", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=55 AND partitionZIndex<=62,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527828964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=====================================>                (79 + 36) / 115][Stage 12:=======================================>              (84 + 31) / 115][Stage 12:==========================================>           (90 + 25) / 115][Stage 12:==============================================>      (101 + 14) / 115][Stage 12:===================================================>  (109 + 6) / 115][Stage 12:====================================================> (112 + 3) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=======================================>              (85 + 31) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:===============================================>     (105 + 11) / 116][Stage 13:===================================================>  (111 + 5) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(114 + 2) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.392997799 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIn dex<=210", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=210,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.515101633 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:===============================>                      (68 + 47) / 115][Stage 14:====================================>                 (78 + 37) / 115][Stage 14:=========================================>            (88 + 27) / 115][Stage 14:==============================================>      (100 + 15) / 115][Stage 14:===================================================>  (110 + 5) / 115][Stage 14:=====================================================>(114 + 1) / 115]                                                                                [Stage 15:==============================>                       (65 + 51) / 116][Stage 15:=====================================>                (81 + 35) / 116][Stage 15:============================================>         (95 + 21) / 116][Stage 15:=============================================>       (100 + 16) / 116][Stage 15:=================================================>    (107 + 9) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:====================================================> (113 + 3) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.916081766 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIn dex<=179", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=179,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539220584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:===========================>                          (58 + 55) / 113][Stage 16:============================>                         (60 + 53) / 113][Stage 16:===============================>                      (66 + 47) / 113][Stage 16:====================================>                 (76 + 37) / 113][Stage 16:==============================================>       (97 + 16) / 113][Stage 16:====================================================> (110 + 3) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:===========================>                          (59 + 55) / 114][Stage 17:=============================>                        (63 + 51) / 114][Stage 17:====================================>                 (76 + 38) / 114][Stage 17:============================================>         (94 + 20) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:===================================================>  (108 + 6) / 114][Stage 17:====================================================> (110 + 4) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.282326368 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZInd ex<=42", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=42,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511224995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:=============================>                        (62 + 51) / 113][Stage 18:====================================>                 (76 + 37) / 113][Stage 18:==========================================>           (88 + 25) / 113][Stage 18:=============================================>        (96 + 17) / 113][Stage 18:===================================================>  (107 + 6) / 113][Stage 18:=====================================================>(111 + 2) / 113]                                                                                [Stage 19:===========================>                          (59 + 55) / 114][Stage 19:==================================>                   (73 + 41) / 114][Stage 19:======================================>               (82 + 32) / 114][Stage 19:==============================================>       (98 + 16) / 114][Stage 19:===================================================>  (109 + 5) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.102013707 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIn dex<=159", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=159,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503662685 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:====================================>                 (77 + 38) / 115][Stage 20:==========================================>           (90 + 25) / 115][Stage 20:==============================================>       (99 + 16) / 115][Stage 20:====================================================> (111 + 4) / 115]                                                                                [Stage 21:================================>                     (69 + 47) / 116][Stage 21:=======================================>              (85 + 31) / 116][Stage 21:==============================================>      (102 + 14) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.667829148 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIn dex<=176", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=169 AND partitionZIndex<=176,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483042905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:===============================>                      (67 + 48) / 115][Stage 22:======================================>               (82 + 33) / 115][Stage 22:==============================================>      (100 + 15) / 115][Stage 22:=====================================================>(114 + 1) / 115]                                                                                [Stage 23:=================================>                    (73 + 43) / 116][Stage 23:========================================>             (88 + 28) / 116][Stage 23:==============================================>      (102 + 14) / 116][Stage 23:===================================================>  (110 + 6) / 116][Stage 23:=====================================================>(114 + 2) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.358492809 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZInd ex<=90", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=90,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429675683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:=====================================>                (79 + 36) / 115][Stage 24:========================================>             (86 + 29) / 115][Stage 24:===============================================>     (103 + 12) / 115][Stage 24:====================================================> (112 + 3) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:======================================>               (83 + 33) / 116][Stage 25:============================================>         (95 + 21) / 116][Stage 25:================================================>    (106 + 10) / 116][Stage 25:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.11462116 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIn dex<=170", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=170,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46107534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:===================================>                  (77 + 41) / 118][Stage 26:===========================================>          (94 + 24) / 118][Stage 26:====================================================> (114 + 4) / 118][Stage 26:=====================================================>(117 + 1) / 118]                                                                                [Stage 27:==================================>                   (77 + 42) / 119][Stage 27:======================================>               (84 + 35) / 119][Stage 27:===============================================>     (106 + 13) / 119][Stage 27:====================================================> (115 + 4) / 119][Stage 27:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.541347141 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIn dex<=183", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=183,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.591611312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:=============================>                        (67 + 54) / 121][Stage 28:=======================================>              (89 + 32) / 121][Stage 28:===============================================>     (109 + 12) / 121][Stage 28:=====================================================>(120 + 1) / 121]                                                                                [Stage 29:===========================>                          (63 + 59) / 122][Stage 29:===============================>                      (71 + 51) / 122][Stage 29:==========================================>           (97 + 25) / 122][Stage 29:==================================================>   (114 + 8) / 122][Stage 29:===================================================>  (116 + 6) / 122][Stage 29:===================================================>  (117 + 5) / 122][Stage 29:====================================================> (118 + 4) / 122][Stage 29:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 5.879049982 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIn dex<=173", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=173,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.539998114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:===============================>                      (69 + 51) / 120][Stage 30:========================================>             (90 + 30) / 120][Stage 30:================================================>    (109 + 11) / 120][Stage 30:====================================================> (116 + 4) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:===============================>                      (70 + 51) / 121][Stage 31:=========================================>            (94 + 27) / 121][Stage 31:=================================================>    (112 + 9) / 121][Stage 31:=====================================================>(119 + 2) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.064524108 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIn dex<=109", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=102 AND partitionZIndex<=109,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450537237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:====================================>                 (79 + 39) / 118][Stage 32:============================================>        (100 + 18) / 118][Stage 32:===============================================>     (106 + 12) / 118][Stage 32:====================================================> (114 + 4) / 118][Stage 32:====================================================> (115 + 3) / 118][Stage 32:=====================================================>(116 + 2) / 118]                                                                                [Stage 33:=================================>                    (74 + 45) / 119][Stage 33:====================================>                 (81 + 38) / 119][Stage 33:==========================================>           (93 + 26) / 119][Stage 33:=============================================>       (103 + 16) / 119][Stage 33:===================================================>  (113 + 6) / 119][Stage 33:====================================================> (116 + 3) / 119][Stage 33:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 6.29556605 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIn dex<=214", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=214,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.472123795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:=====================================>                (79 + 34) / 113][Stage 34:===========================================>          (90 + 23) / 113][Stage 34:===============================================>     (101 + 12) / 113][Stage 34:=====================================================>(111 + 2) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===================================>                  (74 + 40) / 114][Stage 35:=======================================>              (83 + 31) / 114][Stage 35:=============================================>        (95 + 19) / 114][Stage 35:===============================================>     (103 + 11) / 114][Stage 35:====================================================> (110 + 4) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.405952685 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIn dex<=219", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=219,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506595284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:===========================>                          (61 + 60) / 121][Stage 36:==============================>                       (69 + 52) / 121][Stage 36:=====================================>                (84 + 37) / 121][Stage 36:============================================>         (99 + 22) / 121][Stage 36:================================================>    (110 + 11) / 121][Stage 36:================================================>    (111 + 10) / 121][Stage 36:===================================================>  (115 + 6) / 121][Stage 36:===================================================>  (116 + 5) / 121][Stage 36:=====================================================>(120 + 1) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:==============================>                       (69 + 53) / 122][Stage 37:===================================>                  (81 + 41) / 122][Stage 37:==============================================>      (107 + 15) / 122][Stage 37:====================================================> (119 + 3) / 122][Stage 37:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 6.211265432 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZInd ex<=52", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=45 AND partitionZIndex<=52,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.511075338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:===============================>                      (69 + 51) / 120][Stage 38:========================================>             (89 + 31) / 120][Stage 38:============================================>        (100 + 20) / 120][Stage 38:====================================================> (116 + 4) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:=============================>                        (65 + 56) / 121][Stage 39:==================================>                   (78 + 43) / 121][Stage 39:=============================================>       (104 + 17) / 121][Stage 39:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.512347835 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIn dex<=228", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=221 AND partitionZIndex<=228,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508831209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (60 + 60) / 120][Stage 40:===========================>                          (62 + 58) / 120][Stage 40:==================================>                   (77 + 43) / 120][Stage 40:============================================>         (98 + 22) / 120][Stage 40:===================================================>  (114 + 6) / 120]                                                                                [Stage 41:===========================>                          (62 + 59) / 121][Stage 41:=================================>                    (76 + 45) / 121][Stage 41:==========================================>           (96 + 25) / 121][Stage 41:==================================================>   (113 + 8) / 121][Stage 41:=====================================================>(119 + 2) / 121][Stage 41:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.428318044 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIn dex<=142", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=142,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416557121 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:======================================>               (83 + 32) / 115][Stage 42:===========================================>          (93 + 22) / 115][Stage 42:===============================================>     (102 + 13) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (85 + 31) / 116][Stage 43:=========================================>            (90 + 26) / 116][Stage 43:===============================================>     (104 + 12) / 116][Stage 43:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.792956844 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZInd ex<=45", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=38 AND partitionZIndex<=45,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460409705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:===================================>                  (75 + 38) / 113][Stage 44:==========================================>           (89 + 24) / 113][Stage 44:============================================>         (93 + 20) / 113][Stage 44:================================================>    (103 + 10) / 113][Stage 44:=====================================================>(111 + 2) / 113][Stage 44:=====================================================>(112 + 1) / 113]                                                                                [Stage 45:====================================>                 (76 + 38) / 114][Stage 45:======================================>               (82 + 32) / 114][Stage 45:===========================================>          (91 + 23) / 114][Stage 45:===============================================>     (103 + 11) / 114][Stage 45:===================================================>  (109 + 5) / 114][Stage 45:====================================================> (110 + 4) / 114][Stage 45:====================================================> (111 + 3) / 114][Stage 45:=====================================================>(112 + 2) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 7.036964402 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIn dex<=145", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=145,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463274613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:===========================>                          (61 + 59) / 120][Stage 46:==============================>                       (67 + 53) / 120][Stage 46:====================================>                 (80 + 40) / 120][Stage 46:============================================>        (101 + 19) / 120][Stage 46:====================================================> (116 + 4) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:===============================>                      (71 + 50) / 121][Stage 47:==========================================>           (95 + 26) / 121][Stage 47:===================================================>  (116 + 5) / 121][Stage 47:====================================================> (118 + 3) / 121][Stage 47:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.106414797 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIn dex<=160", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=160,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394627915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:=====================================>                (80 + 35) / 115][Stage 48:=========================================>            (89 + 26) / 115][Stage 48:==============================================>       (99 + 16) / 115][Stage 48:===================================================>  (110 + 5) / 115][Stage 48:=====================================================>(114 + 1) / 115]                                                                                [Stage 49:======================================>               (82 + 34) / 116][Stage 49:===========================================>          (93 + 23) / 116][Stage 49:=================================================>    (107 + 9) / 116][Stage 49:====================================================> (112 + 4) / 116][Stage 49:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.058883611 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZInde x<=14", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=7 AND partitionZIndex<=14,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41743632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:=================================>                    (70 + 43) / 113][Stage 50:======================================>               (81 + 32) / 113][Stage 50:============================================>         (94 + 19) / 113][Stage 50:================================================>    (103 + 10) / 113][Stage 50:====================================================> (109 + 4) / 113]                                                                                [Stage 51:====================================>                 (77 + 37) / 114][Stage 51:========================================>             (86 + 28) / 114][Stage 51:=============================================>        (97 + 17) / 114][Stage 51:================================================>    (104 + 10) / 114][Stage 51:=================================================>    (105 + 9) / 114][Stage 51:==================================================>   (107 + 7) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 8.726258159 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIn dex<=229", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=229,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.488524203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:==========================>                           (60 + 61) / 121][Stage 52:==============================>                       (68 + 53) / 121][Stage 52:=====================================>                (84 + 37) / 121][Stage 52:=============================================>       (105 + 16) / 121][Stage 52:==================================================>   (113 + 8) / 121]                                                                                [Stage 53:===========================>                          (61 + 61) / 122][Stage 53:=============================>                        (67 + 55) / 122][Stage 53:=======================================>              (89 + 33) / 122][Stage 53:=============================================>       (105 + 17) / 122][Stage 53:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.451390002 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZInd ex<=26", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=19 AND partitionZIndex<=26,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465507735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:============================>                         (60 + 53) / 113][Stage 54:===============================>                      (66 + 47) / 113][Stage 54:=======================================>              (83 + 30) / 113][Stage 54:===================================================>  (108 + 5) / 113]                                                                                [Stage 55:=============================>                        (62 + 52) / 114][Stage 55:===================================>                  (74 + 40) / 114][Stage 55:==============================================>      (100 + 14) / 114][Stage 55:====================================================> (110 + 4) / 114][Stage 55:=====================================================>(112 + 2) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.262131223 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIn dex<=166", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=159 AND partitionZIndex<=166,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409204464 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:================================>                     (72 + 46) / 118][Stage 56:===================================>                  (77 + 41) / 118][Stage 56:======================================>               (84 + 34) / 118][Stage 56:=========================================>            (91 + 27) / 118][Stage 56:===============================================>     (106 + 12) / 118][Stage 56:=====================================================>(117 + 1) / 118]                                                                                [Stage 57:=================================>                    (73 + 46) / 119][Stage 57:==================================>                   (76 + 43) / 119][Stage 57:=======================================>              (86 + 33) / 119][Stage 57:===========================================>          (95 + 24) / 119][Stage 57:===============================================>     (107 + 12) / 119]                                                                                Time elapsed: 3.846136201 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZInd ex<=100", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=100,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421145047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:===============================>                      (67 + 48) / 115][Stage 58:=======================================>              (85 + 30) / 115][Stage 58:==============================================>      (101 + 14) / 115][Stage 58:====================================================> (112 + 3) / 115]                                                                                [Stage 59:===============================>                      (68 + 48) / 116][Stage 59:=======================================>              (84 + 32) / 116][Stage 59:===============================================>     (104 + 12) / 116][Stage 59:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.843515601 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZInde x<=10", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=10,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.543624102 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:>                                                       (0 + 0) / 121][Stage 60:==========================>                           (60 + 61) / 121][Stage 60:=============================>                        (65 + 56) / 121][Stage 60:==================================>                   (78 + 43) / 121][Stage 60:=============================================>       (103 + 18) / 121][Stage 60:===================================================>  (115 + 6) / 121][Stage 60:=====================================================>(120 + 1) / 121]                                                                                [Stage 61:===========================>                          (61 + 61) / 122][Stage 61:============================>                         (64 + 58) / 122][Stage 61:===================================>                  (81 + 41) / 122][Stage 61:=============================================>       (104 + 18) / 122][Stage 61:=====================================================>(120 + 2) / 122][Stage 61:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.735421428 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZInd ex<=53", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=53,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465633811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:============================>                         (60 + 53) / 113][Stage 62:===============================>                      (66 + 47) / 113][Stage 62:===========================================>          (90 + 23) / 113][Stage 62:==============================================>      (100 + 13) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:============================>                         (61 + 53) / 114][Stage 63:===================================>                  (74 + 40) / 114][Stage 63:========================================>             (86 + 28) / 114][Stage 63:================================================>    (104 + 10) / 114][Stage 63:====================================================> (110 + 4) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.60277266 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIn dex<=212", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=205 AND partitionZIndex<=212,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452585521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:===========================>                          (60 + 60) / 120][Stage 64:==============================>                       (68 + 52) / 120][Stage 64:=======================================>              (87 + 33) / 120][Stage 64:================================================>    (110 + 10) / 120][Stage 64:=====================================================>(119 + 1) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:==============================>                       (68 + 53) / 121][Stage 65:=====================================>                (84 + 37) / 121][Stage 65:============================================>        (102 + 19) / 121][Stage 65:===================================================>  (115 + 6) / 121][Stage 65:====================================================> (118 + 3) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.52279768 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIn dex<=138", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=131 AND partitionZIndex<=138,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456859315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===========================>                          (61 + 60) / 121][Stage 66:==============================>                       (69 + 52) / 121][Stage 66:========================================>             (90 + 31) / 121][Stage 66:===================================================>  (115 + 6) / 121]                                                                                [Stage 67:===========================>                          (62 + 60) / 122][Stage 67:============================>                         (65 + 57) / 122][Stage 67:==================================>                   (79 + 43) / 122][Stage 67:===========================================>          (99 + 23) / 122][Stage 67:===================================================>  (116 + 6) / 122][Stage 67:=====================================================>(120 + 2) / 122][Stage 67:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 5.758426835 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIn dex<=230", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=223 AND partitionZIndex<=230,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428007667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:============================>                         (59 + 54) / 113][Stage 68:===============================>                      (66 + 47) / 113][Stage 68:============================================>         (93 + 20) / 113][Stage 68:====================================================> (109 + 4) / 113][Stage 68:=====================================================>(111 + 2) / 113]                                                                                [Stage 69:============================>                         (60 + 54) / 114][Stage 69:==============================>                       (64 + 50) / 114][Stage 69:======================================>               (81 + 33) / 114][Stage 69:==============================================>      (100 + 14) / 114][Stage 69:==================================================>   (106 + 8) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.94021338 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIn dex<=169", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=162 AND partitionZIndex<=169,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427145443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:=================================>                    (71 + 44) / 115][Stage 70:=======================================>              (85 + 30) / 115][Stage 70:==============================================>       (99 + 16) / 115][Stage 70:====================================================> (112 + 3) / 115]                                                                                [Stage 71:================================>                     (69 + 47) / 116][Stage 71:======================================>               (83 + 33) / 116][Stage 71:=============================================>       (100 + 16) / 116][Stage 71:=================================================>    (107 + 9) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.877279995 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZInd ex<=29", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=22 AND partitionZIndex<=29,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374354426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:=======================================>              (85 + 30) / 115][Stage 72:============================================>         (94 + 21) / 115][Stage 72:===============================================>     (102 + 13) / 115][Stage 72:===================================================>  (110 + 5) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=======================================>              (84 + 32) / 116][Stage 73:==========================================>           (91 + 25) / 116][Stage 73:================================================>    (106 + 10) / 116][Stage 73:==================================================>   (109 + 7) / 116][Stage 73:====================================================> (113 + 3) / 116][Stage 73:=====================================================>(114 + 2) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 6.984928104 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIn dex<=223", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=216 AND partitionZIndex<=223,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393842656 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:==================================>                   (72 + 41) / 113][Stage 74:========================================>             (85 + 28) / 113][Stage 74:===========================================>          (90 + 23) / 113][Stage 74:===============================================>      (99 + 14) / 113][Stage 74:==================================================>   (106 + 7) / 113]                                                                                [Stage 75:====================================>                 (78 + 36) / 114][Stage 75:===========================================>          (92 + 22) / 114][Stage 75:==============================================>      (100 + 14) / 114][Stage 75:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.019427482 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZInd ex<=103", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=103,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43278194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:=============================>                        (65 + 55) / 120][Stage 76:===================================>                  (78 + 42) / 120][Stage 76:===========================================>          (96 + 24) / 120][Stage 76:===============================================>     (108 + 12) / 120][Stage 76:====================================================> (116 + 4) / 120]                                                                                [Stage 77:===========================>                          (61 + 60) / 121][Stage 77:==============================>                       (69 + 52) / 121][Stage 77:========================================>             (90 + 31) / 121][Stage 77:===========================================>         (100 + 21) / 121][Stage 77:================================================>    (111 + 10) / 121][Stage 77:====================================================> (117 + 4) / 121][Stage 77:=====================================================>(119 + 2) / 121][Stage 77:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.733967268 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIn dex<=224", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=224,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411831681 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:==================================>                   (75 + 43) / 118][Stage 78:==========================================>           (92 + 26) / 118][Stage 78:===============================================>     (105 + 13) / 118][Stage 78:====================================================> (115 + 3) / 118]                                                                                [Stage 79:=================================>                    (73 + 46) / 119][Stage 79:====================================>                 (80 + 39) / 119][Stage 79:========================================>             (90 + 29) / 119][Stage 79:================================================>    (109 + 10) / 119][Stage 79:====================================================> (115 + 4) / 119][Stage 79:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.639006493 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZInd ex<=69", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=62 AND partitionZIndex<=69,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355406991 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:=====================================>                (80 + 35) / 115][Stage 80:========================================>             (87 + 28) / 115][Stage 80:===============================================>     (104 + 11) / 115][Stage 80:===================================================>  (110 + 5) / 115][Stage 80:=====================================================>(114 + 1) / 115]                                                                                [Stage 81:========================================>             (87 + 29) / 116][Stage 81:=============================================>       (100 + 16) / 116][Stage 81:==================================================>   (109 + 7) / 116][Stage 81:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.246184613 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZInd ex<=58", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=58,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359395285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:======================================>               (83 + 32) / 115][Stage 82:=========================================>            (88 + 27) / 115][Stage 82:=============================================>        (97 + 18) / 115][Stage 82:==================================================>   (107 + 8) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:=======================================>              (84 + 32) / 116][Stage 83:===========================================>          (94 + 22) / 116][Stage 83:===============================================>     (103 + 13) / 116][Stage 83:===================================================>  (111 + 5) / 116][Stage 83:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.194993372 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIn dex<=225", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=218 AND partitionZIndex<=225,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416286813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:=============================>                        (61 + 52) / 113][Stage 84:==================================>                   (73 + 40) / 113][Stage 84:===========================================>          (91 + 22) / 113][Stage 84:==================================================>   (105 + 8) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:============================>                         (60 + 54) / 114][Stage 85:==============================>                       (64 + 50) / 114][Stage 85:=====================================>                (80 + 34) / 114][Stage 85:============================================>         (94 + 20) / 114][Stage 85:===================================================>  (108 + 6) / 114][Stage 85:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.84804937 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZInd ex<=91", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=84 AND partitionZIndex<=91,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394310371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:==============================>                       (65 + 50) / 115][Stage 86:====================================>                 (78 + 37) / 115][Stage 86:==========================================>           (90 + 25) / 115][Stage 86:====================================================> (112 + 3) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:=================================>                    (72 + 44) / 116][Stage 87:=======================================>              (85 + 31) / 116][Stage 87:===============================================>     (103 + 13) / 116][Stage 87:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.837582063 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIn dex<=182", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=175 AND partitionZIndex<=182,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368599496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:======================================>               (81 + 34) / 115][Stage 88:========================================>             (86 + 29) / 115][Stage 88:==============================================>      (100 + 15) / 115][Stage 88:====================================================> (111 + 4) / 115]                                                                                [Stage 89:=======================================>              (84 + 32) / 116][Stage 89:=============================================>        (97 + 19) / 116][Stage 89:===================================================>  (110 + 6) / 116][Stage 89:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.807970207 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIn dex<=208", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=208,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370311141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:==================================>                   (73 + 40) / 113][Stage 90:========================================>             (85 + 28) / 113][Stage 90:============================================>         (93 + 20) / 113][Stage 90:================================================>    (103 + 10) / 113][Stage 90:====================================================> (109 + 4) / 113]                                                                                [Stage 91:====================================>                 (76 + 38) / 114][Stage 91:=========================================>            (87 + 27) / 114][Stage 91:=============================================>        (96 + 18) / 114][Stage 91:==================================================>   (107 + 7) / 114][Stage 91:===================================================>  (109 + 5) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.22905015 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIn dex<=167", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=160 AND partitionZIndex<=167,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35945396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:=====================================>                (80 + 35) / 115][Stage 92:=========================================>            (88 + 27) / 115][Stage 92:==============================================>       (99 + 16) / 115][Stage 92:==================================================>   (107 + 8) / 115][Stage 92:=====================================================>(113 + 2) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:=======================================>              (84 + 32) / 116][Stage 93:==========================================>           (92 + 24) / 116][Stage 93:=================================================>    (107 + 9) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.02444765 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIn dex<=122", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=122,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368790194 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:==================================>                   (72 + 41) / 113][Stage 94:========================================>             (85 + 28) / 113][Stage 94:============================================>         (94 + 19) / 113][Stage 94:===================================================>  (107 + 6) / 113][Stage 94:=====================================================>(111 + 2) / 113]                                                                                [Stage 95:====================================>                 (78 + 36) / 114][Stage 95:============================================>         (93 + 21) / 114][Stage 95:===============================================>     (102 + 12) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.96607677 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIn dex<=158", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=151 AND partitionZIndex<=158,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433855372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==========================>                           (60 + 61) / 121][Stage 96:=============================>                        (67 + 54) / 121][Stage 96:=====================================>                (84 + 37) / 121][Stage 96:===============================================>     (108 + 13) / 121]                                                                                [Stage 97:===========================>                          (62 + 60) / 122][Stage 97:=============================>                        (67 + 55) / 122][Stage 97:========================================>             (91 + 31) / 122][Stage 97:==================================================>   (113 + 9) / 122][Stage 97:=====================================================>(120 + 2) / 122][Stage 97:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.142253998 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIn dex<=110", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=110,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418946197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:=============================>                        (65 + 55) / 120][Stage 98:==================================>                   (77 + 43) / 120][Stage 98:=============================================>       (103 + 17) / 120][Stage 98:==================================================>   (112 + 8) / 120]                                                                                [Stage 99:============================>                         (63 + 58) / 121][Stage 99:==================================>                   (78 + 43) / 121][Stage 99:==========================================>           (95 + 26) / 121][Stage 99:==================================================>   (114 + 7) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.466470095 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZInd ex<=54", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=54,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373141227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:================================>                    (72 + 46) / 118][Stage 100:===================================>                 (78 + 40) / 118][Stage 100:===========================================>         (96 + 22) / 118][Stage 100:================================================>    (109 + 9) / 118][Stage 100:====================================================>(117 + 1) / 118]                                                                                [Stage 101:================================>                    (73 + 46) / 119][Stage 101:===================================>                 (79 + 40) / 119][Stage 101:=========================================>           (93 + 26) / 119][Stage 101:================================================>    (110 + 9) / 119][Stage 101:===================================================> (116 + 3) / 119][Stage 101:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.177603964 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZInd ex<=78", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=78,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345301045 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:>                                                      (0 + 0) / 115][Stage 102:=====================================>               (82 + 33) / 115][Stage 102:=========================================>           (89 + 26) / 115][Stage 102:============================================>        (97 + 18) / 115][Stage 102:===============================================>    (105 + 10) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:=====================================>               (81 + 35) / 116][Stage 103:======================================>              (85 + 31) / 116][Stage 103:============================================>        (98 + 18) / 116][Stage 103:===============================================>    (106 + 10) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.976628256 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZInd ex<=101", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=101,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422684547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:==========================>                          (61 + 59) / 120][Stage 104:==================================>                  (77 + 43) / 120][Stage 104:=========================================>           (95 + 25) / 120][Stage 104:===================================================> (116 + 4) / 120]                                                                                [Stage 105:===========================>                         (62 + 59) / 121][Stage 105:==============================>                      (70 + 51) / 121][Stage 105:========================================>            (92 + 29) / 121][Stage 105:=================================================>   (112 + 9) / 121][Stage 105:====================================================>(119 + 2) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.984161375 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZInd ex<=21", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=21,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42380125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:==========================>                          (60 + 61) / 121][Stage 106:==============================>                      (70 + 51) / 121][Stage 106:=====================================>               (86 + 35) / 121][Stage 106:==============================================>     (109 + 12) / 121]                                                                                [Stage 107:==========================>                          (62 + 60) / 122][Stage 107:===============================>                     (73 + 49) / 122][Stage 107:===========================================>         (99 + 23) / 122][Stage 107:=================================================>   (113 + 9) / 122][Stage 107:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.552828988 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZInd ex<=65", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=58 AND partitionZIndex<=65,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362888086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:======================================>              (84 + 31) / 115][Stage 108:============================================>        (97 + 18) / 115][Stage 108:===============================================>    (105 + 10) / 115][Stage 108:====================================================>(114 + 1) / 115]                                                                                [Stage 109:======================================>              (85 + 31) / 116][Stage 109:============================================>        (97 + 19) / 116][Stage 109:==================================================>  (110 + 6) / 116][Stage 109:====================================================>(114 + 2) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.544499542 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIn dex<=150", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=150,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427092679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:==========================>                          (60 + 61) / 121][Stage 110:===============================>                     (72 + 49) / 121][Stage 110:========================================>            (93 + 28) / 121][Stage 110:===================================================> (117 + 4) / 121]                                                                                [Stage 111:============================>                        (65 + 57) / 122][Stage 111:==============================>                      (71 + 51) / 122][Stage 111:======================================>              (89 + 33) / 122][Stage 111:===============================================>    (111 + 11) / 122][Stage 111:===================================================> (119 + 3) / 122][Stage 111:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.46798683 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZInd ex<=82", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=82,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408807292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:===========================>                         (58 + 55) / 113][Stage 112:=============================>                       (63 + 50) / 113][Stage 112:=================================>                   (72 + 41) / 113][Stage 112:=============================================>       (98 + 15) / 113][Stage 112:==================================================>  (107 + 6) / 113]                                                                                [Stage 113:============================>                        (61 + 53) / 114][Stage 113:================================>                    (70 + 44) / 114][Stage 113:=======================================>             (84 + 30) / 114][Stage 113:=============================================>      (100 + 14) / 114][Stage 113:===================================================> (111 + 3) / 114][Stage 113:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.880977656 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZInd ex<=33", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=26 AND partitionZIndex<=33,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376865634 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:=================================>                   (73 + 42) / 115][Stage 114:==========================================>          (92 + 23) / 115][Stage 114:===============================================>    (104 + 11) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:===============================>                     (69 + 47) / 116][Stage 115:======================================>              (85 + 31) / 116][Stage 115:==========================================>          (93 + 23) / 116][Stage 115:===============================================>    (105 + 11) / 116][Stage 115:=================================================>   (109 + 7) / 116][Stage 115:==================================================>  (110 + 6) / 116][Stage 115:====================================================>(114 + 2) / 116][Stage 115:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.82910463 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIn dex<=131", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=124 AND partitionZIndex<=131,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405078215 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:==============================>                      (70 + 50) / 120][Stage 116:=======================================>             (89 + 31) / 120][Stage 116:=================================================>   (112 + 8) / 120]                                                                                [Stage 117:============================>                        (64 + 57) / 121][Stage 117:=================================>                   (77 + 44) / 121][Stage 117:=========================================>           (95 + 26) / 121][Stage 117:=================================================>   (113 + 8) / 121][Stage 117:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.620743041 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZInde x<=12", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=12,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350270355 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:================================>                    (70 + 43) / 113][Stage 118:=====================================>               (79 + 34) / 113][Stage 118:========================================>            (86 + 27) / 113][Stage 118:==============================================>     (102 + 11) / 113][Stage 118:===================================================> (109 + 4) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:=================================>                   (73 + 41) / 114][Stage 119:=======================================>             (85 + 29) / 114][Stage 119:==========================================>          (92 + 22) / 114][Stage 119:===============================================>    (104 + 10) / 114][Stage 119:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 7.179602294 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIn dex<=112", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=112,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343606189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:====================================>                (79 + 36) / 115][Stage 120:=====================================>               (82 + 33) / 115][Stage 120:===========================================>         (95 + 20) / 115][Stage 120:==================================================>  (109 + 6) / 115][Stage 120:====================================================>(114 + 1) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:=========================================>           (90 + 26) / 116][Stage 121:==============================================>     (104 + 12) / 116][Stage 121:==================================================>  (110 + 6) / 116][Stage 121:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.951561006 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIn dex<=218", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=218,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361412413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:================================>                    (73 + 45) / 118][Stage 122:===================================>                 (80 + 38) / 118][Stage 122:=========================================>           (93 + 25) / 118][Stage 122:=============================================>      (104 + 14) / 118]                                                                                [Stage 123:================================>                    (73 + 46) / 119][Stage 123:====================================>                (82 + 37) / 119][Stage 123:=======================================>             (89 + 30) / 119][Stage 123:==========================================>          (96 + 23) / 119][Stage 123:===============================================>    (108 + 11) / 119][Stage 123:===================================================> (115 + 4) / 119][Stage 123:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.982266903 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIn dex<=247", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=240 AND partitionZIndex<=247,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448653509 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:===========================>                         (58 + 55) / 113][Stage 124:============================>                        (61 + 52) / 113][Stage 124:=====================================>               (79 + 34) / 113][Stage 124:===========================================>         (92 + 21) / 113][Stage 124:=================================================>   (105 + 8) / 113]                                                                                [Stage 125:============================>                        (62 + 52) / 114][Stage 125:=================================>                   (73 + 41) / 114][Stage 125:==========================================>          (92 + 22) / 114][Stage 125:===================================================> (110 + 4) / 114][Stage 125:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.498382077 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIn dex<=231", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=231,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428100053 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:===========================>                         (58 + 55) / 113][Stage 126:==============================>                      (64 + 49) / 113][Stage 126:=================================>                   (71 + 42) / 113][Stage 126:=============================================>       (97 + 16) / 113][Stage 126:====================================================>(111 + 2) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:===========================>                         (60 + 54) / 114][Stage 127:================================>                    (70 + 44) / 114][Stage 127:=======================================>             (84 + 30) / 114][Stage 127:============================================>        (95 + 19) / 114][Stage 127:===================================================> (110 + 4) / 114][Stage 127:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.734910567 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIn dex<=199", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=192 AND partitionZIndex<=199,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387480104 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:===================================>                 (76 + 39) / 115][Stage 128:============================================>        (96 + 19) / 115][Stage 128:===================================================> (111 + 4) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:==============================>                      (67 + 49) / 116][Stage 129:=====================================>               (82 + 34) / 116][Stage 129:============================================>        (97 + 19) / 116][Stage 129:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.793754506 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZInd ex<=93", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=93,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372356949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:=================================>                   (74 + 44) / 118][Stage 130:==================================>                  (76 + 42) / 118][Stage 130:=====================================>               (84 + 34) / 118][Stage 130:==========================================>          (95 + 23) / 118][Stage 130:=================================================>   (110 + 8) / 118][Stage 130:====================================================>(117 + 1) / 118]                                                                                [Stage 131:================================>                    (73 + 46) / 119][Stage 131:==================================>                  (77 + 42) / 119][Stage 131:====================================>                (81 + 38) / 119][Stage 131:======================================>              (87 + 32) / 119][Stage 131:============================================>        (99 + 20) / 119][Stage 131:===================================================> (116 + 3) / 119][Stage 131:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.205917156 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIn dex<=155", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=155,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390919676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:=============================>                       (62 + 51) / 113][Stage 132:==================================>                  (74 + 39) / 113][Stage 132:============================================>        (94 + 19) / 113][Stage 132:==================================================>  (107 + 6) / 113]                                                                                [Stage 133:===========================>                         (60 + 54) / 114][Stage 133:================================>                    (69 + 45) / 114][Stage 133:=======================================>             (84 + 30) / 114][Stage 133:==================================================>  (108 + 6) / 114][Stage 133:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.767782779 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIn dex<=129", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=129,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353338559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:====================================>                (77 + 36) / 113][Stage 134:==========================================>          (90 + 23) / 113][Stage 134:==============================================>     (101 + 12) / 113][Stage 134:==================================================>  (108 + 5) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:==================================>                  (75 + 39) / 114][Stage 135:=======================================>             (84 + 30) / 114][Stage 135:============================================>        (96 + 18) / 114][Stage 135:=================================================>   (106 + 8) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.117531598 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIn dex<=130", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=123 AND partitionZIndex<=130,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467891572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:==========================>                          (60 + 61) / 121][Stage 136:============================>                        (65 + 56) / 121][Stage 136:===================================>                 (80 + 41) / 121][Stage 136:===========================================>        (102 + 19) / 121][Stage 136:=================================================>   (114 + 7) / 121]                                                                                [Stage 137:==========================>                          (61 + 61) / 122][Stage 137:============================>                        (65 + 57) / 122][Stage 137:================================>                    (74 + 48) / 122][Stage 137:=========================================>           (95 + 27) / 122][Stage 137:==================================================>  (116 + 6) / 122][Stage 137:====================================================>(120 + 2) / 122][Stage 137:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.962993647 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIn dex<=135", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=135,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405275165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:==========================>                          (60 + 61) / 121][Stage 138:============================>                        (65 + 56) / 121][Stage 138:=====================================>               (85 + 36) / 121][Stage 138:==============================================>     (108 + 13) / 121][Stage 138:===================================================> (118 + 3) / 121]                                                                                [Stage 139:==========================>                          (61 + 61) / 122][Stage 139:===========================>                         (63 + 59) / 122][Stage 139:=================================>                   (78 + 44) / 122][Stage 139:============================================>       (105 + 17) / 122][Stage 139:=================================================>   (114 + 8) / 122][Stage 139:====================================================>(120 + 2) / 122][Stage 139:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.476852173 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIn dex<=216", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=216,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341030932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:=====================================>               (82 + 33) / 115][Stage 140:======================================>              (83 + 32) / 115][Stage 140:=============================================>      (100 + 15) / 115][Stage 140:==================================================>  (110 + 5) / 115]                                                                                [Stage 141:=====================================>               (83 + 33) / 116][Stage 141:========================================>            (89 + 27) / 116][Stage 141:==============================================>     (103 + 13) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.641095575 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZInd ex<=48", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=48,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378918908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:===============================>                     (68 + 47) / 115][Stage 142:=======================================>             (85 + 30) / 115][Stage 142:=============================================>       (99 + 16) / 115][Stage 142:===================================================> (111 + 4) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:===============================>                     (70 + 46) / 116][Stage 143:=======================================>             (86 + 30) / 116][Stage 143:=============================================>       (99 + 17) / 116][Stage 143:================================================>    (107 + 9) / 116][Stage 143:==================================================>  (110 + 6) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:===================================================> (113 + 3) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 7.913707706 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIn dex<=171", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=171,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378375864 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:===========================>                         (58 + 55) / 113][Stage 144:============================>                        (61 + 52) / 113][Stage 144:====================================>                (78 + 35) / 113][Stage 144:=============================================>       (97 + 16) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:===========================>                         (60 + 54) / 114][Stage 145:==============================>                      (65 + 49) / 114][Stage 145:====================================>                (79 + 35) / 114][Stage 145:=============================================>       (97 + 17) / 114][Stage 145:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.632963333 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZInd ex<=106", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=99 AND partitionZIndex<=106,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33591807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:====================================>                (80 + 35) / 115][Stage 146:======================================>              (84 + 31) / 115][Stage 146:=============================================>       (98 + 17) / 115][Stage 146:==================================================>  (110 + 5) / 115]                                                                                [Stage 147:=====================================>               (83 + 33) / 116][Stage 147:==========================================>          (94 + 22) / 116][Stage 147:================================================>    (107 + 9) / 116][Stage 147:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.713547233 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIn dex<=186", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=186,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460269398 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:============================>                        (64 + 57) / 121][Stage 148:================================>                    (74 + 47) / 121][Stage 148:=====================================>               (85 + 36) / 121][Stage 148:=================================================>   (113 + 8) / 121][Stage 148:====================================================>(119 + 2) / 121]                                                                                [Stage 149:==========================>                          (61 + 61) / 122][Stage 149:============================>                        (65 + 57) / 122][Stage 149:====================================>                (83 + 39) / 122][Stage 149:===========================================>         (99 + 23) / 122][Stage 149:===================================================> (119 + 3) / 122][Stage 149:====================================================>(120 + 2) / 122][Stage 149:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.757893365 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIn dex<=243", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=236 AND partitionZIndex<=243,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401450705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:==========================>                          (60 + 60) / 120][Stage 150:==============================>                      (69 + 51) / 120][Stage 150:====================================>                (82 + 38) / 120][Stage 150:===========================================>        (101 + 19) / 120][Stage 150:==================================================>  (114 + 6) / 120]                                                                                [Stage 151:==========================>                          (61 + 60) / 121][Stage 151:===============================>                     (71 + 50) / 121][Stage 151:========================================>            (92 + 29) / 121][Stage 151:=============================================>      (105 + 16) / 121][Stage 151:===================================================> (118 + 3) / 121][Stage 151:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 4.526933402 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIn dex<=124", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=124,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400888521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:===========================>                         (58 + 55) / 113][Stage 152:=============================>                       (62 + 51) / 113][Stage 152:====================================>                (77 + 36) / 113][Stage 152:============================================>        (94 + 19) / 113][Stage 152:===================================================> (109 + 4) / 113]                                                                                [Stage 153:===========================>                         (59 + 55) / 114][Stage 153:=============================>                       (63 + 51) / 114][Stage 153:====================================>                (78 + 36) / 114][Stage 153:============================================>        (95 + 19) / 114][Stage 153:==================================================>  (108 + 6) / 114][Stage 153:====================================================>(112 + 2) / 114][Stage 153:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.950050716 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIn dex<=126", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=126,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37563269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:>                                                      (0 + 0) / 115][Stage 154:================================>                    (70 + 45) / 115][Stage 154:=======================================>             (86 + 29) / 115][Stage 154:============================================>        (97 + 18) / 115][Stage 154:==================================================>  (109 + 6) / 115]                                                                                [Stage 155:================================>                    (72 + 44) / 116][Stage 155:========================================>            (89 + 27) / 116][Stage 155:==============================================>     (103 + 13) / 116][Stage 155:==================================================>  (111 + 5) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.367650145 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZInd ex<=66", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=66,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348978373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:===================================>                 (75 + 38) / 113][Stage 156:======================================>              (83 + 30) / 113][Stage 156:==========================================>          (91 + 22) / 113][Stage 156:=================================================>   (105 + 8) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:===================================>                 (77 + 37) / 114][Stage 157:=======================================>             (86 + 28) / 114][Stage 157:=============================================>       (97 + 17) / 114][Stage 157:===================================================> (110 + 4) / 114][Stage 157:====================================================>(112 + 2) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.154015287 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIn dex<=238", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=238,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354364652 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:==================================>                  (73 + 40) / 113][Stage 158:======================================>              (82 + 31) / 113][Stage 158:=============================================>       (98 + 15) / 113][Stage 158:=================================================>   (106 + 7) / 113][Stage 158:====================================================>(111 + 2) / 113]                                                                                [Stage 159:==================================>                  (75 + 39) / 114][Stage 159:======================================>              (83 + 31) / 114][Stage 159:=============================================>       (98 + 16) / 114][Stage 159:=================================================>   (106 + 8) / 114][Stage 159:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.973671104 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIn dex<=127", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=120 AND partitionZIndex<=127,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395470418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:===========================>                         (62 + 59) / 121][Stage 160:=================================>                   (76 + 45) / 121][Stage 160:===========================================>        (102 + 19) / 121][Stage 160:====================================================>(120 + 1) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:=============================>                       (67 + 55) / 122][Stage 161:====================================>                (83 + 39) / 122][Stage 161:==========================================>         (100 + 22) / 122][Stage 161:==================================================>  (116 + 6) / 122][Stage 161:====================================================>(120 + 2) / 122][Stage 161:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.68476331 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZInd ex<=23", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=16 AND partitionZIndex<=23,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349547012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:=====================================>               (82 + 33) / 115][Stage 162:=========================================>           (89 + 26) / 115][Stage 162:=============================================>      (100 + 15) / 115][Stage 162:==================================================>  (110 + 5) / 115]                                                                                [Stage 163:======================================>              (84 + 32) / 116][Stage 163:==========================================>          (94 + 22) / 116][Stage 163:================================================>    (107 + 9) / 116][Stage 163:==================================================>  (110 + 6) / 116][Stage 163:===================================================> (113 + 3) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 6.295849844 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZInd ex<=83", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=83,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408777043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:==========================>                          (61 + 60) / 121][Stage 164:===============================>                     (73 + 48) / 121][Stage 164:============================================>       (103 + 18) / 121][Stage 164:===================================================> (117 + 4) / 121][Stage 164:====================================================>(120 + 1) / 121]                                                                                [Stage 165:==========================>                          (61 + 61) / 122][Stage 165:=============================>                       (67 + 55) / 122][Stage 165:====================================>                (83 + 39) / 122][Stage 165:=============================================>      (107 + 15) / 122][Stage 165:==================================================>  (117 + 5) / 122][Stage 165:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.269869697 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZInd ex<=46", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=39 AND partitionZIndex<=46,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403940585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:==========================>                          (60 + 61) / 121][Stage 166:============================>                        (65 + 56) / 121][Stage 166:================================>                    (74 + 47) / 121][Stage 166:===========================================>        (102 + 19) / 121][Stage 166:==================================================>  (116 + 5) / 121]                                                                                [Stage 167:==========================>                          (62 + 60) / 122][Stage 167:=================================>                   (78 + 44) / 122][Stage 167:===========================================>        (102 + 20) / 122][Stage 167:==================================================>  (116 + 6) / 122][Stage 167:===================================================> (118 + 4) / 122][Stage 167:===================================================> (119 + 3) / 122][Stage 167:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.510107425 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIn dex<=194", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=187 AND partitionZIndex<=194,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350574853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:=====================================>               (81 + 32) / 113][Stage 168:=========================================>           (88 + 25) / 113][Stage 168:=============================================>       (97 + 16) / 113][Stage 168:==================================================>  (107 + 6) / 113]                                                                                [Stage 169:=====================================>               (81 + 33) / 114][Stage 169:==========================================>          (92 + 22) / 114][Stage 169:==============================================>     (102 + 12) / 114][Stage 169:===================================================> (111 + 3) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.155472294 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIn dex<=205", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=205,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343624068 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:======================================>              (83 + 32) / 115][Stage 170:=============================================>       (98 + 17) / 115][Stage 170:==================================================>  (110 + 5) / 115][Stage 170:====================================================>(114 + 1) / 115]                                                                                [Stage 171:=====================================>               (83 + 33) / 116][Stage 171:=========================================>           (90 + 26) / 116][Stage 171:===============================================>    (105 + 11) / 116][Stage 171:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.66623778 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZInd ex<=76", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=76,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358023418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:=================================>                   (75 + 43) / 118][Stage 172:=====================================>               (84 + 34) / 118][Stage 172:=========================================>           (93 + 25) / 118][Stage 172:============================================>       (102 + 16) / 118][Stage 172:==================================================>  (113 + 5) / 118]                                                                                [Stage 173:=================================>                   (75 + 44) / 119][Stage 173:======================================>              (86 + 33) / 119][Stage 173:============================================>        (99 + 20) / 119][Stage 173:==================================================>  (113 + 6) / 119][Stage 173:===================================================> (116 + 3) / 119][Stage 173:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.94823251 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIn dex<=187", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=180 AND partitionZIndex<=187,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342194281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:====================================>                (79 + 36) / 115][Stage 174:======================================>              (83 + 32) / 115][Stage 174:===========================================>         (94 + 21) / 115][Stage 174:==============================================>     (103 + 12) / 115][Stage 174:====================================================>(113 + 2) / 115]                                                                                [Stage 175:=====================================>               (83 + 33) / 116][Stage 175:========================================>            (89 + 27) / 116][Stage 175:=============================================>      (101 + 15) / 116][Stage 175:==================================================>  (111 + 5) / 116][Stage 175:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.947753033 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZInd ex<=24", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=24,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363329676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:================================>                    (73 + 45) / 118][Stage 176:===================================>                 (79 + 39) / 118][Stage 176:==========================================>          (94 + 24) / 118][Stage 176:================================================>    (109 + 9) / 118][Stage 176:====================================================>(116 + 2) / 118]                                                                                [Stage 177:================================>                    (74 + 45) / 119][Stage 177:==================================>                  (77 + 42) / 119][Stage 177:====================================>                (81 + 38) / 119][Stage 177:===========================================>         (97 + 22) / 119][Stage 177:===============================================>    (108 + 11) / 119][Stage 177:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.240207053 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZInd ex<=75", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=75,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359672701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:=================================>                   (71 + 42) / 113][Stage 178:======================================>              (82 + 31) / 113][Stage 178:=============================================>       (97 + 16) / 113][Stage 178:================================================>    (104 + 9) / 113][Stage 178:====================================================>(111 + 2) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:=======================================>             (86 + 28) / 114][Stage 179:===========================================>         (94 + 20) / 114][Stage 179:===============================================>    (104 + 10) / 114][Stage 179:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.223038581 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZInd ex<=67", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=60 AND partitionZIndex<=67,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343525103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:======================================>              (83 + 32) / 115][Stage 180:=========================================>           (90 + 25) / 115][Stage 180:===============================================>    (104 + 11) / 115][Stage 180:===================================================> (111 + 4) / 115]                                                                                [Stage 181:========================================>            (88 + 28) / 116][Stage 181:============================================>        (98 + 18) / 116][Stage 181:==============================================>     (104 + 12) / 116][Stage 181:=================================================>   (108 + 8) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.455655101 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIn dex<=116", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=116,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454491097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:=====================================>               (81 + 34) / 115][Stage 182:=======================================>             (85 + 30) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:==================================================>  (109 + 6) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=====================================>               (82 + 34) / 116][Stage 183:============================================>        (97 + 19) / 116][Stage 183:==================================================>  (110 + 6) / 116][Stage 183:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.690991633 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394521003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:==============================>                      (65 + 48) / 113][Stage 184:====================================>                (77 + 36) / 113][Stage 184:=========================================>           (88 + 25) / 113][Stage 184:==============================================>     (101 + 12) / 113][Stage 184:===================================================> (110 + 3) / 113]                                                                                [Stage 185:===========================>                         (59 + 55) / 114][Stage 185:==============================>                      (66 + 48) / 114][Stage 185:==================================>                  (74 + 40) / 114][Stage 185:=========================================>           (89 + 25) / 114][Stage 185:==============================================>     (101 + 13) / 114][Stage 185:====================================================>(112 + 2) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.95204749 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZInde x<=8", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=8,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369529213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==================================>                  (74 + 41) / 115][Stage 186:=========================================>           (91 + 24) / 115][Stage 186:=============================================>      (100 + 15) / 115][Stage 186:=================================================>   (108 + 7) / 115][Stage 186:===================================================> (111 + 4) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:===============================>                     (70 + 46) / 116][Stage 187:====================================>                (80 + 36) / 116][Stage 187:============================================>        (97 + 19) / 116][Stage 187:=================================================>   (109 + 7) / 116][Stage 187:==================================================>  (110 + 6) / 116][Stage 187:===================================================> (112 + 4) / 116][Stage 187:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 8.984044049 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZInd ex<=34", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=34,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38886976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:============================>                        (65 + 55) / 120][Stage 188:==================================>                  (78 + 42) / 120][Stage 188:=======================================>             (89 + 31) / 120][Stage 188:=================================================>   (111 + 9) / 120]                                                                                [Stage 189:===========================>                         (62 + 59) / 121][Stage 189:===============================>                     (72 + 49) / 121][Stage 189:======================================>              (89 + 32) / 121][Stage 189:=============================================>      (107 + 14) / 121][Stage 189:==================================================>  (116 + 5) / 121][Stage 189:====================================================>(119 + 2) / 121][Stage 189:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.980691605 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZInde x<=15", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=15,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377995501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:===========================>                         (59 + 54) / 113][Stage 190:==================================>                  (74 + 39) / 113][Stage 190:==========================================>          (90 + 23) / 113][Stage 190:=================================================>   (105 + 8) / 113][Stage 190:====================================================>(112 + 1) / 113]                                                                                [Stage 191:===========================>                         (59 + 55) / 114][Stage 191:=============================>                       (63 + 51) / 114][Stage 191:=======================================>             (84 + 30) / 114][Stage 191:=============================================>      (100 + 14) / 114][Stage 191:==================================================>  (108 + 6) / 114][Stage 191:====================================================>(112 + 2) / 114][Stage 191:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 8.115101009 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIn dex<=154", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=154,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348135714 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:===================================>                 (75 + 38) / 113][Stage 192:======================================>              (83 + 30) / 113][Stage 192:=============================================>       (96 + 17) / 113][Stage 192:================================================>    (104 + 9) / 113][Stage 192:====================================================>(111 + 2) / 113]                                                                                [Stage 193:====================================>                (79 + 35) / 114][Stage 193:==========================================>          (92 + 22) / 114][Stage 193:==============================================>     (102 + 12) / 114][Stage 193:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.013303614 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIn dex<=180", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=180,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390698564 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:============================>                        (61 + 52) / 113][Stage 194:================================>                    (70 + 43) / 113][Stage 194:=======================================>             (85 + 28) / 113][Stage 194:==================================================>  (108 + 5) / 113]                                                                                [Stage 195:===========================>                         (59 + 55) / 114][Stage 195:==============================>                      (66 + 48) / 114][Stage 195:==================================>                  (75 + 39) / 114][Stage 195:=======================================>             (86 + 28) / 114][Stage 195:=============================================>      (100 + 14) / 114][Stage 195:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.737005349 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZInd ex<=22", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=15 AND partitionZIndex<=22,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369353547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:================================>                    (73 + 45) / 118][Stage 196:===================================>                 (80 + 38) / 118][Stage 196:========================================>            (91 + 27) / 118][Stage 196:=============================================>      (104 + 14) / 118][Stage 196:=================================================>   (110 + 8) / 118][Stage 196:==================================================>  (113 + 5) / 118][Stage 196:===================================================> (114 + 4) / 118][Stage 196:====================================================>(116 + 2) / 118]                                                                                [Stage 197:================================>                    (74 + 45) / 119][Stage 197:==================================>                  (78 + 41) / 119][Stage 197:======================================>              (86 + 33) / 119][Stage 197:===========================================>         (97 + 22) / 119][Stage 197:===============================================>    (109 + 10) / 119][Stage 197:====================================================>(117 + 2) / 119][Stage 197:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.737546639 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIn dex<=118", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=118,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424928582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:===========================>                         (63 + 58) / 121][Stage 198:===============================>                     (71 + 50) / 121][Stage 198:========================================>            (92 + 29) / 121][Stage 198:==============================================>     (109 + 12) / 121]                                                                                [Stage 199:==========================>                          (61 + 61) / 122][Stage 199:==============================>                      (70 + 52) / 122][Stage 199:========================================>            (94 + 28) / 122][Stage 199:==============================================>     (110 + 12) / 122][Stage 199:===================================================> (119 + 3) / 122][Stage 199:====================================================>(120 + 2) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.505524267 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZInd ex<=87", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=87,8))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393493231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:============================>                        (65 + 55) / 120][Stage 200:===============================>                     (71 + 49) / 120][Stage 200:=========================================>           (94 + 26) / 120][Stage 200:=================================================>   (111 + 9) / 120][Stage 200:====================================================>(119 + 1) / 120]                                                                                [Stage 201:=============================>                       (67 + 54) / 121][Stage 201:================================>                    (74 + 47) / 121][Stage 201:==========================================>          (98 + 23) / 121][Stage 201:=================================================>   (112 + 9) / 121][Stage 201:====================================================>(119 + 2) / 121][Stage 201:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 4.030524357 seconds
res203: Int = 0

scala> 

scala> :quit

real	11m55.063s
user	12m22.372s
sys	1m30.456s
