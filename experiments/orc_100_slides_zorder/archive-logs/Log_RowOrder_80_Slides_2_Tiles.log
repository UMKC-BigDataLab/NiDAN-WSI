Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 01:46:47 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:47:01 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:47:01 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:47:02 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 01:47:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 01:47:14 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525014703-0621).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.421053221 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:===================>                                   (41 + 74) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:==============================>                        (64 + 52) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:============================================>          (93 + 23) / 116][Stage 1:===============================================>      (103 + 13) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.000954116 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionI ndex = 195 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.777268011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=============================>                         (62 + 53) / 115][Stage 2:=====================================>                 (78 + 37) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:========================================>              (84 + 31) / 115][Stage 2:============================================>          (92 + 23) / 115][Stage 2:==============================================>        (98 + 17) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:======================================================>(113 + 2) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:====================================>                  (76 + 40) / 116][Stage 3:======================================>                (81 + 35) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:=============================================>         (95 + 21) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:==================================================>    (107 + 9) / 116]                                                                                Time elapsed: 4.370071489 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIn dex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.719028723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=========================>                             (56 + 64) / 120][Stage 4:===========================>                           (61 + 59) / 120][Stage 4:============================>                          (62 + 58) / 120][Stage 4:================================>                      (70 + 50) / 120][Stage 4:====================================>                  (80 + 40) / 120][Stage 4:=============================================>         (99 + 21) / 120][Stage 4:====================================================>  (115 + 5) / 120]                                                                                [Stage 5:===========================>                           (60 + 61) / 121][Stage 5:=============================>                         (64 + 57) / 121][Stage 5:================================>                      (72 + 49) / 121][Stage 5:======================================>                (85 + 36) / 121][Stage 5:================================================>     (109 + 12) / 121][Stage 5:=====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.162228189 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIn dex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.677836353 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:===========================>                           (60 + 61) / 121][Stage 6:============================>                          (63 + 58) / 121][Stage 6:================================>                      (72 + 49) / 121][Stage 6:==========================================>            (93 + 28) / 121][Stage 6:==============================================>       (104 + 17) / 121][Stage 6:===================================================>   (114 + 7) / 121]                                                                                [Stage 7:===========================>                           (61 + 61) / 122][Stage 7:============================>                          (63 + 59) / 122][Stage 7:================================>                      (73 + 49) / 122][Stage 7:=========================================>             (93 + 29) / 122][Stage 7:==============================================>       (105 + 17) / 122][Stage 7:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.128156445 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIn dex = 38 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51368662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:==================================>                    (70 + 43) / 113][Stage 8:====================================>                  (76 + 37) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:==================================================>    (104 + 9) / 113][Stage 8:====================================================>  (108 + 5) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:===================================>                   (74 + 40) / 114][Stage 9:=======================================>               (81 + 33) / 114][Stage 9:============================================>          (92 + 22) / 114][Stage 9:===============================================>      (101 + 13) / 114][Stage 9:==================================================>    (105 + 9) / 114][Stage 9:====================================================>  (108 + 6) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.42987484 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.609667863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:==========================>                           (58 + 62) / 120][Stage 10:===========================>                          (62 + 58) / 120][Stage 10:================================>                     (73 + 47) / 120][Stage 10:========================================>             (89 + 31) / 120][Stage 10:==============================================>      (106 + 14) / 120][Stage 10:===================================================>  (115 + 5) / 120][Stage 10:=====================================================>(118 + 2) / 120]                                                                                [Stage 11:============================>                         (63 + 58) / 121][Stage 11:=================================>                    (75 + 46) / 121][Stage 11:==========================================>           (96 + 25) / 121][Stage 11:===========================================>         (100 + 21) / 121][Stage 11:==============================================>      (106 + 15) / 121][Stage 11:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.197714911 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionI ndex = 196 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.564745406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:===========================>                          (57 + 56) / 113][Stage 12:===========================>                          (58 + 55) / 113][Stage 12:=================================>                    (71 + 42) / 113][Stage 12:===========================================>          (90 + 23) / 113][Stage 12:==============================================>      (100 + 13) / 113][Stage 12:==================================================>   (106 + 7) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:===========================>                          (59 + 55) / 114][Stage 13:=================================>                    (70 + 44) / 114][Stage 13:==========================================>           (89 + 25) / 114][Stage 13:============================================>         (94 + 20) / 114][Stage 13:===============================================>     (102 + 12) / 114]                                                                                Time elapsed: 3.876431354 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionI ndex = 226 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.582394622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:===========================>                          (60 + 60) / 120][Stage 14:==============================>                       (67 + 53) / 120][Stage 14:=====================================>                (83 + 37) / 120][Stage 14:===========================================>          (96 + 24) / 120][Stage 14:=================================================>    (111 + 9) / 120][Stage 14:=====================================================>(119 + 1) / 120]                                                                                [Stage 15:===========================>                          (61 + 60) / 121][Stage 15:=============================>                        (67 + 54) / 121][Stage 15:=======================================>              (89 + 32) / 121][Stage 15:==============================================>      (107 + 14) / 121][Stage 15:==================================================>   (113 + 8) / 121][Stage 15:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.853409956 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444476387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:======================================>               (83 + 32) / 115][Stage 16:=========================================>            (88 + 27) / 115][Stage 16:===============================================>     (104 + 11) / 115][Stage 16:====================================================> (112 + 3) / 115][Stage 16:=====================================================>(113 + 2) / 115]                                                                                [Stage 17:=======================================>              (84 + 32) / 116][Stage 17:=============================================>        (97 + 19) / 116][Stage 17:================================================>    (106 + 10) / 116][Stage 17:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.422276608 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIn dex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.508909924 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:================================>                     (69 + 46) / 115][Stage 18:======================================>               (81 + 34) / 115][Stage 18:============================================>         (94 + 21) / 115][Stage 18:===============================================>     (102 + 13) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:===============================>                      (67 + 49) / 116][Stage 19:=====================================>                (80 + 36) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:==================================================>   (108 + 8) / 116][Stage 19:====================================================> (113 + 3) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.876002066 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionI ndex = 147 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473281946 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:==================================>                   (72 + 41) / 113][Stage 20:=========================================>            (87 + 26) / 113][Stage 20:============================================>         (94 + 19) / 113][Stage 20:===============================================>     (102 + 11) / 113][Stage 20:================================================>    (103 + 10) / 113][Stage 20:==================================================>   (105 + 8) / 113][Stage 20:===================================================>  (107 + 6) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:====================================>                 (76 + 38) / 114][Stage 21:========================================>             (85 + 29) / 114][Stage 21:==========================================>           (90 + 24) / 114][Stage 21:==============================================>       (98 + 16) / 114][Stage 21:===============================================>     (103 + 11) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.068281565 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionI ndex = 225 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477187574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:================================>                     (71 + 47) / 118][Stage 22:==================================>                   (76 + 42) / 118][Stage 22:========================================>             (88 + 30) / 118][Stage 22:================================================>    (108 + 10) / 118]                                                                                [Stage 23:=================================>                    (73 + 46) / 119][Stage 23:==================================>                   (75 + 44) / 119][Stage 23:=====================================>                (83 + 36) / 119][Stage 23:=========================================>            (92 + 27) / 119][Stage 23:==============================================>      (105 + 14) / 119][Stage 23:=================================================>    (110 + 9) / 119][Stage 23:====================================================> (116 + 3) / 119][Stage 23:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.830961592 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionI ndex = 163 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422346516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:=======================================>              (84 + 31) / 115][Stage 24:============================================>         (95 + 20) / 115][Stage 24:===============================================>     (103 + 12) / 115][Stage 24:===================================================>  (110 + 5) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:=======================================>              (84 + 32) / 116][Stage 25:===========================================>          (93 + 23) / 116][Stage 25:===============================================>     (105 + 11) / 116][Stage 25:==================================================>   (108 + 8) / 116][Stage 25:====================================================> (113 + 3) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.274693884 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487311973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:============================>                         (59 + 54) / 113][Stage 26:================================>                     (68 + 45) / 113][Stage 26:=======================================>              (83 + 30) / 113][Stage 26:==================================================>   (106 + 7) / 113]                                                                                [Stage 27:=============================>                        (62 + 52) / 114][Stage 27:==================================>                   (72 + 42) / 114][Stage 27:===========================================>          (91 + 23) / 114][Stage 27:===============================================>     (102 + 12) / 114][Stage 27:==================================================>   (106 + 8) / 114][Stage 27:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.593888093 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427287784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:=================================>                    (71 + 42) / 113][Stage 28:======================================>               (81 + 32) / 113][Stage 28:==========================================>           (89 + 24) / 113][Stage 28:===============================================>     (102 + 11) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:=================================>                    (71 + 43) / 114][Stage 29:=======================================>              (84 + 30) / 114][Stage 29:==========================================>           (90 + 24) / 114][Stage 29:==============================================>       (99 + 15) / 114][Stage 29:=====================================================>(112 + 2) / 114][Stage 29:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.52075853 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionInd ex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.516735533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===========================>                          (61 + 59) / 120][Stage 30:===============================>                      (69 + 51) / 120][Stage 30:=======================================>              (88 + 32) / 120][Stage 30:===============================================>     (107 + 13) / 120][Stage 30:==================================================>   (113 + 7) / 120]                                                                                [Stage 31:===========================>                          (62 + 59) / 121][Stage 31:==============================>                       (68 + 53) / 121][Stage 31:====================================>                 (82 + 39) / 121][Stage 31:===========================================>          (97 + 24) / 121][Stage 31:===============================================>     (109 + 12) / 121][Stage 31:====================================================> (118 + 3) / 121][Stage 31:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.814759145 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44028951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:=================================>                    (74 + 44) / 118][Stage 32:=====================================>                (82 + 36) / 118][Stage 32:===========================================>          (96 + 22) / 118][Stage 32:====================================================> (114 + 4) / 118][Stage 32:=====================================================>(117 + 1) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:===================================>                  (79 + 40) / 119][Stage 33:=======================================>              (87 + 32) / 119][Stage 33:===============================================>     (106 + 13) / 119][Stage 33:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.183076582 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionI ndex = 235 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.563394309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:============================>                         (64 + 56) / 120][Stage 34:===================================>                  (79 + 41) / 120][Stage 34:============================================>         (99 + 21) / 120][Stage 34:===================================================>  (114 + 6) / 120][Stage 34:=====================================================>(119 + 1) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:============================>                         (64 + 57) / 121][Stage 35:====================================>                 (81 + 40) / 121][Stage 35:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.26093868 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIn dex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531368181 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:===============================>                      (71 + 49) / 120][Stage 36:========================================>             (90 + 30) / 120][Stage 36:===================================================>  (115 + 5) / 120]                                                                                [Stage 37:============================>                         (63 + 58) / 121][Stage 37:==================================>                   (77 + 44) / 121][Stage 37:===========================================>          (97 + 24) / 121][Stage 37:==================================================>   (113 + 8) / 121][Stage 37:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.163038766 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424189513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:=================================>                    (71 + 42) / 113][Stage 38:=======================================>              (82 + 31) / 113][Stage 38:===========================================>          (92 + 21) / 113][Stage 38:==================================================>   (105 + 8) / 113][Stage 38:=====================================================>(111 + 2) / 113]                                                                                [Stage 39:=====================================>                (79 + 35) / 114][Stage 39:==========================================>           (89 + 25) / 114][Stage 39:===============================================>     (103 + 11) / 114][Stage 39:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.974862365 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512608179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:==========================>                           (60 + 61) / 121][Stage 40:=============================>                        (66 + 55) / 121][Stage 40:==================================>                   (77 + 44) / 121][Stage 40:=============================================>       (103 + 18) / 121][Stage 40:==================================================>   (114 + 7) / 121]                                                                                [Stage 41:===========================>                          (63 + 59) / 122][Stage 41:==================================>                   (78 + 44) / 122][Stage 41:==========================================>           (97 + 25) / 122][Stage 41:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.099651722 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439912725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:=====================================>                (78 + 35) / 113][Stage 42:===========================================>          (92 + 21) / 113][Stage 42:==============================================>      (100 + 13) / 113][Stage 42:====================================================> (110 + 3) / 113]                                                                                [Stage 43:===================================>                  (74 + 40) / 114][Stage 43:=========================================>            (88 + 26) / 114][Stage 43:==============================================>       (98 + 16) / 114][Stage 43:===================================================>  (108 + 6) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.934891049 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionI ndex = 159 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463493494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:===========================>                          (60 + 60) / 120][Stage 44:===========================>                          (61 + 59) / 120][Stage 44:===================================>                  (79 + 41) / 120][Stage 44:=============================================>       (102 + 18) / 120][Stage 44:===================================================>  (115 + 5) / 120]                                                                                [Stage 45:===========================>                          (61 + 60) / 121][Stage 45:=============================>                        (67 + 54) / 121][Stage 45:======================================>               (87 + 34) / 121][Stage 45:==============================================>      (106 + 15) / 121][Stage 45:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.209934361 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide72"
dataSource: String = /nidan/orc/individualORC/slide72

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIn dex = 111 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395923791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:==================================>                   (72 + 41) / 113][Stage 46:=====================================>                (79 + 34) / 113][Stage 46:===========================================>          (90 + 23) / 113][Stage 46:=================================================>    (104 + 9) / 113][Stage 46:====================================================> (109 + 4) / 113][Stage 46:====================================================> (110 + 3) / 113]                                                                                [Stage 47:===================================>                  (74 + 40) / 114][Stage 47:=======================================>              (83 + 31) / 114][Stage 47:=============================================>        (97 + 17) / 114][Stage 47:==================================================>   (106 + 8) / 114][Stage 47:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.24623741 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionI ndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460641866 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:=================================>                    (74 + 46) / 120][Stage 48:========================================>             (91 + 29) / 120][Stage 48:===================================================>  (114 + 6) / 120]                                                                                [Stage 49:==============================>                       (69 + 52) / 121][Stage 49:=====================================>                (84 + 37) / 121][Stage 49:=============================================>       (103 + 18) / 121][Stage 49:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.099788417 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionI ndex = 202 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428593358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:====================================>                 (76 + 37) / 113][Stage 50:=========================================>            (87 + 26) / 113][Stage 50:=============================================>        (96 + 17) / 113][Stage 50:====================================================> (109 + 4) / 113][Stage 50:====================================================> (110 + 3) / 113][Stage 50:=====================================================>(111 + 2) / 113][Stage 50:=====================================================>(112 + 1) / 113]                                                                                [Stage 51:====================================>                 (77 + 37) / 114][Stage 51:=======================================>              (84 + 30) / 114][Stage 51:============================================>         (94 + 20) / 114][Stage 51:==================================================>   (107 + 7) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.461180988 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIn dex = 78 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450505343 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:============================>                         (63 + 57) / 120][Stage 52:=================================>                    (75 + 45) / 120][Stage 52:============================================>         (98 + 22) / 120][Stage 52:==============================================>      (106 + 14) / 120][Stage 52:=====================================================>(118 + 2) / 120]                                                                                [Stage 53:============================>                         (64 + 57) / 121][Stage 53:===================================>                  (80 + 41) / 121][Stage 53:============================================>        (102 + 19) / 121][Stage 53:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.34150491 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4113994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:=================================>                    (73 + 45) / 118][Stage 54:=====================================>                (81 + 37) / 118][Stage 54:=========================================>            (90 + 28) / 118][Stage 54:===============================================>     (105 + 13) / 118][Stage 54:====================================================> (114 + 4) / 118]                                                                                [Stage 55:=================================>                    (74 + 45) / 119][Stage 55:======================================>               (84 + 35) / 119][Stage 55:=========================================>            (92 + 27) / 119][Stage 55:===============================================>     (107 + 12) / 119][Stage 55:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.486876168 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionInd ex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375969625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:=====================================>                (79 + 36) / 115][Stage 56:=======================================>              (85 + 30) / 115][Stage 56:============================================>         (94 + 21) / 115][Stage 56:===================================================>  (109 + 6) / 115][Stage 56:=====================================================>(113 + 2) / 115]                                                                                [Stage 57:======================================>               (83 + 33) / 116][Stage 57:==========================================>           (92 + 24) / 116][Stage 57:==============================================>      (102 + 14) / 116][Stage 57:==================================================>   (108 + 8) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.763354418 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIn dex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449378978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:==============================>                       (68 + 52) / 120][Stage 58:========================================>             (90 + 30) / 120][Stage 58:==============================================>      (106 + 14) / 120]                                                                                [Stage 59:===========================>                          (61 + 60) / 121][Stage 59:================================>                     (72 + 49) / 121][Stage 59:=========================================>            (94 + 27) / 121][Stage 59:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.123061535 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 200 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44115042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:===========================>                          (58 + 55) / 113][Stage 60:=============================>                        (62 + 51) / 113][Stage 60:===================================>                  (75 + 38) / 113][Stage 60:===========================================>          (91 + 22) / 113][Stage 60:====================================================> (110 + 3) / 113]                                                                                [Stage 61:============================>                         (60 + 54) / 114][Stage 61:================================>                     (68 + 46) / 114][Stage 61:=========================================>            (88 + 26) / 114][Stage 61:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.925880597 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionI ndex = 200 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428682013 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:=================================>                    (72 + 43) / 115][Stage 62:=========================================>            (89 + 26) / 115][Stage 62:==============================================>       (99 + 16) / 115][Stage 62:====================================================> (112 + 3) / 115]                                                                                [Stage 63:=================================>                    (71 + 45) / 116][Stage 63:========================================>             (86 + 30) / 116][Stage 63:=============================================>       (100 + 16) / 116][Stage 63:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.745767637 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 226 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46122116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:===========================>                          (61 + 60) / 121][Stage 64:===============================>                      (71 + 50) / 121][Stage 64:=====================================>                (85 + 36) / 121][Stage 64:============================================>        (101 + 20) / 121]                                                                                [Stage 65:===========================>                          (61 + 61) / 122][Stage 65:==============================>                       (68 + 54) / 122][Stage 65:====================================>                 (83 + 39) / 122][Stage 65:==============================================>      (108 + 14) / 122]                                                                                Time elapsed: 3.106284762 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionI ndex = 199 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447687791 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:===========================>                          (61 + 59) / 120][Stage 66:===================================>                  (78 + 42) / 120][Stage 66:==============================================>      (105 + 15) / 120]                                                                                [Stage 67:===========================>                          (62 + 59) / 121][Stage 67:================================>                     (73 + 48) / 121][Stage 67:======================================>               (86 + 35) / 121][Stage 67:==================================================>   (114 + 7) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.264089784 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIn dex = 105 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441128936 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:>                                                       (0 + 0) / 120][Stage 68:===========================>                          (60 + 60) / 120][Stage 68:===============================>                      (69 + 51) / 120][Stage 68:======================================>               (86 + 34) / 120][Stage 68:==============================================>      (106 + 14) / 120][Stage 68:====================================================> (117 + 3) / 120]                                                                                [Stage 69:=============================>                        (65 + 56) / 121][Stage 69:===================================>                  (80 + 41) / 121][Stage 69:=============================================>       (105 + 16) / 121][Stage 69:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.290712833 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441324036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:==============================>                       (68 + 52) / 120][Stage 70:=====================================>                (84 + 36) / 120][Stage 70:===============================================>     (108 + 12) / 120][Stage 70:=====================================================>(118 + 2) / 120]                                                                                [Stage 71:============================>                         (64 + 57) / 121][Stage 71:==================================>                   (77 + 44) / 121][Stage 71:===========================================>          (98 + 23) / 121][Stage 71:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.375493703 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionI ndex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4049202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:================================>                     (72 + 46) / 118][Stage 72:==================================>                   (75 + 43) / 118][Stage 72:=====================================>                (81 + 37) / 118][Stage 72:=========================================>            (91 + 27) / 118][Stage 72:===============================================>     (106 + 12) / 118][Stage 72:=====================================================>(116 + 2) / 118]                                                                                [Stage 73:=================================>                    (73 + 46) / 119][Stage 73:==================================>                   (76 + 43) / 119][Stage 73:====================================>                 (81 + 38) / 119][Stage 73:======================================>               (85 + 34) / 119][Stage 73:==============================================>      (105 + 14) / 119]                                                                                Time elapsed: 3.510307735 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionI ndex = 232 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407506324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:============================>                         (59 + 54) / 113][Stage 74:================================>                     (68 + 45) / 113][Stage 74:=======================================>              (83 + 30) / 113][Stage 74:===============================================>      (99 + 14) / 113][Stage 74:====================================================> (109 + 4) / 113]                                                                                [Stage 75:===========================>                          (59 + 55) / 114][Stage 75:==============================>                       (65 + 49) / 114][Stage 75:=====================================>                (80 + 34) / 114][Stage 75:=============================================>        (95 + 19) / 114][Stage 75:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.248205946 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionI ndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402732694 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:==================================>                   (76 + 42) / 118][Stage 76:=========================================>            (91 + 27) / 118][Stage 76:===============================================>     (105 + 13) / 118][Stage 76:===================================================>  (113 + 5) / 118][Stage 76:=====================================================>(117 + 1) / 118]                                                                                [Stage 77:=================================>                    (74 + 45) / 119][Stage 77:===================================>                  (78 + 41) / 119][Stage 77:========================================>             (89 + 30) / 119][Stage 77:==============================================>      (105 + 14) / 119][Stage 77:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.506374594 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionI ndex = 153 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443067196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:===========================>                          (61 + 60) / 121][Stage 78:=================================>                    (74 + 47) / 121][Stage 78:=========================================>            (92 + 29) / 121][Stage 78:===================================================>  (115 + 6) / 121]                                                                                [Stage 79:===========================>                          (61 + 61) / 122][Stage 79:==============================>                       (68 + 54) / 122][Stage 79:=====================================>                (84 + 38) / 122][Stage 79:================================================>    (112 + 10) / 122][Stage 79:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.308627498 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionI ndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403464874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:==============================>                       (63 + 50) / 113][Stage 80:==================================>                   (73 + 40) / 113][Stage 80:==============================================>       (98 + 15) / 113][Stage 80:====================================================> (110 + 3) / 113]                                                                                [Stage 81:===========================>                          (59 + 55) / 114][Stage 81:===================================>                  (74 + 40) / 114][Stage 81:=============================================>        (96 + 18) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.224136157 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388957962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:==================================>                   (76 + 42) / 118][Stage 82:=======================================>              (87 + 31) / 118][Stage 82:=============================================>        (99 + 19) / 118][Stage 82:===================================================>  (113 + 5) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:=====================================>                (82 + 37) / 119][Stage 83:==========================================>           (94 + 25) / 119][Stage 83:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.244120492 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408618842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:==============================>                       (64 + 49) / 113][Stage 84:======================================>               (80 + 33) / 113][Stage 84:===============================================>      (99 + 14) / 113][Stage 84:====================================================> (110 + 3) / 113][Stage 84:=====================================================>(112 + 1) / 113]                                                                                [Stage 85:============================>                         (61 + 53) / 114][Stage 85:================================>                     (68 + 46) / 114][Stage 85:======================================>               (82 + 32) / 114][Stage 85:==============================================>       (99 + 15) / 114][Stage 85:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.428469926 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionI ndex = 210 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376454316 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:================================>                     (72 + 46) / 118][Stage 86:====================================>                 (80 + 38) / 118][Stage 86:============================================>         (97 + 21) / 118][Stage 86:===================================================>  (112 + 6) / 118]                                                                                [Stage 87:==================================>                   (75 + 44) / 119][Stage 87:=======================================>              (86 + 33) / 119][Stage 87:============================================>         (98 + 21) / 119][Stage 87:==================================================>   (112 + 7) / 119][Stage 87:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.232824816 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionI ndex = 154 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413114351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:=================================>                    (70 + 43) / 113][Stage 88:===========================================>          (90 + 23) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:===========================>                          (59 + 55) / 114][Stage 89:============================>                         (61 + 53) / 114][Stage 89:==================================>                   (73 + 41) / 114][Stage 89:==============================================>      (100 + 14) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.990149212 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionI ndex = 234 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430336705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:===========================>                          (61 + 60) / 121][Stage 90:==============================>                       (68 + 53) / 121][Stage 90:=======================================>              (88 + 33) / 121][Stage 90:==================================================>   (113 + 8) / 121]                                                                                [Stage 91:===========================>                          (63 + 59) / 122][Stage 91:==============================>                       (70 + 52) / 122][Stage 91:=======================================>              (90 + 32) / 122][Stage 91:================================================>    (111 + 11) / 122][Stage 91:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.128717731 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIn dex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436275196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:==========================>                           (60 + 61) / 121][Stage 92:==================================>                   (77 + 44) / 121][Stage 92:===========================================>          (97 + 24) / 121][Stage 92:=================================================>    (112 + 9) / 121]                                                                                [Stage 93:============================>                         (64 + 58) / 122][Stage 93:=================================>                    (76 + 46) / 122][Stage 93:=========================================>            (94 + 28) / 122][Stage 93:==================================================>   (113 + 9) / 122][Stage 93:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.212036996 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIn dex = 49 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39484055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:=================================>                    (70 + 43) / 113][Stage 94:==========================================>           (89 + 24) / 113][Stage 94:==================================================>   (105 + 8) / 113][Stage 94:====================================================> (110 + 3) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:=================================>                    (71 + 43) / 114][Stage 95:=============================================>        (95 + 19) / 114][Stage 95:==================================================>   (106 + 8) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.352685699 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 157 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420576643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:================================>                     (72 + 46) / 118][Stage 96:==================================>                   (75 + 43) / 118][Stage 96:=====================================>                (83 + 35) / 118][Stage 96:===========================================>          (95 + 23) / 118][Stage 96:================================================>    (108 + 10) / 118][Stage 96:=====================================================>(117 + 1) / 118]                                                                                [Stage 97:=================================>                    (73 + 46) / 119][Stage 97:===================================>                  (79 + 40) / 119][Stage 97:=========================================>            (91 + 28) / 119][Stage 97:=============================================>       (103 + 16) / 119][Stage 97:====================================================> (115 + 4) / 119][Stage 97:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.41457962 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIn dex = 28 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427528856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:==========================>                           (60 + 61) / 121][Stage 98:=============================>                        (65 + 56) / 121][Stage 98:===================================>                  (80 + 41) / 121][Stage 98:============================================>        (101 + 20) / 121][Stage 98:=====================================================>(119 + 2) / 121]                                                                                [Stage 99:=============================>                        (67 + 55) / 122][Stage 99:==================================>                   (78 + 44) / 122][Stage 99:==============================================>      (106 + 16) / 122][Stage 99:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.182792438 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionI ndex = 166 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506656337 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:===========================>                         (58 + 55) / 113][Stage 100:=============================>                       (63 + 50) / 113][Stage 100:===================================>                 (75 + 38) / 113][Stage 100:===========================================>         (92 + 21) / 113][Stage 100:=================================================>   (106 + 7) / 113]                                                                                [Stage 101:===========================>                         (59 + 55) / 114][Stage 101:================================>                    (69 + 45) / 114][Stage 101:======================================>              (82 + 32) / 114][Stage 101:==============================================>     (103 + 11) / 114][Stage 101:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.368816253 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392042422 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:====================================>                (82 + 36) / 118][Stage 102:===============================================>    (108 + 10) / 118]                                                                                [Stage 103:=================================>                   (75 + 44) / 119][Stage 103:====================================>                (81 + 38) / 119][Stage 103:===========================================>        (100 + 19) / 119][Stage 103:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 2.798628721 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionI ndex = 144 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365778508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:====================================>                (78 + 35) / 113][Stage 104:========================================>            (87 + 26) / 113][Stage 104:==============================================>     (102 + 11) / 113][Stage 104:===================================================> (110 + 3) / 113]                                                                                [Stage 105:====================================>                (79 + 35) / 114][Stage 105:=========================================>           (90 + 24) / 114][Stage 105:===============================================>    (104 + 10) / 114][Stage 105:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.848582478 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionI ndex = 146 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407748853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:==========================>                          (61 + 60) / 121][Stage 106:==============================>                      (69 + 52) / 121][Stage 106:=====================================>               (86 + 35) / 121][Stage 106:===============================================>    (111 + 10) / 121][Stage 106:====================================================>(119 + 2) / 121]                                                                                [Stage 107:==========================>                          (61 + 61) / 122][Stage 107:===========================>                         (64 + 58) / 122][Stage 107:=================================>                   (78 + 44) / 122][Stage 107:=============================================>      (106 + 16) / 122][Stage 107:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.291678958 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 144 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363544062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (81 + 34) / 115][Stage 108:========================================>            (87 + 28) / 115][Stage 108:============================================>        (97 + 18) / 115][Stage 108:====================================================>(113 + 2) / 115]                                                                                [Stage 109:=======================================>             (86 + 30) / 116][Stage 109:==========================================>          (92 + 24) / 116][Stage 109:==============================================>     (104 + 12) / 116][Stage 109:=================================================>   (109 + 7) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.98163678 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionI ndex = 170 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348753231 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:======================================>              (83 + 32) / 115][Stage 110:==========================================>          (93 + 22) / 115][Stage 110:================================================>    (106 + 9) / 115]                                                                                [Stage 111:=======================================>             (86 + 30) / 116][Stage 111:=============================================>      (101 + 15) / 116][Stage 111:==================================================>  (111 + 5) / 116][Stage 111:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.674175369 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionI ndex = 139 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402933881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:==========================>                          (60 + 60) / 120][Stage 112:================================>                    (73 + 47) / 120][Stage 112:=========================================>           (93 + 27) / 120][Stage 112:====================================================>(118 + 2) / 120]                                                                                [Stage 113:==========================>                          (61 + 60) / 121][Stage 113:==============================>                      (69 + 52) / 121][Stage 113:===================================>                 (80 + 41) / 121][Stage 113:===========================================>        (102 + 19) / 121][Stage 113:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.064641079 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIn dex = 34 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37324336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:==============================>                      (67 + 48) / 115][Stage 114:====================================>                (79 + 36) / 115][Stage 114:==========================================>          (92 + 23) / 115][Stage 114:=================================================>   (107 + 8) / 115]                                                                                [Stage 115:===============================>                     (68 + 48) / 116][Stage 115:===================================>                 (78 + 38) / 116][Stage 115:============================================>        (98 + 18) / 116][Stage 115:================================================>    (107 + 9) / 116][Stage 115:===================================================> (112 + 4) / 116][Stage 115:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.611478586 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionI ndex = 175 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377080687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==============================>                      (67 + 48) / 115][Stage 116:====================================>                (80 + 35) / 115][Stage 116:=========================================>           (89 + 26) / 115][Stage 116:=================================================>   (108 + 7) / 115][Stage 116:====================================================>(114 + 1) / 115]                                                                                [Stage 117:================================>                    (72 + 44) / 116][Stage 117:=========================================>           (91 + 25) / 116][Stage 117:=============================================>      (102 + 14) / 116][Stage 117:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.802280053 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIn dex = 81 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357118645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:=====================================>               (79 + 34) / 113][Stage 118:==========================================>          (90 + 23) / 113][Stage 118:==============================================>     (101 + 12) / 113][Stage 118:==================================================>  (108 + 5) / 113]                                                                                [Stage 119:===================================>                 (76 + 38) / 114][Stage 119:=======================================>             (86 + 28) / 114][Stage 119:=============================================>       (98 + 16) / 114][Stage 119:=================================================>   (107 + 7) / 114][Stage 119:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.146208307 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionI ndex = 219 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376209383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:==================================>                  (74 + 41) / 115][Stage 120:=======================================>             (86 + 29) / 115][Stage 120:=============================================>      (100 + 15) / 115][Stage 120:===================================================> (112 + 3) / 115]                                                                                [Stage 121:=================================>                   (73 + 43) / 116][Stage 121:========================================>            (89 + 27) / 116][Stage 121:=============================================>      (102 + 14) / 116][Stage 121:====================================================>(114 + 2) / 116][Stage 121:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.0374166 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 127 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363089176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:================================>                    (72 + 46) / 118][Stage 122:=================================>                   (75 + 43) / 118][Stage 122:========================================>            (91 + 27) / 118][Stage 122:============================================>       (102 + 16) / 118][Stage 122:===================================================> (114 + 4) / 118]                                                                                [Stage 123:================================>                    (74 + 45) / 119][Stage 123:====================================>                (82 + 37) / 119][Stage 123:=========================================>           (94 + 25) / 119][Stage 123:===============================================>    (109 + 10) / 119][Stage 123:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.31616334 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionI ndex = 179 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381588813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:===============================>                     (69 + 46) / 115][Stage 124:=======================================>             (85 + 30) / 115][Stage 124:==============================================>     (102 + 13) / 115][Stage 124:==================================================>  (110 + 5) / 115]                                                                                [Stage 125:====================================>                (80 + 36) / 116][Stage 125:===========================================>         (95 + 21) / 116][Stage 125:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.663894934 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionI ndex = 187 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495805863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:================================>                    (73 + 45) / 118][Stage 126:==================================>                  (76 + 42) / 118][Stage 126:======================================>              (86 + 32) / 118][Stage 126:============================================>       (100 + 18) / 118][Stage 126:===================================================> (114 + 4) / 118]                                                                                [Stage 127:================================>                    (74 + 45) / 119][Stage 127:===================================>                 (80 + 39) / 119][Stage 127:====================================>                (83 + 36) / 119][Stage 127:===========================================>        (100 + 19) / 119][Stage 127:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.350687478 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionInd ex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414114978 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:===========================>                         (62 + 58) / 120][Stage 128:==============================>                      (68 + 52) / 120][Stage 128:=====================================>               (86 + 34) / 120][Stage 128:==============================================>     (107 + 13) / 120][Stage 128:====================================================>(119 + 1) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:===============================>                     (73 + 48) / 121][Stage 129:========================================>            (93 + 28) / 121][Stage 129:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 2.974760253 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 112 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390112148 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:============================>                        (61 + 52) / 113][Stage 130:================================>                    (69 + 44) / 113][Stage 130:=======================================>             (85 + 28) / 113][Stage 130:==============================================>     (101 + 12) / 113][Stage 130:====================================================>(111 + 2) / 113]                                                                                [Stage 131:============================>                        (61 + 53) / 114][Stage 131:==================================>                  (75 + 39) / 114][Stage 131:============================================>        (95 + 19) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.222374047 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionI ndex = 180 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383588734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:===========================>                         (58 + 55) / 113][Stage 132:============================>                        (61 + 52) / 113][Stage 132:=====================================>               (79 + 34) / 113][Stage 132:============================================>        (95 + 18) / 113][Stage 132:=================================================>   (106 + 7) / 113][Stage 132:===================================================> (110 + 3) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:===========================>                         (59 + 55) / 114][Stage 133:================================>                    (70 + 44) / 114][Stage 133:=====================================>               (81 + 33) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:==================================================>  (108 + 6) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.676644697 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIn dex = 42 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353489553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:=====================================>               (80 + 33) / 113][Stage 134:==========================================>          (91 + 22) / 113][Stage 134:===============================================>    (103 + 10) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:====================================>                (79 + 35) / 114][Stage 135:======================================>              (83 + 31) / 114][Stage 135:=============================================>      (100 + 14) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.416448126 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionI ndex = 137 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340282705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:====================================>                (80 + 35) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:===============================================>    (105 + 10) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:=======================================>             (87 + 29) / 116][Stage 137:=============================================>       (99 + 17) / 116][Stage 137:=================================================>   (108 + 8) / 116][Stage 137:==================================================>  (111 + 5) / 116][Stage 137:===================================================> (112 + 4) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.324603775 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 136 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40245933 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:==========================>                          (60 + 60) / 120][Stage 138:============================>                        (64 + 56) / 120][Stage 138:==================================>                  (78 + 42) / 120][Stage 138:=========================================>           (95 + 25) / 120][Stage 138:==================================================>  (115 + 5) / 120]                                                                                [Stage 139:============================>                        (65 + 56) / 121][Stage 139:==================================>                  (79 + 42) / 121][Stage 139:==========================================>         (100 + 21) / 121][Stage 139:==================================================>  (116 + 5) / 121][Stage 139:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.281133022 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.48253885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:==========================>                          (60 + 61) / 121][Stage 140:============================>                        (65 + 56) / 121][Stage 140:================================>                    (75 + 46) / 121][Stage 140:===========================================>         (99 + 22) / 121][Stage 140:==================================================>  (116 + 5) / 121][Stage 140:====================================================>(120 + 1) / 121]                                                                                [Stage 141:==========================>                          (61 + 61) / 122][Stage 141:=============================>                       (68 + 54) / 122][Stage 141:===================================>                 (81 + 41) / 122][Stage 141:===========================================>        (103 + 19) / 122][Stage 141:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.21888485 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIn dex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369395862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:=================================>                   (73 + 42) / 115][Stage 142:=======================================>             (85 + 30) / 115][Stage 142:==============================================>     (102 + 13) / 115][Stage 142:==================================================>  (109 + 6) / 115][Stage 142:====================================================>(113 + 2) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:===============================>                     (68 + 48) / 116][Stage 143:======================================>              (85 + 31) / 116][Stage 143:============================================>       (100 + 16) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.206047979 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionI ndex = 206 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401261785 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:============================>                        (65 + 55) / 120][Stage 144:===================================>                 (81 + 39) / 120][Stage 144:=============================================>      (105 + 15) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:===============================>                     (72 + 49) / 121][Stage 145:========================================>            (92 + 29) / 121][Stage 145:=============================================>      (106 + 15) / 121][Stage 145:==================================================>  (116 + 5) / 121][Stage 145:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.357051556 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionI ndex = 131 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343327189 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:====================================>                (80 + 35) / 115][Stage 146:========================================>            (87 + 28) / 115][Stage 146:===========================================>         (95 + 20) / 115][Stage 146:=================================================>   (108 + 7) / 115]                                                                                [Stage 147:======================================>              (85 + 31) / 116][Stage 147:=========================================>           (91 + 25) / 116][Stage 147:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.629964353 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 204 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387568697 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:>                                                      (0 + 0) / 113][Stage 148:===========================>                         (59 + 54) / 113][Stage 148:==============================>                      (64 + 49) / 113][Stage 148:====================================>                (77 + 36) / 113][Stage 148:=============================================>       (98 + 15) / 113]                                                                                [Stage 149:===========================>                         (59 + 55) / 114][Stage 149:===============================>                     (67 + 47) / 114][Stage 149:======================================>              (82 + 32) / 114][Stage 149:============================================>        (95 + 19) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.176233623 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIn dex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352575786 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:==================================>                  (73 + 40) / 113][Stage 150:=======================================>             (85 + 28) / 113][Stage 150:============================================>        (94 + 19) / 113][Stage 150:=================================================>   (106 + 7) / 113][Stage 150:===================================================> (110 + 3) / 113]                                                                                [Stage 151:======================================>              (82 + 32) / 114][Stage 151:===========================================>         (94 + 20) / 114][Stage 151:================================================>    (105 + 9) / 114][Stage 151:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.055774536 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIn dex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373511487 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:===============================>                     (68 + 47) / 115][Stage 152:===================================>                 (78 + 37) / 115][Stage 152:======================================>              (84 + 31) / 115][Stage 152:================================================>    (106 + 9) / 115][Stage 152:====================================================>(113 + 2) / 115]                                                                                [Stage 153:=====================================>               (81 + 35) / 116][Stage 153:===========================================>         (96 + 20) / 116][Stage 153:=================================================>   (108 + 8) / 116][Stage 153:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.602300383 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395847391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:===========================>                         (63 + 57) / 120][Stage 154:====================================>                (82 + 38) / 120][Stage 154:===========================================>        (100 + 20) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:=============================>                       (67 + 54) / 121][Stage 155:===================================>                 (81 + 40) / 121][Stage 155:==========================================>         (100 + 21) / 121][Stage 155:==================================================>  (115 + 6) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.525345321 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionI ndex = 103 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362420524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:================================>                    (72 + 46) / 118][Stage 156:==================================>                  (76 + 42) / 118][Stage 156:============================================>        (98 + 20) / 118][Stage 156:==================================================>  (113 + 5) / 118][Stage 156:====================================================>(117 + 1) / 118]                                                                                [Stage 157:================================>                    (73 + 46) / 119][Stage 157:=================================>                   (76 + 43) / 119][Stage 157:=======================================>             (89 + 30) / 119][Stage 157:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.041460909 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIn dex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388833075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:============================>                        (60 + 53) / 113][Stage 158:===================================>                 (75 + 38) / 113][Stage 158:==============================================>     (100 + 13) / 113][Stage 158:==================================================>  (108 + 5) / 113][Stage 158:====================================================>(111 + 2) / 113]                                                                                [Stage 159:===========================>                         (60 + 54) / 114][Stage 159:===============================>                     (68 + 46) / 114][Stage 159:=====================================>               (81 + 33) / 114][Stage 159:============================================>        (95 + 19) / 114][Stage 159:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.218927258 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex  = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363672265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 102 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338928216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:======================================>              (83 + 32) / 115][Stage 160:==========================================>          (92 + 23) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:====================================================>(113 + 2) / 115]                                                                                [Stage 161:=======================================>             (86 + 30) / 116][Stage 161:=============================================>      (101 + 15) / 116][Stage 161:==================================================>  (111 + 5) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.710107037 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionI ndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391460979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:============================>                        (65 + 55) / 120][Stage 162:====================================>                (82 + 38) / 120][Stage 162:=============================================>      (104 + 16) / 120]                                                                                [Stage 163:===========================>                         (63 + 58) / 121][Stage 163:================================>                    (74 + 47) / 121][Stage 163:==========================================>          (96 + 25) / 121][Stage 163:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.980825711 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIn dex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350672078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:======================================>              (84 + 31) / 115][Stage 164:==========================================>          (92 + 23) / 115][Stage 164:==============================================>     (102 + 13) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:========================================>            (89 + 27) / 116][Stage 165:=============================================>       (99 + 17) / 116][Stage 165:===================================================> (112 + 4) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.174645971 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionI ndex = 228 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407787351 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:=============================>                       (62 + 51) / 113][Stage 166:==================================>                  (74 + 39) / 113][Stage 166:=============================================>       (98 + 15) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===========================>                         (60 + 54) / 114][Stage 167:================================>                    (70 + 44) / 114][Stage 167:===========================================>         (94 + 20) / 114][Stage 167:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.194658285 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 11 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363988983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:================================>                    (72 + 46) / 118][Stage 168:==================================>                  (77 + 41) / 118][Stage 168:=======================================>             (89 + 29) / 118][Stage 168:=============================================>      (103 + 15) / 118][Stage 168:==================================================>  (113 + 5) / 118]                                                                                [Stage 169:=================================>                   (75 + 44) / 119][Stage 169:==================================>                  (78 + 41) / 119][Stage 169:======================================>              (86 + 33) / 119][Stage 169:=============================================>      (103 + 16) / 119][Stage 169:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.486189598 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionI ndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485237263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:===============================>                     (71 + 50) / 121][Stage 170:=====================================>               (85 + 36) / 121][Stage 170:============================================>       (104 + 17) / 121][Stage 170:====================================================>(119 + 2) / 121]                                                                                [Stage 171:==========================>                          (61 + 61) / 122][Stage 171:=============================>                       (68 + 54) / 122][Stage 171:====================================>                (85 + 37) / 122][Stage 171:=============================================>      (107 + 15) / 122][Stage 171:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.148198282 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionInd ex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357020947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:=================================>                   (75 + 43) / 118][Stage 172:======================================>              (86 + 32) / 118][Stage 172:========================================>            (91 + 27) / 118][Stage 172:=================================================>   (111 + 7) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:===================================>                 (80 + 39) / 119][Stage 173:=======================================>             (88 + 31) / 119][Stage 173:===========================================>         (98 + 21) / 119][Stage 173:=================================================>   (112 + 7) / 119][Stage 173:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.495673265 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIn dex = 97 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374618842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:============================>                        (61 + 52) / 113][Stage 174:================================>                    (70 + 43) / 113][Stage 174:====================================>                (77 + 36) / 113][Stage 174:==============================================>     (102 + 11) / 113][Stage 174:====================================================>(112 + 1) / 113]                                                                                [Stage 175:===========================>                         (59 + 55) / 114][Stage 175:=============================>                       (63 + 51) / 114][Stage 175:====================================>                (78 + 36) / 114][Stage 175:============================================>        (95 + 19) / 114][Stage 175:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.07156252 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionI ndex = 232 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395332702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (61 + 59) / 120][Stage 176:==================================>                  (77 + 43) / 120][Stage 176:=========================================>           (95 + 25) / 120][Stage 176:===================================================> (116 + 4) / 120]                                                                                [Stage 177:==========================>                          (61 + 60) / 121][Stage 177:===============================>                     (73 + 48) / 121][Stage 177:=========================================>           (95 + 26) / 121][Stage 177:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.037676527 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionI ndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391297453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (61 + 59) / 120][Stage 178:============================>                        (64 + 56) / 120][Stage 178:=====================================>               (86 + 34) / 120][Stage 178:==============================================>     (107 + 13) / 120][Stage 178:====================================================>(119 + 1) / 120]                                                                                [Stage 179:===========================>                         (62 + 59) / 121][Stage 179:==============================>                      (70 + 51) / 121][Stage 179:=====================================>               (86 + 35) / 121][Stage 179:==============================================>     (109 + 12) / 121][Stage 179:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.191904366 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIn dex = 25 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443269195 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:==========================>                          (60 + 60) / 120][Stage 180:================================>                    (74 + 46) / 120][Stage 180:=========================================>           (94 + 26) / 120][Stage 180:=================================================>   (111 + 9) / 120]                                                                                [Stage 181:===========================>                         (62 + 59) / 121][Stage 181:==================================>                  (78 + 43) / 121][Stage 181:========================================>            (93 + 28) / 121][Stage 181:===================================================> (117 + 4) / 121][Stage 181:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.189433436 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionI ndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4052919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==========================>                          (60 + 61) / 121][Stage 182:===========================>                         (63 + 58) / 121][Stage 182:===============================>                     (73 + 48) / 121][Stage 182:========================================>            (92 + 29) / 121][Stage 182:==================================================>  (116 + 5) / 121]                                                                                [Stage 183:===========================>                         (63 + 59) / 122][Stage 183:===============================>                     (72 + 50) / 122][Stage 183:===========================================>        (102 + 20) / 122][Stage 183:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.165739624 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 135 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379584048 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:============================>                        (60 + 53) / 113][Stage 184:===============================>                     (67 + 46) / 113][Stage 184:=============================================>       (96 + 17) / 113][Stage 184:====================================================>(111 + 2) / 113]                                                                                [Stage 185:===========================>                         (60 + 54) / 114][Stage 185:==============================>                      (66 + 48) / 114][Stage 185:=========================================>           (89 + 25) / 114][Stage 185:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.875463106 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIn dex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391464531 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:==========================>                          (60 + 60) / 120][Stage 186:============================>                        (65 + 55) / 120][Stage 186:=================================>                   (75 + 45) / 120][Stage 186:==========================================>          (96 + 24) / 120][Stage 186:=================================================>   (111 + 9) / 120]                                                                                [Stage 187:===========================>                         (62 + 59) / 121][Stage 187:=================================>                   (77 + 44) / 121][Stage 187:=========================================>           (95 + 26) / 121][Stage 187:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.130823965 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 116 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399545406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:===========================>                         (63 + 57) / 120][Stage 188:=================================>                   (75 + 45) / 120][Stage 188:=========================================>           (94 + 26) / 120][Stage 188:=================================================>   (112 + 8) / 120]                                                                                [Stage 189:==========================>                          (61 + 60) / 121][Stage 189:===============================>                     (71 + 50) / 121][Stage 189:========================================>            (93 + 28) / 121][Stage 189:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.162050781 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIn dex = 113 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389781466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:===========================>                         (63 + 57) / 120][Stage 190:===================================>                 (81 + 39) / 120][Stage 190:============================================>       (102 + 18) / 120][Stage 190:====================================================>(118 + 2) / 120][Stage 190:====================================================>(119 + 1) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:==============================>                      (69 + 52) / 121][Stage 191:========================================>            (92 + 29) / 121][Stage 191:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.112228037 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 181 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392687152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:==========================>                          (60 + 61) / 121][Stage 192:===========================>                         (63 + 58) / 121][Stage 192:=================================>                   (77 + 44) / 121][Stage 192:==========================================>          (96 + 25) / 121][Stage 192:==================================================>  (115 + 6) / 121]                                                                                [Stage 193:===========================>                         (64 + 58) / 122][Stage 193:================================>                    (75 + 47) / 122][Stage 193:============================================>       (105 + 17) / 122]                                                                                Time elapsed: 2.923021701 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498254338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:============================>                        (60 + 53) / 113][Stage 194:===============================>                     (67 + 46) / 113][Stage 194:======================================>              (82 + 31) / 113][Stage 194:============================================>        (95 + 18) / 113][Stage 194:================================================>    (104 + 9) / 113]                                                                                [Stage 195:===========================>                         (60 + 54) / 114][Stage 195:=================================>                   (71 + 43) / 114][Stage 195:========================================>            (87 + 27) / 114][Stage 195:============================================>        (96 + 18) / 114][Stage 195:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.447379785 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionI ndex = 158 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377819441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:===============================>                     (68 + 47) / 115][Stage 196:====================================>                (79 + 36) / 115][Stage 196:=============================================>       (99 + 16) / 115][Stage 196:==================================================>  (110 + 5) / 115][Stage 196:====================================================>(114 + 1) / 115]                                                                                [Stage 197:================================>                    (71 + 45) / 116][Stage 197:======================================>              (85 + 31) / 116][Stage 197:=============================================>      (101 + 15) / 116][Stage 197:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.991925805 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionI ndex = 110 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395487435 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:==========================>                          (61 + 60) / 121][Stage 198:================================>                    (74 + 47) / 121][Stage 198:========================================>            (93 + 28) / 121][Stage 198:===================================================> (117 + 4) / 121][Stage 198:====================================================>(120 + 1) / 121]                                                                                [Stage 199:==========================>                          (61 + 61) / 122][Stage 199:=============================>                       (68 + 54) / 122][Stage 199:=================================>                   (78 + 44) / 122][Stage 199:==========================================>          (97 + 25) / 122][Stage 199:==================================================>  (116 + 6) / 122][Stage 199:===================================================> (119 + 3) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.582116797 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m1.097s
user	11m30.044s
sys	0m39.408s
