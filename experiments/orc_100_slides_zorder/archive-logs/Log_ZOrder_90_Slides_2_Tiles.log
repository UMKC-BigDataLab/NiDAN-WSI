Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 03:01:22 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:01:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:01:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:01:37 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 03:01:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:01:50 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525030139-0628).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.405891151 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======>                                               (13 + 102) / 115][Stage 0:===========================>                           (57 + 58) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:========================================>              (85 + 30) / 115][Stage 0:===========================================>           (91 + 24) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115][Stage 0:=====================================================> (111 + 4) / 115][Stage 0:=====================================================> (112 + 3) / 115]                                                                                [Stage 1:===============================>                       (66 + 50) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:===========================================>           (91 + 25) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.279208382 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIn dex<=139", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=138 AND partitionZIndex<=139,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.837868763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=====================>                                 (46 + 74) / 120][Stage 2:==========================>                            (57 + 63) / 120][Stage 2:===========================>                           (59 + 61) / 120][Stage 2:=============================>                         (65 + 55) / 120][Stage 2:=================================>                     (73 + 47) / 120][Stage 2:=====================================>                 (81 + 39) / 120][Stage 2:=============================================>        (101 + 19) / 120][Stage 2:=====================================================> (116 + 4) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:============================>                          (62 + 59) / 121][Stage 3:=================================>                     (74 + 47) / 121][Stage 3:========================================>              (89 + 32) / 121][Stage 3:============================================>          (97 + 24) / 121][Stage 3:===================================================>   (113 + 8) / 121]                                                                                Time elapsed: 4.431891121 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZInd ex<=73", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.642847805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=================================>                     (71 + 47) / 118][Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (74 + 44) / 118][Stage 4:====================================>                  (78 + 40) / 118][Stage 4:======================================>                (82 + 36) / 118][Stage 4:=========================================>             (89 + 29) / 118][Stage 4:=============================================>         (97 + 21) / 118][Stage 4:===============================================>      (103 + 15) / 118][Stage 4:===============================================>      (104 + 14) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:===================================>                   (77 + 42) / 119][Stage 5:====================================>                  (79 + 40) / 119][Stage 5:=======================================>               (85 + 34) / 119][Stage 5:==========================================>            (92 + 27) / 119][Stage 5:=============================================>        (100 + 19) / 119][Stage 5:==================================================>    (110 + 9) / 119][Stage 5:====================================================>  (114 + 5) / 119][Stage 5:=====================================================> (116 + 3) / 119][Stage 5:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 5.266988918 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIn dex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.642444061 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:==========================================>            (88 + 27) / 115][Stage 6:===========================================>           (90 + 25) / 115][Stage 6:==============================================>        (97 + 18) / 115][Stage 6:================================================>     (104 + 11) / 115][Stage 6:======================================================>(114 + 1) / 115]                                                                                [Stage 7:=====================================>                 (79 + 37) / 116][Stage 7:========================================>              (85 + 31) / 116][Stage 7:=============================================>         (95 + 21) / 116][Stage 7:==============================================>        (99 + 17) / 116][Stage 7:================================================>     (105 + 11) / 116][Stage 7:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.631517193 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZInd ex<=94", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=93 AND partitionZIndex<=94,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50506474 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:=======================================>               (82 + 33) / 115][Stage 8:==========================================>            (89 + 26) / 115][Stage 8:==============================================>        (97 + 18) / 115][Stage 8:===============================================>      (101 + 14) / 115][Stage 8:===================================================>   (107 + 8) / 115][Stage 8:=====================================================> (112 + 3) / 115][Stage 8:======================================================>(114 + 1) / 115]                                                                                [Stage 9:=======================================>               (84 + 32) / 116][Stage 9:=========================================>             (88 + 28) / 116][Stage 9:===============================================>      (101 + 15) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:====================================================>  (111 + 5) / 116][Stage 9:=====================================================> (112 + 4) / 116][Stage 9:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.088055706 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIn dex<=247", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=247,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480224757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:=====================================>                (79 + 36) / 115][Stage 10:========================================>             (87 + 28) / 115][Stage 10:============================================>         (95 + 20) / 115][Stage 10:================================================>    (105 + 10) / 115][Stage 10:===================================================>  (110 + 5) / 115]                                                                                [Stage 11:======================================>               (83 + 33) / 116][Stage 11:========================================>             (88 + 28) / 116][Stage 11:=============================================>        (98 + 18) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 3.464569017 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZInd ex<=87", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=86 AND partitionZIndex<=87,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477637806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:=========================================>            (89 + 26) / 115][Stage 12:============================================>         (95 + 20) / 115][Stage 12:==================================================>   (108 + 7) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:======================================>               (82 + 34) / 116][Stage 13:=========================================>            (90 + 26) / 116][Stage 13:==============================================>      (102 + 14) / 116][Stage 13:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.176599957 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZInd ex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.612867055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:=================================>                    (70 + 43) / 113][Stage 14:===================================>                  (74 + 39) / 113][Stage 14:=======================================>              (82 + 31) / 113][Stage 14:==========================================>           (88 + 25) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:===============================================>     (101 + 12) / 113][Stage 14:==================================================>   (106 + 7) / 113]                                                                                [Stage 15:==================================>                   (73 + 41) / 114][Stage 15:==========================================>           (89 + 25) / 114][Stage 15:=============================================>        (97 + 17) / 114][Stage 15:================================================>    (104 + 10) / 114][Stage 15:==================================================>   (107 + 7) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.069075524 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIn dex<=106", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=105 AND partitionZIndex<=106,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467302202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:======================================>               (82 + 33) / 115][Stage 16:=============================================>        (96 + 19) / 115][Stage 16:===============================================>     (103 + 12) / 115][Stage 16:=================================================>    (106 + 9) / 115][Stage 16:==================================================>   (107 + 8) / 115][Stage 16:====================================================> (111 + 4) / 115]                                                                                [Stage 17:======================================>               (82 + 34) / 116][Stage 17:=========================================>            (90 + 26) / 116][Stage 17:=============================================>       (100 + 16) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:====================================================> (113 + 3) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.714471072 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZInde x<=2", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478832507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:=================================>                    (73 + 45) / 118][Stage 18:========================================>             (89 + 29) / 118][Stage 18:=============================================>        (99 + 19) / 118][Stage 18:====================================================> (115 + 3) / 118][Stage 18:=====================================================>(116 + 2) / 118]                                                                                [Stage 19:=================================>                    (73 + 46) / 119][Stage 19:=================================>                    (74 + 45) / 119][Stage 19:====================================>                 (81 + 38) / 119][Stage 19:===========================================>          (95 + 24) / 119][Stage 19:================================================>    (108 + 11) / 119][Stage 19:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.646689169 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZInd ex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505718776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:===============================>                      (67 + 48) / 115][Stage 20:======================================>               (83 + 32) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:==============================================>      (101 + 14) / 115][Stage 20:==================================================>   (108 + 7) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:===============================>                      (68 + 48) / 116][Stage 21:===================================>                  (77 + 39) / 116][Stage 21:========================================>             (87 + 29) / 116][Stage 21:============================================>         (96 + 20) / 116][Stage 21:==================================================>   (108 + 8) / 116][Stage 21:====================================================> (113 + 3) / 116][Stage 21:=====================================================>(114 + 2) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.656693826 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZInd ex<=35", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=34 AND partitionZIndex<=35,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443745383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:=====================================>                (79 + 36) / 115][Stage 22:========================================>             (87 + 28) / 115][Stage 22:==============================================>       (99 + 16) / 115][Stage 22:==============================================>      (101 + 14) / 115][Stage 22:================================================>    (105 + 10) / 115][Stage 22:====================================================> (112 + 3) / 115]                                                                                [Stage 23:======================================>               (83 + 33) / 116][Stage 23:===========================================>          (93 + 23) / 116][Stage 23:=============================================>        (98 + 18) / 116][Stage 23:==================================================>   (108 + 8) / 116][Stage 23:==================================================>   (109 + 7) / 116][Stage 23:===================================================>  (111 + 5) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.244861683 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIn dex<=130", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=129 AND partitionZIndex<=130,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.55895399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:=============================>                        (66 + 54) / 120][Stage 24:===================================>                  (79 + 41) / 120][Stage 24:=============================================>       (102 + 18) / 120][Stage 24:====================================================> (117 + 3) / 120][Stage 24:=====================================================>(119 + 1) / 120]                                                                                [Stage 25:==========================>                           (60 + 61) / 121][Stage 25:=============================>                        (66 + 55) / 121][Stage 25:======================================>               (87 + 34) / 121][Stage 25:=============================================>       (105 + 16) / 121][Stage 25:==================================================>   (113 + 8) / 121][Stage 25:====================================================> (118 + 3) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.745304286 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIn dex<=122", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=121 AND partitionZIndex<=122,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448811242 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:====================================>                 (78 + 37) / 115][Stage 26:======================================>               (82 + 33) / 115][Stage 26:=============================================>        (97 + 18) / 115][Stage 26:==================================================>   (107 + 8) / 115][Stage 26:=====================================================>(113 + 2) / 115]                                                                                [Stage 27:========================================>             (86 + 30) / 116][Stage 27:===========================================>          (94 + 22) / 116][Stage 27:================================================>    (106 + 10) / 116][Stage 27:====================================================> (112 + 4) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.466328887 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZInd ex<=99", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=98 AND partitionZIndex<=99,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438021837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==================================>                   (72 + 41) / 113][Stage 28:=======================================>              (83 + 30) / 113][Stage 28:===========================================>          (92 + 21) / 113][Stage 28:================================================>    (103 + 10) / 113][Stage 28:===================================================>  (107 + 6) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:======================================>               (81 + 33) / 114][Stage 29:==============================================>       (98 + 16) / 114][Stage 29:==================================================>   (106 + 8) / 114][Stage 29:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.312483817 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZInd ex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.656347841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:===========================>                          (61 + 59) / 120][Stage 30:=================================>                    (74 + 46) / 120][Stage 30:=======================================>              (88 + 32) / 120][Stage 30:===============================================>     (107 + 13) / 120][Stage 30:===================================================>  (114 + 6) / 120]                                                                                [Stage 31:===========================>                          (61 + 60) / 121][Stage 31:===============================>                      (70 + 51) / 121][Stage 31:=====================================>                (84 + 37) / 121][Stage 31:==============================================>      (106 + 15) / 121][Stage 31:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.620317358 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIn dex<=108", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=107 AND partitionZIndex<=108,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428918439 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:=================================>                    (71 + 42) / 113][Stage 32:======================================>               (81 + 32) / 113][Stage 32:============================================>         (94 + 19) / 113][Stage 32:===============================================>     (102 + 11) / 113][Stage 32:====================================================> (110 + 3) / 113]                                                                                [Stage 33:======================================>               (82 + 32) / 114][Stage 33:============================================>         (94 + 20) / 114][Stage 33:===============================================>     (102 + 12) / 114][Stage 33:===================================================>  (109 + 5) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.155125367 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIn dex<=135", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=134 AND partitionZIndex<=135,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480154766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:=============================>                        (62 + 51) / 113][Stage 34:====================================>                 (76 + 37) / 113][Stage 34:============================================>         (93 + 20) / 113][Stage 34:===============================================>      (99 + 14) / 113][Stage 34:=====================================================>(111 + 2) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:===========================>                          (59 + 55) / 114][Stage 35:===============================>                      (66 + 48) / 114][Stage 35:=====================================>                (79 + 35) / 114][Stage 35:============================================>         (94 + 20) / 114][Stage 35:===============================================>     (102 + 12) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.001283609 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZInd ex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510938649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:===========================>                          (61 + 60) / 121][Stage 36:================================>                     (72 + 49) / 121][Stage 36:======================================>               (87 + 34) / 121][Stage 36:=============================================>       (105 + 16) / 121][Stage 36:==================================================>   (113 + 8) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:==============================>                       (68 + 54) / 122][Stage 37:=======================================>              (90 + 32) / 122][Stage 37:================================================>    (111 + 11) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.478144862 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIn dex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467557932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:===========================>                          (58 + 55) / 113][Stage 38:==============================>                       (63 + 50) / 113][Stage 38:=======================================>              (82 + 31) / 113][Stage 38:===============================================>     (101 + 12) / 113]                                                                                [Stage 39:===========================>                          (59 + 55) / 114][Stage 39:=================================>                    (70 + 44) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:===============================================>     (102 + 12) / 114][Stage 39:====================================================> (110 + 4) / 114][Stage 39:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.315517798 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZInd ex<=14", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=13 AND partitionZIndex<=14,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.498205456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:===========================>                          (61 + 60) / 121][Stage 40:=================================>                    (75 + 46) / 121][Stage 40:=========================================>            (92 + 29) / 121][Stage 40:=================================================>    (112 + 9) / 121][Stage 40:=====================================================>(120 + 1) / 121]                                                                                [Stage 41:===========================>                          (63 + 59) / 122][Stage 41:==================================>                   (79 + 43) / 122][Stage 41:===========================================>          (98 + 24) / 122][Stage 41:==================================================>   (114 + 8) / 122][Stage 41:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.501455604 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIn dex<=209", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=208 AND partitionZIndex<=209,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487464731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===============================>                      (68 + 47) / 115][Stage 42:====================================>                 (77 + 38) / 115][Stage 42:============================================>         (95 + 20) / 115][Stage 42:================================================>    (105 + 10) / 115][Stage 42:===================================================>  (109 + 6) / 115][Stage 42:===================================================>  (110 + 5) / 115]                                                                                [Stage 43:==================================>                   (75 + 41) / 116][Stage 43:===========================================>          (94 + 22) / 116][Stage 43:===============================================>     (105 + 11) / 116][Stage 43:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.295906207 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZInd ex<=21", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442393808 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:==================================>                   (76 + 42) / 118][Stage 44:===========================================>          (96 + 22) / 118][Stage 44:=================================================>    (109 + 9) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:=====================================>                (82 + 37) / 119][Stage 45:==============================================>      (105 + 14) / 119][Stage 45:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.961371649 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZInde x<=7", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.449675237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:=================================>                    (73 + 45) / 118][Stage 46:=====================================>                (82 + 36) / 118][Stage 46:===========================================>          (96 + 22) / 118][Stage 46:==================================================>   (111 + 7) / 118][Stage 46:===================================================>  (113 + 5) / 118][Stage 46:=====================================================>(117 + 1) / 118]                                                                                [Stage 47:=================================>                    (74 + 45) / 119][Stage 47:====================================>                 (80 + 39) / 119][Stage 47:========================================>             (90 + 29) / 119][Stage 47:================================================>    (108 + 11) / 119][Stage 47:===================================================>  (114 + 5) / 119][Stage 47:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.667431756 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIn dex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429175454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:================================>                     (72 + 46) / 118][Stage 48:=================================>                    (73 + 45) / 118][Stage 48:======================================>               (85 + 33) / 118][Stage 48:================================================>    (108 + 10) / 118][Stage 48:====================================================> (115 + 3) / 118]                                                                                [Stage 49:=================================>                    (73 + 46) / 119][Stage 49:=================================>                    (74 + 45) / 119][Stage 49:====================================>                 (81 + 38) / 119][Stage 49:=============================================>       (102 + 17) / 119][Stage 49:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.079670456 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIn dex<=107", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=106 AND partitionZIndex<=107,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399964515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:========================================>             (86 + 29) / 115][Stage 50:============================================>         (95 + 20) / 115][Stage 50:================================================>    (105 + 10) / 115][Stage 50:====================================================> (112 + 3) / 115]                                                                                [Stage 51:======================================>               (82 + 34) / 116][Stage 51:==========================================>           (92 + 24) / 116][Stage 51:===============================================>     (105 + 11) / 116][Stage 51:===================================================>  (110 + 6) / 116][Stage 51:===================================================>  (111 + 5) / 116][Stage 51:====================================================> (112 + 4) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.114536207 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZInd ex<=69", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=68 AND partitionZIndex<=69,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376178578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:======================================>               (82 + 33) / 115][Stage 52:========================================>             (86 + 29) / 115][Stage 52:===============================================>     (102 + 13) / 115][Stage 52:====================================================> (111 + 4) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:==========================================>           (92 + 24) / 116][Stage 53:===============================================>     (104 + 12) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.857581969 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZInd ex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442727705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:=================================>                    (73 + 45) / 118][Stage 54:====================================>                 (79 + 39) / 118][Stage 54:=============================================>       (102 + 16) / 118][Stage 54:=====================================================>(116 + 2) / 118]                                                                                [Stage 55:=================================>                    (73 + 46) / 119][Stage 55:====================================>                 (80 + 39) / 119][Stage 55:============================================>         (97 + 22) / 119][Stage 55:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.084100358 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIn dex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448775209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:============================>                         (59 + 54) / 113][Stage 56:============================>                         (60 + 53) / 113][Stage 56:================================>                     (67 + 46) / 113][Stage 56:===========================================>          (91 + 22) / 113][Stage 56:===================================================>  (108 + 5) / 113]                                                                                [Stage 57:============================>                         (61 + 53) / 114][Stage 57:=================================>                    (71 + 43) / 114][Stage 57:============================================>         (93 + 21) / 114][Stage 57:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.142827789 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZInde x<=9", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=8 AND partitionZIndex<=9,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384302309 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:======================================>               (82 + 33) / 115][Stage 58:============================================>         (94 + 21) / 115][Stage 58:===============================================>     (104 + 11) / 115][Stage 58:====================================================> (112 + 3) / 115]                                                                                [Stage 59:======================================>               (82 + 34) / 116][Stage 59:=========================================>            (89 + 27) / 116][Stage 59:==============================================>      (102 + 14) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.58100025 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIn dex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420497614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:=================================>                    (71 + 44) / 115][Stage 60:======================================>               (83 + 32) / 115][Stage 60:============================================>         (94 + 21) / 115][Stage 60:==================================================>   (107 + 8) / 115][Stage 60:====================================================> (112 + 3) / 115]                                                                                [Stage 61:===================================>                  (77 + 39) / 116][Stage 61:===========================================>          (94 + 22) / 116][Stage 61:================================================>    (106 + 10) / 116][Stage 61:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.159232085 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIn dex<=235", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425210052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:============================>                         (59 + 54) / 113][Stage 62:=============================>                        (61 + 52) / 113][Stage 62:===================================>                  (75 + 38) / 113][Stage 62:==========================================>           (89 + 24) / 113][Stage 62:====================================================> (109 + 4) / 113]                                                                                [Stage 63:==============================>                       (64 + 50) / 114][Stage 63:=================================>                    (71 + 43) / 114][Stage 63:=========================================>            (88 + 26) / 114][Stage 63:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.07983328 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZInd ex<=19", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=18 AND partitionZIndex<=19,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444064227 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:================================>                     (70 + 45) / 115][Stage 64:========================================>             (87 + 28) / 115][Stage 64:==============================================>      (101 + 14) / 115][Stage 64:===================================================>  (110 + 5) / 115]                                                                                [Stage 65:===================================>                  (76 + 40) / 116][Stage 65:=========================================>            (90 + 26) / 116][Stage 65:==============================================>      (102 + 14) / 116][Stage 65:====================================================> (112 + 4) / 116][Stage 65:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.31965652 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIn dex<=202", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=202,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405155171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:=================================>                    (70 + 43) / 113][Stage 66:=======================================>              (82 + 31) / 113][Stage 66:============================================>         (94 + 19) / 113][Stage 66:=================================================>    (104 + 9) / 113][Stage 66:====================================================> (109 + 4) / 113]                                                                                [Stage 67:=====================================>                (80 + 34) / 114][Stage 67:===========================================>          (91 + 23) / 114][Stage 67:==============================================>      (100 + 14) / 114][Stage 67:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.070894934 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZInd ex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477190659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:===========================>                          (60 + 60) / 120][Stage 68:============================>                         (64 + 56) / 120][Stage 68:======================================>               (85 + 35) / 120][Stage 68:==============================================>      (106 + 14) / 120][Stage 68:=====================================================>(118 + 2) / 120]                                                                                [Stage 69:============================>                         (64 + 57) / 121][Stage 69:=================================>                    (74 + 47) / 121][Stage 69:===========================================>         (100 + 21) / 121][Stage 69:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.299127946 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIn dex<=167", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=166 AND partitionZIndex<=167,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432496979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:=================================>                    (70 + 43) / 113][Stage 70:========================================>             (85 + 28) / 113][Stage 70:==============================================>      (100 + 13) / 113][Stage 70:=====================================================>(111 + 2) / 113]                                                                                [Stage 71:===========================>                          (59 + 55) / 114][Stage 71:===============================>                      (67 + 47) / 114][Stage 71:=========================================>            (87 + 27) / 114][Stage 71:===============================================>     (103 + 11) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.250228664 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZInd ex<=86", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415496929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:============================>                         (59 + 54) / 113][Stage 72:==============================>                       (63 + 50) / 113][Stage 72:====================================>                 (76 + 37) / 113][Stage 72:=============================================>        (96 + 17) / 113][Stage 72:====================================================> (110 + 3) / 113]                                                                                [Stage 73:=============================>                        (62 + 52) / 114][Stage 73:=====================================>                (79 + 35) / 114][Stage 73:=============================================>        (95 + 19) / 114][Stage 73:=================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.138003127 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZInd ex<=72", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=71 AND partitionZIndex<=72,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42580557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:================================>                     (69 + 46) / 115][Stage 74:========================================>             (86 + 29) / 115][Stage 74:=================================================>    (106 + 9) / 115][Stage 74:====================================================> (112 + 3) / 115]                                                                                [Stage 75:==================================>                   (75 + 41) / 116][Stage 75:==========================================>           (92 + 24) / 116][Stage 75:===============================================>     (103 + 13) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.819454484 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIn dex<=147", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=146 AND partitionZIndex<=147,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368804961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:=====================================>                (80 + 35) / 115][Stage 76:========================================>             (87 + 28) / 115][Stage 76:==============================================>      (101 + 14) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:=====================================>                (81 + 35) / 116][Stage 77:=========================================>            (90 + 26) / 116][Stage 77:==============================================>      (102 + 14) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.542501987 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZInd ex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.464243283 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:============================>                         (63 + 58) / 121][Stage 78:=================================>                    (75 + 46) / 121][Stage 78:===========================================>         (100 + 21) / 121][Stage 78:==================================================>   (113 + 8) / 121]                                                                                [Stage 79:===========================>                          (61 + 61) / 122][Stage 79:==============================>                       (70 + 52) / 122][Stage 79:=======================================>              (90 + 32) / 122][Stage 79:==============================================>      (108 + 14) / 122][Stage 79:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.252765174 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIn dex<=221", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=220 AND partitionZIndex<=221,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512695237 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:==============================>                       (63 + 50) / 113][Stage 80:==================================>                   (73 + 40) / 113][Stage 80:============================================>         (93 + 20) / 113][Stage 80:===================================================>  (108 + 5) / 113]                                                                                [Stage 81:=============================>                        (63 + 51) / 114][Stage 81:=====================================>                (79 + 35) / 114][Stage 81:=========================================>            (88 + 26) / 114][Stage 81:==============================================>      (101 + 13) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.259226154 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIn dex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358125997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:======================================>               (83 + 32) / 115][Stage 82:=========================================>            (89 + 26) / 115][Stage 82:===============================================>     (102 + 13) / 115][Stage 82:===================================================>  (109 + 6) / 115]                                                                                [Stage 83:=======================================>              (85 + 31) / 116][Stage 83:=============================================>        (98 + 18) / 116][Stage 83:==================================================>   (108 + 8) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.864617627 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIn dex<=113", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=112 AND partitionZIndex<=113,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427668374 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:===========================>                          (61 + 59) / 120][Stage 84:===============================>                      (71 + 49) / 120][Stage 84:===========================================>          (97 + 23) / 120][Stage 84:====================================================> (116 + 4) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:================================>                     (73 + 48) / 121][Stage 85:===========================================>          (98 + 23) / 121][Stage 85:==================================================>   (114 + 7) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.227751678 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZInde x<=4", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=3 AND partitionZIndex<=4,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401005747 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:===========================>                          (58 + 55) / 113][Stage 86:=============================>                        (62 + 51) / 113][Stage 86:====================================>                 (77 + 36) / 113][Stage 86:===============================================>      (99 + 14) / 113][Stage 86:=====================================================>(111 + 2) / 113]                                                                                [Stage 87:============================>                         (60 + 54) / 114][Stage 87:=============================>                        (63 + 51) / 114][Stage 87:=======================================>              (83 + 31) / 114][Stage 87:===============================================>     (103 + 11) / 114][Stage 87:===================================================>  (109 + 5) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.672976176 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIn dex<=232", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=231 AND partitionZIndex<=232,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376168867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:=====================================>                (79 + 34) / 113][Stage 88:============================================>         (93 + 20) / 113][Stage 88:=================================================>    (104 + 9) / 113][Stage 88:====================================================> (109 + 4) / 113]                                                                                [Stage 89:========================================>             (86 + 28) / 114][Stage 89:=============================================>        (95 + 19) / 114][Stage 89:==================================================>   (107 + 7) / 114]                                                                                Time elapsed: 2.747650464 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIn dex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.438398216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:==========================>                           (60 + 61) / 121][Stage 90:===========================>                          (62 + 59) / 121][Stage 90:=================================>                    (76 + 45) / 121][Stage 90:===========================================>          (98 + 23) / 121][Stage 90:===================================================>  (116 + 5) / 121][Stage 90:=====================================================>(119 + 2) / 121]                                                                                [Stage 91:===========================>                          (63 + 59) / 122][Stage 91:================================>                     (73 + 49) / 122][Stage 91:===========================================>          (98 + 24) / 122][Stage 91:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.387785883 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZInd ex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387596211 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:==============================>                       (66 + 49) / 115][Stage 92:======================================>               (82 + 33) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:==============================================>      (101 + 14) / 115][Stage 92:====================================================> (112 + 3) / 115]                                                                                [Stage 93:===================================>                  (76 + 40) / 116][Stage 93:========================================>             (88 + 28) / 116][Stage 93:===============================================>     (103 + 13) / 116][Stage 93:====================================================> (113 + 3) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.732330816 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIn dex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348139413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:=====================================>                (80 + 35) / 115][Stage 94:=======================================>              (85 + 30) / 115][Stage 94:==============================================>       (98 + 17) / 115][Stage 94:===================================================>  (109 + 6) / 115]                                                                                [Stage 95:======================================>               (82 + 34) / 116][Stage 95:========================================>             (88 + 28) / 116][Stage 95:==============================================>       (99 + 17) / 116][Stage 95:================================================>    (106 + 10) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.905585622 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZInd ex<=26", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391301665 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==============================>                       (65 + 50) / 115][Stage 96:=====================================>                (79 + 36) / 115][Stage 96:==============================================>       (98 + 17) / 115][Stage 96:==================================================>   (107 + 8) / 115][Stage 96:=====================================================>(113 + 2) / 115][Stage 96:=====================================================>(114 + 1) / 115]                                                                                [Stage 97:====================================>                 (78 + 38) / 116][Stage 97:=========================================>            (90 + 26) / 116][Stage 97:=============================================>       (100 + 16) / 116][Stage 97:===================================================>  (110 + 6) / 116][Stage 97:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.871335099 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIn dex<=180", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=179 AND partitionZIndex<=180,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426419345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:=============================>                        (66 + 54) / 120][Stage 98:=================================>                    (75 + 45) / 120][Stage 98:==========================================>           (95 + 25) / 120][Stage 98:=====================================================>(118 + 2) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:===============================>                      (70 + 51) / 121][Stage 99:======================================>               (87 + 34) / 121][Stage 99:===============================================>     (109 + 12) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.103856065 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIn dex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424032695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:============================>                        (64 + 57) / 121][Stage 100:===================================>                 (81 + 40) / 121][Stage 100:=============================================>      (105 + 16) / 121][Stage 100:====================================================>(120 + 1) / 121]                                                                                [Stage 101:===========================>                         (63 + 59) / 122][Stage 101:====================================>                (85 + 37) / 122][Stage 101:===========================================>         (99 + 23) / 122][Stage 101:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.126980533 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZInd ex<=31", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=30 AND partitionZIndex<=31,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342228007 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:======================================>              (83 + 32) / 115][Stage 102:=========================================>           (89 + 26) / 115][Stage 102:=================================================>   (107 + 8) / 115][Stage 102:==================================================>  (110 + 5) / 115]                                                                                [Stage 103:======================================>              (84 + 32) / 116][Stage 103:==========================================>          (94 + 22) / 116][Stage 103:==============================================>     (103 + 13) / 116][Stage 103:==================================================>  (111 + 5) / 116][Stage 103:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.369954158 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIn dex<=119", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362867449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:=================================>                   (72 + 41) / 113][Stage 104:=======================================>             (85 + 28) / 113][Stage 104:==============================================>     (100 + 13) / 113][Stage 104:==================================================>  (108 + 5) / 113][Stage 104:====================================================>(111 + 2) / 113]                                                                                [Stage 105:======================================>              (83 + 31) / 114][Stage 105:==========================================>          (92 + 22) / 114][Stage 105:===============================================>    (104 + 10) / 114][Stage 105:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.982292025 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIn dex<=104", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=103 AND partitionZIndex<=104,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353441651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:====================================>                (80 + 35) / 115][Stage 106:=======================================>             (86 + 29) / 115][Stage 106:============================================>        (97 + 18) / 115][Stage 106:================================================>    (106 + 9) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:=====================================>               (82 + 34) / 116][Stage 107:========================================>            (88 + 28) / 116][Stage 107:===============================================>    (105 + 11) / 116][Stage 107:==================================================>  (111 + 5) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.911182697 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIn dex<=245", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=244 AND partitionZIndex<=245,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405833399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (81 + 32) / 113][Stage 108:==========================================>          (90 + 23) / 113][Stage 108:==============================================>     (101 + 12) / 113][Stage 108:==================================================>  (107 + 6) / 113][Stage 108:====================================================>(111 + 2) / 113]                                                                                [Stage 109:==================================>                  (74 + 40) / 114][Stage 109:=======================================>             (85 + 29) / 114][Stage 109:=============================================>       (97 + 17) / 114][Stage 109:================================================>    (105 + 9) / 114][Stage 109:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.192058693 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIn dex<=168", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=167 AND partitionZIndex<=168,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416589202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:=============================>                       (66 + 54) / 120][Stage 110:=======================================>             (89 + 31) / 120][Stage 110:===============================================>    (109 + 11) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:===============================>                     (72 + 49) / 121][Stage 111:==========================================>          (96 + 25) / 121][Stage 111:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.035987365 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIn dex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410652837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:=============================>                       (62 + 51) / 113][Stage 112:=================================>                   (72 + 41) / 113][Stage 112:=============================================>       (96 + 17) / 113][Stage 112:==================================================>  (107 + 6) / 113]                                                                                [Stage 113:===========================>                         (59 + 55) / 114][Stage 113:=============================>                       (63 + 51) / 114][Stage 113:====================================>                (79 + 35) / 114][Stage 113:============================================>        (95 + 19) / 114][Stage 113:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.944004454 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIn dex<=210", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=209 AND partitionZIndex<=210,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393202167 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:===========================>                         (59 + 54) / 113][Stage 114:================================>                    (69 + 44) / 113][Stage 114:=======================================>             (85 + 28) / 113][Stage 114:==============================================>     (100 + 13) / 113][Stage 114:====================================================>(112 + 1) / 113]                                                                                [Stage 115:===========================>                         (60 + 54) / 114][Stage 115:==============================>                      (66 + 48) / 114][Stage 115:=======================================>             (84 + 30) / 114][Stage 115:==============================================>      (99 + 15) / 114][Stage 115:===================================================> (110 + 4) / 114][Stage 115:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.280020349 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZInd ex<=33", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=32 AND partitionZIndex<=33,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399757892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (61 + 59) / 120][Stage 116:===============================>                     (72 + 48) / 120][Stage 116:=========================================>           (93 + 27) / 120][Stage 116:===================================================> (117 + 3) / 120]                                                                                [Stage 117:============================>                        (66 + 55) / 121][Stage 117:===================================>                 (81 + 40) / 121][Stage 117:=============================================>      (105 + 16) / 121][Stage 117:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.946822716 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZInd ex<=74", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=73 AND partitionZIndex<=74,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467858223 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:==================================>                  (76 + 42) / 118][Stage 118:======================================>              (85 + 33) / 118][Stage 118:================================================>    (109 + 9) / 118][Stage 118:====================================================>(117 + 1) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:=================================>                   (75 + 44) / 119][Stage 119:=========================================>           (93 + 26) / 119][Stage 119:==================================================>  (114 + 5) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.990034264 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=101", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401077856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:==========================>                          (60 + 60) / 120][Stage 120:==============================>                      (68 + 52) / 120][Stage 120:=========================================>           (94 + 26) / 120][Stage 120:=================================================>   (111 + 9) / 120][Stage 120:====================================================>(119 + 1) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:==============================>                      (69 + 52) / 121][Stage 121:===================================>                 (82 + 39) / 121][Stage 121:=============================================>      (106 + 15) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.056769224 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIn dex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395320093 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:===========================>                         (62 + 59) / 121][Stage 122:===============================>                     (73 + 48) / 121][Stage 122:==========================================>          (96 + 25) / 121][Stage 122:=================================================>   (114 + 7) / 121]                                                                                [Stage 123:===========================>                         (63 + 59) / 122][Stage 123:================================>                    (75 + 47) / 122][Stage 123:==========================================>          (97 + 25) / 122][Stage 123:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.1171666 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZInde x<=3", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=2 AND partitionZIndex<=3,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379994411 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:============================>                        (61 + 52) / 113][Stage 124:===================================>                 (75 + 38) / 113][Stage 124:==========================================>          (91 + 22) / 113][Stage 124:===================================================> (110 + 3) / 113]                                                                                [Stage 125:===========================>                         (59 + 55) / 114][Stage 125:==============================>                      (66 + 48) / 114][Stage 125:=====================================>               (81 + 33) / 114][Stage 125:==============================================>     (101 + 13) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.439045395 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIn dex<=158", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=157 AND partitionZIndex<=158,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355227712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:===================================>                 (75 + 38) / 113][Stage 126:========================================>            (87 + 26) / 113][Stage 126:=============================================>       (96 + 17) / 113][Stage 126:==============================================>     (101 + 12) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:===================================>                 (76 + 38) / 114][Stage 127:========================================>            (88 + 26) / 114][Stage 127:=============================================>       (98 + 16) / 114][Stage 127:=================================================>   (107 + 7) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.071126627 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIn dex<=155", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38990095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:================================>                    (69 + 44) / 113][Stage 128:===========================================>         (93 + 20) / 113][Stage 128:=================================================>   (105 + 8) / 113]                                                                                [Stage 129:===========================>                         (59 + 55) / 114][Stage 129:=============================>                       (64 + 50) / 114][Stage 129:====================================>                (78 + 36) / 114][Stage 129:============================================>        (96 + 18) / 114][Stage 129:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.001085675 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIn dex<=234", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=233 AND partitionZIndex<=234,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353752698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:=================================>                   (71 + 42) / 113][Stage 130:=======================================>             (85 + 28) / 113][Stage 130:=============================================>       (97 + 16) / 113][Stage 130:==================================================>  (108 + 5) / 113][Stage 130:====================================================>(111 + 2) / 113]                                                                                [Stage 131:====================================>                (79 + 35) / 114][Stage 131:===========================================>         (94 + 20) / 114][Stage 131:==============================================>     (102 + 12) / 114][Stage 131:=================================================>   (106 + 8) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.141303303 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZInd ex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373371156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:==================================>                  (77 + 41) / 118][Stage 132:========================================>            (90 + 28) / 118][Stage 132:============================================>       (101 + 17) / 118][Stage 132:===================================================> (114 + 4) / 118]                                                                                [Stage 133:=================================>                   (75 + 44) / 119][Stage 133:====================================>                (83 + 36) / 119][Stage 133:===========================================>         (97 + 22) / 119][Stage 133:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.08924049 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZInd ex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405976112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:============================>                        (64 + 56) / 120][Stage 134:=====================================>               (84 + 36) / 120][Stage 134:============================================>       (102 + 18) / 120][Stage 134:====================================================>(118 + 2) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:=============================>                       (67 + 54) / 121][Stage 135:====================================>                (84 + 37) / 121][Stage 135:=============================================>      (107 + 14) / 121][Stage 135:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.539874132 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZInde x<=5", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=4 AND partitionZIndex<=5,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384774609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:===========================>                         (58 + 55) / 113][Stage 136:==============================>                      (64 + 49) / 113][Stage 136:=====================================>               (79 + 34) / 113][Stage 136:=============================================>       (97 + 16) / 113][Stage 136:===================================================> (110 + 3) / 113][Stage 136:====================================================>(112 + 1) / 113]                                                                                [Stage 137:===========================>                         (59 + 55) / 114][Stage 137:==============================>                      (65 + 49) / 114][Stage 137:=========================================>           (90 + 24) / 114][Stage 137:==============================================>     (102 + 12) / 114][Stage 137:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.460534498 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIn dex<=133", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=132 AND partitionZIndex<=133,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348942185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:======================================>              (83 + 30) / 113][Stage 138:==========================================>          (91 + 22) / 113][Stage 138:================================================>    (104 + 9) / 113][Stage 138:====================================================>(111 + 2) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:====================================>                (78 + 36) / 114][Stage 139:========================================>            (88 + 26) / 114][Stage 139:==============================================>      (99 + 15) / 114][Stage 139:===================================================> (111 + 3) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.274537651 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIn dex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370638248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:==============================>                      (67 + 48) / 115][Stage 140:===================================>                 (78 + 37) / 115][Stage 140:===========================================>         (95 + 20) / 115][Stage 140:=================================================>   (108 + 7) / 115]                                                                                [Stage 141:==================================>                  (75 + 41) / 116][Stage 141:========================================>            (88 + 28) / 116][Stage 141:=============================================>      (102 + 14) / 116]                                                                                Time elapsed: 2.640471329 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIn dex<=205", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=204 AND partitionZIndex<=205,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350526609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:==================================>                  (73 + 40) / 113][Stage 142:=========================================>           (88 + 25) / 113][Stage 142:============================================>        (95 + 18) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:=====================================>               (80 + 34) / 114][Stage 143:============================================>        (95 + 19) / 114][Stage 143:==============================================>      (99 + 15) / 114][Stage 143:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.769794948 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZInd ex<=76", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362832364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:================================>                    (72 + 46) / 118][Stage 144:===================================>                 (79 + 39) / 118][Stage 144:=====================================>               (83 + 35) / 118][Stage 144:=======================================>             (88 + 30) / 118][Stage 144:================================================>    (109 + 9) / 118]                                                                                [Stage 145:================================>                    (73 + 46) / 119][Stage 145:==================================>                  (77 + 42) / 119][Stage 145:====================================>                (83 + 36) / 119][Stage 145:==========================================>          (95 + 24) / 119][Stage 145:==============================================>     (107 + 12) / 119][Stage 145:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.782236917 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZInd ex<=51", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386392054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:===========================>                         (58 + 55) / 113][Stage 146:============================>                        (61 + 52) / 113][Stage 146:=====================================>               (79 + 34) / 113][Stage 146:==========================================>          (90 + 23) / 113][Stage 146:===============================================>    (103 + 10) / 113][Stage 146:===================================================> (110 + 3) / 113]                                                                                [Stage 147:===========================>                         (59 + 55) / 114][Stage 147:================================>                    (70 + 44) / 114][Stage 147:=======================================>             (86 + 28) / 114][Stage 147:===========================================>         (94 + 20) / 114][Stage 147:================================================>    (105 + 9) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.689131424 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIn dex<=230", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=229 AND partitionZIndex<=230,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348412962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:===================================>                 (75 + 38) / 113][Stage 148:=======================================>             (85 + 28) / 113][Stage 148:=============================================>       (96 + 17) / 113][Stage 148:=================================================>   (105 + 8) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:===================================>                 (76 + 38) / 114][Stage 149:======================================>              (82 + 32) / 114][Stage 149:===========================================>         (94 + 20) / 114][Stage 149:==============================================>     (102 + 12) / 114][Stage 149:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.049067625 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIn dex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333307098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:======================================>              (84 + 31) / 115][Stage 150:=============================================>       (98 + 17) / 115][Stage 150:=================================================>   (108 + 7) / 115]                                                                                [Stage 151:======================================>              (84 + 32) / 116][Stage 151:==========================================>          (94 + 22) / 116][Stage 151:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.525662549 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZInd ex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400325034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:============================>                        (64 + 56) / 120][Stage 152:=========================================>           (93 + 27) / 120][Stage 152:===============================================>    (109 + 11) / 120]                                                                                [Stage 153:============================>                        (65 + 56) / 121][Stage 153:===================================>                 (82 + 39) / 121][Stage 153:==============================================>     (109 + 12) / 121][Stage 153:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.008625644 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZInd ex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394961919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:==============================>                      (69 + 51) / 120][Stage 154:=====================================>               (85 + 35) / 120][Stage 154:=============================================>      (105 + 15) / 120][Stage 154:====================================================>(119 + 1) / 120]                                                                                [Stage 155:============================>                        (65 + 56) / 121][Stage 155:=================================>                   (77 + 44) / 121][Stage 155:==========================================>         (100 + 21) / 121][Stage 155:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.206843266 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZInd ex<=58", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=57 AND partitionZIndex<=58,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380118534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:============================>                        (60 + 53) / 113][Stage 156:================================>                    (70 + 43) / 113][Stage 156:===========================================>         (92 + 21) / 113][Stage 156:==================================================>  (107 + 6) / 113]                                                                                [Stage 157:===========================>                         (59 + 55) / 114][Stage 157:================================>                    (70 + 44) / 114][Stage 157:=======================================>             (86 + 28) / 114][Stage 157:================================================>    (105 + 9) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.300099078 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIn dex<=240", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=239 AND partitionZIndex<=240,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33752561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=======================================>             (86 + 29) / 115][Stage 158:=========================================>           (90 + 25) / 115][Stage 158:==============================================>     (103 + 12) / 115][Stage 158:===================================================> (111 + 4) / 115]                                                                                [Stage 159:======================================>              (85 + 31) / 116][Stage 159:============================================>       (100 + 16) / 116][Stage 159:=================================================>   (108 + 8) / 116][Stage 159:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.93632011 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIn dex<=177", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=176 AND partitionZIndex<=177,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391068746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:==========================>                          (60 + 60) / 120][Stage 160:================================>                    (74 + 46) / 120][Stage 160:========================================>            (92 + 28) / 120][Stage 160:===================================================> (117 + 3) / 120]                                                                                [Stage 161:===========================>                         (62 + 59) / 121][Stage 161:===============================>                     (73 + 48) / 121][Stage 161:===========================================>        (102 + 19) / 121][Stage 161:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.917321654 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIn dex<=116", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=115 AND partitionZIndex<=116,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404432366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===========================>                         (62 + 58) / 120][Stage 162:==================================>                  (77 + 43) / 120][Stage 162:=============================================>      (104 + 16) / 120][Stage 162:====================================================>(119 + 1) / 120]                                                                                [Stage 163:==========================>                          (61 + 60) / 121][Stage 163:============================>                        (64 + 57) / 121][Stage 163:===================================>                 (82 + 39) / 121][Stage 163:=============================================>      (107 + 14) / 121]                                                                                Time elapsed: 2.961870104 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZInd ex<=54", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=53 AND partitionZIndex<=54,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37191667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:==============================>                      (67 + 48) / 115][Stage 164:===================================>                 (77 + 38) / 115][Stage 164:=============================================>       (99 + 16) / 115][Stage 164:==================================================>  (110 + 5) / 115][Stage 164:====================================================>(113 + 2) / 115]                                                                                [Stage 165:==============================>                      (67 + 49) / 116][Stage 165:===================================>                 (78 + 38) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:===============================================>    (106 + 10) / 116][Stage 165:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.199429899 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZInd ex<=29", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379408112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:============================>                        (60 + 53) / 113][Stage 166:===============================>                     (67 + 46) / 113][Stage 166:=====================================>               (80 + 33) / 113][Stage 166:============================================>        (95 + 18) / 113][Stage 166:==================================================>  (107 + 6) / 113][Stage 166:====================================================>(111 + 2) / 113]                                                                                [Stage 167:============================>                        (62 + 52) / 114][Stage 167:==================================>                  (75 + 39) / 114][Stage 167:==========================================>          (92 + 22) / 114][Stage 167:=================================================>   (107 + 7) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.615250898 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZInd ex<=68", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=67 AND partitionZIndex<=68,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342799005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=======================================>             (85 + 30) / 115][Stage 168:==========================================>          (92 + 23) / 115][Stage 168:==============================================>     (103 + 12) / 115][Stage 168:===================================================> (111 + 4) / 115]                                                                                [Stage 169:=======================================>             (86 + 30) / 116][Stage 169:=========================================>           (91 + 25) / 116][Stage 169:=============================================>      (102 + 14) / 116][Stage 169:=================================================>   (108 + 8) / 116][Stage 169:==================================================>  (111 + 5) / 116][Stage 169:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.539725395 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIn dex<=179", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37528886 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:====================================>                (79 + 36) / 115][Stage 170:============================================>        (96 + 19) / 115][Stage 170:==============================================>     (103 + 12) / 115][Stage 170:====================================================>(113 + 2) / 115]                                                                                [Stage 171:================================>                    (72 + 44) / 116][Stage 171:======================================>              (84 + 32) / 116][Stage 171:===========================================>         (95 + 21) / 116][Stage 171:================================================>    (107 + 9) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 4.343055149 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIn dex<=174", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=173 AND partitionZIndex<=174,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376809204 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:==============================>                      (67 + 48) / 115][Stage 172:=====================================>               (82 + 33) / 115][Stage 172:=============================================>      (101 + 14) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:=====================================>               (81 + 35) / 116][Stage 173:============================================>        (97 + 19) / 116][Stage 173:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.699853772 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIn dex<=226", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=225 AND partitionZIndex<=226,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382415961 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:===========================>                         (59 + 54) / 113][Stage 174:================================>                    (69 + 44) / 113][Stage 174:========================================>            (86 + 27) / 113][Stage 174:=================================================>   (105 + 8) / 113]                                                                                [Stage 175:===========================>                         (60 + 54) / 114][Stage 175:=================================>                   (72 + 42) / 114][Stage 175:========================================>            (88 + 26) / 114][Stage 175:================================================>    (105 + 9) / 114][Stage 175:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.179387377 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIn dex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387177614 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:=============================>                       (67 + 54) / 121][Stage 176:=================================>                   (76 + 45) / 121][Stage 176:===========================================>        (102 + 19) / 121][Stage 176:====================================================>(120 + 1) / 121]                                                                                [Stage 177:==========================>                          (61 + 61) / 122][Stage 177:=============================>                       (67 + 55) / 122][Stage 177:===================================>                 (81 + 41) / 122][Stage 177:============================================>       (105 + 17) / 122][Stage 177:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.110529474 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIn dex<=208", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=207 AND partitionZIndex<=208,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398804909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (60 + 60) / 120][Stage 178:==============================>                      (68 + 52) / 120][Stage 178:========================================>            (91 + 29) / 120][Stage 178:===============================================>    (109 + 11) / 120][Stage 178:=====================================================(120 + 0) / 120]                                                                                [Stage 179:==========================>                          (61 + 60) / 121][Stage 179:===============================>                     (73 + 48) / 121][Stage 179:======================================>              (88 + 33) / 121][Stage 179:==================================================>  (115 + 6) / 121][Stage 179:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.151967894 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZInd ex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377220706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:===========================>                         (58 + 55) / 113][Stage 180:============================>                        (61 + 52) / 113][Stage 180:=================================>                   (72 + 41) / 113][Stage 180:=============================================>       (96 + 17) / 113][Stage 180:==================================================>  (107 + 6) / 113]                                                                                [Stage 181:===========================>                         (59 + 55) / 114][Stage 181:=============================>                       (64 + 50) / 114][Stage 181:====================================>                (79 + 35) / 114][Stage 181:=========================================>           (90 + 24) / 114][Stage 181:=============================================>      (100 + 14) / 114][Stage 181:==================================================>  (109 + 5) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.565427344 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIn dex<=225", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=224 AND partitionZIndex<=225,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407420954 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:================================>                    (71 + 44) / 115][Stage 182:=======================================>             (85 + 30) / 115][Stage 182:===========================================>         (95 + 20) / 115][Stage 182:===================================================> (111 + 4) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:===============================>                     (70 + 46) / 116][Stage 183:====================================>                (80 + 36) / 116][Stage 183:===========================================>         (96 + 20) / 116][Stage 183:==================================================>  (110 + 6) / 116][Stage 183:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.144541611 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIn dex<=118", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388730558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===========================>                         (59 + 54) / 113][Stage 184:================================>                    (69 + 44) / 113][Stage 184:=====================================>               (81 + 32) / 113][Stage 184:================================================>    (104 + 9) / 113][Stage 184:====================================================>(111 + 2) / 113]                                                                                [Stage 185:===========================>                         (59 + 55) / 114][Stage 185:===============================>                     (67 + 47) / 114][Stage 185:=====================================>               (80 + 34) / 114][Stage 185:=============================================>      (100 + 14) / 114][Stage 185:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.139657096 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIn dex<=227", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=226 AND partitionZIndex<=227,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332690454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:=========================================>           (90 + 25) / 115][Stage 186:==============================================>     (102 + 13) / 115][Stage 186:===================================================> (112 + 3) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:========================================>            (88 + 28) / 116][Stage 187:===========================================>         (95 + 21) / 116][Stage 187:==================================================>  (110 + 6) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.936121699 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIn dex<=199", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=198 AND partitionZIndex<=199,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410110741 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 61) / 121][Stage 188:==========================>                          (61 + 60) / 121][Stage 188:================================>                    (75 + 46) / 121][Stage 188:=========================================>           (95 + 26) / 121][Stage 188:=================================================>   (114 + 7) / 121][Stage 188:====================================================>(120 + 1) / 121]                                                                                [Stage 189:==========================>                          (61 + 61) / 122][Stage 189:============================>                        (66 + 56) / 122][Stage 189:==================================>                  (80 + 42) / 122][Stage 189:===========================================>        (101 + 21) / 122][Stage 189:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.316835914 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIn dex<=151", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=150 AND partitionZIndex<=151,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387482115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:============================>                        (64 + 56) / 120][Stage 190:====================================>                (83 + 37) / 120][Stage 190:===========================================>        (100 + 20) / 120][Stage 190:===================================================> (116 + 4) / 120]                                                                                [Stage 191:=============================>                       (68 + 53) / 121][Stage 191:================================>                    (75 + 46) / 121][Stage 191:==========================================>          (98 + 23) / 121][Stage 191:===================================================> (117 + 4) / 121][Stage 191:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.446653393 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZInd ex<=88", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=87 AND partitionZIndex<=88,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393719813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:==========================>                          (60 + 61) / 121][Stage 192:================================>                    (75 + 46) / 121][Stage 192:======================================>              (88 + 33) / 121][Stage 192:=================================================>   (112 + 9) / 121]                                                                                [Stage 193:==========================>                          (61 + 61) / 122][Stage 193:================================>                    (74 + 48) / 122][Stage 193:======================================>              (88 + 34) / 122][Stage 193:==============================================>     (108 + 14) / 122]                                                                                Time elapsed: 3.071581934 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZInd ex<=36", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=35 AND partitionZIndex<=36,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363110183 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:=================================>                   (72 + 41) / 113][Stage 194:=====================================>               (80 + 33) / 113][Stage 194:===========================================>         (92 + 21) / 113][Stage 194:================================================>    (104 + 9) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:=====================================>               (81 + 33) / 114][Stage 195:========================================>            (88 + 26) / 114][Stage 195:=============================================>      (100 + 14) / 114][Stage 195:==================================================>  (109 + 5) / 114][Stage 195:===================================================> (110 + 4) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.691401128 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZInd ex<=42", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=41 AND partitionZIndex<=42,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373037232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:===================================>                 (79 + 39) / 118][Stage 196:============================================>        (98 + 20) / 118][Stage 196:====================================================>(116 + 2) / 118]                                                                                [Stage 197:================================>                    (73 + 46) / 119][Stage 197:======================================>              (87 + 32) / 119][Stage 197:=============================================>      (103 + 16) / 119][Stage 197:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.046187337 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIn dex<=246", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=245 AND partitionZIndex<=246,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477139097 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:================================>                    (73 + 45) / 118][Stage 198:=====================================>               (83 + 35) / 118][Stage 198:=============================================>      (103 + 15) / 118]                                                                                [Stage 199:================================>                    (73 + 46) / 119][Stage 199:====================================>                (83 + 36) / 119][Stage 199:============================================>        (99 + 20) / 119][Stage 199:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 2.808968402 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZInd ex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364751968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:===================================>                 (79 + 39) / 118][Stage 200:==========================================>          (94 + 24) / 118][Stage 200:===============================================>    (108 + 10) / 118][Stage 200:====================================================>(116 + 2) / 118]                                                                                [Stage 201:================================>                    (73 + 46) / 119][Stage 201:====================================>                (82 + 37) / 119][Stage 201:============================================>        (99 + 20) / 119][Stage 201:==============================================>     (107 + 12) / 119][Stage 201:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.18094825 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:35026) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:48870) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:35032) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:50804) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.16:42086) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:50804) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:35032) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.10:48870) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:35026) dropped. RpcEnv already stopped.
17/05/25 03:11:20 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.16:42086) dropped. RpcEnv already stopped.

real	10m1.004s
user	11m11.772s
sys	0m37.084s
