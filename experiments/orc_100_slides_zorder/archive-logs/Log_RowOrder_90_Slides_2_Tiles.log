Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/25 03:11:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:11:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:11:37 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:11:38 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/25 03:11:40 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/25 03:11:51 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170525031140-0629).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.334361517 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIn dex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:======>                                               (14 + 101) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:======================================================>(113 + 2) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:=========================>                             (54 + 62) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (68 + 48) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:============================================>          (94 + 22) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 13.011698207 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionI ndex = 165 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.906832572 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 2:=================>                                     (39 + 81) / 120][Stage 2:===================>                                   (42 + 78) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:=============================>                         (65 + 55) / 120][Stage 2:=================================>                     (72 + 48) / 120][Stage 2:=========================================>             (91 + 29) / 120][Stage 2:=============================================>        (101 + 19) / 120][Stage 2:====================================================>  (115 + 5) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:================================>                      (71 + 50) / 121][Stage 3:====================================>                  (81 + 40) / 121][Stage 3:===========================================>           (96 + 25) / 121][Stage 3:===================================================>   (113 + 8) / 121][Stage 3:======================================================>(120 + 1) / 121]                                                                                Time elapsed: 5.344291084 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIn dex = 38 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.696993517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 4:=================================>                     (72 + 46) / 118][Stage 4:==================================>                    (74 + 44) / 118][Stage 4:=====================================>                 (80 + 38) / 118][Stage 4:=========================================>             (88 + 30) / 118][Stage 4:=========================================>             (90 + 28) / 118][Stage 4:=============================================>         (97 + 21) / 118][Stage 4:=====================================================> (115 + 3) / 118][Stage 4:======================================================>(117 + 1) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:=======================================>               (86 + 33) / 119][Stage 5:===========================================>           (94 + 25) / 119][Stage 5:=============================================>        (101 + 18) / 119][Stage 5:=================================================>    (108 + 11) / 119][Stage 5:=====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.542200057 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionI ndex = 168 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526176257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 6:=====================================>                 (79 + 36) / 115][Stage 6:========================================>              (85 + 30) / 115][Stage 6:============================================>          (93 + 22) / 115][Stage 6:==============================================>        (97 + 18) / 115][Stage 6:==================================================>    (106 + 9) / 115][Stage 6:======================================================>(113 + 2) / 115]                                                                                [Stage 7:======================================>                (81 + 35) / 116][Stage 7:=======================================>               (83 + 33) / 116][Stage 7:==============================================>        (99 + 17) / 116][Stage 7:===================================================>   (109 + 7) / 116][Stage 7:======================================================>(114 + 2) / 116][Stage 7:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.741754996 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIn dex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504602675 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 8:======================================>                (81 + 34) / 115][Stage 8:==========================================>            (89 + 26) / 115][Stage 8:=============================================>         (95 + 20) / 115][Stage 8:===============================================>      (102 + 13) / 115][Stage 8:====================================================>  (109 + 6) / 115][Stage 8:======================================================>(113 + 2) / 115]                                                                                [Stage 9:======================================>                (81 + 35) / 116][Stage 9:========================================>              (86 + 30) / 116][Stage 9:=============================================>         (97 + 19) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:===================================================>   (108 + 8) / 116][Stage 9:====================================================>  (111 + 5) / 116][Stage 9:======================================================>(114 + 2) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.436669087 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionI ndex = 209 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510653792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 10:==================================>                   (74 + 41) / 115][Stage 10:======================================>               (83 + 32) / 115][Stage 10:==========================================>           (91 + 24) / 115][Stage 10:==============================================>       (98 + 17) / 115][Stage 10:=================================================>    (106 + 9) / 115][Stage 10:====================================================> (112 + 3) / 115]                                                                                [Stage 11:=======================================>              (85 + 31) / 116][Stage 11:=============================================>        (97 + 19) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:==================================================>   (108 + 8) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.632235293 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 29 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483022171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 12:=====================================>                (80 + 35) / 115][Stage 12:=========================================>            (89 + 26) / 115][Stage 12:==============================================>      (100 + 15) / 115][Stage 12:=================================================>    (106 + 9) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:=======================================>              (85 + 31) / 116][Stage 13:============================================>         (96 + 20) / 116][Stage 13:==============================================>      (101 + 15) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:===================================================>  (110 + 6) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.009901735 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIn dex = 55 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524693273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 14:================================>                     (69 + 44) / 113][Stage 14:===================================>                  (75 + 38) / 113][Stage 14:=========================================>            (87 + 26) / 113][Stage 14:============================================>         (94 + 19) / 113][Stage 14:===============================================>     (102 + 11) / 113][Stage 14:==================================================>   (105 + 8) / 113][Stage 14:===================================================>  (108 + 5) / 113][Stage 14:====================================================> (110 + 3) / 113][Stage 14:=====================================================>(112 + 1) / 113]                                                                                [Stage 15:===================================>                  (74 + 40) / 114][Stage 15:=========================================>            (88 + 26) / 114][Stage 15:============================================>         (94 + 20) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:==================================================>   (106 + 8) / 114][Stage 15:====================================================> (111 + 3) / 114][Stage 15:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.579978179 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIn dex = 99 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45843442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 16:=====================================>                (80 + 35) / 115][Stage 16:======================================>               (83 + 32) / 115][Stage 16:==========================================>           (90 + 25) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:====================================================> (111 + 4) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:======================================>               (82 + 34) / 116][Stage 17:========================================>             (87 + 29) / 116][Stage 17:=============================================>        (98 + 18) / 116][Stage 17:===============================================>     (104 + 12) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.439216506 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionInd ex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501626125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 18:================================>                     (72 + 46) / 118][Stage 18:==================================>                   (76 + 42) / 118][Stage 18:======================================>               (85 + 33) / 118][Stage 18:============================================>         (98 + 20) / 118][Stage 18:==============================================>      (103 + 15) / 118][Stage 18:=================================================>    (109 + 9) / 118][Stage 18:====================================================> (114 + 4) / 118]                                                                                [Stage 19:==================================>                   (75 + 44) / 119][Stage 19:=======================================>              (86 + 33) / 119][Stage 19:============================================>         (98 + 21) / 119][Stage 19:==================================================>   (111 + 8) / 119][Stage 19:====================================================> (115 + 4) / 119][Stage 19:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.059031675 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide88"
dataSource: String = /nidan/orc/individualORC/slide88

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIn dex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505165115 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:=================================>                    (71 + 44) / 115][Stage 20:======================================>               (83 + 32) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:===============================================>     (103 + 12) / 115][Stage 20:===================================================>  (109 + 6) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:==================================>                   (75 + 41) / 116][Stage 21:==========================================>           (92 + 24) / 116][Stage 21:================================================>    (106 + 10) / 116][Stage 21:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.659379927 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIn dex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448814651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 22:======================================>               (81 + 34) / 115][Stage 22:==========================================>           (90 + 25) / 115][Stage 22:==============================================>      (101 + 14) / 115][Stage 22:=================================================>    (106 + 9) / 115][Stage 22:===================================================>  (109 + 6) / 115][Stage 22:=====================================================>(113 + 2) / 115]                                                                                [Stage 23:=======================================>              (84 + 32) / 116][Stage 23:==========================================>           (91 + 25) / 116][Stage 23:===============================================>     (103 + 13) / 116][Stage 23:=================================================>    (107 + 9) / 116][Stage 23:===================================================>  (111 + 5) / 116][Stage 23:====================================================> (112 + 4) / 116][Stage 23:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.826191693 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionI ndex = 121 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.533106017 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:=============================>                        (66 + 54) / 120][Stage 24:======================================>               (86 + 34) / 120][Stage 24:==============================================>      (106 + 14) / 120][Stage 24:====================================================> (117 + 3) / 120]                                                                                [Stage 25:============================>                         (63 + 58) / 121][Stage 25:=================================>                    (75 + 46) / 121][Stage 25:==========================================>           (96 + 25) / 121][Stage 25:===============================================>     (108 + 13) / 121][Stage 25:==================================================>   (113 + 8) / 121][Stage 25:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.735381567 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionI ndex = 103 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440892047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 26:======================================>               (81 + 34) / 115][Stage 26:=======================================>              (85 + 30) / 115][Stage 26:==============================================>      (101 + 14) / 115][Stage 26:====================================================> (112 + 3) / 115]                                                                                [Stage 27:======================================>               (82 + 34) / 116][Stage 27:===========================================>          (94 + 22) / 116][Stage 27:==============================================>      (102 + 14) / 116][Stage 27:==================================================>   (109 + 7) / 116][Stage 27:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.88779763 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIn dex = 83 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444861859 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 28:==================================>                   (72 + 41) / 113][Stage 28:=====================================>                (79 + 34) / 113][Stage 28:============================================>         (94 + 19) / 113][Stage 28:==================================================>   (106 + 7) / 113][Stage 28:====================================================> (109 + 4) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:=======================================>              (83 + 31) / 114][Stage 29:=============================================>        (96 + 18) / 114][Stage 29:==============================================>      (101 + 13) / 114][Stage 29:===============================================>     (103 + 11) / 114][Stage 29:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.443004471 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIn dex = 45 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535392363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 30:===========================>                          (60 + 60) / 120][Stage 30:=============================>                        (65 + 55) / 120][Stage 30:===================================>                  (78 + 42) / 120][Stage 30:============================================>         (98 + 22) / 120][Stage 30:====================================================> (117 + 3) / 120]                                                                                [Stage 31:===========================>                          (62 + 59) / 121][Stage 31:=================================>                    (76 + 45) / 121][Stage 31:============================================>         (99 + 22) / 121][Stage 31:=================================================>    (112 + 9) / 121][Stage 31:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.385533222 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionI ndex = 114 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425111281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 32:=====================================>                (78 + 35) / 113][Stage 32:==========================================>           (89 + 24) / 113][Stage 32:==============================================>       (98 + 15) / 113][Stage 32:=================================================>    (104 + 9) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:===================================>                  (74 + 40) / 114][Stage 33:=========================================>            (87 + 27) / 114][Stage 33:==============================================>       (98 + 16) / 114][Stage 33:===================================================>  (108 + 6) / 114][Stage 33:====================================================> (110 + 4) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.27530684 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionI ndex = 137 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480061641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:============================>                         (59 + 54) / 113][Stage 34:===================================>                  (75 + 38) / 113][Stage 34:=========================================>            (87 + 26) / 113][Stage 34:=================================================>    (104 + 9) / 113][Stage 34:====================================================> (109 + 4) / 113][Stage 34:====================================================> (110 + 3) / 113]                                                                                [Stage 35:=============================>                        (62 + 52) / 114][Stage 35:====================================>                 (76 + 38) / 114][Stage 35:=========================================>            (87 + 27) / 114][Stage 35:=============================================>        (96 + 18) / 114][Stage 35:===================================================>  (108 + 6) / 114][Stage 35:====================================================> (110 + 4) / 114][Stage 35:======================================================(114 + 0) / 114]                                                                                Time elapsed: 4.009525242 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIn dex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504888794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:=============================>                        (67 + 54) / 121][Stage 36:=======================================>              (89 + 32) / 121][Stage 36:================================================>    (111 + 10) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:===============================>                      (71 + 51) / 122][Stage 37:==========================================>           (97 + 25) / 122][Stage 37:================================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.198239513 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionI ndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479354098 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 38:============================>                         (60 + 53) / 113][Stage 38:===============================>                      (65 + 48) / 113][Stage 38:======================================>               (81 + 32) / 113][Stage 38:==============================================>      (100 + 13) / 113][Stage 38:=====================================================>(111 + 2) / 113]                                                                                [Stage 39:=============================>                        (63 + 51) / 114][Stage 39:================================>                     (69 + 45) / 114][Stage 39:=============================================>        (96 + 18) / 114][Stage 39:==================================================>   (107 + 7) / 114][Stage 39:====================================================> (111 + 3) / 114][Stage 39:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.66721922 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIn dex = 33 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506864759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 40:==========================>                           (60 + 61) / 121][Stage 40:=============================>                        (67 + 54) / 121][Stage 40:=====================================>                (84 + 37) / 121][Stage 40:================================================>    (110 + 11) / 121]                                                                                [Stage 41:===========================>                          (61 + 61) / 122][Stage 41:================================>                     (73 + 49) / 122][Stage 41:==========================================>           (95 + 27) / 122][Stage 41:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.04374356 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 176 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.487377342 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 42:===============================>                      (68 + 47) / 115][Stage 42:===================================>                  (75 + 40) / 115][Stage 42:===========================================>          (92 + 23) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:================================>                     (69 + 47) / 116][Stage 43:======================================>               (82 + 34) / 116][Stage 43:========================================>             (88 + 28) / 116][Stage 43:===============================================>     (104 + 12) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.251797086 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionInd ex = 20 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44226421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 44:=================================>                    (73 + 45) / 118][Stage 44:=====================================>                (83 + 35) / 118][Stage 44:==============================================>      (103 + 15) / 118][Stage 44:====================================================> (115 + 3) / 118]                                                                                [Stage 45:=================================>                    (73 + 46) / 119][Stage 45:==================================>                   (77 + 42) / 119][Stage 45:=========================================>            (92 + 27) / 119][Stage 45:=================================================>    (110 + 9) / 119][Stage 45:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.051536862 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionInd ex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.436207152 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:==================================>                   (75 + 43) / 118][Stage 46:=======================================>              (86 + 32) / 118][Stage 46:================================================>    (108 + 10) / 118][Stage 46:=====================================================>(116 + 2) / 118]                                                                                [Stage 47:==================================>                   (75 + 44) / 119][Stage 47:====================================>                 (81 + 38) / 119][Stage 47:=========================================>            (91 + 28) / 119][Stage 47:===============================================>     (106 + 13) / 119][Stage 47:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.211407887 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionI ndex = 207 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432429901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 48:==================================>                   (75 + 43) / 118][Stage 48:======================================>               (84 + 34) / 118][Stage 48:==============================================>      (103 + 15) / 118][Stage 48:=====================================================>(117 + 1) / 118]                                                                                [Stage 49:=================================>                    (73 + 46) / 119][Stage 49:=====================================>                (83 + 36) / 119][Stage 49:============================================>         (98 + 21) / 119][Stage 49:====================================================> (115 + 4) / 119][Stage 49:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.112788359 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide76"
dataSource: String = /nidan/orc/individualORC/slide76

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIn dex = 113 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506114396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 50:======================================>               (83 + 32) / 115][Stage 50:==========================================>           (90 + 25) / 115][Stage 50:=================================================>    (106 + 9) / 115][Stage 50:=====================================================>(114 + 1) / 115]                                                                                [Stage 51:========================================>             (86 + 30) / 116][Stage 51:===============================================>     (103 + 13) / 116][Stage 51:==================================================>   (109 + 7) / 116][Stage 51:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.913343916 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIn dex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379345907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 52:=====================================>                (79 + 36) / 115][Stage 52:========================================>             (86 + 29) / 115][Stage 52:============================================>         (94 + 21) / 115][Stage 52:==============================================>      (101 + 14) / 115][Stage 52:===================================================>  (110 + 5) / 115]                                                                                [Stage 53:=======================================>              (84 + 32) / 116][Stage 53:===========================================>          (93 + 23) / 116][Stage 53:================================================>    (106 + 10) / 116][Stage 53:====================================================> (113 + 3) / 116][Stage 53:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.339047957 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIn dex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.445606479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 54:================================>                     (72 + 46) / 118][Stage 54:==================================>                   (76 + 42) / 118][Stage 54:=====================================>                (83 + 35) / 118][Stage 54:===============================================>     (106 + 12) / 118][Stage 54:=====================================================>(117 + 1) / 118]                                                                                [Stage 55:=================================>                    (74 + 45) / 119][Stage 55:=======================================>              (88 + 31) / 119][Stage 55:================================================>    (108 + 11) / 119][Stage 55:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.039639823 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionI ndex = 155 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456881852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 56:===========================>                          (58 + 55) / 113][Stage 56:============================>                         (60 + 53) / 113][Stage 56:=================================>                    (71 + 42) / 113][Stage 56:===========================================>          (90 + 23) / 113][Stage 56:==================================================>   (105 + 8) / 113][Stage 56:====================================================> (110 + 3) / 113]                                                                                [Stage 57:===========================>                          (59 + 55) / 114][Stage 57:============================>                         (60 + 54) / 114][Stage 57:======================================>               (81 + 33) / 114][Stage 57:==============================================>       (98 + 16) / 114][Stage 57:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.440713471 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIn dex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391808562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 58:======================================>               (83 + 32) / 115][Stage 58:============================================>         (95 + 20) / 115][Stage 58:==================================================>   (108 + 7) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:======================================>               (83 + 33) / 116][Stage 59:==========================================>           (92 + 24) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:===================================================>  (111 + 5) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.518792238 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionI ndex = 173 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426423263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 60:==============================>                       (65 + 50) / 115][Stage 60:==================================>                   (74 + 41) / 115][Stage 60:===========================================>          (92 + 23) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:===================================================>  (110 + 5) / 115][Stage 60:=====================================================>(114 + 1) / 115]                                                                                [Stage 61:================================>                     (69 + 47) / 116][Stage 61:======================================>               (82 + 34) / 116][Stage 61:============================================>         (96 + 20) / 116][Stage 61:==================================================>   (108 + 8) / 116][Stage 61:====================================================> (113 + 3) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.355478722 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionI ndex = 233 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441170006 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 62:=============================>                        (61 + 52) / 113][Stage 62:==================================>                   (73 + 40) / 113][Stage 62:===========================================>          (90 + 23) / 113][Stage 62:===================================================>  (108 + 5) / 113][Stage 62:=====================================================>(112 + 1) / 113]                                                                                [Stage 63:===========================>                          (59 + 55) / 114][Stage 63:================================>                     (69 + 45) / 114][Stage 63:========================================>             (86 + 28) / 114][Stage 63:=================================================>    (105 + 9) / 114][Stage 63:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.395694098 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionInd ex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451740856 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 64:=================================>                    (72 + 43) / 115][Stage 64:======================================>               (81 + 34) / 115][Stage 64:==============================================>      (100 + 15) / 115][Stage 64:==================================================>   (107 + 8) / 115][Stage 64:====================================================> (111 + 4) / 115][Stage 64:=====================================================>(113 + 2) / 115]                                                                                [Stage 65:=================================>                    (71 + 45) / 116][Stage 65:====================================>                 (78 + 38) / 116][Stage 65:============================================>         (95 + 21) / 116][Stage 65:================================================>    (106 + 10) / 116][Stage 65:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.603221302 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide86"
dataSource: String = /nidan/orc/individualORC/slide86

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionI ndex = 159 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391395821 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 66:===================================>                  (74 + 39) / 113][Stage 66:========================================>             (84 + 29) / 113][Stage 66:===========================================>          (92 + 21) / 113][Stage 66:===============================================>      (99 + 14) / 113][Stage 66:====================================================> (109 + 4) / 113]                                                                                [Stage 67:====================================>                 (76 + 38) / 114][Stage 67:==========================================>           (89 + 25) / 114][Stage 67:==============================================>       (99 + 15) / 114][Stage 67:==================================================>   (106 + 8) / 114][Stage 67:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.098859011 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionI ndex = 108 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443939814 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 68:===========================>                          (60 + 60) / 120][Stage 68:=============================>                        (66 + 54) / 120][Stage 68:======================================>               (85 + 35) / 120][Stage 68:============================================>        (101 + 19) / 120][Stage 68:================================================>    (109 + 11) / 120][Stage 68:====================================================> (117 + 3) / 120]                                                                                [Stage 69:===========================>                          (61 + 60) / 121][Stage 69:=============================>                        (67 + 54) / 121][Stage 69:===================================>                  (80 + 41) / 121][Stage 69:==============================================>      (107 + 14) / 121]                                                                                Time elapsed: 3.353684453 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionI ndex = 197 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459037577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 70:============================>                         (59 + 54) / 113][Stage 70:================================>                     (69 + 44) / 113][Stage 70:==========================================>           (89 + 24) / 113][Stage 70:==================================================>   (105 + 8) / 113][Stage 70:=====================================================>(112 + 1) / 113]                                                                                [Stage 71:===========================>                          (59 + 55) / 114][Stage 71:============================>                         (61 + 53) / 114][Stage 71:========================================>             (85 + 29) / 114][Stage 71:==============================================>       (98 + 16) / 114][Stage 71:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.260627541 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIn dex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414579608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 72:===========================>                          (58 + 55) / 113][Stage 72:===============================>                      (65 + 48) / 113][Stage 72:========================================>             (85 + 28) / 113][Stage 72:==============================================>      (100 + 13) / 113][Stage 72:=====================================================>(111 + 2) / 113]                                                                                [Stage 73:===========================>                          (59 + 55) / 114][Stage 73:==============================>                       (65 + 49) / 114][Stage 73:========================================>             (85 + 29) / 114][Stage 73:==============================================>      (101 + 13) / 114][Stage 73:====================================================> (111 + 3) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.510539229 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIn dex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418477179 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 74:==============================>                       (64 + 51) / 115][Stage 74:======================================>               (83 + 32) / 115][Stage 74:==============================================>      (101 + 14) / 115][Stage 74:===================================================>  (109 + 6) / 115]                                                                                [Stage 75:=================================>                    (71 + 45) / 116][Stage 75:========================================>             (87 + 29) / 116][Stage 75:============================================>         (96 + 20) / 116][Stage 75:===================================================>  (110 + 6) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.397907159 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionI ndex = 139 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376307036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 76:======================================>               (83 + 32) / 115][Stage 76:=============================================>        (97 + 18) / 115][Stage 76:==================================================>   (108 + 7) / 115][Stage 76:====================================================> (112 + 3) / 115]                                                                                [Stage 77:========================================>             (86 + 30) / 116][Stage 77:==============================================>      (101 + 15) / 116][Stage 77:=====================================================>(114 + 2) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.926255585 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIn dex = 68 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448299906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 78:==========================>                           (60 + 61) / 121][Stage 78:===========================>                          (61 + 60) / 121][Stage 78:=================================>                    (74 + 47) / 121][Stage 78:==========================================>           (96 + 25) / 121][Stage 78:===================================================>  (116 + 5) / 121]                                                                                [Stage 79:============================>                         (64 + 58) / 122][Stage 79:================================>                     (74 + 48) / 122][Stage 79:===========================================>          (98 + 24) / 122][Stage 79:==================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.239532576 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionI ndex = 178 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416076112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:============================>                         (60 + 53) / 113][Stage 80:================================>                     (69 + 44) / 113][Stage 80:=========================================>            (87 + 26) / 113][Stage 80:===================================================>  (107 + 6) / 113]                                                                                [Stage 81:============================>                         (61 + 53) / 114][Stage 81:================================>                     (69 + 45) / 114][Stage 81:=============================================>        (96 + 18) / 114][Stage 81:===================================================>  (108 + 6) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.250649608 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIn dex = 98 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357550782 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 82:=====================================>                (79 + 36) / 115][Stage 82:==========================================>           (91 + 24) / 115][Stage 82:===============================================>     (103 + 12) / 115][Stage 82:=====================================================>(114 + 1) / 115]                                                                                [Stage 83:========================================>             (86 + 30) / 116][Stage 83:===========================================>          (93 + 23) / 116][Stage 83:===================================================>  (110 + 6) / 116][Stage 83:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.895006271 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIn dex = 116 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42230529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:=============================>                        (66 + 54) / 120][Stage 84:====================================>                 (81 + 39) / 120][Stage 84:==============================================>      (106 + 14) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:===============================>                      (70 + 51) / 121][Stage 85:=====================================>                (83 + 38) / 121][Stage 85:===============================================>     (108 + 13) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.201205182 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIn dex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405555561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 86:============================>                         (59 + 54) / 113][Stage 86:=================================>                    (70 + 43) / 113][Stage 86:==========================================>           (89 + 24) / 113][Stage 86:====================================================> (109 + 4) / 113]                                                                                [Stage 87:=============================>                        (62 + 52) / 114][Stage 87:==================================>                   (72 + 42) / 114][Stage 87:=========================================>            (87 + 27) / 114][Stage 87:===================================================>  (108 + 6) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.260509795 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionI ndex = 206 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524402907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 88:=================================>                    (71 + 42) / 113][Stage 88:==========================================>           (89 + 24) / 113][Stage 88:===============================================>     (101 + 12) / 113][Stage 88:===================================================>  (108 + 5) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:======================================>               (82 + 32) / 114][Stage 89:==============================================>       (98 + 16) / 114][Stage 89:===================================================>  (108 + 6) / 114][Stage 89:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.98469547 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionI ndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429857011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 90:===========================>                          (61 + 60) / 121][Stage 90:===============================>                      (71 + 50) / 121][Stage 90:=====================================>                (84 + 37) / 121][Stage 90:=================================================>    (112 + 9) / 121][Stage 90:=====================================================>(120 + 1) / 121]                                                                                [Stage 91:===========================>                          (61 + 61) / 122][Stage 91:==============================>                       (69 + 53) / 122][Stage 91:===================================>                  (81 + 41) / 122][Stage 91:=============================================>       (105 + 17) / 122][Stage 91:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.117963658 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide74"
dataSource: String = /nidan/orc/individualORC/slide74

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIn dex = 107 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399173362 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 92:================================>                     (69 + 46) / 115][Stage 92:====================================>                 (78 + 37) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:===============================>                      (67 + 49) / 116][Stage 93:=====================================>                (80 + 36) / 116][Stage 93:==========================================>           (91 + 25) / 116][Stage 93:===============================================>     (103 + 13) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.965549034 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionI ndex = 140 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356379578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 94:======================================>               (81 + 34) / 115][Stage 94:=======================================>              (85 + 30) / 115][Stage 94:============================================>         (94 + 21) / 115][Stage 94:==============================================>      (101 + 14) / 115][Stage 94:==================================================>   (107 + 8) / 115]                                                                                [Stage 95:=======================================>              (84 + 32) / 116][Stage 95:==========================================>           (91 + 25) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.921207063 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIn dex = 35 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393486165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 96:==============================>                       (66 + 49) / 115][Stage 96:==================================>                   (74 + 41) / 115][Stage 96:=======================================>              (84 + 31) / 115][Stage 96:==============================================>       (98 + 17) / 115][Stage 96:==================================================>   (108 + 7) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:================================>                     (69 + 47) / 116][Stage 97:=======================================>              (85 + 31) / 116][Stage 97:=============================================>        (97 + 19) / 116][Stage 97:==================================================>   (108 + 8) / 116][Stage 97:===================================================>  (111 + 5) / 116][Stage 97:=====================================================>(114 + 2) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.935602536 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionI ndex = 200 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426841383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 98:===========================>                          (61 + 59) / 120][Stage 98:===============================>                      (69 + 51) / 120][Stage 98:==========================================>           (94 + 26) / 120][Stage 98:==================================================>   (113 + 7) / 120][Stage 98:=====================================================>(119 + 1) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:=============================>                        (66 + 55) / 121][Stage 99:=====================================>                (85 + 36) / 121][Stage 99:=================================================>    (112 + 9) / 121][Stage 99:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.395709403 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionI ndex = 196 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424227135 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 100:==========================>                          (60 + 61) / 121][Stage 100:===========================>                         (62 + 59) / 121][Stage 100:===============================>                     (71 + 50) / 121][Stage 100:=======================================>             (91 + 30) / 121][Stage 100:===================================================> (117 + 4) / 121]                                                                                [Stage 101:==========================>                          (61 + 61) / 122][Stage 101:============================>                        (65 + 57) / 122][Stage 101:====================================>                (84 + 38) / 122][Stage 101:===========================================>        (103 + 19) / 122][Stage 101:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.066210803 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIn dex = 51 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441805145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 102:=====================================>               (81 + 34) / 115][Stage 102:=======================================>             (85 + 30) / 115][Stage 102:============================================>        (96 + 19) / 115][Stage 102:=================================================>   (107 + 8) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:=====================================>               (82 + 34) / 116][Stage 103:=========================================>           (90 + 26) / 116][Stage 103:=============================================>       (99 + 17) / 116][Stage 103:===============================================>    (106 + 10) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.277012736 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361202171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 104:===================================>                 (75 + 38) / 113][Stage 104:=======================================>             (84 + 29) / 113][Stage 104:===========================================>         (93 + 20) / 113][Stage 104:==================================================>  (108 + 5) / 113]                                                                                [Stage 105:======================================>              (83 + 31) / 114][Stage 105:===========================================>         (93 + 21) / 114][Stage 105:=============================================>       (98 + 16) / 114][Stage 105:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.873683962 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide83"
dataSource: String = /nidan/orc/individualORC/slide83

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIn dex = 86 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354591552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 106:=======================================>             (86 + 29) / 115][Stage 106:============================================>        (96 + 19) / 115][Stage 106:=================================================>   (107 + 8) / 115][Stage 106:===================================================> (112 + 3) / 115]                                                                                [Stage 107:======================================>              (85 + 31) / 116][Stage 107:=============================================>       (99 + 17) / 116][Stage 107:=================================================>   (109 + 7) / 116][Stage 107:====================================================>(114 + 2) / 116][Stage 107:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.083830892 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionI ndex = 208 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365984625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 108:=====================================>               (80 + 33) / 113][Stage 108:==========================================>          (91 + 22) / 113][Stage 108:==============================================>     (101 + 12) / 113][Stage 108:==================================================>  (107 + 6) / 113]                                                                                [Stage 109:===================================>                 (76 + 38) / 114][Stage 109:=========================================>           (89 + 25) / 114][Stage 109:=============================================>       (97 + 17) / 114][Stage 109:==============================================>     (103 + 11) / 114][Stage 109:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.198583166 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionI ndex = 198 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417141613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:=============================>                       (66 + 54) / 120][Stage 110:===================================>                 (81 + 39) / 120][Stage 110:============================================>       (102 + 18) / 120][Stage 110:==================================================>  (114 + 6) / 120]                                                                                [Stage 111:===========================>                         (62 + 59) / 121][Stage 111:================================>                    (75 + 46) / 121][Stage 111:=======================================>             (90 + 31) / 121][Stage 111:=================================================>   (114 + 7) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.486575163 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 185 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398167458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:============================>                        (61 + 52) / 113][Stage 112:===================================>                 (76 + 37) / 113][Stage 112:============================================>        (95 + 18) / 113][Stage 112:===================================================> (110 + 3) / 113]                                                                                [Stage 113:===========================>                         (59 + 55) / 114][Stage 113:==============================>                      (65 + 49) / 114][Stage 113:=========================================>           (89 + 25) / 114][Stage 113:=================================================>   (106 + 8) / 114][Stage 113:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.119659175 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionI ndex = 133 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390633277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:============================>                        (61 + 52) / 113][Stage 114:====================================>                (77 + 36) / 113][Stage 114:==========================================>          (91 + 22) / 113][Stage 114:===================================================> (109 + 4) / 113]                                                                                [Stage 115:===========================>                         (59 + 55) / 114][Stage 115:================================>                    (69 + 45) / 114][Stage 115:=========================================>           (90 + 24) / 114][Stage 115:================================================>    (105 + 9) / 114][Stage 115:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.265490218 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIn dex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397622877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 116:==========================>                          (60 + 60) / 120][Stage 116:============================>                        (65 + 55) / 120][Stage 116:=======================================>             (90 + 30) / 120][Stage 116:==============================================>     (108 + 12) / 120][Stage 116:====================================================>(118 + 2) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:============================>                        (65 + 56) / 121][Stage 117:======================================>              (87 + 34) / 121][Stage 117:==============================================>     (109 + 12) / 121]                                                                                Time elapsed: 3.023652154 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIn dex = 39 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451142892 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:==================================>                  (77 + 41) / 118][Stage 118:============================================>       (101 + 17) / 118][Stage 118:===================================================> (114 + 4) / 118]                                                                                [Stage 119:================================>                    (73 + 46) / 119][Stage 119:=======================================>             (89 + 30) / 119][Stage 119:==============================================>     (107 + 12) / 119]                                                                                Time elapsed: 2.731022903 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIn dex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412250399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 120:==========================>                          (60 + 60) / 120][Stage 120:============================>                        (64 + 56) / 120][Stage 120:====================================>                (82 + 38) / 120][Stage 120:===========================================>        (101 + 19) / 120][Stage 120:==================================================>  (115 + 5) / 120]                                                                                [Stage 121:============================>                        (64 + 57) / 121][Stage 121:=================================>                   (76 + 45) / 121][Stage 121:===========================================>        (102 + 19) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.05732773 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionI ndex = 227 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399887363 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:============================>                        (66 + 55) / 121][Stage 122:=====================================>               (85 + 36) / 121][Stage 122:=============================================>      (107 + 14) / 121][Stage 122:===================================================> (118 + 3) / 121]                                                                                [Stage 123:============================>                        (65 + 57) / 122][Stage 123:===============================>                     (72 + 50) / 122][Stage 123:==========================================>          (97 + 25) / 122][Stage 123:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.191974842 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionInd ex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382781833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 124:===========================>                         (58 + 55) / 113][Stage 124:=============================>                       (63 + 50) / 113][Stage 124:===================================>                 (75 + 38) / 113][Stage 124:==========================================>          (90 + 23) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===========================>                         (59 + 55) / 114][Stage 125:==============================>                      (66 + 48) / 114][Stage 125:=====================================>               (80 + 34) / 114][Stage 125:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.055761464 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionI ndex = 157 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356205095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 126:===================================>                 (75 + 38) / 113][Stage 126:=======================================>             (85 + 28) / 113][Stage 126:===========================================>         (93 + 20) / 113][Stage 126:===================================================> (110 + 3) / 113]                                                                                [Stage 127:=====================================>               (81 + 33) / 114][Stage 127:========================================>            (88 + 26) / 114][Stage 127:==============================================>     (102 + 12) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.845642953 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionI ndex = 169 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384077136 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 128:===========================>                         (59 + 54) / 113][Stage 128:=================================>                   (71 + 42) / 113][Stage 128:==========================================>          (91 + 22) / 113][Stage 128:==================================================>  (107 + 6) / 113][Stage 128:====================================================>(112 + 1) / 113]                                                                                [Stage 129:===========================>                         (59 + 55) / 114][Stage 129:==============================>                      (65 + 49) / 114][Stage 129:==================================>                  (74 + 40) / 114][Stage 129:========================================>            (88 + 26) / 114][Stage 129:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.279871715 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionI ndex = 219 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360730789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 130:=================================>                   (72 + 41) / 113][Stage 130:=========================================>           (89 + 24) / 113][Stage 130:============================================>        (95 + 18) / 113][Stage 130:==================================================>  (107 + 6) / 113][Stage 130:===================================================> (110 + 3) / 113][Stage 130:====================================================>(111 + 2) / 113]                                                                                [Stage 131:====================================>                (78 + 36) / 114][Stage 131:========================================>            (88 + 26) / 114][Stage 131:=============================================>      (100 + 14) / 114][Stage 131:==================================================>  (109 + 5) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.091096765 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionInd ex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388082228 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 132:================================>                    (72 + 46) / 118][Stage 132:===================================>                 (80 + 38) / 118][Stage 132:=======================================>             (89 + 29) / 118][Stage 132:==============================================>     (106 + 12) / 118][Stage 132:===================================================> (115 + 3) / 118]                                                                                [Stage 133:================================>                    (73 + 46) / 119][Stage 133:=================================>                   (76 + 43) / 119][Stage 133:========================================>            (92 + 27) / 119][Stage 133:==============================================>     (106 + 13) / 119][Stage 133:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.298903889 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIn dex = 69 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502157279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:=============================>                       (66 + 54) / 120][Stage 134:===================================>                 (80 + 40) / 120][Stage 134:===========================================>         (98 + 22) / 120][Stage 134:===================================================> (117 + 3) / 120]                                                                                [Stage 135:============================>                        (64 + 57) / 121][Stage 135:=================================>                   (76 + 45) / 121][Stage 135:==========================================>          (97 + 24) / 121][Stage 135:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.146544445 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionInd ex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389780413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 136:===========================>                         (58 + 55) / 113][Stage 136:============================>                        (61 + 52) / 113][Stage 136:==================================>                  (73 + 40) / 113][Stage 136:=============================================>       (96 + 17) / 113][Stage 136:====================================================>(111 + 2) / 113]                                                                                [Stage 137:===========================>                         (60 + 54) / 114][Stage 137:===================================>                 (76 + 38) / 114][Stage 137:===========================================>         (93 + 21) / 114][Stage 137:=================================================>   (107 + 7) / 114][Stage 137:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.343757458 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionI ndex = 136 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356845877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 138:=======================================>             (85 + 28) / 113][Stage 138:=============================================>       (96 + 17) / 113][Stage 138:===============================================>    (103 + 10) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:=======================================>             (84 + 30) / 114][Stage 139:===========================================>         (93 + 21) / 114][Stage 139:=================================================>   (106 + 8) / 114][Stage 139:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.871176663 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionI ndex = 146 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375697272 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 140:===============================>                     (68 + 47) / 115][Stage 140:====================================>                (80 + 35) / 115][Stage 140:=============================================>       (98 + 17) / 115][Stage 140:====================================================>(113 + 2) / 115]                                                                                [Stage 141:===============================>                     (70 + 46) / 116][Stage 141:========================================>            (89 + 27) / 116][Stage 141:=============================================>      (101 + 15) / 116][Stage 141:==================================================>  (111 + 5) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.676625138 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionI ndex = 174 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353185266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 142:=================================>                   (71 + 42) / 113][Stage 142:====================================>                (78 + 35) / 113][Stage 142:===========================================>         (92 + 21) / 113][Stage 142:================================================>    (104 + 9) / 113][Stage 142:====================================================>(111 + 2) / 113]                                                                                [Stage 143:===================================>                 (76 + 38) / 114][Stage 143:======================================>              (83 + 31) / 114][Stage 143:=============================================>       (97 + 17) / 114][Stage 143:=================================================>   (106 + 8) / 114][Stage 143:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.994855781 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIn dex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366404305 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 144:================================>                    (73 + 45) / 118][Stage 144:=================================>                   (74 + 44) / 118][Stage 144:====================================>                (81 + 37) / 118][Stage 144:=========================================>           (92 + 26) / 118][Stage 144:==============================================>     (106 + 12) / 118][Stage 144:====================================================>(117 + 1) / 118]                                                                                [Stage 145:=================================>                   (76 + 43) / 119][Stage 145:==================================>                  (78 + 41) / 119][Stage 145:========================================>            (91 + 28) / 119][Stage 145:==============================================>     (107 + 12) / 119][Stage 145:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.462050959 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIn dex = 79 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387287065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 146:===========================>                         (59 + 54) / 113][Stage 146:===============================>                     (67 + 46) / 113][Stage 146:========================================>            (87 + 26) / 113][Stage 146:==============================================>      (99 + 14) / 113][Stage 146:==================================================>  (107 + 6) / 113]                                                                                [Stage 147:===========================>                         (60 + 54) / 114][Stage 147:================================>                    (69 + 45) / 114][Stage 147:=====================================>               (81 + 33) / 114][Stage 147:============================================>        (96 + 18) / 114][Stage 147:==================================================>  (108 + 6) / 114][Stage 147:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.450777245 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionI ndex = 191 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360619787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 148:===================================>                 (76 + 37) / 113][Stage 148:=========================================>           (89 + 24) / 113][Stage 148:============================================>        (95 + 18) / 113][Stage 148:=================================================>   (105 + 8) / 113][Stage 148:====================================================>(111 + 2) / 113][Stage 148:====================================================>(112 + 1) / 113]                                                                                [Stage 149:=======================================>             (84 + 30) / 114][Stage 149:=========================================>           (89 + 25) / 114][Stage 149:=============================================>       (98 + 16) / 114][Stage 149:==================================================>  (109 + 5) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.36329795 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionI ndex = 148 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33752072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 150:=====================================>               (81 + 34) / 115][Stage 150:=========================================>           (91 + 24) / 115][Stage 150:=============================================>       (99 + 16) / 115][Stage 150:==================================================>  (110 + 5) / 115]                                                                                [Stage 151:=====================================>               (83 + 33) / 116][Stage 151:===========================================>         (95 + 21) / 116][Stage 151:================================================>    (107 + 9) / 116][Stage 151:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.763322446 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIn dex = 106 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419161177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:================================>                    (73 + 47) / 120][Stage 152:=========================================>           (94 + 26) / 120][Stage 152:=================================================>   (113 + 7) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:================================>                    (74 + 47) / 121][Stage 153:=========================================>           (94 + 27) / 121][Stage 153:=================================================>   (113 + 8) / 121][Stage 153:====================================================>(119 + 2) / 121][Stage 153:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.672297126 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIn dex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404442935 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:==============================>                      (68 + 52) / 120][Stage 154:=================================>                   (75 + 45) / 120][Stage 154:===========================================>         (99 + 21) / 120][Stage 154:==================================================>  (115 + 5) / 120]                                                                                [Stage 155:===========================>                         (62 + 59) / 121][Stage 155:=================================>                   (76 + 45) / 121][Stage 155:===========================================>         (99 + 22) / 121][Stage 155:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.059447165 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIn dex = 95 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384818817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 156:===========================>                         (58 + 55) / 113][Stage 156:==============================>                      (64 + 49) / 113][Stage 156:=======================================>             (84 + 29) / 113][Stage 156:==============================================>     (100 + 13) / 113][Stage 156:===================================================> (110 + 3) / 113]                                                                                [Stage 157:============================>                        (61 + 53) / 114][Stage 157:=================================>                   (72 + 42) / 114][Stage 157:=========================================>           (90 + 24) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.327597223 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionI ndex = 236 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336594838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 158:=======================================>             (85 + 30) / 115][Stage 158:=============================================>       (99 + 16) / 115][Stage 158:==================================================>  (109 + 6) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=====================================>               (83 + 33) / 116][Stage 159:==========================================>          (92 + 24) / 116][Stage 159:=============================================>      (101 + 15) / 116][Stage 159:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.753239014 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionI ndex = 228 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394374905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 160:===========================>                         (63 + 57) / 120][Stage 160:================================>                    (73 + 47) / 120][Stage 160:==========================================>          (96 + 24) / 120][Stage 160:==================================================>  (115 + 5) / 120]                                                                                [Stage 161:============================>                        (64 + 57) / 121][Stage 161:===============================>                     (72 + 49) / 121][Stage 161:===========================================>         (99 + 22) / 121][Stage 161:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 2.980956655 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIn dex = 88 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401059225 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:===========================>                         (63 + 57) / 120][Stage 162:==================================>                  (79 + 41) / 120][Stage 162:==============================================>     (108 + 12) / 120][Stage 162:===================================================> (116 + 4) / 120]                                                                                [Stage 163:============================>                        (64 + 57) / 121][Stage 163:==================================>                  (78 + 43) / 121][Stage 163:==========================================>          (97 + 24) / 121][Stage 163:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.091501856 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIn dex = 67 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377066015 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 164:===============================>                     (69 + 46) / 115][Stage 164:====================================>                (80 + 35) / 115][Stage 164:============================================>        (96 + 19) / 115][Stage 164:===================================================> (112 + 3) / 115]                                                                                [Stage 165:==================================>                  (75 + 41) / 116][Stage 165:============================================>        (98 + 18) / 116][Stage 165:==================================================>  (111 + 5) / 116][Stage 165:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.712498895 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIn dex = 50 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393837023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:==============================>                      (65 + 48) / 113][Stage 166:===================================>                 (75 + 38) / 113][Stage 166:=========================================>           (89 + 24) / 113][Stage 166:================================================>    (104 + 9) / 113]                                                                                [Stage 167:============================>                        (61 + 53) / 114][Stage 167:=================================>                   (71 + 43) / 114][Stage 167:======================================>              (83 + 31) / 114][Stage 167:==============================================>     (102 + 12) / 114][Stage 167:===================================================> (110 + 4) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.457029195 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIn dex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335587894 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 168:=======================================>             (85 + 30) / 115][Stage 168:==========================================>          (92 + 23) / 115][Stage 168:=============================================>       (98 + 17) / 115][Stage 168:===================================================> (111 + 4) / 115]                                                                                [Stage 169:======================================>              (84 + 32) / 116][Stage 169:=========================================>           (90 + 26) / 116][Stage 169:============================================>        (98 + 18) / 116][Stage 169:====================================================>(114 + 2) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.391537205 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionI ndex = 199 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396746912 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 170:=============================>                       (65 + 50) / 115][Stage 170:================================>                    (71 + 44) / 115][Stage 170:==========================================>          (93 + 22) / 115][Stage 170:================================================>    (106 + 9) / 115][Stage 170:===================================================> (112 + 3) / 115]                                                                                [Stage 171:==================================>                  (76 + 40) / 116][Stage 171:==========================================>          (94 + 22) / 116][Stage 171:============================================>       (100 + 16) / 116][Stage 171:==================================================>  (111 + 5) / 116][Stage 171:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.061132885 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionI ndex = 213 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372602962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 172:================================>                    (71 + 44) / 115][Stage 172:=======================================>             (85 + 30) / 115][Stage 172:=============================================>       (99 + 16) / 115][Stage 172:====================================================>(113 + 2) / 115]                                                                                [Stage 173:==============================>                      (67 + 49) / 116][Stage 173:=====================================>               (83 + 33) / 116][Stage 173:=============================================>      (101 + 15) / 116][Stage 173:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.647263303 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionI ndex = 189 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388356687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 174:============================>                        (60 + 53) / 113][Stage 174:=================================>                   (71 + 42) / 113][Stage 174:===========================================>         (92 + 21) / 113][Stage 174:==================================================>  (107 + 6) / 113]                                                                                [Stage 175:=============================>                       (64 + 50) / 114][Stage 175:===================================>                 (77 + 37) / 114][Stage 175:============================================>        (96 + 18) / 114][Stage 175:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.999959826 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionI ndex = 179 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405054776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 176:==========================>                          (60 + 61) / 121][Stage 176:=============================>                       (68 + 53) / 121][Stage 176:========================================>            (92 + 29) / 121][Stage 176:==============================================>     (109 + 12) / 121][Stage 176:====================================================>(120 + 1) / 121]                                                                                [Stage 177:==========================>                          (61 + 61) / 122][Stage 177:=============================>                       (68 + 54) / 122][Stage 177:====================================>                (84 + 38) / 122][Stage 177:=================================================>   (115 + 7) / 122][Stage 177:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.13626174 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide73"
dataSource: String = /nidan/orc/individualORC/slide73

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionI ndex = 176 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404374334 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 178:==========================>                          (60 + 60) / 120][Stage 178:=============================>                       (67 + 53) / 120][Stage 178:===================================>                 (81 + 39) / 120][Stage 178:============================================>       (103 + 17) / 120]                                                                                [Stage 179:==========================>                          (61 + 60) / 121][Stage 179:============================>                        (66 + 55) / 121][Stage 179:===================================>                 (81 + 40) / 121][Stage 179:============================================>       (104 + 17) / 121][Stage 179:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.127578635 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide78"
dataSource: String = /nidan/orc/individualORC/slide78

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIn dex = 13 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382002568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 180:===========================>                         (58 + 55) / 113][Stage 180:============================>                        (60 + 53) / 113][Stage 180:==================================>                  (73 + 40) / 113][Stage 180:=========================================>           (88 + 25) / 113][Stage 180:==============================================>     (100 + 13) / 113][Stage 180:===================================================> (110 + 3) / 113]                                                                                [Stage 181:===========================>                         (59 + 55) / 114][Stage 181:==============================>                      (65 + 49) / 114][Stage 181:=======================================>             (84 + 30) / 114][Stage 181:============================================>        (95 + 19) / 114][Stage 181:=================================================>   (107 + 7) / 114][Stage 181:===================================================> (110 + 4) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.712468131 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionI ndex = 188 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414530582 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 182:==================================>                  (75 + 40) / 115][Stage 182:========================================>            (87 + 28) / 115][Stage 182:===============================================>    (104 + 11) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:===============================>                     (68 + 48) / 116][Stage 183:=====================================>               (81 + 35) / 116][Stage 183:===========================================>         (96 + 20) / 116][Stage 183:================================================>    (107 + 9) / 116][Stage 183:===================================================> (112 + 4) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.026966201 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIn dex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410899632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 184:===========================>                         (58 + 55) / 113][Stage 184:=============================>                       (63 + 50) / 113][Stage 184:===================================>                 (75 + 38) / 113][Stage 184:=============================================>       (97 + 16) / 113][Stage 184:===================================================> (109 + 4) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:===========================>                         (60 + 54) / 114][Stage 185:============================>                        (62 + 52) / 114][Stage 185:========================================>            (87 + 27) / 114][Stage 185:==============================================>     (102 + 12) / 114][Stage 185:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.359155545 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionI ndex = 203 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333788588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:=========================================>           (90 + 25) / 115][Stage 186:=============================================>       (99 + 16) / 115][Stage 186:==================================================>  (110 + 5) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:========================================>            (88 + 28) / 116][Stage 187:============================================>        (98 + 18) / 116][Stage 187:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.857245428 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide77"
dataSource: String = /nidan/orc/individualORC/slide77

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionI ndex = 145 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492342248 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 188:==========================>                          (60 + 61) / 121][Stage 188:=============================>                       (67 + 54) / 121][Stage 188:==================================>                  (79 + 42) / 121][Stage 188:==========================================>          (98 + 23) / 121][Stage 188:===================================================> (118 + 3) / 121]                                                                                [Stage 189:===========================>                         (64 + 58) / 122][Stage 189:================================>                    (75 + 47) / 122][Stage 189:==========================================>          (97 + 25) / 122][Stage 189:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.088006177 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionI ndex = 141 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407290761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:==============================>                      (70 + 50) / 120][Stage 190:=========================================>           (93 + 27) / 120][Stage 190:=================================================>   (112 + 8) / 120][Stage 190:===================================================> (117 + 3) / 120]                                                                                [Stage 191:============================>                        (64 + 57) / 121][Stage 191:===================================>                 (80 + 41) / 121][Stage 191:===========================================>        (101 + 20) / 121][Stage 191:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.208674726 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIn dex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392709479 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 192:==========================>                          (60 + 61) / 121][Stage 192:============================>                        (64 + 57) / 121][Stage 192:==================================>                  (79 + 42) / 121][Stage 192:==========================================>         (100 + 21) / 121][Stage 192:====================================================>(119 + 2) / 121]                                                                                [Stage 193:==========================>                          (61 + 61) / 122][Stage 193:============================>                        (66 + 56) / 122][Stage 193:=================================>                   (76 + 46) / 122][Stage 193:===========================================>        (101 + 21) / 122][Stage 193:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.974545347 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIn dex = 76 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355904852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 194:=================================>                   (72 + 41) / 113][Stage 194:======================================>              (83 + 30) / 113][Stage 194:============================================>        (95 + 18) / 113][Stage 194:==================================================>  (107 + 6) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:======================================>              (82 + 32) / 114][Stage 195:=========================================>           (90 + 24) / 114][Stage 195:==============================================>     (103 + 11) / 114][Stage 195:====================================================>(112 + 2) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.223842029 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIn dex = 91 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365655361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:=================================>                   (75 + 43) / 118][Stage 196:========================================>            (91 + 27) / 118][Stage 196:==================================================>  (112 + 6) / 118][Stage 196:====================================================>(117 + 1) / 118]                                                                                [Stage 197:================================>                    (73 + 46) / 119][Stage 197:================================>                    (74 + 45) / 119][Stage 197:=========================================>           (93 + 26) / 119][Stage 197:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 2.944171817 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionI ndex = 195 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38293895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 198:================================>                    (72 + 46) / 118][Stage 198:=================================>                   (75 + 43) / 118][Stage 198:===========================================>         (96 + 22) / 118][Stage 198:=================================================>   (110 + 8) / 118]                                                                                [Stage 199:================================>                    (73 + 46) / 119][Stage 199:====================================>                (82 + 37) / 119][Stage 199:==============================================>     (106 + 13) / 119][Stage 199:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.903656319 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIn dex = 34 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360349645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{ case (bytes, index) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => f alse).size}
[Stage 200:================================>                    (72 + 46) / 118][Stage 200:===================================>                 (79 + 39) / 118][Stage 200:========================================>            (91 + 27) / 118][Stage 200:==============================================>     (106 + 12) / 118][Stage 200:===================================================> (115 + 3) / 118]                                                                                [Stage 201:================================>                    (74 + 45) / 119][Stage 201:=====================================>               (85 + 34) / 119][Stage 201:============================================>       (102 + 17) / 119][Stage 201:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.082956678 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/25 03:21:21 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.15:58384) dropped. Could not find BlockManagerEndpoint1.

real	10m0.573s
user	11m35.468s
sys	0m37.680s
