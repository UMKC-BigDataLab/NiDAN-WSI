Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 03:45:26 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 03:45:41 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 03:45:41 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 03:45:42 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 03:45:44 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 03:45:55 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522034544-0409).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@55c78556

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.403839105 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:=================>                                     (37 + 78) / 115][Stage 0:=========================>                             (54 + 61) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (68 + 47) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=======================================>               (83 + 32) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (107 + 8) / 115]                                                                                [Stage 1:=========================>                             (53 + 63) / 116][Stage 1:============================>                          (60 + 56) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:=========================================>             (87 + 29) / 116][Stage 1:================================================>     (104 + 12) / 116][Stage 1:===================================================>   (108 + 8) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.60197182 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.693519548 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:>                                                        (0 + 0) / 115][Stage 2:=======================>                               (50 + 65) / 115][Stage 2:============================>                          (59 + 56) / 115][Stage 2:================================>                      (68 + 47) / 115][Stage 2:=====================================>                 (78 + 37) / 115][Stage 2:=========================================>             (86 + 29) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:==============================================>       (100 + 15) / 115][Stage 2:================================================>     (104 + 11) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:=============================>                         (63 + 53) / 116][Stage 3:===============================>                       (67 + 49) / 116][Stage 3:================================>                      (69 + 47) / 116][Stage 3:====================================>                  (76 + 40) / 116][Stage 3:=======================================>               (84 + 32) / 116][Stage 3:============================================>          (94 + 22) / 116][Stage 3:===============================================>      (103 + 13) / 116][Stage 3:==================================================>    (107 + 9) / 116][Stage 3:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 5.475425205 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.629046955 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=======================>                               (49 + 66) / 115][Stage 4:===========================>                           (57 + 58) / 115][Stage 4:==================================>                    (72 + 43) / 115][Stage 4:===================================>                   (75 + 40) / 115][Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:=========================================>             (86 + 29) / 115][Stage 4:===============================================>      (102 + 13) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:===============================>                       (67 + 49) / 116][Stage 5:====================================>                  (76 + 40) / 116][Stage 5:=====================================>                 (79 + 37) / 116][Stage 5:========================================>              (86 + 30) / 116][Stage 5:==============================================>       (100 + 16) / 116][Stage 5:===================================================>   (108 + 8) / 116][Stage 5:=====================================================> (113 + 3) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 5.818845278 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.559112518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (70 + 43) / 113][Stage 6:======================================>                (79 + 34) / 113][Stage 6:========================================>              (83 + 30) / 113][Stage 6:===========================================>           (90 + 23) / 113][Stage 6:==============================================>        (96 + 17) / 113][Stage 6:=================================================>    (103 + 10) / 113][Stage 6:=====================================================> (110 + 3) / 113][Stage 6:======================================================>(112 + 1) / 113]                                                                                [Stage 7:===================================>                   (73 + 41) / 114][Stage 7:======================================>                (80 + 34) / 114][Stage 7:========================================>              (84 + 30) / 114][Stage 7:===========================================>           (90 + 24) / 114][Stage 7:===============================================>      (101 + 13) / 114][Stage 7:=====================================================> (110 + 4) / 114][Stage 7:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.759920156 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.591895604 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:==========================>                            (55 + 58) / 113][Stage 8:===========================>                           (56 + 57) / 113][Stage 8:================================>                      (67 + 46) / 113][Stage 8:===================================>                   (73 + 40) / 113][Stage 8:====================================>                  (75 + 38) / 113][Stage 8:=========================================>             (86 + 27) / 113][Stage 8:===================================================>   (106 + 7) / 113][Stage 8:====================================================>  (108 + 5) / 113]                                                                                [Stage 9:============================>                          (60 + 54) / 114][Stage 9:================================>                      (67 + 47) / 114][Stage 9:=========================================>             (85 + 29) / 114][Stage 9:===============================================>      (101 + 13) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.796012388 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514976598 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (72 + 46) / 118][Stage 10:=================================>                    (73 + 45) / 118][Stage 10:==================================>                   (76 + 42) / 118][Stage 10:============================================>         (97 + 21) / 118][Stage 10:===================================================>  (112 + 6) / 118][Stage 10:=====================================================>(117 + 1) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:==================================>                   (75 + 44) / 119][Stage 11:========================================>             (89 + 30) / 119][Stage 11:==============================================>      (105 + 14) / 119][Stage 11:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.362054567 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.576358332 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (57 + 56) / 113][Stage 12:===========================>                          (58 + 55) / 113][Stage 12:=============================>                        (62 + 51) / 113][Stage 12:====================================>                 (77 + 36) / 113][Stage 12:=============================================>        (95 + 18) / 113][Stage 12:===================================================>  (107 + 6) / 113][Stage 12:====================================================> (110 + 3) / 113]                                                                                [Stage 13:===========================>                          (58 + 56) / 114][Stage 13:============================>                         (61 + 53) / 114][Stage 13:===================================>                  (75 + 39) / 114][Stage 13:==========================================>           (90 + 24) / 114][Stage 13:================================================>    (104 + 10) / 114][Stage 13:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.755860452 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483152632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:===================================>                  (77 + 41) / 118][Stage 14:=======================================>              (86 + 32) / 118][Stage 14:=============================================>       (101 + 17) / 118][Stage 14:================================================>    (108 + 10) / 118][Stage 14:====================================================> (115 + 3) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:===================================>                  (79 + 40) / 119][Stage 15:==========================================>           (93 + 26) / 119][Stage 15:===============================================>     (107 + 12) / 119][Stage 15:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.79011244 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.578816101 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:===========================>                          (62 + 59) / 121][Stage 16:================================>                     (73 + 48) / 121][Stage 16:=====================================>                (85 + 36) / 121][Stage 16:===============================================>     (109 + 12) / 121][Stage 16:=====================================================>(120 + 1) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:==============================>                       (68 + 54) / 122][Stage 17:===================================>                  (80 + 42) / 122][Stage 17:==========================================>           (97 + 25) / 122][Stage 17:================================================>    (112 + 10) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.708377325 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430922116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:======================================>               (82 + 33) / 115][Stage 18:===========================================>          (92 + 23) / 115][Stage 18:================================================>    (105 + 10) / 115][Stage 18:==================================================>   (108 + 7) / 115][Stage 18:===================================================>  (109 + 6) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:========================================>             (88 + 28) / 116][Stage 19:===============================================>     (104 + 12) / 116][Stage 19:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.144718127 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51188482 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (65 + 50) / 115][Stage 20:==================================>                   (74 + 41) / 115][Stage 20:===========================================>          (92 + 23) / 115][Stage 20:==================================================>   (107 + 8) / 115]                                                                                [Stage 21:=================================>                    (73 + 43) / 116][Stage 21:==========================================>           (91 + 25) / 116][Stage 21:==============================================>      (101 + 15) / 116][Stage 21:==================================================>   (109 + 7) / 116][Stage 21:===================================================>  (111 + 5) / 116][Stage 21:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.293981693 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458377078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==================================>                   (73 + 40) / 113][Stage 22:=======================================>              (83 + 30) / 113][Stage 22:============================================>         (93 + 20) / 113][Stage 22:==================================================>   (105 + 8) / 113][Stage 22:====================================================> (109 + 4) / 113]                                                                                [Stage 23:=======================================>              (83 + 31) / 114][Stage 23:===========================================>          (91 + 23) / 114][Stage 23:================================================>    (104 + 10) / 114][Stage 23:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.124693408 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496586629 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:============================>                         (59 + 54) / 113][Stage 24:================================>                     (67 + 46) / 113][Stage 24:==================================>                   (72 + 41) / 113][Stage 24:===========================================>          (90 + 23) / 113][Stage 24:==============================================>       (98 + 15) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:============================>                         (61 + 53) / 114][Stage 25:================================>                     (68 + 46) / 114][Stage 25:=======================================>              (84 + 30) / 114][Stage 25:==============================================>      (100 + 14) / 114][Stage 25:==================================================>   (107 + 7) / 114][Stage 25:===================================================>  (108 + 6) / 114][Stage 25:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.257402047 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529571596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (60 + 61) / 121][Stage 26:===============================>                      (70 + 51) / 121][Stage 26:========================================>             (90 + 31) / 121][Stage 26:===============================================>     (109 + 12) / 121][Stage 26:=====================================================>(119 + 2) / 121]                                                                                [Stage 27:===========================>                          (61 + 61) / 122][Stage 27:==============================>                       (70 + 52) / 122][Stage 27:=========================================>            (93 + 29) / 122][Stage 27:==============================================>      (106 + 16) / 122][Stage 27:==================================================>   (115 + 7) / 122][Stage 27:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.628115376 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465486208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==============================>                       (65 + 50) / 115][Stage 28:==================================>                   (74 + 41) / 115][Stage 28:===========================================>          (92 + 23) / 115][Stage 28:================================================>    (105 + 10) / 115][Stage 28:====================================================> (112 + 3) / 115][Stage 28:=====================================================>(113 + 2) / 115]                                                                                [Stage 29:===================================>                  (77 + 39) / 116][Stage 29:========================================>             (87 + 29) / 116][Stage 29:============================================>         (95 + 21) / 116][Stage 29:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.231500152 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480273333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==============================>                       (65 + 50) / 115][Stage 30:=====================================>                (80 + 35) / 115][Stage 30:==============================================>       (99 + 16) / 115][Stage 30:====================================================> (111 + 4) / 115]                                                                                [Stage 31:================================>                     (70 + 46) / 116][Stage 31:========================================>             (87 + 29) / 116][Stage 31:==============================================>      (102 + 14) / 116][Stage 31:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.962330981 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425330226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=================================>                    (70 + 43) / 113][Stage 32:========================================>             (85 + 28) / 113][Stage 32:===========================================>          (90 + 23) / 113][Stage 32:===============================================>     (102 + 11) / 113][Stage 32:====================================================> (110 + 3) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:===================================>                  (74 + 40) / 114][Stage 33:=======================================>              (84 + 30) / 114][Stage 33:=============================================>        (96 + 18) / 114][Stage 33:===============================================>     (102 + 12) / 114][Stage 33:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.238711655 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.456035224 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:================================>                     (72 + 46) / 118][Stage 34:=================================>                    (74 + 44) / 118][Stage 34:====================================>                 (79 + 39) / 118][Stage 34:==========================================>           (92 + 26) / 118][Stage 34:===============================================>     (105 + 13) / 118][Stage 34:===================================================>  (113 + 5) / 118]                                                                                [Stage 35:=================================>                    (73 + 46) / 119][Stage 35:==================================>                   (77 + 42) / 119][Stage 35:======================================>               (85 + 34) / 119][Stage 35:===========================================>          (96 + 23) / 119][Stage 35:===================================================>  (113 + 6) / 119][Stage 35:=====================================================>(117 + 2) / 119][Stage 35:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.261607332 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512202755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:==============================>                       (69 + 52) / 121][Stage 36:========================================>             (90 + 31) / 121][Stage 36:============================================>        (102 + 19) / 121][Stage 36:================================================>    (111 + 10) / 121][Stage 36:====================================================> (118 + 3) / 121]                                                                                [Stage 37:===========================>                          (63 + 59) / 122][Stage 37:================================>                     (74 + 48) / 122][Stage 37:=========================================>            (93 + 29) / 122][Stage 37:==============================================>      (107 + 15) / 122][Stage 37:====================================================> (119 + 3) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.739699207 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432501617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===================================>                  (75 + 38) / 113][Stage 38:========================================>             (85 + 28) / 113][Stage 38:==============================================>       (98 + 15) / 113][Stage 38:==================================================>   (105 + 8) / 113]                                                                                [Stage 39:=====================================>                (80 + 34) / 114][Stage 39:===========================================>          (91 + 23) / 114][Stage 39:==============================================>      (101 + 13) / 114][Stage 39:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.933982455 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480703772 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:============================>                         (59 + 54) / 113][Stage 40:===============================>                      (65 + 48) / 113][Stage 40:======================================>               (80 + 33) / 113][Stage 40:==========================================>           (89 + 24) / 113][Stage 40:===============================================>     (102 + 11) / 113][Stage 40:====================================================> (109 + 4) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:============================>                         (60 + 54) / 114][Stage 41:==============================>                       (64 + 50) / 114][Stage 41:========================================>             (86 + 28) / 114][Stage 41:================================================>    (104 + 10) / 114][Stage 41:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.686780099 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505378321 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:============================>                         (59 + 54) / 113][Stage 42:================================>                     (69 + 44) / 113][Stage 42:======================================>               (81 + 32) / 113][Stage 42:===============================================>     (102 + 11) / 113][Stage 42:====================================================> (110 + 3) / 113]                                                                                [Stage 43:=============================>                        (62 + 52) / 114][Stage 43:=================================>                    (71 + 43) / 114][Stage 43:=============================================>        (96 + 18) / 114][Stage 43:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.412712907 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492570023 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==========================>                           (60 + 61) / 121][Stage 44:============================>                         (63 + 58) / 121][Stage 44:================================>                     (72 + 49) / 121][Stage 44:=========================================>            (93 + 28) / 121][Stage 44:=================================================>    (112 + 9) / 121]                                                                                [Stage 45:===========================>                          (62 + 60) / 122][Stage 45:================================>                     (73 + 49) / 122][Stage 45:===========================================>          (99 + 23) / 122][Stage 45:==================================================>   (114 + 8) / 122][Stage 45:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.629554612 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428607216 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (70 + 45) / 115][Stage 46:======================================>               (82 + 33) / 115][Stage 46:============================================>         (95 + 20) / 115][Stage 46:===================================================>  (109 + 6) / 115]                                                                                [Stage 47:===================================>                  (76 + 40) / 116][Stage 47:========================================>             (88 + 28) / 116][Stage 47:================================================>    (106 + 10) / 116][Stage 47:===================================================>  (110 + 6) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.682259662 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483919803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:===============================>                      (70 + 50) / 120][Stage 48:====================================>                 (82 + 38) / 120][Stage 48:===================================================>  (114 + 6) / 120][Stage 48:=====================================================>(119 + 1) / 120]                                                                                [Stage 49:===========================>                          (61 + 60) / 121][Stage 49:=================================>                    (75 + 46) / 121][Stage 49:======================================>               (87 + 34) / 121][Stage 49:=============================================>       (103 + 18) / 121][Stage 49:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.200380203 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424799819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===================================>                  (75 + 38) / 113][Stage 50:=========================================>            (87 + 26) / 113][Stage 50:===============================================>     (102 + 11) / 113][Stage 50:====================================================> (109 + 4) / 113]                                                                                [Stage 51:========================================>             (86 + 28) / 114][Stage 51:=============================================>        (95 + 19) / 114][Stage 51:===============================================>     (103 + 11) / 114][Stage 51:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.201338983 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.461739723 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:=============================>                        (62 + 51) / 113][Stage 52:=======================================>              (82 + 31) / 113][Stage 52:==============================================>      (100 + 13) / 113][Stage 52:===================================================>  (108 + 5) / 113]                                                                                [Stage 53:============================>                         (60 + 54) / 114][Stage 53:==================================>                   (72 + 42) / 114][Stage 53:==========================================>           (89 + 25) / 114][Stage 53:===============================================>     (103 + 11) / 114][Stage 53:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.391549687 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525781288 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:=================================>                    (73 + 45) / 118][Stage 54:====================================>                 (80 + 38) / 118][Stage 54:===========================================>          (96 + 22) / 118][Stage 54:==================================================>   (111 + 7) / 118][Stage 54:====================================================> (115 + 3) / 118]                                                                                [Stage 55:=================================>                    (73 + 46) / 119][Stage 55:==================================>                   (75 + 44) / 119][Stage 55:========================================>             (90 + 29) / 119][Stage 55:===============================================>     (107 + 12) / 119][Stage 55:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.188844638 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395656806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:====================================>                 (77 + 36) / 113][Stage 56:==========================================>           (89 + 24) / 113][Stage 56:=============================================>        (96 + 17) / 113][Stage 56:====================================================> (109 + 4) / 113][Stage 56:=====================================================>(111 + 2) / 113]                                                                                [Stage 57:=======================================>              (83 + 31) / 114][Stage 57:===========================================>          (91 + 23) / 114][Stage 57:================================================>    (104 + 10) / 114][Stage 57:===================================================>  (109 + 5) / 114][Stage 57:=====================================================>(112 + 2) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.505250485 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395893367 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:======================================>               (83 + 32) / 115][Stage 58:============================================>         (94 + 21) / 115][Stage 58:================================================>    (105 + 10) / 115][Stage 58:====================================================> (111 + 4) / 115][Stage 58:=====================================================>(113 + 2) / 115][Stage 58:=====================================================>(114 + 1) / 115]                                                                                [Stage 59:========================================>             (87 + 29) / 116][Stage 59:==============================================>      (101 + 15) / 116][Stage 59:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.165139623 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 132 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 176  OR  partitionIndex = 132 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444692184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:============================>                         (59 + 54) / 113][Stage 60:===============================>                      (65 + 48) / 113][Stage 60:=======================================>              (83 + 30) / 113][Stage 60:===============================================>      (99 + 14) / 113][Stage 60:====================================================> (110 + 3) / 113]                                                                                [Stage 61:==============================>                       (64 + 50) / 114][Stage 61:=====================================>                (80 + 34) / 114][Stage 61:=============================================>        (96 + 18) / 114][Stage 61:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.291484402 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496325994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===========================>                          (60 + 60) / 120][Stage 62:============================>                         (63 + 57) / 120][Stage 62:=================================>                    (74 + 46) / 120][Stage 62:==========================================>           (95 + 25) / 120][Stage 62:===================================================>  (115 + 5) / 120][Stage 62:====================================================> (117 + 3) / 120]                                                                                [Stage 63:===========================>                          (61 + 60) / 121][Stage 63:============================>                         (64 + 57) / 121][Stage 63:=====================================>                (83 + 38) / 121][Stage 63:===============================================>     (109 + 12) / 121][Stage 63:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.31221237 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430506639 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:============================>                         (59 + 54) / 113][Stage 64:============================>                         (60 + 53) / 113][Stage 64:====================================>                 (76 + 37) / 113][Stage 64:==============================================>       (97 + 16) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:===========================>                          (59 + 55) / 114][Stage 65:===============================>                      (66 + 48) / 114][Stage 65:======================================>               (82 + 32) / 114][Stage 65:==============================================>      (101 + 13) / 114][Stage 65:====================================================> (111 + 3) / 114][Stage 65:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.385563511 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.451907294 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (62 + 58) / 120][Stage 66:===============================>                      (71 + 49) / 120][Stage 66:======================================>               (85 + 35) / 120][Stage 66:==============================================>      (106 + 14) / 120][Stage 66:=====================================================>(119 + 1) / 120]                                                                                [Stage 67:===========================>                          (61 + 60) / 121][Stage 67:==============================>                       (68 + 53) / 121][Stage 67:======================================>               (87 + 34) / 121][Stage 67:===============================================>     (108 + 13) / 121][Stage 67:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.304982728 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463440125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:===========================>                          (61 + 60) / 121][Stage 68:==================================>                   (78 + 43) / 121][Stage 68:==========================================>           (95 + 26) / 121][Stage 68:=====================================================>(119 + 2) / 121]                                                                                [Stage 69:============================>                         (64 + 58) / 122][Stage 69:==================================>                   (78 + 44) / 122][Stage 69:==========================================>           (96 + 26) / 122][Stage 69:===================================================>  (116 + 6) / 122][Stage 69:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.403644942 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48  OR  partitionIndex = 4 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 48  OR  partitionIndex = 4 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365771949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=======================================>              (84 + 31) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:===========================================>          (93 + 22) / 115][Stage 70:==================================================>   (107 + 8) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:======================================>               (82 + 34) / 116][Stage 71:========================================>             (88 + 28) / 116][Stage 71:=============================================>       (100 + 16) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:====================================================> (112 + 4) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.55002535 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376557696 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=====================================>                (79 + 36) / 115][Stage 72:======================================>               (83 + 32) / 115][Stage 72:============================================>         (95 + 20) / 115][Stage 72:==================================================>   (107 + 8) / 115][Stage 72:=====================================================>(113 + 2) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:=====================================>                (81 + 35) / 116][Stage 73:========================================>             (86 + 30) / 116][Stage 73:==============================================>      (101 + 15) / 116][Stage 73:===================================================>  (111 + 5) / 116][Stage 73:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.775634429 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392446527 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:=================================>                    (74 + 44) / 118][Stage 74:=======================================>              (86 + 32) / 118][Stage 74:============================================>         (98 + 20) / 118][Stage 74:==================================================>   (110 + 8) / 118][Stage 74:=====================================================>(117 + 1) / 118]                                                                                [Stage 75:=================================>                    (73 + 46) / 119][Stage 75:==================================>                   (77 + 42) / 119][Stage 75:=========================================>            (91 + 28) / 119][Stage 75:=============================================>       (102 + 17) / 119][Stage 75:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.295384206 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369474424 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:======================================>               (82 + 33) / 115][Stage 76:==========================================>           (91 + 24) / 115][Stage 76:=================================================>    (106 + 9) / 115][Stage 76:=====================================================>(114 + 1) / 115]                                                                                [Stage 77:=====================================>                (80 + 36) / 116][Stage 77:=======================================>              (85 + 31) / 116][Stage 77:=============================================>       (100 + 16) / 116][Stage 77:====================================================> (113 + 3) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.770687947 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444916679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (61 + 60) / 121][Stage 78:=================================>                    (75 + 46) / 121][Stage 78:=========================================>            (94 + 27) / 121][Stage 78:====================================================> (117 + 4) / 121]                                                                                [Stage 79:============================>                         (64 + 58) / 122][Stage 79:================================>                     (73 + 49) / 122][Stage 79:========================================>             (91 + 31) / 122][Stage 79:===================================================>  (117 + 5) / 122][Stage 79:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.143690522 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40246875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:============================>                         (60 + 53) / 113][Stage 80:==================================>                   (73 + 40) / 113][Stage 80:==============================================>       (97 + 16) / 113][Stage 80:====================================================> (110 + 3) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:===============================>                      (66 + 48) / 114][Stage 81:=====================================>                (80 + 34) / 114][Stage 81:==============================================>       (99 + 15) / 114][Stage 81:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.145750708 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426631837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (62 + 59) / 121][Stage 82:================================>                     (72 + 49) / 121][Stage 82:=========================================>            (94 + 27) / 121][Stage 82:===================================================>  (115 + 6) / 121]                                                                                [Stage 83:===========================>                          (62 + 60) / 122][Stage 83:================================>                     (74 + 48) / 122][Stage 83:=======================================>              (89 + 33) / 122][Stage 83:===============================================>     (110 + 12) / 122][Stage 83:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.264623152 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415353306 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:================================>                     (72 + 48) / 120][Stage 84:===========================================>          (96 + 24) / 120][Stage 84:===============================================>     (108 + 12) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:==============================>                       (68 + 53) / 121][Stage 85:====================================>                 (82 + 39) / 121][Stage 85:=============================================>       (105 + 16) / 121][Stage 85:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.256379871 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373974462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:========================================>             (85 + 28) / 113][Stage 86:===========================================>          (90 + 23) / 113][Stage 86:==============================================>      (100 + 13) / 113][Stage 86:====================================================> (110 + 3) / 113]                                                                                [Stage 87:=================================>                    (71 + 43) / 114][Stage 87:=======================================>              (83 + 31) / 114][Stage 87:============================================>         (94 + 20) / 114][Stage 87:===============================================>     (102 + 12) / 114][Stage 87:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.50034727 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409344739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:============================>                         (59 + 54) / 113][Stage 88:===============================>                      (66 + 47) / 113][Stage 88:========================================>             (85 + 28) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:===============================>                      (66 + 48) / 114][Stage 89:=======================================>              (84 + 30) / 114][Stage 89:==================================================>   (106 + 8) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.193669083 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419865944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (62 + 59) / 121][Stage 90:===============================>                      (71 + 50) / 121][Stage 90:=========================================>            (92 + 29) / 121][Stage 90:=============================================>       (105 + 16) / 121][Stage 90:=====================================================>(120 + 1) / 121]                                                                                [Stage 91:===========================>                          (61 + 61) / 122][Stage 91:==============================>                       (68 + 54) / 122][Stage 91:======================================>               (87 + 35) / 122][Stage 91:=============================================>       (105 + 17) / 122][Stage 91:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.262831326 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43258718 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (61 + 59) / 120][Stage 92:=================================>                    (74 + 46) / 120][Stage 92:===========================================>          (97 + 23) / 120][Stage 92:================================================>    (110 + 10) / 120]                                                                                [Stage 93:===========================>                          (62 + 59) / 121][Stage 93:================================>                     (72 + 49) / 121][Stage 93:=====================================>                (85 + 36) / 121][Stage 93:===============================================>     (109 + 12) / 121][Stage 93:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.112572495 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362054567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=====================================>                (78 + 35) / 113][Stage 94:===========================================>          (92 + 21) / 113][Stage 94:==============================================>       (97 + 16) / 113][Stage 94:=================================================>    (104 + 9) / 113]                                                                                [Stage 95:=====================================>                (80 + 34) / 114][Stage 95:============================================>         (94 + 20) / 114][Stage 95:==============================================>       (99 + 15) / 114][Stage 95:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.835337521 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382087635 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===============================>                      (67 + 48) / 115][Stage 96:=====================================>                (80 + 35) / 115][Stage 96:=============================================>        (97 + 18) / 115][Stage 96:===================================================>  (109 + 6) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:=================================>                    (72 + 44) / 116][Stage 97:=====================================>                (80 + 36) / 116][Stage 97:============================================>         (95 + 21) / 116][Stage 97:==================================================>   (109 + 7) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.264620581 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37192175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:====================================>                 (77 + 36) / 113][Stage 98:========================================>             (84 + 29) / 113][Stage 98:==============================================>       (97 + 16) / 113][Stage 98:===================================================>  (107 + 6) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:===================================>                  (74 + 40) / 114][Stage 99:=======================================>              (83 + 31) / 114][Stage 99:============================================>         (93 + 21) / 114][Stage 99:==================================================>   (106 + 8) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.023495328 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343925704 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=====================================>               (81 + 34) / 115][Stage 100:========================================>            (88 + 27) / 115][Stage 100:=============================================>       (99 + 16) / 115][Stage 100:==================================================>  (110 + 5) / 115][Stage 100:====================================================>(114 + 1) / 115]                                                                                [Stage 101:=======================================>             (86 + 30) / 116][Stage 101:============================================>        (97 + 19) / 116][Stage 101:================================================>    (107 + 9) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.081990103 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343930684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=====================================>               (82 + 33) / 115][Stage 102:==========================================>          (92 + 23) / 115][Stage 102:===============================================>    (104 + 11) / 115][Stage 102:=================================================>   (108 + 7) / 115][Stage 102:====================================================>(114 + 1) / 115]                                                                                [Stage 103:======================================>              (84 + 32) / 116][Stage 103:==========================================>          (92 + 24) / 116][Stage 103:===============================================>    (105 + 11) / 116][Stage 103:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.860638098 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384646804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:=====================================>               (84 + 34) / 118][Stage 104:============================================>        (99 + 19) / 118][Stage 104:==================================================>  (113 + 5) / 118]                                                                                [Stage 105:================================>                    (73 + 46) / 119][Stage 105:====================================>                (81 + 38) / 119][Stage 105:============================================>        (99 + 20) / 119][Stage 105:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.059500156 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366340603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (82 + 33) / 115][Stage 106:===========================================>         (95 + 20) / 115][Stage 106:=================================================>   (107 + 8) / 115][Stage 106:====================================================>(113 + 2) / 115]                                                                                [Stage 107:=====================================>               (82 + 34) / 116][Stage 107:=========================================>           (90 + 26) / 116][Stage 107:==============================================>     (103 + 13) / 116][Stage 107:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.72736172 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357071901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:=======================================>             (85 + 30) / 115][Stage 108:===========================================>         (94 + 21) / 115][Stage 108:================================================>    (106 + 9) / 115][Stage 108:===================================================> (112 + 3) / 115]                                                                                [Stage 109:=======================================>             (86 + 30) / 116][Stage 109:===========================================>         (95 + 21) / 116][Stage 109:================================================>    (107 + 9) / 116][Stage 109:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.933650691 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383385358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:================================>                    (72 + 46) / 118][Stage 110:=================================>                   (75 + 43) / 118][Stage 110:======================================>              (85 + 33) / 118][Stage 110:=========================================>           (93 + 25) / 118][Stage 110:==============================================>     (105 + 13) / 118][Stage 110:====================================================>(117 + 1) / 118]                                                                                [Stage 111:================================>                    (73 + 46) / 119][Stage 111:===================================>                 (79 + 40) / 119][Stage 111:======================================>              (87 + 32) / 119][Stage 111:===========================================>         (97 + 22) / 119][Stage 111:==============================================>     (106 + 13) / 119][Stage 111:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.48790122 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.342691077 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:====================================>                (80 + 35) / 115][Stage 112:======================================>              (83 + 32) / 115][Stage 112:===========================================>         (95 + 20) / 115][Stage 112:================================================>    (106 + 9) / 115][Stage 112:===================================================> (111 + 4) / 115]                                                                                [Stage 113:=======================================>             (87 + 29) / 116][Stage 113:==========================================>          (94 + 22) / 116][Stage 113:=============================================>      (102 + 14) / 116][Stage 113:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.025967572 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415423218 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 59) / 120][Stage 114:================================>                    (74 + 46) / 120][Stage 114:========================================>            (91 + 29) / 120][Stage 114:==============================================>     (107 + 13) / 120][Stage 114:====================================================>(119 + 1) / 120]                                                                                [Stage 115:=============================>                       (67 + 54) / 121][Stage 115:=================================>                   (76 + 45) / 121][Stage 115:========================================>            (93 + 28) / 121][Stage 115:=================================================>   (113 + 8) / 121][Stage 115:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.420023192 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387486774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (58 + 55) / 113][Stage 116:==============================>                      (65 + 48) / 113][Stage 116:=====================================>               (81 + 32) / 113][Stage 116:==============================================>     (100 + 13) / 113][Stage 116:====================================================>(111 + 2) / 113]                                                                                [Stage 117:============================>                        (61 + 53) / 114][Stage 117:===================================>                 (76 + 38) / 114][Stage 117:===========================================>         (94 + 20) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.187361338 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365079235 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:=================================>                   (75 + 43) / 118][Stage 118:=======================================>             (89 + 29) / 118][Stage 118:==============================================>     (106 + 12) / 118][Stage 118:===================================================> (115 + 3) / 118]                                                                                [Stage 119:================================>                    (74 + 45) / 119][Stage 119:====================================>                (83 + 36) / 119][Stage 119:=============================================>      (103 + 16) / 119]                                                                                Time elapsed: 2.943805097 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406218176 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 61) / 121][Stage 120:============================>                        (65 + 56) / 121][Stage 120:==================================>                  (78 + 43) / 121][Stage 120:============================================>       (103 + 18) / 121][Stage 120:===================================================> (118 + 3) / 121]                                                                                [Stage 121:===========================>                         (64 + 58) / 122][Stage 121:===============================>                     (72 + 50) / 122][Stage 121:====================================>                (85 + 37) / 122][Stage 121:==============================================>     (109 + 13) / 122]                                                                                Time elapsed: 3.136123443 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391745392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:============================>                        (60 + 53) / 113][Stage 122:==================================>                  (73 + 40) / 113][Stage 122:============================================>        (94 + 19) / 113][Stage 122:===================================================> (110 + 3) / 113]                                                                                [Stage 123:===========================>                         (59 + 55) / 114][Stage 123:=============================>                       (64 + 50) / 114][Stage 123:=====================================>               (81 + 33) / 114][Stage 123:==============================================>      (99 + 15) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.273722147 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353341822 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===================================>                 (76 + 37) / 113][Stage 124:=======================================>             (84 + 29) / 113][Stage 124:==========================================>          (91 + 22) / 113][Stage 124:==============================================>     (101 + 12) / 113][Stage 124:=================================================>   (105 + 8) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:=======================================>             (84 + 30) / 114][Stage 125:==========================================>          (92 + 22) / 114][Stage 125:==============================================>      (99 + 15) / 114][Stage 125:==================================================>  (108 + 6) / 114][Stage 125:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.763337225 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351764953 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==================================>                  (74 + 39) / 113][Stage 126:========================================>            (87 + 26) / 113][Stage 126:============================================>        (94 + 19) / 113][Stage 126:===============================================>    (103 + 10) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:====================================>                (79 + 35) / 114][Stage 127:=========================================>           (90 + 24) / 114][Stage 127:=============================================>       (98 + 16) / 114][Stage 127:=================================================>   (107 + 7) / 114][Stage 127:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.585853716 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377820888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===============================>                     (68 + 47) / 115][Stage 128:=====================================>               (81 + 34) / 115][Stage 128:=============================================>      (100 + 15) / 115][Stage 128:===================================================> (112 + 3) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:================================>                    (71 + 45) / 116][Stage 129:======================================>              (85 + 31) / 116][Stage 129:=============================================>       (99 + 17) / 116][Stage 129:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.862938 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412030999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==========================>                          (61 + 59) / 120][Stage 130:=============================>                       (67 + 53) / 120][Stage 130:======================================>              (87 + 33) / 120][Stage 130:==============================================>     (107 + 13) / 120][Stage 130:====================================================>(119 + 1) / 120]                                                                                [Stage 131:==========================>                          (61 + 60) / 121][Stage 131:==============================>                      (69 + 52) / 121][Stage 131:=====================================>               (85 + 36) / 121][Stage 131:===========================================>        (102 + 19) / 121][Stage 131:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.324861295 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382438588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=================================>                   (73 + 42) / 115][Stage 132:=========================================>           (90 + 25) / 115][Stage 132:==============================================>     (103 + 12) / 115][Stage 132:==================================================>  (110 + 5) / 115]                                                                                [Stage 133:===================================>                 (77 + 39) / 116][Stage 133:=========================================>           (91 + 25) / 116][Stage 133:=================================================>   (109 + 7) / 116][Stage 133:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.798292408 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363685145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (72 + 46) / 118][Stage 134:==================================>                  (76 + 42) / 118][Stage 134:========================================>            (91 + 27) / 118][Stage 134:==============================================>     (105 + 13) / 118][Stage 134:====================================================>(117 + 1) / 118]                                                                                [Stage 135:==================================>                  (77 + 42) / 119][Stage 135:=====================================>               (85 + 34) / 119][Stage 135:=======================================>             (89 + 30) / 119][Stage 135:===========================================>         (97 + 22) / 119][Stage 135:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.392757647 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341567607 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (82 + 33) / 115][Stage 136:========================================>            (87 + 28) / 115][Stage 136:=============================================>      (101 + 14) / 115][Stage 136:===================================================> (111 + 4) / 115]                                                                                [Stage 137:=======================================>             (87 + 29) / 116][Stage 137:============================================>        (98 + 18) / 116][Stage 137:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.675975462 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334803217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:======================================>              (84 + 31) / 115][Stage 138:============================================>        (96 + 19) / 115][Stage 138:==================================================>  (110 + 5) / 115][Stage 138:===================================================> (112 + 3) / 115]                                                                                [Stage 139:========================================>            (88 + 28) / 116][Stage 139:=============================================>      (101 + 15) / 116][Stage 139:===================================================> (113 + 3) / 116][Stage 139:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.829504095 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377711425 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (67 + 48) / 115][Stage 140:===================================>                 (78 + 37) / 115][Stage 140:=============================================>       (98 + 17) / 115][Stage 140:===================================================> (111 + 4) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:===============================>                     (70 + 46) / 116][Stage 141:======================================>              (85 + 31) / 116][Stage 141:=============================================>       (99 + 17) / 116][Stage 141:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.731258539 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362493437 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:================================>                    (72 + 46) / 118][Stage 142:================================>                    (73 + 45) / 118][Stage 142:=====================================>               (84 + 34) / 118][Stage 142:=========================================>           (92 + 26) / 118][Stage 142:===============================================>    (107 + 11) / 118][Stage 142:====================================================>(117 + 1) / 118]                                                                                [Stage 143:================================>                    (73 + 46) / 119][Stage 143:=================================>                   (76 + 43) / 119][Stage 143:=======================================>             (88 + 31) / 119][Stage 143:===========================================>        (100 + 19) / 119][Stage 143:===============================================>    (108 + 11) / 119][Stage 143:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.503347517 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348388895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=====================================>               (81 + 32) / 113][Stage 144:===========================================>         (92 + 21) / 113][Stage 144:==============================================>     (100 + 13) / 113][Stage 144:==================================================>  (107 + 6) / 113]                                                                                [Stage 145:===================================>                 (76 + 38) / 114][Stage 145:==========================================>          (91 + 23) / 114][Stage 145:=============================================>      (100 + 14) / 114][Stage 145:===================================================> (110 + 4) / 114][Stage 145:====================================================>(112 + 2) / 114][Stage 145:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.775453471 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381211519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:============================>                        (60 + 53) / 113][Stage 146:================================>                    (69 + 44) / 113][Stage 146:========================================>            (87 + 26) / 113][Stage 146:================================================>    (104 + 9) / 113]                                                                                [Stage 147:============================>                        (61 + 53) / 114][Stage 147:================================>                    (70 + 44) / 114][Stage 147:==========================================>          (91 + 23) / 114][Stage 147:================================================>    (105 + 9) / 114][Stage 147:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.167129247 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379049129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (59 + 54) / 113][Stage 148:==============================>                      (65 + 48) / 113][Stage 148:========================================>            (86 + 27) / 113][Stage 148:=============================================>       (98 + 15) / 113]                                                                                [Stage 149:============================>                        (61 + 53) / 114][Stage 149:=================================>                   (71 + 43) / 114][Stage 149:=========================================>           (90 + 24) / 114][Stage 149:================================================>    (105 + 9) / 114][Stage 149:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.10312054 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382440063 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===========================>                         (59 + 54) / 113][Stage 150:================================>                    (69 + 44) / 113][Stage 150:=========================================>           (88 + 25) / 113][Stage 150:=================================================>   (106 + 7) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:=============================>                       (64 + 50) / 114][Stage 151:=====================================>               (81 + 33) / 114][Stage 151:===========================================>         (94 + 20) / 114][Stage 151:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.134999037 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401151265 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:===========================>                         (63 + 57) / 120][Stage 152:==================================>                  (78 + 42) / 120][Stage 152:==============================================>     (108 + 12) / 120][Stage 152:====================================================>(118 + 2) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:============================>                        (66 + 55) / 121][Stage 153:====================================>                (83 + 38) / 121][Stage 153:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 3.008108335 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349325757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=======================================>             (85 + 28) / 113][Stage 154:============================================>        (95 + 18) / 113][Stage 154:==============================================>     (100 + 13) / 113][Stage 154:==================================================>  (108 + 5) / 113]                                                                                [Stage 155:=====================================>               (81 + 33) / 114][Stage 155:==========================================>          (91 + 23) / 114][Stage 155:==============================================>      (99 + 15) / 114][Stage 155:=================================================>   (106 + 8) / 114][Stage 155:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.269709642 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353815476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===================================>                 (76 + 37) / 113][Stage 156:==========================================>          (91 + 22) / 113][Stage 156:=============================================>       (97 + 16) / 113][Stage 156:=================================================>   (106 + 7) / 113]                                                                                [Stage 157:=======================================>             (84 + 30) / 114][Stage 157:============================================>        (96 + 18) / 114][Stage 157:==============================================>     (101 + 13) / 114][Stage 157:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.919165556 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358816738 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:=================================>                   (75 + 43) / 118][Stage 158:======================================>              (85 + 33) / 118][Stage 158:=========================================>           (92 + 26) / 118][Stage 158:==============================================>     (106 + 12) / 118][Stage 158:====================================================>(117 + 1) / 118]                                                                                [Stage 159:================================>                    (74 + 45) / 119][Stage 159:=================================>                   (75 + 44) / 119][Stage 159:====================================>                (82 + 37) / 119][Stage 159:========================================>            (90 + 29) / 119][Stage 159:==============================================>     (106 + 13) / 119][Stage 159:=================================================>   (111 + 8) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.807493118 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372869499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==================================>                  (74 + 41) / 115][Stage 160:========================================>            (88 + 27) / 115][Stage 160:===============================================>    (104 + 11) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:====================================>                (79 + 37) / 116][Stage 161:========================================>            (89 + 27) / 116][Stage 161:===============================================>    (106 + 10) / 116][Stage 161:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.820145833 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356051324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===================================>                 (76 + 37) / 113][Stage 162:======================================>              (83 + 30) / 113][Stage 162:===========================================>         (93 + 20) / 113][Stage 162:================================================>    (104 + 9) / 113][Stage 162:===================================================> (110 + 3) / 113]                                                                                [Stage 163:=====================================>               (80 + 34) / 114][Stage 163:==========================================>          (92 + 22) / 114][Stage 163:=============================================>       (98 + 16) / 114][Stage 163:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.086924082 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382989842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (59 + 54) / 113][Stage 164:==============================>                      (64 + 49) / 113][Stage 164:=======================================>             (85 + 28) / 113][Stage 164:===============================================>    (103 + 10) / 113][Stage 164:====================================================>(111 + 2) / 113]                                                                                [Stage 165:============================>                        (61 + 53) / 114][Stage 165:=================================>                   (71 + 43) / 114][Stage 165:=========================================>           (90 + 24) / 114][Stage 165:=================================================>   (106 + 8) / 114][Stage 165:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.31041056 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379990449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===========================>                         (59 + 54) / 113][Stage 166:==============================>                      (66 + 47) / 113][Stage 166:===========================================>         (92 + 21) / 113][Stage 166:=================================================>   (105 + 8) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===========================>                         (60 + 54) / 114][Stage 167:=============================>                       (64 + 50) / 114][Stage 167:=============================================>      (100 + 14) / 114][Stage 167:================================================>    (105 + 9) / 114][Stage 167:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.310964218 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.345067995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:=============================================>       (99 + 16) / 115][Stage 168:===================================================> (111 + 4) / 115]                                                                                [Stage 169:=====================================>               (82 + 34) / 116][Stage 169:=========================================>           (90 + 26) / 116][Stage 169:=============================================>      (102 + 14) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.48310544 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374646745 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (72 + 46) / 118][Stage 170:=================================>                   (75 + 43) / 118][Stage 170:=====================================>               (83 + 35) / 118][Stage 170:============================================>       (100 + 18) / 118][Stage 170:================================================>    (109 + 9) / 118][Stage 170:====================================================>(117 + 1) / 118]                                                                                [Stage 171:================================>                    (73 + 46) / 119][Stage 171:==================================>                  (78 + 41) / 119][Stage 171:========================================>            (90 + 29) / 119][Stage 171:============================================>       (101 + 18) / 119][Stage 171:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.392119206 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357336507 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (73 + 45) / 118][Stage 172:==================================>                  (77 + 41) / 118][Stage 172:=====================================>               (83 + 35) / 118][Stage 172:==========================================>          (95 + 23) / 118][Stage 172:===============================================>    (108 + 10) / 118][Stage 172:===================================================> (114 + 4) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:=================================>                   (75 + 44) / 119][Stage 173:=====================================>               (84 + 35) / 119][Stage 173:============================================>        (99 + 20) / 119][Stage 173:=================================================>   (111 + 8) / 119][Stage 173:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.736907754 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401973503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 61) / 121][Stage 174:=============================>                       (67 + 54) / 121][Stage 174:==================================>                  (78 + 43) / 121][Stage 174:===========================================>        (102 + 19) / 121][Stage 174:====================================================>(119 + 2) / 121]                                                                                [Stage 175:============================>                        (65 + 57) / 122][Stage 175:==============================>                      (71 + 51) / 122][Stage 175:=======================================>             (91 + 31) / 122][Stage 175:=================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.26491534 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356711784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:=================================>                   (75 + 43) / 118][Stage 176:=====================================>               (84 + 34) / 118][Stage 176:===========================================>         (97 + 21) / 118][Stage 176:================================================>    (109 + 9) / 118][Stage 176:====================================================>(116 + 2) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:=================================>                   (76 + 43) / 119][Stage 177:====================================>                (83 + 36) / 119][Stage 177:============================================>        (99 + 20) / 119][Stage 177:===============================================>    (108 + 11) / 119][Stage 177:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.503508241 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338057542 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:======================================>              (84 + 31) / 115][Stage 178:=========================================>           (91 + 24) / 115][Stage 178:==================================================>  (110 + 5) / 115]                                                                                [Stage 179:=======================================>             (87 + 29) / 116][Stage 179:==============================================>     (103 + 13) / 116][Stage 179:==================================================>  (111 + 5) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.608563415 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411548504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (60 + 61) / 121][Stage 180:==========================>                          (61 + 60) / 121][Stage 180:===============================>                     (71 + 50) / 121][Stage 180:======================================>              (89 + 32) / 121][Stage 180:==================================================>  (116 + 5) / 121]                                                                                [Stage 181:============================>                        (65 + 57) / 122][Stage 181:===================================>                 (82 + 40) / 122][Stage 181:=============================================>      (106 + 16) / 122][Stage 181:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.060363851 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40862915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:===========================>                         (58 + 55) / 113][Stage 182:==============================>                      (65 + 48) / 113][Stage 182:=======================================>             (85 + 28) / 113][Stage 182:=================================================>   (105 + 8) / 113][Stage 182:====================================================>(111 + 2) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:===============================>                     (67 + 47) / 114][Stage 183:=======================================>             (84 + 30) / 114][Stage 183:==============================================>     (101 + 13) / 114][Stage 183:==================================================>  (109 + 5) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.54509529 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396706757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=================================>                   (73 + 42) / 115][Stage 184:=======================================>             (86 + 29) / 115][Stage 184:================================================>    (106 + 9) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:================================>                    (71 + 45) / 116][Stage 185:====================================>                (80 + 36) / 116][Stage 185:============================================>        (97 + 19) / 116][Stage 185:=================================================>   (109 + 7) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.40458675 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382986257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:==============================>                      (66 + 47) / 113][Stage 186:=========================================>           (88 + 25) / 113][Stage 186:==============================================>     (102 + 11) / 113]                                                                                [Stage 187:===========================>                         (59 + 55) / 114][Stage 187:=============================>                       (64 + 50) / 114][Stage 187:=====================================>               (80 + 34) / 114][Stage 187:=============================================>      (100 + 14) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.317823826 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437325055 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 61) / 121][Stage 188:=============================>                       (67 + 54) / 121][Stage 188:=================================>                   (77 + 44) / 121][Stage 188:===========================================>        (102 + 19) / 121][Stage 188:====================================================>(120 + 1) / 121]                                                                                [Stage 189:==========================>                          (61 + 61) / 122][Stage 189:=============================>                       (67 + 55) / 122][Stage 189:=======================================>             (90 + 32) / 122][Stage 189:============================================>       (105 + 17) / 122][Stage 189:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.097361597 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.402656922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 61) / 121][Stage 190:===============================>                     (71 + 50) / 121][Stage 190:======================================>              (89 + 32) / 121][Stage 190:===============================================>    (111 + 10) / 121][Stage 190:====================================================>(119 + 2) / 121]                                                                                [Stage 191:==========================>                          (61 + 61) / 122][Stage 191:============================>                        (66 + 56) / 122][Stage 191:=====================================>               (86 + 36) / 122][Stage 191:==============================================>     (109 + 13) / 122][Stage 191:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.019448113 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372191269 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===============================>                     (69 + 46) / 115][Stage 192:======================================>              (83 + 32) / 115][Stage 192:============================================>        (96 + 19) / 115][Stage 192:=================================================>   (108 + 7) / 115][Stage 192:====================================================>(113 + 2) / 115]                                                                                [Stage 193:==============================>                      (67 + 49) / 116][Stage 193:====================================>                (80 + 36) / 116][Stage 193:==========================================>          (94 + 22) / 116][Stage 193:================================================>    (107 + 9) / 116][Stage 193:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.055625747 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412268804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:==========================>                          (60 + 60) / 120][Stage 194:===============================>                     (71 + 49) / 120][Stage 194:=====================================>               (84 + 36) / 120][Stage 194:==============================================>     (107 + 13) / 120][Stage 194:====================================================>(119 + 1) / 120]                                                                                [Stage 195:==========================>                          (61 + 60) / 121][Stage 195:=============================>                       (67 + 54) / 121][Stage 195:====================================>                (84 + 37) / 121][Stage 195:==========================================>          (96 + 25) / 121][Stage 195:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.123830122 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413434348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (61 + 60) / 121][Stage 196:==============================>                      (70 + 51) / 121][Stage 196:====================================>                (83 + 38) / 121][Stage 196:=============================================>      (107 + 14) / 121]                                                                                [Stage 197:==========================>                          (62 + 60) / 122][Stage 197:=============================>                       (68 + 54) / 122][Stage 197:======================================>              (89 + 33) / 122][Stage 197:==============================================>     (108 + 14) / 122]                                                                                Time elapsed: 3.013203574 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421818844 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:============================>                        (64 + 56) / 120][Stage 198:=================================>                   (75 + 45) / 120][Stage 198:===========================================>         (99 + 21) / 120][Stage 198:====================================================>(119 + 1) / 120]                                                                                [Stage 199:==========================>                          (61 + 60) / 121][Stage 199:============================>                        (64 + 57) / 121][Stage 199:==================================>                  (78 + 43) / 121][Stage 199:============================================>       (104 + 17) / 121][Stage 199:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.084683163 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38890574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (60 + 61) / 121][Stage 200:============================>                        (65 + 56) / 121][Stage 200:==================================>                  (79 + 42) / 121][Stage 200:============================================>       (103 + 18) / 121][Stage 200:==================================================>  (116 + 5) / 121]                                                                                [Stage 201:===========================>                         (63 + 59) / 122][Stage 201:==============================>                      (70 + 52) / 122][Stage 201:===================================>                 (82 + 40) / 122][Stage 201:===========================================>        (102 + 20) / 122][Stage 201:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.327273018 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/22 03:55:29 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:43978) dropped. RpcEnv already stopped.
17/05/22 03:55:29 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.25:43978) dropped. RpcEnv already stopped.

real	10m6.174s
user	11m53.424s
sys	0m39.304s
