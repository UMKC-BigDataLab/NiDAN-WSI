Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 02:20:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 02:20:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 02:20:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 02:20:51 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 02:20:53 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 02:21:04 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522022053-0401).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.349018006 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (46 + 69) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:========================================>              (84 + 31) / 115][Stage 0:============================================>          (94 + 21) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:=======================================>               (84 + 32) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (102 + 14) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 12.722840633 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.806907313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:======================>                                (46 + 67) / 113][Stage 2:=========================>                             (52 + 61) / 113][Stage 2:===========================>                           (57 + 56) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:==============================>                        (63 + 50) / 113][Stage 2:====================================>                  (75 + 38) / 113][Stage 2:============================================>          (92 + 21) / 113][Stage 2:=================================================>    (103 + 10) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:============================>                          (60 + 54) / 114][Stage 3:===============================>                       (65 + 49) / 114][Stage 3:==================================>                    (71 + 43) / 114][Stage 3:==========================================>            (88 + 26) / 114][Stage 3:===============================================>       (99 + 15) / 114][Stage 3:====================================================>  (109 + 5) / 114]                                                                                Time elapsed: 4.606466072 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.703134114 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (57 + 56) / 113][Stage 4:============================>                          (59 + 54) / 113][Stage 4:==============================>                        (63 + 50) / 113][Stage 4:===================================>                   (73 + 40) / 113][Stage 4:=========================================>             (86 + 27) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:=============================>                         (61 + 53) / 114][Stage 5:================================>                      (68 + 46) / 114][Stage 5:=======================================>               (81 + 33) / 114][Stage 5:==============================================>        (96 + 18) / 114][Stage 5:====================================================>  (108 + 6) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.390484271 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518583705 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=====================================>                 (78 + 37) / 115][Stage 6:======================================>                (81 + 34) / 115][Stage 6:========================================>              (85 + 30) / 115][Stage 6:============================================>          (92 + 23) / 115][Stage 6:==============================================>       (100 + 15) / 115][Stage 6:===================================================>   (108 + 7) / 115][Stage 6:=====================================================> (112 + 3) / 115]                                                                                [Stage 7:=======================================>               (84 + 32) / 116][Stage 7:==========================================>            (90 + 26) / 116][Stage 7:==============================================>        (98 + 18) / 116][Stage 7:====================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.500054072 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.616230257 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=======================>                               (49 + 64) / 113][Stage 8:==========================>                            (55 + 58) / 113][Stage 8:==============================>                        (63 + 50) / 113][Stage 8:===================================>                   (72 + 41) / 113][Stage 8:========================================>              (83 + 30) / 113][Stage 8:==============================================>        (95 + 18) / 113][Stage 8:===================================================>   (106 + 7) / 113]                                                                                [Stage 9:===========================>                           (58 + 56) / 114][Stage 9:===============================>                       (65 + 49) / 114][Stage 9:===================================>                   (73 + 41) / 114][Stage 9:==============================================>        (96 + 18) / 114][Stage 9:===================================================>   (106 + 8) / 114][Stage 9:=====================================================> (110 + 4) / 114][Stage 9:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.143100283 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480072156 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=====================================>                (80 + 35) / 115][Stage 10:======================================>               (82 + 33) / 115][Stage 10:=============================================>        (96 + 19) / 115][Stage 10:===================================================>  (110 + 5) / 115][Stage 10:====================================================> (112 + 3) / 115][Stage 10:=====================================================>(114 + 1) / 115]                                                                                [Stage 11:======================================>               (82 + 34) / 116][Stage 11:========================================>             (88 + 28) / 116][Stage 11:=============================================>       (100 + 16) / 116][Stage 11:==============================================>      (101 + 15) / 116][Stage 11:================================================>    (106 + 10) / 116][Stage 11:===================================================>  (111 + 5) / 116][Stage 11:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.891958153 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.596335158 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:======================================>               (81 + 34) / 115][Stage 12:========================================>             (87 + 28) / 115][Stage 12:============================================>         (95 + 20) / 115][Stage 12:==================================================>   (108 + 7) / 115][Stage 12:====================================================> (112 + 3) / 115]                                                                                [Stage 13:=======================================>              (85 + 31) / 116][Stage 13:===========================================>          (93 + 23) / 116][Stage 13:==============================================>       (99 + 17) / 116][Stage 13:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 3.376216674 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 134 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 134 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503729263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=================================>                    (71 + 42) / 113][Stage 14:=====================================>                (79 + 34) / 113][Stage 14:=========================================>            (86 + 27) / 113][Stage 14:==============================================>       (98 + 15) / 113][Stage 14:===================================================>  (108 + 5) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:==================================>                   (72 + 42) / 114][Stage 15:=======================================>              (83 + 31) / 114][Stage 15:============================================>         (93 + 21) / 114][Stage 15:===============================================>     (102 + 12) / 114][Stage 15:==================================================>   (107 + 7) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.849334053 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479079668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:================================>                     (71 + 47) / 118][Stage 16:=================================>                    (74 + 44) / 118][Stage 16:=====================================>                (82 + 36) / 118][Stage 16:=========================================>            (91 + 27) / 118][Stage 16:=============================================>       (102 + 16) / 118][Stage 16:==================================================>   (110 + 8) / 118][Stage 16:====================================================> (115 + 3) / 118]                                                                                [Stage 17:=================================>                    (73 + 46) / 119][Stage 17:==================================>                   (76 + 43) / 119][Stage 17:=====================================>                (82 + 37) / 119][Stage 17:=======================================>              (86 + 33) / 119][Stage 17:==============================================>      (104 + 15) / 119][Stage 17:=================================================>    (110 + 9) / 119][Stage 17:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 4.179636003 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473278145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:======================================>               (83 + 32) / 115][Stage 18:==========================================>           (91 + 24) / 115][Stage 18:=================================================>    (106 + 9) / 115][Stage 18:====================================================> (112 + 3) / 115]                                                                                [Stage 19:======================================>               (83 + 33) / 116][Stage 19:===========================================>          (93 + 23) / 116][Stage 19:=============================================>       (100 + 16) / 116][Stage 19:===================================================>  (110 + 6) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.115924419 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.536486804 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:===========================>                          (61 + 59) / 120][Stage 20:================================>                     (73 + 47) / 120][Stage 20:===========================================>          (96 + 24) / 120][Stage 20:==============================================>      (105 + 15) / 120][Stage 20:=====================================================>(118 + 2) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:==============================>                       (69 + 52) / 121][Stage 21:=====================================>                (84 + 37) / 121][Stage 21:============================================>        (102 + 19) / 121][Stage 21:===================================================>  (115 + 6) / 121][Stage 21:====================================================> (118 + 3) / 121][Stage 21:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.730278453 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  OR  partitionIndex = 121 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483803443 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (70 + 48) / 118][Stage 22:=================================>                    (73 + 45) / 118][Stage 22:=====================================>                (81 + 37) / 118][Stage 22:==========================================>           (93 + 25) / 118][Stage 22:================================================>    (108 + 10) / 118][Stage 22:=====================================================>(117 + 1) / 118]                                                                                [Stage 23:=================================>                    (74 + 45) / 119][Stage 23:=======================================>              (86 + 33) / 119][Stage 23:===========================================>          (95 + 24) / 119][Stage 23:==================================================>   (111 + 8) / 119][Stage 23:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.544203076 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.53056596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:===========================>                          (62 + 58) / 120][Stage 24:=================================>                    (75 + 45) / 120][Stage 24:============================================>         (98 + 22) / 120][Stage 24:=====================================================>(118 + 2) / 120][Stage 24:=====================================================>(119 + 1) / 120]                                                                                [Stage 25:===========================>                          (61 + 60) / 121][Stage 25:=============================>                        (67 + 54) / 121][Stage 25:===================================>                  (80 + 41) / 121][Stage 25:===========================================>          (98 + 23) / 121][Stage 25:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.468472501 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530574299 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:==============================>                       (68 + 52) / 120][Stage 26:====================================>                 (80 + 40) / 120][Stage 26:=============================================>       (103 + 17) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:============================>                         (64 + 57) / 121][Stage 27:=====================================>                (85 + 36) / 121][Stage 27:============================================>        (102 + 19) / 121][Stage 27:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.253053234 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502680491 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:=============================>                        (67 + 54) / 121][Stage 28:======================================>               (87 + 34) / 121][Stage 28:============================================>        (101 + 20) / 121][Stage 28:====================================================> (118 + 3) / 121]                                                                                [Stage 29:============================>                         (64 + 58) / 122][Stage 29:==================================>                   (78 + 44) / 122][Stage 29:=============================================>       (104 + 18) / 122][Stage 29:===================================================>  (117 + 5) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.367326843 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45004909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:=================================>                    (70 + 43) / 113][Stage 30:=======================================>              (83 + 30) / 113][Stage 30:===========================================>          (92 + 21) / 113][Stage 30:==============================================>      (100 + 13) / 113][Stage 30:====================================================> (110 + 3) / 113]                                                                                [Stage 31:=======================================>              (83 + 31) / 114][Stage 31:============================================>         (93 + 21) / 114][Stage 31:==============================================>      (101 + 13) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.238569947 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446309375 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:================================>                     (72 + 46) / 118][Stage 32:===================================>                  (78 + 40) / 118][Stage 32:========================================>             (89 + 29) / 118][Stage 32:==============================================>      (104 + 14) / 118][Stage 32:===================================================>  (113 + 5) / 118]                                                                                [Stage 33:=================================>                    (73 + 46) / 119][Stage 33:====================================>                 (80 + 39) / 119][Stage 33:============================================>        (101 + 18) / 119][Stage 33:==================================================>   (112 + 7) / 119][Stage 33:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.417226919 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496587606 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:=============================>                        (65 + 55) / 120][Stage 34:=================================>                    (75 + 45) / 120][Stage 34:=========================================>            (92 + 28) / 120][Stage 34:==================================================>   (112 + 8) / 120][Stage 34:=====================================================>(118 + 2) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:=============================>                        (66 + 55) / 121][Stage 35:======================================>               (86 + 35) / 121][Stage 35:==============================================>      (107 + 14) / 121][Stage 35:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.322141771 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.496156083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:============================>                         (64 + 57) / 121][Stage 36:================================>                     (72 + 49) / 121][Stage 36:=========================================>            (93 + 28) / 121][Stage 36:===================================================>  (116 + 5) / 121]                                                                                [Stage 37:===========================>                          (63 + 59) / 122][Stage 37:=================================>                    (75 + 47) / 122][Stage 37:===========================================>         (100 + 22) / 122][Stage 37:==================================================>   (114 + 8) / 122][Stage 37:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.310171719 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.523631066 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==========================>                           (60 + 61) / 121][Stage 38:=============================>                        (66 + 55) / 121][Stage 38:======================================>               (87 + 34) / 121][Stage 38:================================================>    (111 + 10) / 121][Stage 38:====================================================> (118 + 3) / 121][Stage 38:=====================================================>(120 + 1) / 121]                                                                                [Stage 39:===========================>                          (61 + 61) / 122][Stage 39:==============================>                       (68 + 54) / 122][Stage 39:======================================>               (87 + 35) / 122][Stage 39:==============================================>      (107 + 15) / 122][Stage 39:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.371739665 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.444828466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:=================================>                    (74 + 44) / 118][Stage 40:====================================>                 (80 + 38) / 118][Stage 40:==========================================>           (92 + 26) / 118][Stage 40:===============================================>     (106 + 12) / 118][Stage 40:=====================================================>(117 + 1) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:==================================>                   (77 + 42) / 119][Stage 41:=======================================>              (86 + 33) / 119][Stage 41:============================================>         (98 + 21) / 119][Stage 41:===============================================>     (106 + 13) / 119][Stage 41:===================================================>  (114 + 5) / 119][Stage 41:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.604141639 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462248952 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (72 + 46) / 118][Stage 42:==================================>                   (76 + 42) / 118][Stage 42:==========================================>           (93 + 25) / 118][Stage 42:==================================================>   (110 + 8) / 118][Stage 42:====================================================> (114 + 4) / 118][Stage 42:=====================================================>(117 + 1) / 118]                                                                                [Stage 43:=================================>                    (73 + 46) / 119][Stage 43:=========================================>            (92 + 27) / 119][Stage 43:=============================================>       (102 + 17) / 119][Stage 43:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.396235905 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394384014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:======================================>               (81 + 34) / 115][Stage 44:=======================================>              (85 + 30) / 115][Stage 44:===============================================>     (104 + 11) / 115][Stage 44:=====================================================>(114 + 1) / 115]                                                                                [Stage 45:=======================================>              (85 + 31) / 116][Stage 45:========================================>             (88 + 28) / 116][Stage 45:==============================================>       (99 + 17) / 116][Stage 45:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.538392971 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.429579726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:=================================>                    (72 + 43) / 115][Stage 46:=========================================>            (88 + 27) / 115][Stage 46:==============================================>       (99 + 16) / 115][Stage 46:====================================================> (111 + 4) / 115]                                                                                [Stage 47:==================================>                   (75 + 41) / 116][Stage 47:========================================>             (86 + 30) / 116][Stage 47:===============================================>     (104 + 12) / 116][Stage 47:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.275427296 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.57605442 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:==============================>                       (67 + 53) / 120][Stage 48:======================================>               (86 + 34) / 120][Stage 48:==================================================>   (112 + 8) / 120][Stage 48:=====================================================>(119 + 1) / 120]                                                                                [Stage 49:==========================>                           (60 + 61) / 121][Stage 49:=============================>                        (66 + 55) / 121][Stage 49:=================================>                    (76 + 45) / 121][Stage 49:=========================================>            (92 + 29) / 121][Stage 49:=================================================>    (112 + 9) / 121][Stage 49:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.36797872 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.479839994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (58 + 55) / 113][Stage 50:=============================>                        (61 + 52) / 113][Stage 50:===================================>                  (75 + 38) / 113][Stage 50:===============================================>      (99 + 14) / 113][Stage 50:====================================================> (109 + 4) / 113]                                                                                [Stage 51:=============================>                        (62 + 52) / 114][Stage 51:====================================>                 (76 + 38) / 114][Stage 51:============================================>         (93 + 21) / 114][Stage 51:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.327224019 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422983659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:==============================>                       (66 + 49) / 115][Stage 52:=================================>                    (71 + 44) / 115][Stage 52:==========================================>           (90 + 25) / 115][Stage 52:===================================================>  (109 + 6) / 115][Stage 52:=====================================================>(114 + 1) / 115]                                                                                [Stage 53:===============================>                      (68 + 48) / 116][Stage 53:====================================>                 (79 + 37) / 116][Stage 53:==============================================>       (99 + 17) / 116][Stage 53:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.862604038 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475884578 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (81 + 34) / 115][Stage 54:========================================>             (86 + 29) / 115][Stage 54:==============================================>      (101 + 14) / 115][Stage 54:===================================================>  (109 + 6) / 115][Stage 54:====================================================> (111 + 4) / 115]                                                                                [Stage 55:========================================>             (86 + 30) / 116][Stage 55:=============================================>        (98 + 18) / 116][Stage 55:==================================================>   (109 + 7) / 116][Stage 55:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.735188047 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396543837 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=================================>                    (70 + 43) / 113][Stage 56:=======================================>              (82 + 31) / 113][Stage 56:===========================================>          (91 + 22) / 113][Stage 56:==============================================>       (97 + 16) / 113][Stage 56:==================================================>   (106 + 7) / 113][Stage 56:====================================================> (110 + 3) / 113]                                                                                [Stage 57:=====================================>                (79 + 35) / 114][Stage 57:==========================================>           (89 + 25) / 114][Stage 57:==============================================>       (98 + 16) / 114][Stage 57:===============================================>     (103 + 11) / 114][Stage 57:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.489991875 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413814402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:>                                                       (0 + 0) / 115][Stage 58:===============================>                      (68 + 47) / 115][Stage 58:=======================================>              (85 + 30) / 115][Stage 58:===============================================>     (102 + 13) / 115][Stage 58:==================================================>   (108 + 7) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:=================================>                    (72 + 44) / 116][Stage 59:==========================================>           (91 + 25) / 116][Stage 59:===============================================>     (105 + 11) / 116][Stage 59:====================================================> (112 + 4) / 116][Stage 59:====================================================> (113 + 3) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.485975473 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395837813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (80 + 33) / 113][Stage 60:==========================================>           (89 + 24) / 113][Stage 60:=============================================>        (96 + 17) / 113][Stage 60:==================================================>   (105 + 8) / 113][Stage 60:===================================================>  (108 + 5) / 113][Stage 60:====================================================> (110 + 3) / 113]                                                                                [Stage 61:======================================>               (81 + 33) / 114][Stage 61:=============================================>        (97 + 17) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.523452987 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433325973 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (70 + 45) / 115][Stage 62:======================================>               (83 + 32) / 115][Stage 62:===========================================>          (93 + 22) / 115][Stage 62:====================================================> (112 + 3) / 115]                                                                                [Stage 63:================================>                     (69 + 47) / 116][Stage 63:========================================>             (88 + 28) / 116][Stage 63:==============================================>      (102 + 14) / 116][Stage 63:====================================================> (112 + 4) / 116][Stage 63:=====================================================>(114 + 2) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.540540573 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452428545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (61 + 59) / 120][Stage 64:===============================>                      (71 + 49) / 120][Stage 64:=========================================>            (93 + 27) / 120][Stage 64:=================================================>    (111 + 9) / 120]                                                                                [Stage 65:============================>                         (64 + 57) / 121][Stage 65:=================================>                    (76 + 45) / 121][Stage 65:===========================================>          (97 + 24) / 121][Stage 65:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.984676903 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426705686 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:============================>                         (59 + 54) / 113][Stage 66:=================================>                    (70 + 43) / 113][Stage 66:=========================================>            (86 + 27) / 113][Stage 66:===================================================>  (107 + 6) / 113]                                                                                [Stage 67:============================>                         (60 + 54) / 114][Stage 67:================================>                     (69 + 45) / 114][Stage 67:===========================================>          (91 + 23) / 114][Stage 67:=================================================>    (105 + 9) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.177566464 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358885871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:=======================================>              (85 + 30) / 115][Stage 68:============================================>         (95 + 20) / 115][Stage 68:===================================================>  (109 + 6) / 115]                                                                                [Stage 69:========================================>             (87 + 29) / 116][Stage 69:=============================================>        (97 + 19) / 116][Stage 69:=================================================>    (107 + 9) / 116][Stage 69:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.741525338 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38291632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=====================================>                (80 + 35) / 115][Stage 70:========================================>             (87 + 28) / 115][Stage 70:==============================================>      (101 + 14) / 115][Stage 70:====================================================> (112 + 3) / 115]                                                                                [Stage 71:=======================================>              (85 + 31) / 116][Stage 71:==============================================>      (101 + 15) / 116][Stage 71:==================================================>   (109 + 7) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.819981749 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432774947 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:================================>                     (70 + 45) / 115][Stage 72:========================================>             (87 + 28) / 115][Stage 72:==============================================>       (99 + 16) / 115][Stage 72:=====================================================>(113 + 2) / 115]                                                                                [Stage 73:====================================>                 (79 + 37) / 116][Stage 73:==========================================>           (91 + 25) / 116][Stage 73:===================================================>  (110 + 6) / 116][Stage 73:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.801145352 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439461492 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (61 + 59) / 120][Stage 74:=============================>                        (66 + 54) / 120][Stage 74:======================================>               (85 + 35) / 120][Stage 74:==============================================>      (106 + 14) / 120][Stage 74:=====================================================>(119 + 1) / 120]                                                                                [Stage 75:===========================>                          (62 + 59) / 121][Stage 75:=================================>                    (76 + 45) / 121][Stage 75:==========================================>           (95 + 26) / 121][Stage 75:==================================================>   (114 + 7) / 121][Stage 75:=====================================================>(119 + 2) / 121][Stage 75:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.660870759 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401042447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===================================>                  (75 + 40) / 115][Stage 76:==========================================>           (91 + 24) / 115][Stage 76:================================================>    (105 + 10) / 115][Stage 76:=====================================================>(113 + 2) / 115]                                                                                [Stage 77:==================================>                   (75 + 41) / 116][Stage 77:=========================================>            (89 + 27) / 116][Stage 77:==============================================>       (99 + 17) / 116][Stage 77:====================================================> (112 + 4) / 116][Stage 77:=====================================================>(114 + 2) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.971134856 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440306553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:=============================>                        (66 + 54) / 120][Stage 78:========================================>             (89 + 31) / 120][Stage 78:==================================================>   (113 + 7) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:==============================>                       (68 + 53) / 121][Stage 79:========================================>             (90 + 31) / 121][Stage 79:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.035388136 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421219021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:>                                                       (0 + 0) / 113][Stage 80:===========================>                          (58 + 55) / 113][Stage 80:============================>                         (60 + 53) / 113][Stage 80:======================================>               (81 + 32) / 113][Stage 80:==============================================>      (100 + 13) / 113][Stage 80:===================================================>  (108 + 5) / 113]                                                                                [Stage 81:===========================>                          (59 + 55) / 114][Stage 81:===============================>                      (66 + 48) / 114][Stage 81:=====================================>                (80 + 34) / 114][Stage 81:===============================================>     (103 + 11) / 114][Stage 81:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.208950442 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388323197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:==================================>                   (76 + 42) / 118][Stage 82:========================================>             (89 + 29) / 118][Stage 82:================================================>    (107 + 11) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (73 + 46) / 119][Stage 83:==================================>                   (76 + 43) / 119][Stage 83:===========================================>          (95 + 24) / 119][Stage 83:=============================================>       (102 + 17) / 119][Stage 83:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.240853056 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357028979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=====================================>                (80 + 35) / 115][Stage 84:========================================>             (86 + 29) / 115][Stage 84:==============================================>       (98 + 17) / 115][Stage 84:==================================================>   (107 + 8) / 115][Stage 84:=====================================================>(114 + 1) / 115]                                                                                [Stage 85:======================================>               (82 + 34) / 116][Stage 85:========================================>             (87 + 29) / 116][Stage 85:=============================================>       (100 + 16) / 116][Stage 85:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.844258823 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.348207885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (83 + 32) / 115][Stage 86:=========================================>            (88 + 27) / 115][Stage 86:===============================================>     (103 + 12) / 115][Stage 86:=====================================================>(113 + 2) / 115]                                                                                [Stage 87:=======================================>              (84 + 32) / 116][Stage 87:=============================================>       (100 + 16) / 116][Stage 87:===================================================>  (110 + 6) / 116][Stage 87:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.859232975 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410827879 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (58 + 55) / 113][Stage 88:================================>                     (67 + 46) / 113][Stage 88:=====================================>                (78 + 35) / 113][Stage 88:===============================================>      (99 + 14) / 113][Stage 88:====================================================> (110 + 3) / 113]                                                                                [Stage 89:===========================>                          (59 + 55) / 114][Stage 89:===================================>                  (74 + 40) / 114][Stage 89:============================================>         (93 + 21) / 114][Stage 89:=================================================>    (105 + 9) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.316272062 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430314911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (61 + 59) / 120][Stage 90:===============================>                      (70 + 50) / 120][Stage 90:==================================>                   (76 + 44) / 120][Stage 90:============================================>         (98 + 22) / 120][Stage 90:===================================================>  (115 + 5) / 120]                                                                                [Stage 91:============================>                         (64 + 57) / 121][Stage 91:=================================>                    (76 + 45) / 121][Stage 91:===========================================>         (100 + 21) / 121][Stage 91:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.3333547 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355927653 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:=======================================>              (85 + 30) / 115][Stage 92:============================================>         (94 + 21) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:======================================>               (82 + 34) / 116][Stage 93:===========================================>          (94 + 22) / 116][Stage 93:===================================================>  (111 + 5) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.84340632 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378675217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:=================================>                    (73 + 45) / 118][Stage 94:=====================================>                (82 + 36) / 118][Stage 94:============================================>         (97 + 21) / 118][Stage 94:===================================================>  (112 + 6) / 118]                                                                                [Stage 95:==================================>                   (75 + 44) / 119][Stage 95:=====================================>                (82 + 37) / 119][Stage 95:============================================>         (98 + 21) / 119][Stage 95:================================================>    (108 + 11) / 119][Stage 95:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.212472036 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354773386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (82 + 33) / 115][Stage 96:============================================>         (94 + 21) / 115][Stage 96:===============================================>     (102 + 13) / 115][Stage 96:=====================================================>(113 + 2) / 115]                                                                                [Stage 97:=====================================>                (81 + 35) / 116][Stage 97:========================================>             (86 + 30) / 116][Stage 97:===============================================>     (103 + 13) / 116][Stage 97:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.274166001 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407534863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (60 + 60) / 120][Stage 98:=================================>                    (74 + 46) / 120][Stage 98:========================================>             (90 + 30) / 120][Stage 98:=============================================>       (102 + 18) / 120][Stage 98:====================================================> (116 + 4) / 120]                                                                                [Stage 99:===========================>                          (61 + 60) / 121][Stage 99:============================>                         (63 + 58) / 121][Stage 99:===============================>                      (70 + 51) / 121][Stage 99:========================================>             (91 + 30) / 121][Stage 99:===============================================>     (108 + 13) / 121]                                                                                Time elapsed: 3.278639812 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368970279 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:=================================>                   (74 + 44) / 118][Stage 100:===================================>                 (80 + 38) / 118][Stage 100:========================================>            (90 + 28) / 118][Stage 100:=============================================>      (104 + 14) / 118][Stage 100:====================================================>(116 + 2) / 118]                                                                                [Stage 101:=================================>                   (76 + 43) / 119][Stage 101:=====================================>               (84 + 35) / 119][Stage 101:========================================>            (91 + 28) / 119][Stage 101:================================================>    (110 + 9) / 119][Stage 101:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.436097295 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408153205 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 61) / 121][Stage 102:==============================>                      (70 + 51) / 121][Stage 102:=========================================>           (94 + 27) / 121][Stage 102:=================================================>   (114 + 7) / 121]                                                                                [Stage 103:============================>                        (65 + 57) / 122][Stage 103:==================================>                  (79 + 43) / 122][Stage 103:=========================================>           (95 + 27) / 122][Stage 103:==============================================>     (108 + 14) / 122][Stage 103:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.174618332 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354033222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:=====================================>               (82 + 33) / 115][Stage 104:===========================================>         (94 + 21) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:==================================================>  (110 + 5) / 115][Stage 104:====================================================>(114 + 1) / 115]                                                                                [Stage 105:=====================================>               (82 + 34) / 116][Stage 105:========================================>            (88 + 28) / 116][Stage 105:==============================================>     (103 + 13) / 116][Stage 105:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.952925839 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39132108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (72 + 46) / 118][Stage 106:==================================>                  (77 + 41) / 118][Stage 106:======================================>              (85 + 33) / 118][Stage 106:================================================>    (109 + 9) / 118][Stage 106:====================================================>(116 + 2) / 118]                                                                                [Stage 107:================================>                    (73 + 46) / 119][Stage 107:==================================>                  (78 + 41) / 119][Stage 107:=======================================>             (89 + 30) / 119][Stage 107:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.147281059 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528783072 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===========================>                         (58 + 55) / 113][Stage 108:=============================>                       (63 + 50) / 113][Stage 108:========================================>            (86 + 27) / 113][Stage 108:==============================================>     (102 + 11) / 113][Stage 108:====================================================>(111 + 2) / 113]                                                                                [Stage 109:============================>                        (62 + 52) / 114][Stage 109:====================================>                (78 + 36) / 114][Stage 109:============================================>        (95 + 19) / 114][Stage 109:=================================================>   (106 + 8) / 114][Stage 109:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.239577058 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358561877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:=====================================>               (79 + 34) / 113][Stage 110:=========================================>           (88 + 25) / 113][Stage 110:=============================================>       (96 + 17) / 113][Stage 110:==============================================>     (102 + 11) / 113][Stage 110:===================================================> (110 + 3) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:===================================>                 (77 + 37) / 114][Stage 111:=======================================>             (84 + 30) / 114][Stage 111:===========================================>         (94 + 20) / 114][Stage 111:==============================================>     (101 + 13) / 114][Stage 111:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.345000825 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368815594 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=================================>                   (74 + 44) / 118][Stage 112:=====================================>               (83 + 35) / 118][Stage 112:============================================>        (98 + 20) / 118][Stage 112:=================================================>   (111 + 7) / 118]                                                                                [Stage 113:================================>                    (73 + 46) / 119][Stage 113:=====================================>               (85 + 34) / 119][Stage 113:============================================>       (101 + 18) / 119][Stage 113:==================================================>  (114 + 5) / 119][Stage 113:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.126907747 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365940523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:=================================>                   (75 + 43) / 118][Stage 114:=========================================>           (92 + 26) / 118][Stage 114:===============================================>    (108 + 10) / 118]                                                                                [Stage 115:================================>                    (73 + 46) / 119][Stage 115:===================================>                 (80 + 39) / 119][Stage 115:=========================================>           (93 + 26) / 119][Stage 115:=============================================>      (103 + 16) / 119][Stage 115:===============================================>    (109 + 10) / 119][Stage 115:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.33584824 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362990271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (72 + 46) / 118][Stage 116:==================================>                  (76 + 42) / 118][Stage 116:=====================================>               (83 + 35) / 118][Stage 116:============================================>       (100 + 18) / 118][Stage 116:===================================================> (114 + 4) / 118]                                                                                [Stage 117:=================================>                   (75 + 44) / 119][Stage 117:===================================>                 (79 + 40) / 119][Stage 117:========================================>            (92 + 27) / 119][Stage 117:===========================================>        (100 + 19) / 119][Stage 117:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.429873984 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394389427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (58 + 55) / 113][Stage 118:=============================>                       (63 + 50) / 113][Stage 118:================================>                    (70 + 43) / 113][Stage 118:============================================>        (94 + 19) / 113][Stage 118:=================================================>   (106 + 7) / 113][Stage 118:====================================================>(112 + 1) / 113]                                                                                [Stage 119:===========================>                         (59 + 55) / 114][Stage 119:==============================>                      (65 + 49) / 114][Stage 119:======================================>              (82 + 32) / 114][Stage 119:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.197829714 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383020524 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (73 + 42) / 115][Stage 120:======================================>              (84 + 31) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:====================================>                (79 + 37) / 116][Stage 121:==========================================>          (93 + 23) / 116][Stage 121:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.778150249 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381505778 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (58 + 55) / 113][Stage 122:==============================>                      (65 + 48) / 113][Stage 122:=======================================>             (84 + 29) / 113][Stage 122:================================================>    (104 + 9) / 113][Stage 122:===================================================> (110 + 3) / 113]                                                                                [Stage 123:===========================>                         (59 + 55) / 114][Stage 123:============================>                        (61 + 53) / 114][Stage 123:=====================================>               (80 + 34) / 114][Stage 123:=============================================>       (97 + 17) / 114][Stage 123:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.230575866 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335626807 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:======================================>              (83 + 32) / 115][Stage 124:==========================================>          (93 + 22) / 115][Stage 124:=================================================>   (107 + 8) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:======================================>              (85 + 31) / 116][Stage 125:========================================>            (89 + 27) / 116][Stage 125:==============================================>     (104 + 12) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.903070324 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386394095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==========================>                          (57 + 56) / 113][Stage 126:===========================>                         (59 + 54) / 113][Stage 126:================================>                    (70 + 43) / 113][Stage 126:========================================>            (87 + 26) / 113][Stage 126:==================================================>  (107 + 6) / 113]                                                                                [Stage 127:============================>                        (62 + 52) / 114][Stage 127:==================================>                  (75 + 39) / 114][Stage 127:===========================================>         (94 + 20) / 114][Stage 127:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.153513668 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40953328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:===========================>                         (62 + 58) / 120][Stage 128:================================>                    (73 + 47) / 120][Stage 128:=====================================>               (84 + 36) / 120][Stage 128:============================================>       (102 + 18) / 120][Stage 128:====================================================>(118 + 2) / 120]                                                                                [Stage 129:==============================>                      (70 + 51) / 121][Stage 129:====================================>                (83 + 38) / 121][Stage 129:========================================>            (93 + 28) / 121][Stage 129:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.308705839 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339782141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=====================================>               (81 + 34) / 115][Stage 130:=========================================>           (90 + 25) / 115][Stage 130:==============================================>     (102 + 13) / 115][Stage 130:=================================================>   (107 + 8) / 115]                                                                                [Stage 131:======================================>              (84 + 32) / 116][Stage 131:==========================================>          (93 + 23) / 116][Stage 131:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.707216842 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368535186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===================================>                 (76 + 37) / 113][Stage 132:===========================================>         (93 + 20) / 113][Stage 132:=============================================>       (96 + 17) / 113][Stage 132:=================================================>   (106 + 7) / 113][Stage 132:====================================================>(111 + 2) / 113]                                                                                [Stage 133:=================================>                   (73 + 41) / 114][Stage 133:======================================>              (83 + 31) / 114][Stage 133:==========================================>          (92 + 22) / 114][Stage 133:==============================================>     (102 + 12) / 114][Stage 133:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.177776422 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370746854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:================================>                    (72 + 46) / 118][Stage 134:==================================>                  (76 + 42) / 118][Stage 134:=====================================>               (84 + 34) / 118][Stage 134:============================================>       (101 + 17) / 118][Stage 134:==================================================>  (112 + 6) / 118][Stage 134:====================================================>(117 + 1) / 118]                                                                                [Stage 135:================================>                    (73 + 46) / 119][Stage 135:=================================>                   (76 + 43) / 119][Stage 135:======================================>              (86 + 33) / 119][Stage 135:============================================>       (101 + 18) / 119][Stage 135:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.422548544 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372100679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:================================>                    (70 + 45) / 115][Stage 136:======================================>              (84 + 31) / 115][Stage 136:===============================================>    (105 + 10) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:=================================>                   (74 + 42) / 116][Stage 137:=====================================>               (83 + 33) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.198093907 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352668706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=================================>                   (72 + 41) / 113][Stage 138:=====================================>               (81 + 32) / 113][Stage 138:===========================================>         (93 + 20) / 113][Stage 138:=================================================>   (106 + 7) / 113][Stage 138:====================================================>(112 + 1) / 113]                                                                                [Stage 139:===================================>                 (77 + 37) / 114][Stage 139:==========================================>          (92 + 22) / 114][Stage 139:==============================================>      (99 + 15) / 114][Stage 139:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.784884391 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358265826 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:======================================>              (82 + 31) / 113][Stage 140:===========================================>         (92 + 21) / 113][Stage 140:==============================================>      (99 + 14) / 113][Stage 140:===================================================> (110 + 3) / 113]                                                                                [Stage 141:======================================>              (82 + 32) / 114][Stage 141:==========================================>          (92 + 22) / 114][Stage 141:===============================================>    (104 + 10) / 114][Stage 141:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 2.977390819 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333609295 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:=====================================>               (81 + 34) / 115][Stage 142:===========================================>         (94 + 21) / 115][Stage 142:===============================================>    (105 + 10) / 115][Stage 142:===================================================> (112 + 3) / 115]                                                                                [Stage 143:======================================>              (84 + 32) / 116][Stage 143:========================================>            (89 + 27) / 116][Stage 143:=============================================>      (101 + 15) / 116][Stage 143:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.944243692 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334677258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=====================================>               (82 + 33) / 115][Stage 144:==========================================>          (92 + 23) / 115][Stage 144:===============================================>    (104 + 11) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:=====================================>               (83 + 33) / 116][Stage 145:=========================================>           (90 + 26) / 116][Stage 145:=============================================>      (101 + 15) / 116][Stage 145:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.651263223 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359108408 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=================================>                   (74 + 44) / 118][Stage 146:=====================================>               (84 + 34) / 118][Stage 146:============================================>       (100 + 18) / 118][Stage 146:=================================================>   (111 + 7) / 118]                                                                                [Stage 147:================================>                    (73 + 46) / 119][Stage 147:===================================>                 (79 + 40) / 119][Stage 147:===========================================>         (97 + 22) / 119][Stage 147:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.040180777 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391896328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:============================>                        (64 + 57) / 121][Stage 148:=================================>                   (77 + 44) / 121][Stage 148:============================================>       (103 + 18) / 121][Stage 148:====================================================>(119 + 2) / 121]                                                                                [Stage 149:==========================>                          (61 + 61) / 122][Stage 149:============================>                        (66 + 56) / 122][Stage 149:===================================>                 (81 + 41) / 122][Stage 149:===========================================>        (101 + 21) / 122][Stage 149:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.10183104 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506352631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:==========================>                          (60 + 61) / 121][Stage 150:============================>                        (66 + 55) / 121][Stage 150:========================================>            (92 + 29) / 121][Stage 150:==============================================>     (108 + 13) / 121][Stage 150:===================================================> (117 + 4) / 121]                                                                                [Stage 151:============================>                        (65 + 57) / 122][Stage 151:=================================>                   (78 + 44) / 122][Stage 151:===========================================>        (102 + 20) / 122][Stage 151:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.277596283 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400719739 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 61) / 121][Stage 152:============================>                        (64 + 57) / 121][Stage 152:================================>                    (75 + 46) / 121][Stage 152:=============================================>      (105 + 16) / 121][Stage 152:==================================================>  (115 + 6) / 121]                                                                                [Stage 153:===========================>                         (64 + 58) / 122][Stage 153:===============================>                     (73 + 49) / 122][Stage 153:======================================>              (88 + 34) / 122][Stage 153:==============================================>     (110 + 12) / 122][Stage 153:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.368697834 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351212716 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==================================>                  (74 + 39) / 113][Stage 154:=======================================>             (85 + 28) / 113][Stage 154:===========================================>         (93 + 20) / 113][Stage 154:=================================================>   (106 + 7) / 113][Stage 154:====================================================>(111 + 2) / 113][Stage 154:====================================================>(112 + 1) / 113]                                                                                [Stage 155:===================================>                 (77 + 37) / 114][Stage 155:=========================================>           (89 + 25) / 114][Stage 155:============================================>        (95 + 19) / 114][Stage 155:==============================================>     (102 + 12) / 114][Stage 155:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.469884501 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404465312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:============================>                        (65 + 56) / 121][Stage 156:====================================>                (84 + 37) / 121][Stage 156:===========================================>        (102 + 19) / 121][Stage 156:====================================================>(119 + 2) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:============================>                        (65 + 57) / 122][Stage 157:====================================>                (85 + 37) / 122][Stage 157:============================================>       (105 + 17) / 122][Stage 157:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.132963653 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366563131 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=================================>                   (74 + 44) / 118][Stage 158:===================================>                 (79 + 39) / 118][Stage 158:==========================================>          (94 + 24) / 118][Stage 158:==============================================>     (106 + 12) / 118][Stage 158:====================================================>(117 + 1) / 118]                                                                                [Stage 159:================================>                    (73 + 46) / 119][Stage 159:===================================>                 (79 + 40) / 119][Stage 159:======================================>              (86 + 33) / 119][Stage 159:==============================================>     (107 + 12) / 119][Stage 159:==================================================>  (113 + 6) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.686794589 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361948913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (73 + 45) / 118][Stage 160:====================================>                (82 + 36) / 118][Stage 160:=========================================>           (92 + 26) / 118][Stage 160:============================================>       (101 + 17) / 118][Stage 160:===================================================> (115 + 3) / 118][Stage 160:====================================================>(117 + 1) / 118]                                                                                [Stage 161:==================================>                  (78 + 41) / 119][Stage 161:=====================================>               (85 + 34) / 119][Stage 161:===========================================>        (100 + 19) / 119][Stage 161:================================================>    (110 + 9) / 119][Stage 161:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.540302082 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388703972 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:==============================>                      (65 + 48) / 113][Stage 162:==================================>                  (74 + 39) / 113][Stage 162:==============================================>     (100 + 13) / 113][Stage 162:===================================================> (110 + 3) / 113]                                                                                [Stage 163:============================>                        (62 + 52) / 114][Stage 163:===================================>                 (76 + 38) / 114][Stage 163:=============================================>       (97 + 17) / 114][Stage 163:====================================================>(112 + 2) / 114][Stage 163:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.323754499 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39116462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:============================>                        (66 + 55) / 121][Stage 164:=================================>                   (76 + 45) / 121][Stage 164:==========================================>         (100 + 21) / 121][Stage 164:==================================================>  (116 + 5) / 121]                                                                                [Stage 165:============================>                        (65 + 57) / 122][Stage 165:===================================>                 (81 + 41) / 122][Stage 165:===========================================>        (101 + 21) / 122][Stage 165:===============================================>    (111 + 11) / 122][Stage 165:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.300311027 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396056018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 61) / 121][Stage 166:============================>                        (66 + 55) / 121][Stage 166:===================================>                 (80 + 41) / 121][Stage 166:==========================================>         (100 + 21) / 121][Stage 166:==================================================>  (115 + 6) / 121][Stage 166:====================================================>(119 + 2) / 121]                                                                                [Stage 167:==========================>                          (61 + 61) / 122][Stage 167:============================>                        (65 + 57) / 122][Stage 167:===================================>                 (82 + 40) / 122][Stage 167:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.108312315 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360643366 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==================================>                  (73 + 40) / 113][Stage 168:=======================================>             (84 + 29) / 113][Stage 168:=============================================>       (96 + 17) / 113][Stage 168:==============================================>     (101 + 12) / 113][Stage 168:===================================================> (110 + 3) / 113][Stage 168:====================================================>(112 + 1) / 113]                                                                                [Stage 169:===================================>                 (76 + 38) / 114][Stage 169:========================================>            (87 + 27) / 114][Stage 169:============================================>        (96 + 18) / 114][Stage 169:=================================================>   (107 + 7) / 114][Stage 169:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.217459911 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 136 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407090617 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:===============================>                     (72 + 49) / 121][Stage 170:========================================>            (93 + 28) / 121][Stage 170:=================================================>   (114 + 7) / 121][Stage 170:====================================================>(120 + 1) / 121]                                                                                [Stage 171:==========================>                          (61 + 61) / 122][Stage 171:=================================>                   (78 + 44) / 122][Stage 171:==========================================>         (100 + 22) / 122][Stage 171:===================================================> (118 + 4) / 122][Stage 171:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.436960573 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332783803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (82 + 33) / 115][Stage 172:===========================================>         (94 + 21) / 115][Stage 172:===============================================>    (105 + 10) / 115][Stage 172:===================================================> (111 + 4) / 115]                                                                                [Stage 173:=======================================>             (87 + 29) / 116][Stage 173:===========================================>         (95 + 21) / 116][Stage 173:=================================================>   (108 + 8) / 116][Stage 173:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.068433933 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.340931253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=======================================>             (85 + 30) / 115][Stage 174:==========================================>          (92 + 23) / 115][Stage 174:================================================>    (106 + 9) / 115][Stage 174:====================================================>(113 + 2) / 115]                                                                                [Stage 175:======================================>              (85 + 31) / 116][Stage 175:=========================================>           (90 + 26) / 116][Stage 175:=================================================>   (108 + 8) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.939091013 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371421243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (71 + 44) / 115][Stage 176:=====================================>               (82 + 33) / 115][Stage 176:=============================================>      (101 + 14) / 115][Stage 176:==================================================>  (109 + 6) / 115][Stage 176:====================================================>(114 + 1) / 115]                                                                                [Stage 177:===============================>                     (69 + 47) / 116][Stage 177:=====================================>               (81 + 35) / 116][Stage 177:=============================================>       (99 + 17) / 116][Stage 177:==================================================>  (110 + 6) / 116][Stage 177:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.10569626 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 164 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 164 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356214387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (72 + 46) / 118][Stage 178:=================================>                   (74 + 44) / 118][Stage 178:====================================>                (81 + 37) / 118][Stage 178:==========================================>          (95 + 23) / 118][Stage 178:==================================================>  (112 + 6) / 118]                                                                                [Stage 179:================================>                    (73 + 46) / 119][Stage 179:===================================>                 (80 + 39) / 119][Stage 179:=======================================>             (89 + 30) / 119][Stage 179:===========================================>        (100 + 19) / 119][Stage 179:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.275067736 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363996735 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===================================>                 (76 + 37) / 113][Stage 180:========================================>            (86 + 27) / 113][Stage 180:==============================================>      (99 + 14) / 113][Stage 180:===================================================> (109 + 4) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:===================================>                 (77 + 37) / 114][Stage 181:========================================>            (88 + 26) / 114][Stage 181:==============================================>     (101 + 13) / 114][Stage 181:=================================================>   (107 + 7) / 114][Stage 181:===================================================> (111 + 3) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.670959902 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401764613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (73 + 42) / 115][Stage 182:==========================================>          (93 + 22) / 115][Stage 182:===============================================>    (104 + 11) / 115][Stage 182:==================================================>  (110 + 5) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:=================================>                   (73 + 43) / 116][Stage 183:======================================>              (85 + 31) / 116][Stage 183:============================================>       (100 + 16) / 116][Stage 183:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.186513959 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375413775 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (72 + 46) / 118][Stage 184:===================================>                 (80 + 38) / 118][Stage 184:========================================>            (90 + 28) / 118][Stage 184:=============================================>      (103 + 15) / 118][Stage 184:===================================================> (114 + 4) / 118]                                                                                [Stage 185:=================================>                   (75 + 44) / 119][Stage 185:=======================================>             (89 + 30) / 119][Stage 185:=========================================>           (93 + 26) / 119][Stage 185:==============================================>     (106 + 13) / 119][Stage 185:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.539752328 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335005087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:======================================>              (84 + 31) / 115][Stage 186:=============================================>       (98 + 17) / 115][Stage 186:==================================================>  (110 + 5) / 115]                                                                                [Stage 187:=======================================>             (87 + 29) / 116][Stage 187:===========================================>         (96 + 20) / 116][Stage 187:===================================================> (112 + 4) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.633336283 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403501577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (62 + 58) / 120][Stage 188:==============================>                      (69 + 51) / 120][Stage 188:========================================>            (91 + 29) / 120][Stage 188:=================================================>   (113 + 7) / 120]                                                                                [Stage 189:===========================>                         (62 + 59) / 121][Stage 189:================================>                    (75 + 46) / 121][Stage 189:=========================================>           (95 + 26) / 121][Stage 189:==================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.068471471 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411066024 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (63 + 58) / 121][Stage 190:==============================>                      (69 + 52) / 121][Stage 190:=========================================>           (94 + 27) / 121][Stage 190:=================================================>   (113 + 8) / 121]                                                                                [Stage 191:=============================>                       (68 + 54) / 122][Stage 191:====================================>                (84 + 38) / 122][Stage 191:===========================================>        (101 + 21) / 122][Stage 191:=================================================>   (114 + 8) / 122][Stage 191:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.185584515 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356368944 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (73 + 45) / 118][Stage 192:=======================================>             (87 + 31) / 118][Stage 192:============================================>        (98 + 20) / 118][Stage 192:==================================================>  (113 + 5) / 118][Stage 192:====================================================>(117 + 1) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:==================================>                  (78 + 41) / 119][Stage 193:=========================================>           (93 + 26) / 119][Stage 193:================================================>    (110 + 9) / 119][Stage 193:====================================================>(117 + 2) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.351595537 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448057419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (75 + 38) / 113][Stage 194:=========================================>           (89 + 24) / 113][Stage 194:=============================================>       (97 + 16) / 113][Stage 194:==================================================>  (107 + 6) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:==================================>                  (75 + 39) / 114][Stage 195:=========================================>           (90 + 24) / 114][Stage 195:==============================================>     (102 + 12) / 114][Stage 195:===================================================> (110 + 4) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.528226577 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 95  OR  partitionIndex = 109 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385357668 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (72 + 46) / 118][Stage 196:==================================>                  (76 + 42) / 118][Stage 196:====================================>                (82 + 36) / 118][Stage 196:===========================================>         (96 + 22) / 118][Stage 196:==============================================>     (106 + 12) / 118]                                                                                [Stage 197:================================>                    (74 + 45) / 119][Stage 197:==================================>                  (78 + 41) / 119][Stage 197:=====================================>               (85 + 34) / 119][Stage 197:=============================================>      (104 + 15) / 119][Stage 197:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.323119642 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397437592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (58 + 55) / 113][Stage 198:============================>                        (60 + 53) / 113][Stage 198:=================================>                   (72 + 41) / 113][Stage 198:============================================>        (94 + 19) / 113][Stage 198:===================================================> (110 + 3) / 113]                                                                                [Stage 199:===========================>                         (59 + 55) / 114][Stage 199:=============================>                       (63 + 51) / 114][Stage 199:================================>                    (70 + 44) / 114][Stage 199:============================================>        (95 + 19) / 114][Stage 199:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.122368943 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395884026 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (60 + 60) / 120][Stage 200:============================>                        (65 + 55) / 120][Stage 200:===================================>                 (80 + 40) / 120][Stage 200:========================================>            (92 + 28) / 120][Stage 200:===================================================> (117 + 3) / 120]                                                                                [Stage 201:==========================>                          (61 + 60) / 121][Stage 201:================================>                    (75 + 46) / 121][Stage 201:=======================================>             (90 + 31) / 121][Stage 201:==============================================>     (109 + 12) / 121][Stage 201:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.262286928 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m2.909s
user	11m32.176s
sys	0m37.992s
