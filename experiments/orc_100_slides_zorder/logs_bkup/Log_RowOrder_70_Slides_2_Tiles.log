Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 09:23:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:23:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:23:36 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:23:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 09:23:39 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:23:49 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522092338-0441).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@12d28106

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.410422829 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======================>                               (50 + 65) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:====================================================>  (110 + 5) / 115]                                                                                [Stage 1:===========================>                           (57 + 59) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:=====================================>                 (79 + 37) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.167456099 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 184  OR  partitionIndex = 185 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.805036662 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:=================>                                     (39 + 81) / 120][Stage 2:=======================>                               (51 + 69) / 120][Stage 2:==========================>                            (58 + 62) / 120][Stage 2:===========================>                           (61 + 59) / 120][Stage 2:===============================>                       (68 + 52) / 120][Stage 2:===================================>                   (78 + 42) / 120][Stage 2:========================================>              (89 + 31) / 120][Stage 2:=============================================>        (101 + 19) / 120][Stage 2:====================================================>  (114 + 6) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (68 + 53) / 121][Stage 3:=================================>                     (73 + 48) / 121][Stage 3:=====================================>                 (82 + 39) / 121][Stage 3:===============================================>      (106 + 15) / 121][Stage 3:=====================================================> (117 + 4) / 121]                                                                                Time elapsed: 4.829685829 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545891075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=====================================>                 (79 + 36) / 115][Stage 4:=======================================>               (83 + 32) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:=============================================>         (95 + 20) / 115][Stage 4:====================================================>  (109 + 6) / 115]                                                                                [Stage 5:======================================>                (82 + 34) / 116][Stage 5:========================================>              (85 + 31) / 116][Stage 5:============================================>          (94 + 22) / 116][Stage 5:==============================================>        (98 + 18) / 116][Stage 5:=====================================================> (112 + 4) / 116][Stage 5:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.697311379 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.577252608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==================================>                    (71 + 42) / 113][Stage 6:=====================================>                 (78 + 35) / 113][Stage 6:==========================================>            (88 + 25) / 113][Stage 6:===========================================>           (89 + 24) / 113][Stage 6:==============================================>        (96 + 17) / 113][Stage 6:==================================================>    (104 + 9) / 113][Stage 6:======================================================>(111 + 2) / 113]                                                                                [Stage 7:==================================>                    (71 + 43) / 114][Stage 7:====================================>                  (76 + 38) / 114][Stage 7:=======================================>               (82 + 32) / 114][Stage 7:=========================================>             (87 + 27) / 114][Stage 7:==============================================>        (96 + 18) / 114][Stage 7:================================================>     (103 + 11) / 114][Stage 7:====================================================>  (109 + 5) / 114][Stage 7:=====================================================> (111 + 3) / 114][Stage 7:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.35693419 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.644679247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:===========================>                           (60 + 61) / 121][Stage 8:==============================>                        (66 + 55) / 121][Stage 8:====================================>                  (81 + 40) / 121][Stage 8:=========================================>             (91 + 30) / 121][Stage 8:============================================>         (100 + 21) / 121][Stage 8:===============================================>      (107 + 14) / 121][Stage 8:=====================================================> (118 + 3) / 121]                                                                                [Stage 9:==========================>                            (58 + 64) / 122][Stage 9:=============================>                         (66 + 56) / 122][Stage 9:=================================>                     (74 + 48) / 122][Stage 9:=========================================>             (91 + 31) / 122][Stage 9:===================================================>   (114 + 8) / 122][Stage 9:=====================================================> (119 + 3) / 122]                                                                                Time elapsed: 4.246840544 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.613351895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (60 + 61) / 121][Stage 10:============================>                         (63 + 58) / 121][Stage 10:================================>                     (73 + 48) / 121][Stage 10:======================================>               (86 + 35) / 121][Stage 10:===========================================>         (100 + 21) / 121][Stage 10:=================================================>    (112 + 9) / 121]                                                                                [Stage 11:===========================>                          (61 + 61) / 122][Stage 11:============================>                         (65 + 57) / 122][Stage 11:====================================>                 (83 + 39) / 122][Stage 11:===========================================>          (99 + 23) / 122][Stage 11:==============================================>      (108 + 14) / 122][Stage 11:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.988090418 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.606463934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:============================>                         (64 + 57) / 121][Stage 12:====================================>                 (81 + 40) / 121][Stage 12:===========================================>          (97 + 24) / 121][Stage 12:===============================================>     (108 + 13) / 121][Stage 12:====================================================> (118 + 3) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:===========================>                          (62 + 60) / 122][Stage 13:=================================>                    (76 + 46) / 122][Stage 13:========================================>             (92 + 30) / 122][Stage 13:==============================================>      (107 + 15) / 122][Stage 13:==================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.825550678 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467946985 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===================================>                  (74 + 39) / 113][Stage 14:========================================>             (84 + 29) / 113][Stage 14:===========================================>          (91 + 22) / 113][Stage 14:===============================================>     (101 + 12) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:====================================>                 (76 + 38) / 114][Stage 15:==========================================>           (89 + 25) / 114][Stage 15:==============================================>      (100 + 14) / 114][Stage 15:================================================>    (104 + 10) / 114][Stage 15:==================================================>   (107 + 7) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.826597741 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 49  OR  partitionIndex = 50 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.561608602 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (60 + 60) / 120][Stage 16:============================>                         (64 + 56) / 120][Stage 16:=====================================>                (83 + 37) / 120][Stage 16:===========================================>          (96 + 24) / 120][Stage 16:==================================================>   (112 + 8) / 120][Stage 16:====================================================> (116 + 4) / 120]                                                                                [Stage 17:===========================>                          (62 + 59) / 121][Stage 17:=================================>                    (76 + 45) / 121][Stage 17:=========================================>            (93 + 28) / 121][Stage 17:=============================================>       (103 + 18) / 121][Stage 17:===================================================>  (115 + 6) / 121][Stage 17:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.841481005 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.550864929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==========================>                           (60 + 61) / 121][Stage 18:=============================>                        (67 + 54) / 121][Stage 18:=====================================>                (84 + 37) / 121][Stage 18:================================================>    (110 + 11) / 121][Stage 18:=====================================================>(120 + 1) / 121]                                                                                [Stage 19:===========================>                          (61 + 61) / 122][Stage 19:============================>                         (64 + 58) / 122][Stage 19:=================================>                    (75 + 47) / 122][Stage 19:===========================================>          (98 + 24) / 122][Stage 19:================================================>    (112 + 10) / 122][Stage 19:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.55236515 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.493279699 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (58 + 55) / 113][Stage 20:==================================>                   (72 + 41) / 113][Stage 20:===========================================>          (90 + 23) / 113][Stage 20:===================================================>  (107 + 6) / 113][Stage 20:=====================================================>(112 + 1) / 113]                                                                                [Stage 21:============================>                         (60 + 54) / 114][Stage 21:=============================>                        (62 + 52) / 114][Stage 21:====================================>                 (78 + 36) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.348710086 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513995801 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (60 + 60) / 120][Stage 22:=============================>                        (66 + 54) / 120][Stage 22:====================================>                 (82 + 38) / 120][Stage 22:===============================================>     (108 + 12) / 120][Stage 22:====================================================> (116 + 4) / 120]                                                                                [Stage 23:=============================>                        (67 + 54) / 121][Stage 23:===================================>                  (79 + 42) / 121][Stage 23:============================================>         (99 + 22) / 121][Stage 23:==================================================>   (113 + 8) / 121][Stage 23:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.438832253 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455883888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:================================>                     (72 + 46) / 118][Stage 24:==================================>                   (75 + 43) / 118][Stage 24:======================================>               (85 + 33) / 118][Stage 24:==============================================>      (104 + 14) / 118][Stage 24:===================================================>  (112 + 6) / 118][Stage 24:=====================================================>(117 + 1) / 118]                                                                                [Stage 25:=================================>                    (73 + 46) / 119][Stage 25:==================================>                   (75 + 44) / 119][Stage 25:=========================================>            (91 + 28) / 119][Stage 25:================================================>    (108 + 11) / 119][Stage 25:=====================================================>(117 + 2) / 119][Stage 25:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.655955595 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44950271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (74 + 44) / 118][Stage 26:=====================================>                (82 + 36) / 118][Stage 26:===========================================>          (95 + 23) / 118][Stage 26:================================================>    (108 + 10) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:==================================>                   (77 + 42) / 119][Stage 27:=======================================>              (87 + 32) / 119][Stage 27:============================================>        (100 + 19) / 119][Stage 27:================================================>    (109 + 10) / 119][Stage 27:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.662438154 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.525552255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:=============================>                        (67 + 54) / 121][Stage 28:=======================================>              (88 + 33) / 121][Stage 28:==================================================>   (114 + 7) / 121][Stage 28:=====================================================>(119 + 2) / 121]                                                                                [Stage 29:===========================>                          (61 + 61) / 122][Stage 29:===========================>                          (63 + 59) / 122][Stage 29:=====================================>                (85 + 37) / 122][Stage 29:===========================================>          (99 + 23) / 122][Stage 29:===================================================>  (116 + 6) / 122][Stage 29:=====================================================>(120 + 2) / 122][Stage 29:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.660325348 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465314657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:================================>                     (72 + 46) / 118][Stage 30:======================================>               (84 + 34) / 118][Stage 30:===============================================>     (106 + 12) / 118][Stage 30:=====================================================>(117 + 1) / 118]                                                                                [Stage 31:=================================>                    (73 + 46) / 119][Stage 31:==================================>                   (77 + 42) / 119][Stage 31:==========================================>           (94 + 25) / 119][Stage 31:===============================================>     (107 + 12) / 119][Stage 31:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.215744053 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499961459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:============================>                         (59 + 54) / 113][Stage 32:=================================>                    (71 + 42) / 113][Stage 32:===========================================>          (92 + 21) / 113][Stage 32:===================================================>  (107 + 6) / 113]                                                                                [Stage 33:============================>                         (61 + 53) / 114][Stage 33:=================================>                    (70 + 44) / 114][Stage 33:===========================================>          (92 + 22) / 114][Stage 33:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.028623719 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431683637 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (83 + 32) / 115][Stage 34:============================================>         (94 + 21) / 115][Stage 34:===============================================>     (103 + 12) / 115][Stage 34:====================================================> (111 + 4) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:========================================>             (86 + 30) / 116][Stage 35:============================================>         (95 + 21) / 116][Stage 35:=================================================>    (107 + 9) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.21506747 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50038992 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:==============================>                       (68 + 52) / 120][Stage 36:====================================>                 (82 + 38) / 120][Stage 36:==============================================>      (105 + 15) / 120][Stage 36:====================================================> (117 + 3) / 120]                                                                                [Stage 37:=============================>                        (65 + 56) / 121][Stage 37:================================>                     (72 + 49) / 121][Stage 37:======================================>               (87 + 34) / 121][Stage 37:============================================>        (102 + 19) / 121][Stage 37:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.566149709 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480900523 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==============================>                       (65 + 50) / 115][Stage 38:=====================================>                (79 + 36) / 115][Stage 38:=============================================>        (97 + 18) / 115][Stage 38:==================================================>   (107 + 8) / 115][Stage 38:====================================================> (111 + 4) / 115]                                                                                [Stage 39:====================================>                 (78 + 38) / 116][Stage 39:===========================================>          (93 + 23) / 116][Stage 39:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.769141591 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.427649645 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==================================>                   (73 + 40) / 113][Stage 40:========================================>             (85 + 28) / 113][Stage 40:===============================================>      (99 + 14) / 113][Stage 40:===================================================>  (108 + 5) / 113][Stage 40:=====================================================>(112 + 1) / 113]                                                                                [Stage 41:==================================>                   (73 + 41) / 114][Stage 41:========================================>             (85 + 29) / 114][Stage 41:==============================================>       (98 + 16) / 114][Stage 41:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.946140375 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.480380281 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:============================>                         (63 + 57) / 120][Stage 42:==================================>                   (76 + 44) / 120][Stage 42:============================================>         (99 + 21) / 120][Stage 42:===================================================>  (115 + 5) / 120][Stage 42:=====================================================>(119 + 1) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:================================>                     (72 + 49) / 121][Stage 43:========================================>             (91 + 30) / 121][Stage 43:===============================================>     (109 + 12) / 121][Stage 43:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.503839805 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.468496266 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 59) / 120][Stage 44:================================>                     (72 + 48) / 120][Stage 44:=========================================>            (93 + 27) / 120][Stage 44:==================================================>   (112 + 8) / 120]                                                                                [Stage 45:===========================>                          (62 + 59) / 121][Stage 45:================================>                     (73 + 48) / 121][Stage 45:=========================================>            (94 + 27) / 121][Stage 45:================================================>    (111 + 10) / 121][Stage 45:====================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.28267285 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467572623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (60 + 60) / 120][Stage 46:===============================>                      (71 + 49) / 120][Stage 46:=======================================>              (88 + 32) / 120][Stage 46:==============================================>      (105 + 15) / 120][Stage 46:===================================================>  (115 + 5) / 120][Stage 46:=====================================================>(118 + 2) / 120]                                                                                [Stage 47:===========================>                          (61 + 60) / 121][Stage 47:===========================>                          (62 + 59) / 121][Stage 47:================================>                     (73 + 48) / 121][Stage 47:=========================================>            (92 + 29) / 121][Stage 47:================================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.539010729 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442308009 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===================================>                  (74 + 39) / 113][Stage 48:==========================================>           (88 + 25) / 113][Stage 48:===============================================>      (99 + 14) / 113][Stage 48:===================================================>  (107 + 6) / 113][Stage 48:====================================================> (109 + 4) / 113][Stage 48:====================================================> (110 + 3) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:====================================>                 (77 + 37) / 114][Stage 49:========================================>             (85 + 29) / 114][Stage 49:==============================================>       (98 + 16) / 114][Stage 49:==================================================>   (107 + 7) / 114][Stage 49:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.509129359 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453782462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:================================>                     (70 + 45) / 115][Stage 50:=======================================>              (85 + 30) / 115][Stage 50:=============================================>        (97 + 18) / 115][Stage 50:===================================================>  (110 + 5) / 115]                                                                                [Stage 51:===================================>                  (77 + 39) / 116][Stage 51:========================================>             (86 + 30) / 116][Stage 51:==============================================>       (99 + 17) / 116][Stage 51:=================================================>    (107 + 9) / 116][Stage 51:====================================================> (112 + 4) / 116][Stage 51:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.725340879 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425590858 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:================================>                     (69 + 46) / 115][Stage 52:========================================>             (87 + 28) / 115][Stage 52:==============================================>      (100 + 15) / 115][Stage 52:==================================================>   (107 + 8) / 115][Stage 52:====================================================> (112 + 3) / 115]                                                                                [Stage 53:=================================>                    (73 + 43) / 116][Stage 53:==========================================>           (92 + 24) / 116][Stage 53:==============================================>      (102 + 14) / 116][Stage 53:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.328409205 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454673605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:============================>                         (59 + 54) / 113][Stage 54:================================>                     (68 + 45) / 113][Stage 54:======================================>               (81 + 32) / 113][Stage 54:==============================================>       (98 + 15) / 113][Stage 54:====================================================> (109 + 4) / 113][Stage 54:=====================================================>(112 + 1) / 113]                                                                                [Stage 55:============================>                         (60 + 54) / 114][Stage 55:================================>                     (68 + 46) / 114][Stage 55:====================================>                 (77 + 37) / 114][Stage 55:==============================================>      (101 + 13) / 114][Stage 55:===================================================>  (108 + 6) / 114][Stage 55:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.725331179 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469545589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==========================>                           (60 + 61) / 121][Stage 56:============================>                         (63 + 58) / 121][Stage 56:===================================>                  (80 + 41) / 121][Stage 56:===========================================>          (97 + 24) / 121][Stage 56:==================================================>   (114 + 7) / 121]                                                                                [Stage 57:===========================>                          (61 + 61) / 122][Stage 57:=============================>                        (67 + 55) / 122][Stage 57:======================================>               (88 + 34) / 122][Stage 57:================================================>    (111 + 11) / 122][Stage 57:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.30985551 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.430349833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:============================>                         (59 + 54) / 113][Stage 58:================================>                     (68 + 45) / 113][Stage 58:=======================================>              (83 + 30) / 113][Stage 58:===============================================>     (101 + 12) / 113][Stage 58:====================================================> (110 + 3) / 113]                                                                                [Stage 59:============================>                         (60 + 54) / 114][Stage 59:==================================>                   (72 + 42) / 114][Stage 59:========================================>             (85 + 29) / 114][Stage 59:=================================================>    (105 + 9) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.408302701 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382684872 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:======================================>               (81 + 34) / 115][Stage 60:=======================================>              (84 + 31) / 115][Stage 60:============================================>         (95 + 20) / 115][Stage 60:================================================>    (105 + 10) / 115][Stage 60:===================================================>  (110 + 5) / 115]                                                                                [Stage 61:======================================>               (82 + 34) / 116][Stage 61:==========================================>           (92 + 24) / 116][Stage 61:===============================================>     (105 + 11) / 116][Stage 61:===================================================>  (111 + 5) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.211541299 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374095247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=====================================>                (80 + 35) / 115][Stage 62:=======================================>              (85 + 30) / 115][Stage 62:==============================================>      (100 + 15) / 115][Stage 62:===================================================>  (110 + 5) / 115]                                                                                [Stage 63:=======================================>              (84 + 32) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:===================================================>  (110 + 6) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.703654177 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387144145 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:======================================>               (80 + 33) / 113][Stage 64:==========================================>           (88 + 25) / 113][Stage 64:==============================================>       (98 + 15) / 113][Stage 64:====================================================> (109 + 4) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:==================================>                   (73 + 41) / 114][Stage 65:========================================>             (85 + 29) / 114][Stage 65:===========================================>          (91 + 23) / 114][Stage 65:==============================================>       (99 + 15) / 114][Stage 65:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.393838218 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454506684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (60 + 60) / 120][Stage 66:=============================>                        (66 + 54) / 120][Stage 66:================================>                     (73 + 47) / 120][Stage 66:========================================>             (90 + 30) / 120][Stage 66:==============================================>      (106 + 14) / 120][Stage 66:=====================================================>(118 + 2) / 120]                                                                                [Stage 67:============================>                         (64 + 57) / 121][Stage 67:================================>                     (73 + 48) / 121][Stage 67:=======================================>              (89 + 32) / 121][Stage 67:=================================================>    (112 + 9) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.509837061 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447980125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:=============================>                        (65 + 56) / 121][Stage 68:=====================================>                (84 + 37) / 121][Stage 68:=============================================>       (105 + 16) / 121][Stage 68:====================================================> (117 + 4) / 121]                                                                                [Stage 69:============================>                         (64 + 58) / 122][Stage 69:================================>                     (73 + 49) / 122][Stage 69:=======================================>              (90 + 32) / 122][Stage 69:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.516893002 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433280261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:==================================>                   (74 + 41) / 115][Stage 70:========================================>             (86 + 29) / 115][Stage 70:=============================================>        (97 + 18) / 115][Stage 70:====================================================> (112 + 3) / 115]                                                                                [Stage 71:=================================>                    (71 + 45) / 116][Stage 71:========================================>             (88 + 28) / 116][Stage 71:===============================================>     (103 + 13) / 116][Stage 71:==================================================>   (108 + 8) / 116][Stage 71:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.559454827 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394599187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=================================>                    (70 + 43) / 113][Stage 72:=======================================>              (83 + 30) / 113][Stage 72:==============================================>       (97 + 16) / 113][Stage 72:===============================================>     (102 + 11) / 113][Stage 72:====================================================> (109 + 4) / 113][Stage 72:=====================================================>(112 + 1) / 113]                                                                                [Stage 73:=====================================>                (79 + 35) / 114][Stage 73:==========================================>           (89 + 25) / 114][Stage 73:==============================================>       (98 + 16) / 114][Stage 73:==================================================>   (106 + 8) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.390598809 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371667379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=====================================>                (78 + 35) / 113][Stage 74:============================================>         (93 + 20) / 113][Stage 74:==================================================>   (105 + 8) / 113][Stage 74:=====================================================>(111 + 2) / 113][Stage 74:=====================================================>(112 + 1) / 113]                                                                                [Stage 75:===================================>                  (75 + 39) / 114][Stage 75:=========================================>            (88 + 26) / 114][Stage 75:==============================================>       (99 + 15) / 114][Stage 75:===================================================>  (109 + 5) / 114][Stage 75:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.088821495 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460883763 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:=================================>                    (70 + 43) / 113][Stage 76:======================================>               (80 + 33) / 113][Stage 76:==========================================>           (89 + 24) / 113][Stage 76:==============================================>      (100 + 13) / 113][Stage 76:==================================================>   (106 + 7) / 113][Stage 76:=====================================================>(111 + 2) / 113]                                                                                [Stage 77:====================================>                 (77 + 37) / 114][Stage 77:==========================================>           (89 + 25) / 114][Stage 77:==============================================>       (98 + 16) / 114][Stage 77:==================================================>   (106 + 8) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.091686624 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387149565 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=====================================>                (78 + 35) / 113][Stage 78:===========================================>          (90 + 23) / 113][Stage 78:===============================================>      (99 + 14) / 113][Stage 78:====================================================> (109 + 4) / 113][Stage 78:=====================================================>(111 + 2) / 113]                                                                                [Stage 79:====================================>                 (78 + 36) / 114][Stage 79:=========================================>            (88 + 26) / 114][Stage 79:==============================================>       (98 + 16) / 114][Stage 79:=================================================>    (105 + 9) / 114][Stage 79:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.19167596 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367237046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (77 + 36) / 113][Stage 80:=======================================>              (83 + 30) / 113][Stage 80:==============================================>       (97 + 16) / 113][Stage 80:==================================================>   (105 + 8) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:======================================>               (81 + 33) / 114][Stage 81:=============================================>        (95 + 19) / 114][Stage 81:===============================================>     (102 + 12) / 114][Stage 81:===================================================>  (108 + 6) / 114][Stage 81:===================================================>  (109 + 5) / 114][Stage 81:=====================================================>(112 + 2) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.720134902 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407809906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (58 + 55) / 113][Stage 82:============================>                         (60 + 53) / 113][Stage 82:=================================>                    (70 + 43) / 113][Stage 82:==========================================>           (89 + 24) / 113][Stage 82:================================================>    (103 + 10) / 113]                                                                                [Stage 83:===========================>                          (59 + 55) / 114][Stage 83:=================================>                    (70 + 44) / 114][Stage 83:========================================>             (85 + 29) / 114][Stage 83:===============================================>     (103 + 11) / 114][Stage 83:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.440301635 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45656835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=======================================>              (84 + 31) / 115][Stage 84:===========================================>          (92 + 23) / 115][Stage 84:===============================================>     (102 + 13) / 115][Stage 84:====================================================> (111 + 4) / 115]                                                                                [Stage 85:=======================================>              (84 + 32) / 116][Stage 85:==========================================>           (92 + 24) / 116][Stage 85:===============================================>     (104 + 12) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.842938989 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406432962 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (58 + 55) / 113][Stage 86:================================>                     (67 + 46) / 113][Stage 86:===========================================>          (91 + 22) / 113][Stage 86:================================================>    (103 + 10) / 113][Stage 86:====================================================> (110 + 3) / 113]                                                                                [Stage 87:=============================>                        (63 + 51) / 114][Stage 87:==================================>                   (72 + 42) / 114][Stage 87:=============================================>        (96 + 18) / 114][Stage 87:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.203770535 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365592141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (80 + 33) / 113][Stage 88:===========================================>          (90 + 23) / 113][Stage 88:===============================================>     (101 + 12) / 113][Stage 88:=====================================================>(111 + 2) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:====================================>                 (78 + 36) / 114][Stage 89:==========================================>           (89 + 25) / 114][Stage 89:==============================================>      (100 + 14) / 114][Stage 89:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.206049942 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373032183 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==================================>                   (72 + 41) / 113][Stage 90:=======================================>              (82 + 31) / 113][Stage 90:============================================>         (94 + 19) / 113][Stage 90:==================================================>   (106 + 7) / 113]                                                                                [Stage 91:=====================================>                (79 + 35) / 114][Stage 91:===========================================>          (91 + 23) / 114][Stage 91:=============================================>        (97 + 17) / 114][Stage 91:=================================================>    (105 + 9) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.951333889 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349990255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (82 + 33) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:===============================================>     (102 + 13) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:======================================>               (82 + 34) / 116][Stage 93:========================================>             (88 + 28) / 116][Stage 93:===============================================>     (105 + 11) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.872880316 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39533381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:==============================>                       (66 + 49) / 115][Stage 94:=====================================>                (80 + 35) / 115][Stage 94:=============================================>        (96 + 19) / 115][Stage 94:==================================================>   (108 + 7) / 115][Stage 94:=====================================================>(113 + 2) / 115]                                                                                [Stage 95:=================================>                    (73 + 43) / 116][Stage 95:========================================>             (86 + 30) / 116][Stage 95:==============================================>      (101 + 15) / 116][Stage 95:===================================================>  (110 + 6) / 116][Stage 95:=====================================================>(114 + 2) / 116][Stage 95:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.18273415 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352355402 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (83 + 32) / 115][Stage 96:============================================>         (95 + 20) / 115][Stage 96:==================================================>   (108 + 7) / 115][Stage 96:====================================================> (112 + 3) / 115]                                                                                [Stage 97:=====================================>                (81 + 35) / 116][Stage 97:=========================================>            (90 + 26) / 116][Stage 97:==============================================>      (101 + 15) / 116][Stage 97:===================================================>  (111 + 5) / 116][Stage 97:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.86061922 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393417444 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:=============================>                        (61 + 52) / 113][Stage 98:==================================>                   (72 + 41) / 113][Stage 98:==========================================>           (89 + 24) / 113][Stage 98:==================================================>   (106 + 7) / 113]                                                                                [Stage 99:============================>                         (61 + 53) / 114][Stage 99:===================================>                  (75 + 39) / 114][Stage 99:==============================================>      (100 + 14) / 114][Stage 99:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.107813231 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420010202 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:==============================>                      (69 + 51) / 120][Stage 100:======================================>              (87 + 33) / 120][Stage 100:============================================>       (103 + 17) / 120][Stage 100:===================================================> (117 + 3) / 120]                                                                                [Stage 101:============================>                        (66 + 55) / 121][Stage 101:====================================>                (83 + 38) / 121][Stage 101:===========================================>        (102 + 19) / 121][Stage 101:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.107791911 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373738706 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:=================================>                   (74 + 44) / 118][Stage 102:===================================>                 (80 + 38) / 118][Stage 102:=======================================>             (87 + 31) / 118][Stage 102:============================================>        (98 + 20) / 118][Stage 102:=================================================>   (111 + 7) / 118][Stage 102:====================================================>(117 + 1) / 118]                                                                                [Stage 103:=================================>                   (76 + 43) / 119][Stage 103:===================================>                 (79 + 40) / 119][Stage 103:=======================================>             (89 + 30) / 119][Stage 103:===========================================>        (100 + 19) / 119][Stage 103:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.726998842 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387491725 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==================================>                  (74 + 41) / 115][Stage 104:==========================================>          (92 + 23) / 115][Stage 104:=============================================>      (101 + 14) / 115][Stage 104:==================================================>  (110 + 5) / 115]                                                                                [Stage 105:================================>                    (71 + 45) / 116][Stage 105:=========================================>           (90 + 26) / 116][Stage 105:=================================================>   (108 + 8) / 116][Stage 105:===================================================> (112 + 4) / 116][Stage 105:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.135724733 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390082193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===================================>                 (75 + 38) / 113][Stage 106:========================================>            (86 + 27) / 113][Stage 106:============================================>        (95 + 18) / 113][Stage 106:=================================================>   (105 + 8) / 113]                                                                                [Stage 107:====================================>                (79 + 35) / 114][Stage 107:==========================================>          (91 + 23) / 114][Stage 107:=============================================>       (97 + 17) / 114][Stage 107:================================================>    (105 + 9) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.007148013 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 93  OR  partitionIndex = 107 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415581909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 60) / 121][Stage 108:===============================>                     (73 + 48) / 121][Stage 108:=======================================>             (91 + 30) / 121][Stage 108:====================================================>(120 + 1) / 121]                                                                                [Stage 109:==========================>                          (61 + 61) / 122][Stage 109:============================>                        (66 + 56) / 122][Stage 109:=================================>                   (78 + 44) / 122][Stage 109:=======================================>             (92 + 30) / 122][Stage 109:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.301496143 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398622239 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (59 + 54) / 113][Stage 110:===============================>                     (67 + 46) / 113][Stage 110:=======================================>             (85 + 28) / 113][Stage 110:==============================================>     (102 + 11) / 113][Stage 110:==================================================>  (108 + 5) / 113]                                                                                [Stage 111:============================>                        (61 + 53) / 114][Stage 111:=================================>                   (72 + 42) / 114][Stage 111:==========================================>          (91 + 23) / 114][Stage 111:==============================================>     (103 + 11) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.333228937 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339572624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:======================================>              (83 + 32) / 115][Stage 112:=========================================>           (90 + 25) / 115][Stage 112:==============================================>     (102 + 13) / 115][Stage 112:===================================================> (111 + 4) / 115]                                                                                [Stage 113:======================================>              (85 + 31) / 116][Stage 113:============================================>        (97 + 19) / 116][Stage 113:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.706977585 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337063397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:======================================>              (84 + 31) / 115][Stage 114:=============================================>       (99 + 16) / 115][Stage 114:==================================================>  (110 + 5) / 115]                                                                                [Stage 115:=======================================>             (86 + 30) / 116][Stage 115:=============================================>       (99 + 17) / 116][Stage 115:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.574037912 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425206737 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:=====================================>               (81 + 34) / 115][Stage 116:=======================================>             (85 + 30) / 115][Stage 116:=============================================>      (100 + 15) / 115][Stage 116:==================================================>  (109 + 6) / 115]                                                                                [Stage 117:======================================>              (85 + 31) / 116][Stage 117:===========================================>         (96 + 20) / 116][Stage 117:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.59373649 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36191677 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (74 + 44) / 118][Stage 118:===================================>                 (78 + 40) / 118][Stage 118:========================================>            (90 + 28) / 118][Stage 118:=============================================>      (103 + 15) / 118][Stage 118:===================================================> (114 + 4) / 118]                                                                                [Stage 119:=================================>                   (75 + 44) / 119][Stage 119:====================================>                (81 + 38) / 119][Stage 119:========================================>            (91 + 28) / 119][Stage 119:==============================================>     (107 + 12) / 119][Stage 119:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.472240808 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359942284 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:=================================>                   (71 + 42) / 113][Stage 120:========================================>            (86 + 27) / 113][Stage 120:===========================================>         (92 + 21) / 113][Stage 120:===============================================>    (103 + 10) / 113][Stage 120:===================================================> (110 + 3) / 113]                                                                                [Stage 121:=======================================>             (84 + 30) / 114][Stage 121:==========================================>          (92 + 22) / 114][Stage 121:=================================================>   (106 + 8) / 114][Stage 121:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.260236781 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332510383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:====================================>                (79 + 36) / 115][Stage 122:=========================================>           (90 + 25) / 115][Stage 122:=================================================>   (107 + 8) / 115]                                                                                [Stage 123:=====================================>               (81 + 35) / 116][Stage 123:==========================================>          (93 + 23) / 116][Stage 123:==============================================>     (104 + 12) / 116][Stage 123:===================================================> (112 + 4) / 116][Stage 123:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.943335524 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383329293 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (59 + 54) / 113][Stage 124:=============================>                       (63 + 50) / 113][Stage 124:=====================================>               (80 + 33) / 113][Stage 124:==============================================>     (100 + 13) / 113][Stage 124:==================================================>  (108 + 5) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:==================================>                  (75 + 39) / 114][Stage 125:============================================>        (95 + 19) / 114][Stage 125:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.182778412 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338935083 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=======================================>             (85 + 30) / 115][Stage 126:=============================================>       (98 + 17) / 115][Stage 126:==================================================>  (110 + 5) / 115]                                                                                [Stage 127:=======================================>             (87 + 29) / 116][Stage 127:=============================================>      (102 + 14) / 116][Stage 127:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.577784543 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378855881 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==============================>                      (66 + 49) / 115][Stage 128:=====================================>               (82 + 33) / 115][Stage 128:=============================================>      (100 + 15) / 115][Stage 128:==================================================>  (110 + 5) / 115]                                                                                [Stage 129:===================================>                 (77 + 39) / 116][Stage 129:============================================>        (97 + 19) / 116][Stage 129:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.726160962 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405080998 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (58 + 55) / 113][Stage 130:==============================>                      (64 + 49) / 113][Stage 130:=====================================>               (81 + 32) / 113][Stage 130:=============================================>       (97 + 16) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:=============================>                       (64 + 50) / 114][Stage 131:====================================>                (78 + 36) / 114][Stage 131:=============================================>       (97 + 17) / 114][Stage 131:==================================================>  (109 + 5) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.262471087 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370991777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=================================>                   (73 + 42) / 115][Stage 132:=========================================>           (91 + 24) / 115][Stage 132:=============================================>      (101 + 14) / 115][Stage 132:====================================================>(113 + 2) / 115]                                                                                [Stage 133:===============================>                     (68 + 48) / 116][Stage 133:=====================================>               (81 + 35) / 116][Stage 133:============================================>        (97 + 19) / 116][Stage 133:===================================================> (112 + 4) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.905836273 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360961907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:====================================>                (78 + 35) / 113][Stage 134:=========================================>           (89 + 24) / 113][Stage 134:=============================================>       (97 + 16) / 113][Stage 134:==================================================>  (107 + 6) / 113][Stage 134:====================================================>(111 + 2) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:=================================>                   (73 + 41) / 114][Stage 135:==========================================>          (92 + 22) / 114][Stage 135:=============================================>       (98 + 16) / 114][Stage 135:===============================================>    (104 + 10) / 114][Stage 135:==================================================>  (109 + 5) / 114][Stage 135:===================================================> (110 + 4) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.117598375 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394862588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (61 + 60) / 121][Stage 136:===============================>                     (72 + 49) / 121][Stage 136:=======================================>             (90 + 31) / 121][Stage 136:==================================================>  (115 + 6) / 121]                                                                                [Stage 137:===========================>                         (63 + 59) / 122][Stage 137:================================>                    (75 + 47) / 122][Stage 137:=======================================>             (92 + 30) / 122][Stage 137:==============================================>     (108 + 14) / 122][Stage 137:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.21241282 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372758922 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==============================>                      (67 + 48) / 115][Stage 138:====================================>                (79 + 36) / 115][Stage 138:=========================================>           (90 + 25) / 115][Stage 138:===============================================>    (105 + 10) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:=====================================>               (81 + 35) / 116][Stage 139:===========================================>         (96 + 20) / 116][Stage 139:===============================================>    (106 + 10) / 116][Stage 139:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.240401762 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374444448 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:================================>                    (71 + 44) / 115][Stage 140:=========================================>           (91 + 24) / 115][Stage 140:================================================>    (106 + 9) / 115][Stage 140:===================================================> (112 + 3) / 115]                                                                                [Stage 141:==================================>                  (76 + 40) / 116][Stage 141:===========================================>         (96 + 20) / 116][Stage 141:=================================================>   (109 + 7) / 116][Stage 141:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.93560068 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465656057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (60 + 53) / 113][Stage 142:===================================>                 (76 + 37) / 113][Stage 142:=============================================>       (96 + 17) / 113][Stage 142:===================================================> (109 + 4) / 113]                                                                                [Stage 143:============================>                        (62 + 52) / 114][Stage 143:===============================>                     (67 + 47) / 114][Stage 143:======================================>              (82 + 32) / 114][Stage 143:================================================>    (105 + 9) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.27369468 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387437505 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362778873 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===================================>                 (78 + 37) / 115][Stage 144:========================================>            (88 + 27) / 115][Stage 144:=================================================>   (107 + 8) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:==================================>                  (75 + 41) / 116][Stage 145:===========================================>         (96 + 20) / 116][Stage 145:===============================================>    (106 + 10) / 116][Stage 145:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.865061491 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397499035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (61 + 60) / 121][Stage 146:================================>                    (74 + 47) / 121][Stage 146:=========================================>           (94 + 27) / 121][Stage 146:==================================================>  (116 + 5) / 121]                                                                                [Stage 147:==========================>                          (62 + 60) / 122][Stage 147:=============================>                       (68 + 54) / 122][Stage 147:==========================================>          (97 + 25) / 122][Stage 147:=================================================>   (114 + 8) / 122][Stage 147:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.25694665 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495338245 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (58 + 55) / 113][Stage 148:==============================>                      (65 + 48) / 113][Stage 148:======================================>              (82 + 31) / 113][Stage 148:================================================>    (104 + 9) / 113][Stage 148:====================================================>(111 + 2) / 113]                                                                                [Stage 149:============================>                        (62 + 52) / 114][Stage 149:===================================>                 (77 + 37) / 114][Stage 149:===========================================>         (94 + 20) / 114][Stage 149:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.066935768 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359621103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:>                                                      (0 + 0) / 113][Stage 150:====================================>                (78 + 35) / 113][Stage 150:========================================>            (86 + 27) / 113][Stage 150:============================================>        (95 + 18) / 113][Stage 150:=================================================>   (105 + 8) / 113][Stage 150:===================================================> (109 + 4) / 113][Stage 150:====================================================>(112 + 1) / 113]                                                                                [Stage 151:=====================================>               (81 + 33) / 114][Stage 151:==========================================>          (91 + 23) / 114][Stage 151:==============================================>     (101 + 13) / 114][Stage 151:==================================================>  (109 + 5) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.402065719 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396945154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 61) / 121][Stage 152:==========================>                          (61 + 60) / 121][Stage 152:===============================>                     (72 + 49) / 121][Stage 152:=====================================>               (86 + 35) / 121][Stage 152:=================================================>   (114 + 7) / 121][Stage 152:====================================================>(120 + 1) / 121]                                                                                [Stage 153:==========================>                          (61 + 61) / 122][Stage 153:=============================>                       (69 + 53) / 122][Stage 153:=====================================>               (87 + 35) / 122][Stage 153:===============================================>    (112 + 10) / 122][Stage 153:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.170828975 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334742669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:======================================>              (83 + 32) / 115][Stage 154:=============================================>      (100 + 15) / 115][Stage 154:=================================================>   (107 + 8) / 115][Stage 154:====================================================>(113 + 2) / 115]                                                                                [Stage 155:========================================>            (88 + 28) / 116][Stage 155:============================================>        (97 + 19) / 116][Stage 155:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 3.009026037 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395105609 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:============================>                        (66 + 55) / 121][Stage 156:====================================>                (84 + 37) / 121][Stage 156:==============================================>     (108 + 13) / 121][Stage 156:====================================================>(120 + 1) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:=============================>                       (67 + 55) / 122][Stage 157:=========================================>           (95 + 27) / 122][Stage 157:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.036358738 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.336731756 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:======================================>              (84 + 31) / 115][Stage 158:=============================================>       (99 + 16) / 115][Stage 158:=================================================>   (107 + 8) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:======================================>              (84 + 32) / 116][Stage 159:===========================================>         (95 + 21) / 116][Stage 159:===============================================>    (105 + 11) / 116][Stage 159:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.682333151 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398855899 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (63 + 58) / 121][Stage 160:=================================>                   (76 + 45) / 121][Stage 160:=========================================>           (94 + 27) / 121][Stage 160:==================================================>  (116 + 5) / 121]                                                                                [Stage 161:==========================>                          (62 + 60) / 122][Stage 161:=============================>                       (69 + 53) / 122][Stage 161:=======================================>             (92 + 30) / 122][Stage 161:=================================================>   (115 + 7) / 122][Stage 161:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.273169298 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358954901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:================================>                    (72 + 46) / 118][Stage 162:=================================>                   (75 + 43) / 118][Stage 162:===========================================>         (96 + 22) / 118][Stage 162:=================================================>   (111 + 7) / 118]                                                                                [Stage 163:================================>                    (74 + 45) / 119][Stage 163:====================================>                (83 + 36) / 119][Stage 163:===========================================>         (98 + 21) / 119][Stage 163:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.866022714 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374428107 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:================================>                    (72 + 46) / 118][Stage 164:====================================>                (81 + 37) / 118][Stage 164:==========================================>          (94 + 24) / 118][Stage 164:===================================================> (115 + 3) / 118]                                                                                [Stage 165:================================>                    (74 + 45) / 119][Stage 165:====================================>                (82 + 37) / 119][Stage 165:============================================>       (101 + 18) / 119][Stage 165:==================================================>  (114 + 5) / 119][Stage 165:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.124545818 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390565054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:==============================>                      (69 + 51) / 120][Stage 166:=====================================>               (85 + 35) / 120][Stage 166:=================================================>   (112 + 8) / 120]                                                                                [Stage 167:===========================>                         (63 + 58) / 121][Stage 167:===============================>                     (73 + 48) / 121][Stage 167:======================================>              (89 + 32) / 121][Stage 167:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.025535526 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386152882 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:===========================>                         (58 + 55) / 113][Stage 168:=============================>                       (62 + 51) / 113][Stage 168:======================================>              (83 + 30) / 113][Stage 168:=============================================>       (98 + 15) / 113][Stage 168:===================================================> (109 + 4) / 113]                                                                                [Stage 169:============================>                        (61 + 53) / 114][Stage 169:====================================>                (78 + 36) / 114][Stage 169:============================================>        (95 + 19) / 114][Stage 169:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.216091869 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 40 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 54  OR  partitionIndex = 40 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377533436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:============================>                        (60 + 53) / 113][Stage 170:=================================>                   (72 + 41) / 113][Stage 170:========================================>            (86 + 27) / 113][Stage 170:==================================================>  (108 + 5) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:===========================>                         (59 + 55) / 114][Stage 171:===============================>                     (67 + 47) / 114][Stage 171:=======================================>             (85 + 29) / 114][Stage 171:==============================================>     (103 + 11) / 114][Stage 171:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.261050842 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377569616 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (58 + 55) / 113][Stage 172:=============================>                       (62 + 51) / 113][Stage 172:====================================>                (78 + 35) / 113][Stage 172:============================================>        (94 + 19) / 113][Stage 172:==================================================>  (108 + 5) / 113]                                                                                [Stage 173:===========================>                         (59 + 55) / 114][Stage 173:================================>                    (69 + 45) / 114][Stage 173:========================================>            (87 + 27) / 114][Stage 173:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 3.132886803 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 74 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 74 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489658108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 60) / 120][Stage 174:=============================>                       (67 + 53) / 120][Stage 174:=======================================>             (89 + 31) / 120][Stage 174:==============================================>     (107 + 13) / 120]                                                                                [Stage 175:==========================>                          (61 + 60) / 121][Stage 175:===============================>                     (73 + 48) / 121][Stage 175:===========================================>        (102 + 19) / 121][Stage 175:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.014130972 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349410753 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:=====================================>               (79 + 34) / 113][Stage 176:==========================================>          (91 + 22) / 113][Stage 176:==============================================>      (99 + 14) / 113][Stage 176:==================================================>  (108 + 5) / 113][Stage 176:===================================================> (110 + 3) / 113][Stage 176:====================================================>(112 + 1) / 113]                                                                                [Stage 177:=====================================>               (80 + 34) / 114][Stage 177:=========================================>           (90 + 24) / 114][Stage 177:==============================================>     (103 + 11) / 114][Stage 177:================================================>    (105 + 9) / 114][Stage 177:====================================================>(112 + 2) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.304331666 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357600177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:================================>                    (73 + 45) / 118][Stage 178:=======================================>             (88 + 30) / 118][Stage 178:===============================================>    (107 + 11) / 118][Stage 178:==================================================>  (112 + 6) / 118]                                                                                [Stage 179:================================>                    (74 + 45) / 119][Stage 179:====================================>                (83 + 36) / 119][Stage 179:============================================>       (101 + 18) / 119][Stage 179:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.065827564 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426220241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:===========================>                         (59 + 54) / 113][Stage 180:===============================>                     (68 + 45) / 113][Stage 180:========================================>            (87 + 26) / 113][Stage 180:==============================================>     (101 + 12) / 113]                                                                                [Stage 181:============================>                        (61 + 53) / 114][Stage 181:================================>                    (70 + 44) / 114][Stage 181:==========================================>          (91 + 23) / 114][Stage 181:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.948335957 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367498766 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (77 + 36) / 113][Stage 182:========================================>            (87 + 26) / 113][Stage 182:=============================================>       (97 + 16) / 113][Stage 182:====================================================>(111 + 2) / 113]                                                                                [Stage 183:====================================>                (78 + 36) / 114][Stage 183:============================================>        (96 + 18) / 114][Stage 183:===============================================>    (104 + 10) / 114][Stage 183:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.954984473 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400748005 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===========================>                         (62 + 59) / 121][Stage 184:===============================>                     (72 + 49) / 121][Stage 184:=========================================>           (95 + 26) / 121][Stage 184:==================================================>  (116 + 5) / 121][Stage 184:====================================================>(120 + 1) / 121]                                                                                [Stage 185:==========================>                          (61 + 61) / 122][Stage 185:=============================>                       (67 + 55) / 122][Stage 185:=====================================>               (87 + 35) / 122][Stage 185:============================================>       (105 + 17) / 122][Stage 185:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.18977215 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 12  OR  partitionIndex = 13 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391400798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:==========================>                          (60 + 61) / 121][Stage 186:============================>                        (64 + 57) / 121][Stage 186:===================================>                 (80 + 41) / 121][Stage 186:===============================================>    (111 + 10) / 121][Stage 186:====================================================>(120 + 1) / 121]                                                                                [Stage 187:==========================>                          (61 + 61) / 122][Stage 187:==============================>                      (70 + 52) / 122][Stage 187:=======================================>             (91 + 31) / 122][Stage 187:=============================================>      (107 + 15) / 122]                                                                                Time elapsed: 3.091409519 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 134 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 148  OR  partitionIndex = 134 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334185308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:======================================>              (84 + 31) / 115][Stage 188:=========================================>           (91 + 24) / 115][Stage 188:=============================================>      (101 + 14) / 115][Stage 188:===================================================> (111 + 4) / 115]                                                                                [Stage 189:=====================================>               (82 + 34) / 116][Stage 189:========================================>            (89 + 27) / 116][Stage 189:=============================================>      (101 + 15) / 116][Stage 189:===================================================> (112 + 4) / 116][Stage 189:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.825111412 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394359386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:=============================>                       (67 + 53) / 120][Stage 190:====================================>                (82 + 38) / 120][Stage 190:===============================================>    (109 + 11) / 120][Stage 190:====================================================>(119 + 1) / 120]                                                                                [Stage 191:=============================>                       (67 + 54) / 121][Stage 191:=================================>                   (77 + 44) / 121][Stage 191:=============================================>      (107 + 14) / 121][Stage 191:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.021487673 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391836319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:===========================>                         (62 + 58) / 120][Stage 192:===============================>                     (72 + 48) / 120][Stage 192:========================================>            (92 + 28) / 120][Stage 192:=================================================>   (112 + 8) / 120]                                                                                [Stage 193:===========================>                         (62 + 59) / 121][Stage 193:================================>                    (75 + 46) / 121][Stage 193:==========================================>          (98 + 23) / 121][Stage 193:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.065126742 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361058328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===================================>                 (76 + 37) / 113][Stage 194:==========================================>          (90 + 23) / 113][Stage 194:============================================>        (94 + 19) / 113][Stage 194:==============================================>     (101 + 12) / 113][Stage 194:====================================================>(111 + 2) / 113]                                                                                [Stage 195:======================================>              (82 + 32) / 114][Stage 195:===========================================>         (93 + 21) / 114][Stage 195:=================================================>   (106 + 8) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.015973096 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412289919 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (61 + 59) / 120][Stage 196:==============================>                      (69 + 51) / 120][Stage 196:=====================================>               (85 + 35) / 120][Stage 196:=================================================>   (113 + 7) / 120]                                                                                [Stage 197:===========================>                         (62 + 59) / 121][Stage 197:===============================>                     (73 + 48) / 121][Stage 197:==========================================>          (96 + 25) / 121][Stage 197:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.06468164 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395097208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:============================>                        (66 + 55) / 121][Stage 198:===================================>                 (81 + 40) / 121][Stage 198:===========================================>        (101 + 20) / 121][Stage 198:====================================================>(119 + 2) / 121]                                                                                [Stage 199:==========================>                          (61 + 61) / 122][Stage 199:=============================>                       (68 + 54) / 122][Stage 199:=====================================>               (87 + 35) / 122][Stage 199:===================================================> (118 + 4) / 122][Stage 199:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.172115278 seconds
res203: Int = 0

scala> 

scala> :quit

real	9m57.822s
user	11m22.216s
sys	0m38.748s
