Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 06:35:06 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 06:35:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 06:35:21 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 06:35:21 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 06:35:24 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 06:35:34 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522063523-0425).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.434276401 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:====>                                                  (9 + 106) / 115][Stage 0:==========================>                            (56 + 59) / 115][Stage 0:=============================>                         (62 + 53) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:=========================================>             (87 + 28) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:===========================>                           (58 + 58) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:=================================>                     (70 + 46) / 116][Stage 1:====================================>                  (76 + 40) / 116][Stage 1:======================================>                (82 + 34) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:==============================================>       (100 + 16) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:====================================================>  (111 + 5) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.472187179 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.784641603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:===============>                                       (34 + 86) / 120][Stage 2:=======================>                               (51 + 69) / 120][Stage 2:=========================>                             (56 + 64) / 120][Stage 2:==========================>                            (58 + 62) / 120][Stage 2:===========================>                           (60 + 60) / 120][Stage 2:================================>                      (70 + 50) / 120][Stage 2:=========================================>             (90 + 30) / 120][Stage 2:=============================================>        (100 + 20) / 120][Stage 2:==================================================>    (111 + 9) / 120][Stage 2:=====================================================> (116 + 4) / 120][Stage 2:======================================================>(118 + 2) / 120]                                                                                [Stage 3:==========================>                            (59 + 62) / 121][Stage 3:===========================>                           (61 + 60) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:=================================>                     (73 + 48) / 121][Stage 3:=============================================>        (101 + 20) / 121][Stage 3:===================================================>   (113 + 8) / 121][Stage 3:====================================================>  (116 + 5) / 121][Stage 3:======================================================>(119 + 2) / 121]                                                                                Time elapsed: 5.505382721 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.654824452 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:================================>                      (70 + 48) / 118][Stage 4:==================================>                    (73 + 45) / 118][Stage 4:==================================>                    (75 + 43) / 118][Stage 4:=======================================>               (84 + 34) / 118][Stage 4:==========================================>            (91 + 27) / 118][Stage 4:================================================>     (106 + 12) / 118][Stage 4:===================================================>   (111 + 7) / 118][Stage 4:======================================================>(117 + 1) / 118]                                                                                [Stage 5:=================================>                     (73 + 46) / 119][Stage 5:==================================>                    (74 + 45) / 119][Stage 5:====================================>                  (80 + 39) / 119][Stage 5:==========================================>            (91 + 28) / 119][Stage 5:==============================================>       (103 + 16) / 119][Stage 5:=====================================================> (116 + 3) / 119]                                                                                Time elapsed: 4.109555493 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 80  OR  partitionIndex = 66 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.648126611 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:================================>                      (70 + 48) / 118][Stage 6:==================================>                    (73 + 45) / 118][Stage 6:==================================>                    (74 + 44) / 118][Stage 6:====================================>                  (78 + 40) / 118][Stage 6:=====================================>                 (80 + 38) / 118][Stage 6:=======================================>               (84 + 34) / 118][Stage 6:============================================>          (96 + 22) / 118][Stage 6:====================================================>  (113 + 5) / 118][Stage 6:======================================================>(117 + 1) / 118]                                                                                [Stage 7:=================================>                     (72 + 47) / 119][Stage 7:==================================>                    (75 + 44) / 119][Stage 7:===================================>                   (76 + 43) / 119][Stage 7:=====================================>                 (81 + 38) / 119][Stage 7:=======================================>               (86 + 33) / 119][Stage 7:===========================================>           (94 + 25) / 119][Stage 7:=============================================>         (98 + 21) / 119][Stage 7:===================================================>   (112 + 7) / 119][Stage 7:======================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.837208191 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.5423547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=================================>                     (72 + 46) / 118][Stage 8:==================================>                    (73 + 45) / 118][Stage 8:======================================>                (83 + 35) / 118][Stage 8:===============================================>      (103 + 15) / 118][Stage 8:==================================================>    (109 + 9) / 118][Stage 8:=====================================================> (114 + 4) / 118]                                                                                [Stage 9:=================================>                     (73 + 46) / 119][Stage 9:===================================>                   (76 + 43) / 119][Stage 9:========================================>              (88 + 31) / 119][Stage 9:=============================================>         (98 + 21) / 119][Stage 9:===================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.656029073 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535752878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:================================>                     (72 + 46) / 118][Stage 10:======================================>               (85 + 33) / 118][Stage 10:===========================================>          (95 + 23) / 118][Stage 10:================================================>    (107 + 11) / 118][Stage 10:===================================================>  (112 + 6) / 118][Stage 10:=====================================================>(116 + 2) / 118]                                                                                [Stage 11:=================================>                    (73 + 46) / 119][Stage 11:==================================>                   (77 + 42) / 119][Stage 11:======================================>               (84 + 35) / 119][Stage 11:============================================>         (98 + 21) / 119][Stage 11:==================================================>   (111 + 8) / 119][Stage 11:===================================================>  (113 + 6) / 119][Stage 11:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 4.106019368 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.642908134 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:=============================>                        (65 + 56) / 121][Stage 12:================================>                     (73 + 48) / 121][Stage 12:==========================================>           (96 + 25) / 121][Stage 12:====================================================> (117 + 4) / 121][Stage 12:=====================================================>(119 + 2) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:============================>                         (64 + 58) / 122][Stage 13:====================================>                 (82 + 40) / 122][Stage 13:===============================================>     (109 + 13) / 122][Stage 13:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.552601892 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.557739331 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===========================>                          (57 + 56) / 113][Stage 14:===========================>                          (58 + 55) / 113][Stage 14:===============================>                      (65 + 48) / 113][Stage 14:=====================================>                (78 + 35) / 113][Stage 14:============================================>         (94 + 19) / 113][Stage 14:===============================================>     (101 + 12) / 113][Stage 14:====================================================> (110 + 3) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:================================>                     (69 + 45) / 114][Stage 15:==========================================>           (89 + 25) / 114][Stage 15:===============================================>     (103 + 11) / 114][Stage 15:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 4.273889189 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 35  OR  partitionIndex = 49 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.541441378 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==============================>                       (66 + 49) / 115][Stage 16:====================================>                 (77 + 38) / 115][Stage 16:==========================================>           (90 + 25) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:==================================================>   (107 + 8) / 115][Stage 16:=====================================================>(113 + 2) / 115][Stage 16:=====================================================>(114 + 1) / 115]                                                                                [Stage 17:==============================>                       (66 + 50) / 116][Stage 17:====================================>                 (78 + 38) / 116][Stage 17:==========================================>           (91 + 25) / 116][Stage 17:===============================================>     (104 + 12) / 116][Stage 17:====================================================> (112 + 4) / 116][Stage 17:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.030940485 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.544189327 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==============================>                       (64 + 51) / 115][Stage 18:===================================>                  (76 + 39) / 115][Stage 18:========================================>             (86 + 29) / 115][Stage 18:===========================================>          (93 + 22) / 115][Stage 18:==============================================>       (99 + 16) / 115][Stage 18:==================================================>   (107 + 8) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:===============================>                      (67 + 49) / 116][Stage 19:=====================================>                (80 + 36) / 116][Stage 19:==========================================>           (92 + 24) / 116][Stage 19:==============================================>      (101 + 15) / 116][Stage 19:===================================================>  (111 + 5) / 116][Stage 19:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.711457206 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46674849 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (64 + 49) / 113][Stage 20:===================================>                  (75 + 38) / 113][Stage 20:===========================================>          (91 + 22) / 113][Stage 20:============================================>         (94 + 19) / 113][Stage 20:==================================================>   (105 + 8) / 113][Stage 20:====================================================> (109 + 4) / 113][Stage 20:====================================================> (110 + 3) / 113]                                                                                [Stage 21:=====================================>                (80 + 34) / 114][Stage 21:===========================================>          (91 + 23) / 114][Stage 21:=============================================>        (95 + 19) / 114][Stage 21:================================================>    (104 + 10) / 114][Stage 21:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.800707983 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477768027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:=================================>                    (74 + 44) / 118][Stage 22:======================================>               (85 + 33) / 118][Stage 22:==============================================>      (104 + 14) / 118][Stage 22:==================================================>   (111 + 7) / 118][Stage 22:=====================================================>(116 + 2) / 118][Stage 22:=====================================================>(117 + 1) / 118]                                                                                [Stage 23:===============================>                      (70 + 49) / 119][Stage 23:==================================>                   (76 + 43) / 119][Stage 23:========================================>             (90 + 29) / 119][Stage 23:=============================================>       (103 + 16) / 119][Stage 23:===================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.645424148 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447247965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:====================================>                 (76 + 37) / 113][Stage 24:==========================================>           (88 + 25) / 113][Stage 24:============================================>         (94 + 19) / 113][Stage 24:===============================================>     (102 + 11) / 113][Stage 24:====================================================> (109 + 4) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:=====================================>                (80 + 34) / 114][Stage 25:==========================================>           (89 + 25) / 114][Stage 25:==============================================>      (101 + 13) / 114][Stage 25:==================================================>   (107 + 7) / 114][Stage 25:===================================================>  (109 + 5) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.786581919 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.579015423 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (73 + 45) / 118][Stage 26:======================================>               (84 + 34) / 118][Stage 26:=============================================>       (102 + 16) / 118][Stage 26:===================================================>  (112 + 6) / 118][Stage 26:=====================================================>(116 + 2) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:=================================>                    (74 + 45) / 119][Stage 27:=======================================>              (87 + 32) / 119][Stage 27:==================================================>   (112 + 7) / 119][Stage 27:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.304360018 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.49658671 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:==========================>                           (60 + 61) / 121][Stage 28:===============================>                      (70 + 51) / 121][Stage 28:=========================================>            (92 + 29) / 121][Stage 28:=================================================>    (112 + 9) / 121][Stage 28:====================================================> (117 + 4) / 121]                                                                                [Stage 29:===========================>                          (62 + 60) / 122][Stage 29:===============================>                      (71 + 51) / 122][Stage 29:========================================>             (91 + 31) / 122][Stage 29:================================================>    (111 + 11) / 122][Stage 29:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.495842636 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 65  OR  partitionIndex = 79 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.526171829 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:===============================>                      (65 + 48) / 113][Stage 30:======================================>               (81 + 32) / 113][Stage 30:===============================================>     (101 + 12) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:============================>                         (60 + 54) / 114][Stage 31:================================>                     (68 + 46) / 114][Stage 31:=======================================>              (84 + 30) / 114][Stage 31:===============================================>     (103 + 11) / 114][Stage 31:==================================================>   (107 + 7) / 114][Stage 31:=====================================================>(112 + 2) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.547986511 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.586978431 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==========================>                           (60 + 61) / 121][Stage 32:============================>                         (64 + 57) / 121][Stage 32:================================>                     (73 + 48) / 121][Stage 32:==============================================>      (106 + 15) / 121][Stage 32:====================================================> (118 + 3) / 121]                                                                                [Stage 33:===========================>                          (61 + 61) / 122][Stage 33:=============================>                        (66 + 56) / 122][Stage 33:====================================>                 (82 + 40) / 122][Stage 33:==============================================>      (108 + 14) / 122][Stage 33:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.139331494 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506211643 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (60 + 60) / 120][Stage 34:===============================>                      (71 + 49) / 120][Stage 34:==========================================>           (94 + 26) / 120][Stage 34:==================================================>   (113 + 7) / 120][Stage 34:=====================================================>(119 + 1) / 120]                                                                                [Stage 35:===========================>                          (61 + 60) / 121][Stage 35:=============================>                        (66 + 55) / 121][Stage 35:=======================================>              (89 + 32) / 121][Stage 35:==============================================>      (106 + 15) / 121][Stage 35:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.199994656 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51762514 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:===========================>                          (61 + 60) / 121][Stage 36:===============================>                      (70 + 51) / 121][Stage 36:========================================>             (90 + 31) / 121][Stage 36:=================================================>    (112 + 9) / 121]                                                                                [Stage 37:===========================>                          (62 + 60) / 122][Stage 37:===============================>                      (72 + 50) / 122][Stage 37:======================================>               (87 + 35) / 122][Stage 37:===============================================>     (110 + 12) / 122][Stage 37:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.345746682 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.441636828 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:==================================>                   (73 + 40) / 113][Stage 38:========================================>             (84 + 29) / 113][Stage 38:===========================================>          (92 + 21) / 113][Stage 38:=================================================>    (104 + 9) / 113][Stage 38:===================================================>  (108 + 5) / 113][Stage 38:====================================================> (109 + 4) / 113][Stage 38:=====================================================>(111 + 2) / 113]                                                                                [Stage 39:====================================>                 (76 + 38) / 114][Stage 39:=========================================>            (88 + 26) / 114][Stage 39:=============================================>        (97 + 17) / 114][Stage 39:===================================================>  (108 + 6) / 114][Stage 39:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.592616365 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469273241 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:===========================>                          (58 + 55) / 113][Stage 40:=============================>                        (62 + 51) / 113][Stage 40:======================================>               (80 + 33) / 113][Stage 40:===============================================>      (99 + 14) / 113][Stage 40:=====================================================>(111 + 2) / 113]                                                                                [Stage 41:============================>                         (61 + 53) / 114][Stage 41:==================================>                   (72 + 42) / 114][Stage 41:==============================================>       (99 + 15) / 114][Stage 41:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.229010137 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414753119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 35) / 115][Stage 42:=======================================>              (84 + 31) / 115][Stage 42:=============================================>        (96 + 19) / 115][Stage 42:==================================================>   (108 + 7) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=========================================>            (89 + 27) / 116][Stage 43:==============================================>       (99 + 17) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.984026623 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465903569 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:============================>                         (59 + 54) / 113][Stage 44:==============================>                       (64 + 49) / 113][Stage 44:====================================>                 (76 + 37) / 113][Stage 44:===============================================>     (102 + 11) / 113]                                                                                [Stage 45:===========================>                          (59 + 55) / 114][Stage 45:================================>                     (69 + 45) / 114][Stage 45:=========================================>            (88 + 26) / 114][Stage 45:===================================================>  (109 + 5) / 114][Stage 45:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.179216153 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.466707252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (67 + 54) / 121][Stage 46:==================================>                   (78 + 43) / 121][Stage 46:===========================================>          (98 + 23) / 121][Stage 46:================================================>    (111 + 10) / 121][Stage 46:===================================================>  (116 + 5) / 121][Stage 46:=====================================================>(120 + 1) / 121]                                                                                [Stage 47:===========================>                          (61 + 61) / 122][Stage 47:==============================>                       (70 + 52) / 122][Stage 47:=====================================>                (84 + 38) / 122][Stage 47:================================================>    (112 + 10) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.549537266 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419532516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (72 + 41) / 113][Stage 48:========================================>             (85 + 28) / 113][Stage 48:==============================================>       (98 + 15) / 113][Stage 48:================================================>    (103 + 10) / 113][Stage 48:=====================================================>(111 + 2) / 113]                                                                                [Stage 49:===================================>                  (75 + 39) / 114][Stage 49:=========================================>            (87 + 27) / 114][Stage 49:==============================================>       (99 + 15) / 114][Stage 49:==================================================>   (106 + 8) / 114]                                                                                Time elapsed: 2.913305231 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 188 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476314165 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==========================>                           (60 + 61) / 121][Stage 50:============================>                         (64 + 57) / 121][Stage 50:==================================>                   (77 + 44) / 121][Stage 50:============================================>         (99 + 22) / 121][Stage 50:====================================================> (118 + 3) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:=============================>                        (67 + 55) / 122][Stage 51:=====================================>                (84 + 38) / 122][Stage 51:=============================================>       (105 + 17) / 122][Stage 51:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.061119144 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380535426 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (83 + 32) / 115][Stage 52:==========================================>           (90 + 25) / 115][Stage 52:==================================================>   (108 + 7) / 115][Stage 52:====================================================> (112 + 3) / 115]                                                                                [Stage 53:======================================>               (83 + 33) / 116][Stage 53:=========================================>            (89 + 27) / 116][Stage 53:==============================================>      (102 + 14) / 116][Stage 53:===================================================>  (111 + 5) / 116][Stage 53:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.201931133 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458934427 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:===========================>                          (62 + 59) / 121][Stage 54:=================================>                    (75 + 46) / 121][Stage 54:==============================================>      (106 + 15) / 121][Stage 54:=====================================================>(119 + 2) / 121][Stage 54:=====================================================>(120 + 1) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:=============================>                        (67 + 55) / 122][Stage 55:=====================================>                (85 + 37) / 122][Stage 55:===============================================>     (110 + 12) / 122][Stage 55:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.516021419 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45060838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:================================>                     (72 + 48) / 120][Stage 56:==========================================>           (94 + 26) / 120][Stage 56:===============================================>     (107 + 13) / 120][Stage 56:===================================================>  (115 + 5) / 120]                                                                                [Stage 57:============================>                         (63 + 58) / 121][Stage 57:==================================>                   (78 + 43) / 121][Stage 57:=============================================>       (103 + 18) / 121][Stage 57:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.286681618 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419854057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:==================================>                   (73 + 40) / 113][Stage 58:=======================================>              (83 + 30) / 113][Stage 58:============================================>         (94 + 19) / 113][Stage 58:==============================================>       (98 + 15) / 113][Stage 58:===================================================>  (108 + 5) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:======================================>               (82 + 32) / 114][Stage 59:============================================>         (93 + 21) / 114][Stage 59:==============================================>       (99 + 15) / 114][Stage 59:===================================================>  (109 + 5) / 114][Stage 59:====================================================> (110 + 4) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.946464635 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 190 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.47455956 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==========================>                           (60 + 61) / 121][Stage 60:============================>                         (64 + 57) / 121][Stage 60:==================================>                   (77 + 44) / 121][Stage 60:===========================================>          (98 + 23) / 121][Stage 60:===================================================>  (116 + 5) / 121]                                                                                [Stage 61:===========================>                          (61 + 61) / 122][Stage 61:=================================>                    (75 + 47) / 122][Stage 61:===========================================>          (98 + 24) / 122][Stage 61:==================================================>   (113 + 9) / 122]                                                                                Time elapsed: 3.304139738 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470586046 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==========================>                           (60 + 61) / 121][Stage 62:===========================>                          (61 + 60) / 121][Stage 62:===============================>                      (71 + 50) / 121][Stage 62:========================================>             (91 + 30) / 121][Stage 62:===============================================>     (109 + 12) / 121]                                                                                [Stage 63:===========================>                          (62 + 60) / 122][Stage 63:==================================>                   (78 + 44) / 122][Stage 63:==========================================>           (96 + 26) / 122][Stage 63:===============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.249889438 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392198546 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:=======================================>              (83 + 30) / 113][Stage 64:===========================================>          (91 + 22) / 113][Stage 64:================================================>    (103 + 10) / 113][Stage 64:====================================================> (110 + 3) / 113]                                                                                [Stage 65:====================================>                 (78 + 36) / 114][Stage 65:========================================>             (85 + 29) / 114][Stage 65:=============================================>        (96 + 18) / 114][Stage 65:==================================================>   (107 + 7) / 114][Stage 65:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.032306995 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452194406 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:===========================>                          (61 + 59) / 120][Stage 66:===============================>                      (71 + 49) / 120][Stage 66:=======================================>              (88 + 32) / 120][Stage 66:================================================>    (109 + 11) / 120][Stage 66:=====================================================>(118 + 2) / 120]                                                                                [Stage 67:=============================>                        (65 + 56) / 121][Stage 67:====================================>                 (82 + 39) / 121][Stage 67:=============================================>       (105 + 16) / 121][Stage 67:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.127033912 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458526687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:==========================>                           (60 + 61) / 121][Stage 68:============================>                         (64 + 57) / 121][Stage 68:==================================>                   (78 + 43) / 121][Stage 68:============================================>         (99 + 22) / 121][Stage 68:====================================================> (118 + 3) / 121]                                                                                [Stage 69:===========================>                          (62 + 60) / 122][Stage 69:==============================>                       (70 + 52) / 122][Stage 69:=========================================>            (94 + 28) / 122][Stage 69:==================================================>   (113 + 9) / 122][Stage 69:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.332744878 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 68 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41129379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:====================================>                 (76 + 37) / 113][Stage 70:==========================================>           (89 + 24) / 113][Stage 70:==============================================>       (98 + 15) / 113][Stage 70:====================================================> (110 + 3) / 113][Stage 70:======================================================(113 + 0) / 113]                                                                                [Stage 71:====================================>                 (76 + 38) / 114][Stage 71:==========================================>           (89 + 25) / 114][Stage 71:==============================================>       (99 + 15) / 114][Stage 71:==================================================>   (106 + 8) / 114][Stage 71:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.227496148 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43237842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:===========================>                          (60 + 60) / 120][Stage 72:==============================>                       (67 + 53) / 120][Stage 72:===================================>                  (79 + 41) / 120][Stage 72:=============================================>       (104 + 16) / 120][Stage 72:====================================================> (116 + 4) / 120]                                                                                [Stage 73:===========================>                          (61 + 60) / 121][Stage 73:=============================>                        (66 + 55) / 121][Stage 73:=====================================>                (83 + 38) / 121][Stage 73:==========================================>           (96 + 25) / 121][Stage 73:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.259283615 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362598927 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:======================================>               (81 + 34) / 115][Stage 74:========================================>             (87 + 28) / 115][Stage 74:===============================================>     (102 + 13) / 115][Stage 74:===================================================>  (110 + 5) / 115]                                                                                [Stage 75:=======================================>              (85 + 31) / 116][Stage 75:==========================================>           (92 + 24) / 116][Stage 75:==============================================>      (102 + 14) / 116][Stage 75:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.831457371 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387443651 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:================================>                     (72 + 46) / 118][Stage 76:===================================>                  (77 + 41) / 118][Stage 76:=========================================>            (90 + 28) / 118][Stage 76:==============================================>      (103 + 15) / 118][Stage 76:===================================================>  (112 + 6) / 118]                                                                                [Stage 77:=================================>                    (73 + 46) / 119][Stage 77:=====================================>                (82 + 37) / 119][Stage 77:==========================================>           (94 + 25) / 119][Stage 77:================================================>    (109 + 10) / 119][Stage 77:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.397529198 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45632386 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===========================>                          (60 + 60) / 120][Stage 78:===============================>                      (69 + 51) / 120][Stage 78:=========================================>            (93 + 27) / 120][Stage 78:====================================================> (116 + 4) / 120]                                                                                [Stage 79:===========================>                          (61 + 60) / 121][Stage 79:================================>                     (73 + 48) / 121][Stage 79:==========================================>           (96 + 25) / 121][Stage 79:=================================================>    (112 + 9) / 121][Stage 79:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.339785107 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 117  OR  partitionIndex = 118 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366461561 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=================================>                    (70 + 43) / 113][Stage 80:=====================================>                (78 + 35) / 113][Stage 80:==========================================>           (89 + 24) / 113][Stage 80:=============================================>        (95 + 18) / 113][Stage 80:==================================================>   (105 + 8) / 113][Stage 80:=====================================================>(111 + 2) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:====================================>                 (78 + 36) / 114][Stage 81:========================================>             (86 + 28) / 114][Stage 81:==============================================>       (99 + 15) / 114][Stage 81:==================================================>   (106 + 8) / 114][Stage 81:====================================================> (111 + 3) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.565865781 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428444087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (60 + 60) / 120][Stage 82:===============================>                      (69 + 51) / 120][Stage 82:=========================================>            (92 + 28) / 120][Stage 82:==================================================>   (112 + 8) / 120][Stage 82:=====================================================>(119 + 1) / 120]                                                                                [Stage 83:===========================>                          (61 + 60) / 121][Stage 83:=============================>                        (65 + 56) / 121][Stage 83:=====================================>                (85 + 36) / 121][Stage 83:===============================================>     (108 + 13) / 121][Stage 83:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.149518555 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369570471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=====================================>                (79 + 36) / 115][Stage 84:==========================================>           (90 + 25) / 115][Stage 84:==============================================>      (100 + 15) / 115][Stage 84:=====================================================>(113 + 2) / 115]                                                                                [Stage 85:========================================>             (87 + 29) / 116][Stage 85:===========================================>          (94 + 22) / 116][Stage 85:================================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.689206561 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406839776 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:============================>                         (63 + 57) / 120][Stage 86:=================================>                    (75 + 45) / 120][Stage 86:==========================================>           (95 + 25) / 120][Stage 86:===================================================>  (114 + 6) / 120]                                                                                [Stage 87:===========================>                          (61 + 60) / 121][Stage 87:================================>                     (72 + 49) / 121][Stage 87:=====================================>                (83 + 38) / 121][Stage 87:==============================================>      (107 + 14) / 121][Stage 87:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.334362213 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410741129 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:=============================>                        (61 + 52) / 113][Stage 88:===============================>                      (65 + 48) / 113][Stage 88:=========================================>            (86 + 27) / 113][Stage 88:===================================================>  (107 + 6) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:============================>                         (60 + 54) / 114][Stage 89:================================>                     (68 + 46) / 114][Stage 89:========================================>             (85 + 29) / 114][Stage 89:===================================================>  (109 + 5) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.27902525 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398461588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:==============================>                       (65 + 50) / 115][Stage 90:===================================>                  (75 + 40) / 115][Stage 90:============================================>         (95 + 20) / 115][Stage 90:==================================================>   (107 + 8) / 115][Stage 90:=====================================================>(113 + 2) / 115]                                                                                [Stage 91:=====================================>                (80 + 36) / 116][Stage 91:==============================================>       (99 + 17) / 116][Stage 91:=================================================>    (107 + 9) / 116][Stage 91:=====================================================>(114 + 2) / 116][Stage 91:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.287140918 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406128934 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===================================>                  (76 + 39) / 115][Stage 92:=========================================>            (89 + 26) / 115][Stage 92:===============================================>     (104 + 11) / 115][Stage 92:===================================================>  (110 + 5) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:==================================>                   (74 + 42) / 116][Stage 93:========================================>             (86 + 30) / 116][Stage 93:===========================================>          (94 + 22) / 116][Stage 93:===============================================>     (104 + 12) / 116][Stage 93:==================================================>   (109 + 7) / 116][Stage 93:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.934634017 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 50  OR  partitionIndex = 36 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393737373 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:==============================>                       (63 + 50) / 113][Stage 94:======================================>               (81 + 32) / 113][Stage 94:================================================>    (103 + 10) / 113][Stage 94:====================================================> (110 + 3) / 113]                                                                                [Stage 95:============================>                         (60 + 54) / 114][Stage 95:=================================>                    (70 + 44) / 114][Stage 95:=======================================>              (83 + 31) / 114][Stage 95:=================================================>    (105 + 9) / 114][Stage 95:====================================================> (110 + 4) / 114][Stage 95:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.370310937 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412455695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (61 + 60) / 121][Stage 96:================================>                     (72 + 49) / 121][Stage 96:========================================>             (90 + 31) / 121][Stage 96:================================================>    (111 + 10) / 121][Stage 96:=====================================================>(119 + 2) / 121]                                                                                [Stage 97:===========================>                          (61 + 61) / 122][Stage 97:===========================>                          (63 + 59) / 122][Stage 97:==================================>                   (79 + 43) / 122][Stage 97:===============================================>     (110 + 12) / 122][Stage 97:====================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.208285278 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352437595 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:======================================>               (82 + 33) / 115][Stage 98:=========================================>            (89 + 26) / 115][Stage 98:=============================================>        (97 + 18) / 115][Stage 98:==================================================>   (107 + 8) / 115][Stage 98:=====================================================>(114 + 1) / 115]                                                                                [Stage 99:=======================================>              (84 + 32) / 116][Stage 99:==========================================>           (91 + 25) / 116][Stage 99:===============================================>     (104 + 12) / 116][Stage 99:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.967259975 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406716857 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==================================>                  (74 + 41) / 115][Stage 100:========================================>            (87 + 28) / 115][Stage 100:=============================================>      (101 + 14) / 115][Stage 100:===================================================> (111 + 4) / 115]                                                                                [Stage 101:===================================>                 (77 + 39) / 116][Stage 101:==========================================>          (92 + 24) / 116][Stage 101:=================================================>   (108 + 8) / 116][Stage 101:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.783666984 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513829154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:============================>                        (60 + 53) / 113][Stage 102:===============================>                     (68 + 45) / 113][Stage 102:=========================================>           (88 + 25) / 113][Stage 102:===============================================>    (103 + 10) / 113][Stage 102:====================================================>(111 + 2) / 113]                                                                                [Stage 103:===========================>                         (60 + 54) / 114][Stage 103:===============================>                     (68 + 46) / 114][Stage 103:=====================================>               (80 + 34) / 114][Stage 103:===========================================>         (94 + 20) / 114][Stage 103:=================================================>   (106 + 8) / 114][Stage 103:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.451067691 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379588027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:================================>                    (72 + 46) / 118][Stage 104:================================>                    (73 + 45) / 118][Stage 104:=======================================>             (88 + 30) / 118][Stage 104:===============================================>    (108 + 10) / 118][Stage 104:=====================================================(118 + 0) / 118]                                                                                [Stage 105:================================>                    (74 + 45) / 119][Stage 105:====================================>                (83 + 36) / 119][Stage 105:==========================================>          (96 + 23) / 119][Stage 105:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.971517572 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399480533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:===========================>                         (59 + 54) / 113][Stage 106:================================>                    (69 + 44) / 113][Stage 106:=======================================>             (84 + 29) / 113][Stage 106:==============================================>     (102 + 11) / 113][Stage 106:===================================================> (109 + 4) / 113]                                                                                [Stage 107:===========================>                         (60 + 54) / 114][Stage 107:=================================>                   (72 + 42) / 114][Stage 107:============================================>        (96 + 18) / 114][Stage 107:==================================================>  (109 + 5) / 114][Stage 107:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.366009089 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414227042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 61) / 121][Stage 108:============================>                        (66 + 55) / 121][Stage 108:=================================>                   (77 + 44) / 121][Stage 108:==========================================>         (100 + 21) / 121][Stage 108:====================================================>(120 + 1) / 121]                                                                                [Stage 109:==========================>                          (61 + 61) / 122][Stage 109:===========================>                         (63 + 59) / 122][Stage 109:====================================>                (84 + 38) / 122][Stage 109:===========================================>        (101 + 21) / 122][Stage 109:=================================================>   (114 + 8) / 122][Stage 109:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.208467145 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418326496 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:==============================>                      (69 + 51) / 120][Stage 110:======================================>              (88 + 32) / 120][Stage 110:==============================================>     (107 + 13) / 120]                                                                                [Stage 111:=============================>                       (67 + 54) / 121][Stage 111:================================>                    (74 + 47) / 121][Stage 111:=====================================>               (86 + 35) / 121][Stage 111:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 2.938755866 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40434659 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==========================>                          (60 + 61) / 121][Stage 112:============================>                        (64 + 57) / 121][Stage 112:==================================>                  (79 + 42) / 121][Stage 112:=============================================>      (106 + 15) / 121][Stage 112:====================================================>(119 + 2) / 121]                                                                                [Stage 113:===========================>                         (63 + 59) / 122][Stage 113:=================================>                   (78 + 44) / 122][Stage 113:==========================================>          (97 + 25) / 122][Stage 113:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 2.998420686 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389070519 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:===========================>                         (58 + 55) / 113][Stage 114:===============================>                     (67 + 46) / 113][Stage 114:========================================>            (86 + 27) / 113][Stage 114:==============================================>     (100 + 13) / 113][Stage 114:===================================================> (110 + 3) / 113]                                                                                [Stage 115:===========================>                         (59 + 55) / 114][Stage 115:============================>                        (62 + 52) / 114][Stage 115:==================================>                  (75 + 39) / 114][Stage 115:=============================================>       (98 + 16) / 114][Stage 115:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.249951926 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400682057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (63 + 57) / 120][Stage 116:==================================>                  (77 + 43) / 120][Stage 116:==========================================>          (96 + 24) / 120][Stage 116:==================================================>  (115 + 5) / 120]                                                                                [Stage 117:============================>                        (65 + 56) / 121][Stage 117:====================================>                (83 + 38) / 121][Stage 117:=============================================>      (107 + 14) / 121][Stage 117:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.070438688 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365800941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:================================>                    (72 + 46) / 118][Stage 118:===================================>                 (79 + 39) / 118][Stage 118:==========================================>          (94 + 24) / 118][Stage 118:=================================================>   (110 + 8) / 118]                                                                                [Stage 119:================================>                    (74 + 45) / 119][Stage 119:======================================>              (87 + 32) / 119][Stage 119:==============================================>     (107 + 12) / 119][Stage 119:==================================================>  (113 + 6) / 119][Stage 119:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.242619744 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403940529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (62 + 59) / 121][Stage 120:================================>                    (75 + 46) / 121][Stage 120:=========================================>           (94 + 27) / 121][Stage 120:===================================================> (117 + 4) / 121]                                                                                [Stage 121:==========================>                          (61 + 61) / 122][Stage 121:==============================>                      (71 + 51) / 122][Stage 121:========================================>            (94 + 28) / 122][Stage 121:=================================================>   (113 + 9) / 122][Stage 121:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.224367364 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 2 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 2 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40739338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:============================>                        (64 + 57) / 121][Stage 122:==================================>                  (79 + 42) / 121][Stage 122:=============================================>      (105 + 16) / 121][Stage 122:===================================================> (118 + 3) / 121]                                                                                [Stage 123:==========================>                          (61 + 61) / 122][Stage 123:============================>                        (66 + 56) / 122][Stage 123:==================================>                  (79 + 43) / 122][Stage 123:===========================================>        (103 + 19) / 122][Stage 123:===================================================> (118 + 4) / 122]                                                                                Time elapsed: 3.194263165 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372795545 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:=================================>                   (72 + 43) / 115][Stage 124:========================================>            (87 + 28) / 115][Stage 124:==============================================>     (102 + 13) / 115][Stage 124:====================================================>(113 + 2) / 115]                                                                                [Stage 125:==================================>                  (76 + 40) / 116][Stage 125:=========================================>           (90 + 26) / 116][Stage 125:=================================================>   (108 + 8) / 116][Stage 125:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 3.141030348 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374221469 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:===============================>                     (71 + 47) / 118][Stage 126:=================================>                   (74 + 44) / 118][Stage 126:====================================>                (82 + 36) / 118][Stage 126:==============================================>     (105 + 13) / 118]                                                                                [Stage 127:==================================>                  (78 + 41) / 119][Stage 127:=====================================>               (84 + 35) / 119][Stage 127:=============================================>      (104 + 15) / 119][Stage 127:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.891359895 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404826612 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==========================>                          (60 + 60) / 120][Stage 128:============================>                        (65 + 55) / 120][Stage 128:====================================>                (82 + 38) / 120][Stage 128:=============================================>      (105 + 15) / 120][Stage 128:===================================================> (116 + 4) / 120]                                                                                [Stage 129:==========================>                          (61 + 60) / 121][Stage 129:===============================>                     (73 + 48) / 121][Stage 129:=======================================>             (90 + 31) / 121][Stage 129:=============================================>      (106 + 15) / 121]                                                                                Time elapsed: 3.136496915 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383014499 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:===========================>                         (58 + 55) / 113][Stage 130:============================>                        (61 + 52) / 113][Stage 130:=================================>                   (71 + 42) / 113][Stage 130:=========================================>           (88 + 25) / 113][Stage 130:===================================================> (109 + 4) / 113]                                                                                [Stage 131:===========================>                         (60 + 54) / 114][Stage 131:==============================>                      (66 + 48) / 114][Stage 131:=========================================>           (89 + 25) / 114][Stage 131:=================================================>   (106 + 8) / 114][Stage 131:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.087873113 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357450014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:===================================>                 (75 + 38) / 113][Stage 132:=======================================>             (84 + 29) / 113][Stage 132:===========================================>         (92 + 21) / 113][Stage 132:==============================================>     (102 + 11) / 113][Stage 132:===================================================> (109 + 4) / 113][Stage 132:====================================================>(112 + 1) / 113]                                                                                [Stage 133:==================================>                  (74 + 40) / 114][Stage 133:========================================>            (87 + 27) / 114][Stage 133:=============================================>       (97 + 17) / 114][Stage 133:==============================================>     (103 + 11) / 114][Stage 133:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.23033619 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 87  OR  partitionIndex = 88 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349541207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (81 + 32) / 113][Stage 134:=========================================>           (89 + 24) / 113][Stage 134:==============================================>     (100 + 13) / 113][Stage 134:====================================================>(111 + 2) / 113]                                                                                [Stage 135:=====================================>               (80 + 34) / 114][Stage 135:==========================================>          (91 + 23) / 114][Stage 135:==============================================>      (99 + 15) / 114][Stage 135:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.926457015 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378261963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=================================>                   (73 + 42) / 115][Stage 136:=========================================>           (89 + 26) / 115][Stage 136:=============================================>      (100 + 15) / 115][Stage 136:===================================================> (112 + 3) / 115][Stage 136:====================================================>(113 + 2) / 115]                                                                                [Stage 137:==============================>                      (67 + 49) / 116][Stage 137:=====================================>               (83 + 33) / 116][Stage 137:============================================>        (97 + 19) / 116][Stage 137:===================================================> (112 + 4) / 116][Stage 137:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.120340065 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393060513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (61 + 59) / 120][Stage 138:===============================>                     (71 + 49) / 120][Stage 138:=====================================>               (86 + 34) / 120][Stage 138:===============================================>    (109 + 11) / 120]                                                                                [Stage 139:==========================>                          (61 + 60) / 121][Stage 139:===============================>                     (71 + 50) / 121][Stage 139:======================================>              (88 + 33) / 121][Stage 139:=================================================>   (112 + 9) / 121][Stage 139:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.257208463 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370213517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==============================>                      (66 + 49) / 115][Stage 140:===================================>                 (78 + 37) / 115][Stage 140:===========================================>         (94 + 21) / 115][Stage 140:=================================================>   (107 + 8) / 115]                                                                                [Stage 141:=================================>                   (74 + 42) / 116][Stage 141:=======================================>             (86 + 30) / 116][Stage 141:===============================================>    (105 + 11) / 116][Stage 141:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.769525834 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384302825 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:============================>                        (60 + 53) / 113][Stage 142:================================>                    (70 + 43) / 113][Stage 142:============================================>        (94 + 19) / 113][Stage 142:=================================================>   (105 + 8) / 113][Stage 142:====================================================>(112 + 1) / 113]                                                                                [Stage 143:=============================>                       (63 + 51) / 114][Stage 143:=================================>                   (72 + 42) / 114][Stage 143:============================================>        (95 + 19) / 114][Stage 143:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.225464039 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350888112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:===================================>                 (75 + 38) / 113][Stage 144:========================================>            (86 + 27) / 113][Stage 144:=============================================>       (96 + 17) / 113][Stage 144:==================================================>  (108 + 5) / 113][Stage 144:===================================================> (109 + 4) / 113]                                                                                [Stage 145:===================================>                 (76 + 38) / 114][Stage 145:=========================================>           (90 + 24) / 114][Stage 145:==============================================>     (103 + 11) / 114][Stage 145:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.979219137 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343282867 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:======================================>              (84 + 31) / 115][Stage 146:=========================================>           (90 + 25) / 115][Stage 146:=============================================>      (101 + 14) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:=====================================>               (83 + 33) / 116][Stage 147:=========================================>           (91 + 25) / 116][Stage 147:================================================>    (107 + 9) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.532302243 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33186381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:======================================>              (84 + 31) / 115][Stage 148:=========================================>           (91 + 24) / 115][Stage 148:===============================================>    (105 + 10) / 115][Stage 148:===================================================> (112 + 3) / 115]                                                                                [Stage 149:======================================>              (84 + 32) / 116][Stage 149:===========================================>         (95 + 21) / 116][Stage 149:==============================================>     (103 + 13) / 116][Stage 149:===================================================> (113 + 3) / 116][Stage 149:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.359273068 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353620082 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:===================================>                 (76 + 37) / 113][Stage 150:=======================================>             (84 + 29) / 113][Stage 150:===========================================>         (92 + 21) / 113][Stage 150:=================================================>   (105 + 8) / 113][Stage 150:===================================================> (109 + 4) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:=======================================>             (84 + 30) / 114][Stage 151:==========================================>          (92 + 22) / 114][Stage 151:================================================>    (105 + 9) / 114][Stage 151:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.25472834 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404164971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 60) / 120][Stage 152:===========================>                         (63 + 57) / 120][Stage 152:=====================================>               (85 + 35) / 120][Stage 152:=============================================>      (104 + 16) / 120][Stage 152:===================================================> (117 + 3) / 120]                                                                                [Stage 153:==========================>                          (61 + 60) / 121][Stage 153:============================>                        (64 + 57) / 121][Stage 153:===================================>                 (82 + 39) / 121][Stage 153:===============================================>    (111 + 10) / 121][Stage 153:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.158032978 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 166 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384238985 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (59 + 54) / 113][Stage 154:============================>                        (61 + 52) / 113][Stage 154:==================================>                  (73 + 40) / 113][Stage 154:==========================================>          (91 + 22) / 113][Stage 154:=================================================>   (106 + 7) / 113]                                                                                [Stage 155:============================>                        (61 + 53) / 114][Stage 155:=================================>                   (72 + 42) / 114][Stage 155:============================================>        (95 + 19) / 114][Stage 155:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.077939111 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396067684 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 60) / 120][Stage 156:===========================>                         (63 + 57) / 120][Stage 156:================================>                    (73 + 47) / 120][Stage 156:============================================>       (102 + 18) / 120]                                                                                [Stage 157:==========================>                          (61 + 60) / 121][Stage 157:=============================>                       (67 + 54) / 121][Stage 157:======================================>              (89 + 32) / 121][Stage 157:==============================================>     (109 + 12) / 121][Stage 157:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.372974999 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33193313 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (81 + 34) / 115][Stage 158:========================================>            (88 + 27) / 115][Stage 158:==============================================>     (102 + 13) / 115][Stage 158:===================================================> (112 + 3) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=====================================>               (82 + 34) / 116][Stage 159:===========================================>         (96 + 20) / 116][Stage 159:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.579631687 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 4  OR  partitionIndex = 5 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394995341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (61 + 60) / 121][Stage 160:===============================>                     (71 + 50) / 121][Stage 160:=======================================>             (90 + 31) / 121][Stage 160:=============================================>      (106 + 15) / 121][Stage 160:====================================================>(119 + 2) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:===========================>                         (64 + 58) / 122][Stage 161:==================================>                  (79 + 43) / 122][Stage 161:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 3.112935671 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482056852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:====================================>                (80 + 35) / 115][Stage 162:=========================================>           (90 + 25) / 115][Stage 162:=================================================>   (108 + 7) / 115]                                                                                [Stage 163:=======================================>             (86 + 30) / 116][Stage 163:==========================================>          (93 + 23) / 116][Stage 163:=================================================>   (109 + 7) / 116][Stage 163:==================================================>  (110 + 6) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.854467987 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.335585603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=========================================>           (91 + 24) / 115][Stage 164:==============================================>     (102 + 13) / 115][Stage 164:==================================================>  (110 + 5) / 115][Stage 164:===================================================> (112 + 3) / 115][Stage 164:====================================================>(114 + 1) / 115]                                                                                [Stage 165:=======================================>             (86 + 30) / 116][Stage 165:==========================================>          (93 + 23) / 116][Stage 165:===============================================>    (105 + 11) / 116][Stage 165:===================================================> (113 + 3) / 116][Stage 165:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.426728562 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387648217 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:=============================>                       (66 + 54) / 120][Stage 166:====================================>                (83 + 37) / 120][Stage 166:===============================================>    (109 + 11) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:==============================>                      (69 + 52) / 121][Stage 167:=======================================>             (91 + 30) / 121][Stage 167:===============================================>    (110 + 11) / 121]                                                                                Time elapsed: 3.053974877 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 219  OR  partitionIndex = 233 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408687348 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:=============================>                       (67 + 53) / 120][Stage 168:======================================>              (87 + 33) / 120][Stage 168:=============================================>      (106 + 14) / 120][Stage 168:====================================================>(118 + 2) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:=============================>                       (68 + 53) / 121][Stage 169:====================================>                (84 + 37) / 121][Stage 169:===========================================>         (99 + 22) / 121][Stage 169:===================================================> (118 + 3) / 121][Stage 169:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.242297248 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528415868 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (61 + 60) / 121][Stage 170:===============================>                     (72 + 49) / 121][Stage 170:===========================================>        (102 + 19) / 121][Stage 170:==================================================>  (116 + 5) / 121]                                                                                [Stage 171:==========================>                          (61 + 61) / 122][Stage 171:==============================>                      (70 + 52) / 122][Stage 171:=====================================>               (87 + 35) / 122][Stage 171:===============================================>    (112 + 10) / 122][Stage 171:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 2.992710494 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381051715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=============================>                       (62 + 51) / 113][Stage 172:=================================>                   (72 + 41) / 113][Stage 172:========================================>            (86 + 27) / 113][Stage 172:=================================================>   (106 + 7) / 113]                                                                                [Stage 173:=============================>                       (63 + 51) / 114][Stage 173:====================================>                (79 + 35) / 114][Stage 173:==========================================>          (92 + 22) / 114][Stage 173:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.168447202 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391156169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==========================>                          (60 + 60) / 120][Stage 174:===========================>                         (63 + 57) / 120][Stage 174:===================================>                 (80 + 40) / 120][Stage 174:=============================================>      (106 + 14) / 120][Stage 174:====================================================>(118 + 2) / 120]                                                                                [Stage 175:==========================>                          (61 + 60) / 121][Stage 175:===============================>                     (71 + 50) / 121][Stage 175:========================================>            (92 + 29) / 121][Stage 175:=================================================>   (112 + 9) / 121][Stage 175:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.095548919 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380062232 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:===========================>                         (58 + 55) / 113][Stage 176:==============================>                      (66 + 47) / 113][Stage 176:========================================>            (86 + 27) / 113][Stage 176:=================================================>   (106 + 7) / 113]                                                                                [Stage 177:============================>                        (62 + 52) / 114][Stage 177:=================================>                   (73 + 41) / 114][Stage 177:=========================================>           (90 + 24) / 114][Stage 177:==================================================>  (108 + 6) / 114][Stage 177:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.043796768 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370817441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:=============================>                       (64 + 51) / 115][Stage 178:================================>                    (70 + 45) / 115][Stage 178:=======================================>             (86 + 29) / 115][Stage 178:=============================================>      (101 + 14) / 115][Stage 178:=================================================>   (107 + 8) / 115][Stage 178:====================================================>(113 + 2) / 115]                                                                                [Stage 179:=================================>                   (74 + 42) / 116][Stage 179:===========================================>         (95 + 21) / 116][Stage 179:===============================================>    (105 + 11) / 116][Stage 179:===================================================> (112 + 4) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.349664772 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.333037974 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:====================================>                (80 + 35) / 115][Stage 180:===========================================>         (95 + 20) / 115][Stage 180:================================================>    (106 + 9) / 115][Stage 180:===================================================> (112 + 3) / 115]                                                                                [Stage 181:======================================>              (84 + 32) / 116][Stage 181:===========================================>         (95 + 21) / 116][Stage 181:===============================================>    (105 + 11) / 116]                                                                                Time elapsed: 2.752758955 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373650911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:======================================>              (83 + 32) / 115][Stage 182:==========================================>          (93 + 22) / 115][Stage 182:=================================================>   (107 + 8) / 115][Stage 182:====================================================>(113 + 2) / 115]                                                                                [Stage 183:======================================>              (85 + 31) / 116][Stage 183:========================================>            (89 + 27) / 116][Stage 183:=============================================>       (99 + 17) / 116][Stage 183:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.663790958 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 47  OR  partitionIndex = 48 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378138966 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==================================>                  (74 + 41) / 115][Stage 184:===========================================>         (95 + 20) / 115][Stage 184:=================================================>   (108 + 7) / 115][Stage 184:====================================================>(113 + 2) / 115]                                                                                [Stage 185:===================================>                 (77 + 39) / 116][Stage 185:=========================================>           (91 + 25) / 116][Stage 185:===============================================>    (106 + 10) / 116][Stage 185:===================================================> (113 + 3) / 116][Stage 185:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.701423793 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338190472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (81 + 34) / 115][Stage 186:========================================>            (88 + 27) / 115][Stage 186:===============================================>    (105 + 10) / 115][Stage 186:===================================================> (111 + 4) / 115]                                                                                [Stage 187:=====================================>               (83 + 33) / 116][Stage 187:==========================================>          (94 + 22) / 116][Stage 187:=================================================>   (108 + 8) / 116][Stage 187:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.573417217 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 127  OR  partitionIndex = 141 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364621841 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (74 + 44) / 118][Stage 188:===================================>                 (80 + 38) / 118][Stage 188:============================================>       (101 + 17) / 118][Stage 188:===================================================> (115 + 3) / 118][Stage 188:====================================================>(117 + 1) / 118]                                                                                [Stage 189:================================>                    (73 + 46) / 119][Stage 189:====================================>                (81 + 38) / 119][Stage 189:==========================================>          (96 + 23) / 119][Stage 189:================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.131424646 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40308657 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:===========================>                         (62 + 59) / 121][Stage 190:===============================>                     (73 + 48) / 121][Stage 190:==========================================>          (96 + 25) / 121][Stage 190:==================================================>  (115 + 6) / 121][Stage 190:====================================================>(120 + 1) / 121]                                                                                [Stage 191:==========================>                          (62 + 60) / 122][Stage 191:============================>                        (66 + 56) / 122][Stage 191:==================================>                  (80 + 42) / 122][Stage 191:===========================================>        (101 + 21) / 122][Stage 191:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.1591548 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359928345 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:=================================>                   (75 + 43) / 118][Stage 192:======================================>              (86 + 32) / 118][Stage 192:=============================================>      (103 + 15) / 118][Stage 192:=================================================>   (111 + 7) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:=====================================>               (84 + 35) / 119][Stage 193:=============================================>      (103 + 16) / 119][Stage 193:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.981623927 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373719371 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (73 + 45) / 118][Stage 194:====================================>                (81 + 37) / 118][Stage 194:============================================>        (99 + 19) / 118][Stage 194:===================================================> (114 + 4) / 118]                                                                                [Stage 195:==================================>                  (77 + 42) / 119][Stage 195:=======================================>             (89 + 30) / 119][Stage 195:=============================================>      (104 + 15) / 119][Stage 195:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.046063783 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410580835 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (60 + 61) / 121][Stage 196:==========================>                          (61 + 60) / 121][Stage 196:==================================>                  (78 + 43) / 121][Stage 196:===========================================>        (102 + 19) / 121][Stage 196:=================================================>   (113 + 8) / 121]                                                                                [Stage 197:==========================>                          (61 + 61) / 122][Stage 197:===========================>                         (64 + 58) / 122][Stage 197:==================================>                  (80 + 42) / 122][Stage 197:=============================================>      (107 + 15) / 122]                                                                                Time elapsed: 2.982899172 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.412311261 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===========================>                         (58 + 55) / 113][Stage 198:============================>                        (60 + 53) / 113][Stage 198:================================>                    (70 + 43) / 113][Stage 198:=====================================>               (81 + 32) / 113][Stage 198:=================================================>   (106 + 7) / 113]                                                                                [Stage 199:============================>                        (62 + 52) / 114][Stage 199:======================================>              (83 + 31) / 114][Stage 199:==============================================>     (102 + 12) / 114][Stage 199:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.019831797 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58  OR  partitionIndex = 44 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 58  OR  partitionIndex = 44 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408267488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:==========================>                          (61 + 60) / 121][Stage 200:==============================>                      (70 + 51) / 121][Stage 200:======================================>              (87 + 34) / 121][Stage 200:===========================================>        (102 + 19) / 121]                                                                                [Stage 201:==========================>                          (61 + 61) / 122][Stage 201:=============================>                       (67 + 55) / 122][Stage 201:=====================================>               (87 + 35) / 122][Stage 201:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.009551363 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/22 06:45:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:40142) dropped. RpcEnv already stopped.
17/05/22 06:45:04 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.43:40142) dropped. RpcEnv already stopped.

real	10m1.218s
user	11m37.952s
sys	0m37.144s
