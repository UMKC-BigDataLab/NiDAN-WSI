Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 00:10:50 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 00:11:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 00:11:04 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 00:11:05 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 00:11:07 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 00:11:17 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522001106-0393).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.3822128 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:=======================>                               (50 + 65) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:=========================================>             (86 + 29) / 115][Stage 0:==============================================>        (97 + 18) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:===================================================>   (108 + 7) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==========================>                            (55 + 61) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:====================================>                  (77 + 39) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:==============================================>        (98 + 18) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:===================================================>   (109 + 7) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.865698483 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 125  OR  partitionIndex = 139 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.730533895 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:================>                                      (34 + 79) / 113][Stage 2:==================>                                    (37 + 76) / 113][Stage 2:====================>                                  (43 + 70) / 113][Stage 2:============================>                          (59 + 54) / 113][Stage 2:==============================>                        (62 + 51) / 113][Stage 2:=================================>                     (69 + 44) / 113][Stage 2:======================================>                (79 + 34) / 113][Stage 2:=============================================>         (93 + 20) / 113][Stage 2:==============================================>        (96 + 17) / 113][Stage 2:====================================================>  (108 + 5) / 113]                                                                                [Stage 3:===========================>                           (57 + 57) / 114][Stage 3:============================>                          (59 + 55) / 114][Stage 3:==============================>                        (63 + 51) / 114][Stage 3:==================================>                    (72 + 42) / 114][Stage 3:============================================>          (93 + 21) / 114][Stage 3:===================================================>   (106 + 8) / 114][Stage 3:======================================================>(112 + 2) / 114][Stage 3:======================================================>(113 + 1) / 114]                                                                                Time elapsed: 5.015086248 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.654646798 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:===========================>                           (56 + 57) / 113][Stage 4:============================>                          (58 + 55) / 113][Stage 4:==============================>                        (63 + 50) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:=========================================>             (85 + 28) / 113][Stage 4:==================================================>    (104 + 9) / 113][Stage 4:====================================================>  (107 + 6) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:=============================>                         (62 + 52) / 114][Stage 5:==================================>                    (72 + 42) / 114][Stage 5:===========================================>           (91 + 23) / 114][Stage 5:==================================================>    (105 + 9) / 114][Stage 5:=====================================================> (110 + 4) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 5.00113922 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.718349256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:==========================>                            (59 + 62) / 121][Stage 6:===========================>                           (60 + 61) / 121][Stage 6:=============================>                         (65 + 56) / 121][Stage 6:===================================>                   (78 + 43) / 121][Stage 6:===========================================>           (96 + 25) / 121][Stage 6:=================================================>    (110 + 11) / 121][Stage 6:======================================================>(119 + 2) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:==============================>                        (68 + 54) / 122][Stage 7:=======================================>               (87 + 35) / 122][Stage 7:=============================================>        (103 + 19) / 122][Stage 7:=================================================>    (112 + 10) / 122][Stage 7:=====================================================> (119 + 3) / 122][Stage 7:======================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.251909687 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527179325 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (78 + 37) / 115][Stage 8:========================================>              (84 + 31) / 115][Stage 8:============================================>          (94 + 21) / 115][Stage 8:================================================>     (104 + 11) / 115][Stage 8:====================================================>  (110 + 5) / 115]                                                                                [Stage 9:=======================================>               (83 + 33) / 116][Stage 9:==========================================>            (89 + 27) / 116][Stage 9:===============================================>      (101 + 15) / 116][Stage 9:================================================>     (105 + 11) / 116][Stage 9:==================================================>    (107 + 9) / 116][Stage 9:====================================================>  (110 + 6) / 116][Stage 9:====================================================>  (111 + 5) / 116][Stage 9:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.93505037 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.600051787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (59 + 61) / 120][Stage 10:===========================>                          (60 + 60) / 120][Stage 10:============================>                         (63 + 57) / 120][Stage 10:==================================>                   (77 + 43) / 120][Stage 10:========================================>             (89 + 31) / 120][Stage 10:==============================================>      (105 + 15) / 120][Stage 10:====================================================> (117 + 3) / 120]                                                                                [Stage 11:===========================>                          (61 + 60) / 121][Stage 11:===============================>                      (71 + 50) / 121][Stage 11:======================================>               (87 + 34) / 121][Stage 11:============================================>         (99 + 22) / 121][Stage 11:===============================================>     (108 + 13) / 121][Stage 11:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.894172227 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 160 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 160 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.585287384 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===========================>                          (60 + 60) / 120][Stage 12:===========================>                          (62 + 58) / 120][Stage 12:===================================>                  (79 + 41) / 120][Stage 12:========================================>             (91 + 29) / 120][Stage 12:================================================>    (109 + 11) / 120][Stage 12:=====================================================>(119 + 1) / 120]                                                                                [Stage 13:===========================>                          (61 + 60) / 121][Stage 13:=============================>                        (67 + 54) / 121][Stage 13:==================================>                   (78 + 43) / 121][Stage 13:======================================>               (86 + 35) / 121][Stage 13:============================================>        (101 + 20) / 121][Stage 13:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.679190995 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518374707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:============================>                         (59 + 54) / 113][Stage 14:=============================>                        (62 + 51) / 113][Stage 14:=====================================>                (78 + 35) / 113][Stage 14:=============================================>        (96 + 17) / 113][Stage 14:=================================================>    (104 + 9) / 113]                                                                                [Stage 15:===========================>                          (59 + 55) / 114][Stage 15:================================>                     (68 + 46) / 114][Stage 15:======================================>               (81 + 33) / 114][Stage 15:==============================================>       (98 + 16) / 114][Stage 15:==================================================>   (106 + 8) / 114][Stage 15:====================================================> (110 + 4) / 114][Stage 15:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.902097467 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518704687 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:===========================>                          (58 + 55) / 113][Stage 16:==============================>                       (64 + 49) / 113][Stage 16:=====================================>                (79 + 34) / 113][Stage 16:=============================================>        (96 + 17) / 113][Stage 16:====================================================> (110 + 3) / 113]                                                                                [Stage 17:============================>                         (60 + 54) / 114][Stage 17:================================>                     (69 + 45) / 114][Stage 17:=========================================>            (88 + 26) / 114][Stage 17:=================================================>    (105 + 9) / 114][Stage 17:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.43040846 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.531610273 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (58 + 55) / 113][Stage 18:=============================>                        (61 + 52) / 113][Stage 18:===================================>                  (75 + 38) / 113][Stage 18:===========================================>          (91 + 22) / 113][Stage 18:===================================================>  (108 + 5) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:============================>                         (61 + 53) / 114][Stage 19:================================>                     (68 + 46) / 114][Stage 19:=============================================>        (95 + 19) / 114][Stage 19:===================================================>  (108 + 6) / 114][Stage 19:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.497384066 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.562927862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:==============================>                       (67 + 53) / 120][Stage 20:====================================>                 (82 + 38) / 120][Stage 20:=============================================>       (104 + 16) / 120][Stage 20:====================================================> (117 + 3) / 120]                                                                                [Stage 21:===========================>                          (61 + 60) / 121][Stage 21:===============================>                      (70 + 51) / 121][Stage 21:=======================================>              (88 + 33) / 121][Stage 21:================================================>    (111 + 10) / 121][Stage 21:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.45353196 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44865087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:=================================>                    (71 + 42) / 113][Stage 22:=======================================>              (82 + 31) / 113][Stage 22:===========================================>          (92 + 21) / 113][Stage 22:==============================================>       (97 + 16) / 113][Stage 22:===================================================>  (108 + 5) / 113][Stage 22:====================================================> (110 + 3) / 113]                                                                                [Stage 23:======================================>               (82 + 32) / 114][Stage 23:==========================================>           (90 + 24) / 114][Stage 23:==============================================>       (99 + 15) / 114][Stage 23:====================================================> (110 + 4) / 114][Stage 23:=====================================================>(112 + 2) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.004426648 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417624703 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:=====================================>                (80 + 35) / 115][Stage 24:=========================================>            (89 + 26) / 115][Stage 24:==============================================>       (99 + 16) / 115][Stage 24:====================================================> (111 + 4) / 115][Stage 24:=====================================================>(114 + 1) / 115]                                                                                [Stage 25:=====================================>                (81 + 35) / 116][Stage 25:========================================>             (87 + 29) / 116][Stage 25:=============================================>        (98 + 18) / 116][Stage 25:===============================================>     (104 + 12) / 116][Stage 25:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.291996106 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489780885 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (58 + 55) / 113][Stage 26:============================>                         (59 + 54) / 113][Stage 26:==================================>                   (73 + 40) / 113][Stage 26:===========================================>          (92 + 21) / 113][Stage 26:=================================================>    (104 + 9) / 113][Stage 26:===================================================>  (107 + 6) / 113][Stage 26:=====================================================>(112 + 1) / 113]                                                                                [Stage 27:=============================>                        (63 + 51) / 114][Stage 27:====================================>                 (78 + 36) / 114][Stage 27:==============================================>       (99 + 15) / 114][Stage 27:==================================================>   (107 + 7) / 114][Stage 27:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.783079497 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450895693 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=================================>                    (71 + 42) / 113][Stage 28:========================================>             (85 + 28) / 113][Stage 28:===========================================>          (91 + 22) / 113][Stage 28:===============================================>     (101 + 12) / 113][Stage 28:===================================================>  (108 + 5) / 113][Stage 28:=====================================================>(112 + 1) / 113]                                                                                [Stage 29:====================================>                 (77 + 37) / 114][Stage 29:==========================================>           (90 + 24) / 114][Stage 29:==============================================>      (101 + 13) / 114][Stage 29:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.101789242 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.506805011 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (60 + 61) / 121][Stage 30:=============================>                        (65 + 56) / 121][Stage 30:==================================>                   (78 + 43) / 121][Stage 30:===========================================>         (100 + 21) / 121][Stage 30:===================================================>  (115 + 6) / 121][Stage 30:====================================================> (118 + 3) / 121]                                                                                [Stage 31:===========================>                          (63 + 59) / 122][Stage 31:===================================>                  (81 + 41) / 122][Stage 31:===========================================>         (100 + 22) / 122][Stage 31:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.445960731 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.481279624 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:============================>                         (60 + 53) / 113][Stage 32:================================>                     (69 + 44) / 113][Stage 32:=========================================>            (87 + 26) / 113][Stage 32:================================================>    (103 + 10) / 113][Stage 32:====================================================> (110 + 3) / 113]                                                                                [Stage 33:============================>                         (61 + 53) / 114][Stage 33:=================================>                    (70 + 44) / 114][Stage 33:=========================================>            (88 + 26) / 114][Stage 33:================================================>    (104 + 10) / 114]                                                                                Time elapsed: 3.314281258 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 14  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414182905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (81 + 34) / 115][Stage 34:==========================================>           (90 + 25) / 115][Stage 34:==============================================>       (99 + 16) / 115][Stage 34:==================================================>   (107 + 8) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:======================================>               (83 + 33) / 116][Stage 35:=============================================>        (98 + 18) / 116][Stage 35:==================================================>   (109 + 7) / 116][Stage 35:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.506001081 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 128 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 232  OR  partitionIndex = 128 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.632871193 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:============================>                         (63 + 58) / 121][Stage 36:================================>                     (73 + 48) / 121][Stage 36:=========================================>            (93 + 28) / 121][Stage 36:===================================================>  (115 + 6) / 121][Stage 36:=====================================================>(120 + 1) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:=============================>                        (66 + 56) / 122][Stage 37:===================================>                  (81 + 41) / 122][Stage 37:============================================>        (103 + 19) / 122][Stage 37:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.299139565 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504659014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (61 + 59) / 120][Stage 38:==============================>                       (67 + 53) / 120][Stage 38:===================================>                  (79 + 41) / 120][Stage 38:============================================>         (98 + 22) / 120][Stage 38:====================================================> (116 + 4) / 120]                                                                                [Stage 39:===========================>                          (62 + 59) / 121][Stage 39:=================================>                    (76 + 45) / 121][Stage 39:============================================>        (101 + 20) / 121][Stage 39:=====================================================>(119 + 2) / 121][Stage 39:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.327568 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435337014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:================================>                     (72 + 46) / 118][Stage 40:=====================================>                (83 + 35) / 118][Stage 40:===========================================>          (94 + 24) / 118][Stage 40:==============================================>      (104 + 14) / 118][Stage 40:=====================================================>(116 + 2) / 118]                                                                                [Stage 41:=================================>                    (73 + 46) / 119][Stage 41:==================================>                   (77 + 42) / 119][Stage 41:======================================>               (84 + 35) / 119][Stage 41:============================================>         (99 + 20) / 119][Stage 41:==================================================>   (112 + 7) / 119][Stage 41:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.570727362 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.586486701 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:================================>                     (70 + 45) / 115][Stage 42:======================================>               (81 + 34) / 115][Stage 42:==============================================>      (100 + 15) / 115][Stage 42:=====================================================>(114 + 1) / 115]                                                                                [Stage 43:===================================>                  (77 + 39) / 116][Stage 43:==========================================>           (92 + 24) / 116][Stage 43:==================================================>   (109 + 7) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.818922394 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 152  OR  partitionIndex = 153 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408321827 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:==================================>                   (72 + 41) / 113][Stage 44:=====================================>                (79 + 34) / 113][Stage 44:============================================>         (94 + 19) / 113][Stage 44:=================================================>    (104 + 9) / 113][Stage 44:===================================================>  (108 + 5) / 113][Stage 44:=====================================================>(112 + 1) / 113]                                                                                [Stage 45:=======================================>              (83 + 31) / 114][Stage 45:===========================================>          (91 + 23) / 114][Stage 45:==============================================>      (100 + 14) / 114][Stage 45:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.218812024 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44639352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:===========================>                          (58 + 55) / 113][Stage 46:============================>                         (60 + 53) / 113][Stage 46:===================================>                  (75 + 38) / 113][Stage 46:==============================================>       (98 + 15) / 113][Stage 46:====================================================> (109 + 4) / 113]                                                                                [Stage 47:============================>                         (60 + 54) / 114][Stage 47:================================>                     (69 + 45) / 114][Stage 47:========================================>             (85 + 29) / 114][Stage 47:===============================================>     (103 + 11) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.331489965 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470729928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (58 + 55) / 113][Stage 48:===============================>                      (65 + 48) / 113][Stage 48:=========================================>            (86 + 27) / 113][Stage 48:==============================================>       (97 + 16) / 113][Stage 48:=====================================================>(111 + 2) / 113]                                                                                [Stage 49:===========================>                          (59 + 55) / 114][Stage 49:=================================>                    (70 + 44) / 114][Stage 49:========================================>             (85 + 29) / 114][Stage 49:==================================================>   (107 + 7) / 114][Stage 49:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.470280354 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485424854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (60 + 60) / 120][Stage 50:===============================>                      (69 + 51) / 120][Stage 50:==========================================>           (94 + 26) / 120][Stage 50:==================================================>   (112 + 8) / 120]                                                                                [Stage 51:===========================>                          (61 + 60) / 121][Stage 51:==============================>                       (68 + 53) / 121][Stage 51:=====================================>                (85 + 36) / 121][Stage 51:===================================================>  (115 + 6) / 121][Stage 51:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.161000723 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43951372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (58 + 55) / 113][Stage 52:===============================>                      (66 + 47) / 113][Stage 52:==========================================>           (88 + 25) / 113][Stage 52:=================================================>    (104 + 9) / 113][Stage 52:====================================================> (109 + 4) / 113]                                                                                [Stage 53:===========================>                          (58 + 56) / 114][Stage 53:============================>                         (60 + 54) / 114][Stage 53:=======================================>              (83 + 31) / 114][Stage 53:=============================================>        (97 + 17) / 114][Stage 53:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.335733544 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443195842 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:============================>                         (59 + 54) / 113][Stage 54:================================>                     (68 + 45) / 113][Stage 54:========================================>             (84 + 29) / 113][Stage 54:==============================================>       (97 + 16) / 113][Stage 54:====================================================> (109 + 4) / 113]                                                                                [Stage 55:============================>                         (61 + 53) / 114][Stage 55:===================================>                  (74 + 40) / 114][Stage 55:==========================================>           (90 + 24) / 114][Stage 55:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.185669202 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.476449553 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:=============================>                        (66 + 54) / 120][Stage 56:==================================>                   (77 + 43) / 120][Stage 56:==========================================>           (95 + 25) / 120][Stage 56:==================================================>   (112 + 8) / 120]                                                                                [Stage 57:============================>                         (63 + 58) / 121][Stage 57:===============================>                      (71 + 50) / 121][Stage 57:========================================>             (90 + 31) / 121][Stage 57:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.117349945 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446847085 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===========================>                          (60 + 60) / 120][Stage 58:============================>                         (64 + 56) / 120][Stage 58:=================================>                    (75 + 45) / 120][Stage 58:==========================================>           (94 + 26) / 120][Stage 58:=================================================>    (111 + 9) / 120][Stage 58:=====================================================>(119 + 1) / 120]                                                                                [Stage 59:===========================>                          (62 + 59) / 121][Stage 59:=============================>                        (65 + 56) / 121][Stage 59:====================================>                 (82 + 39) / 121][Stage 59:============================================>        (102 + 19) / 121][Stage 59:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.33101002 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437255622 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=================================>                    (73 + 45) / 118][Stage 60:====================================>                 (79 + 39) / 118][Stage 60:==========================================>           (92 + 26) / 118][Stage 60:=============================================>       (101 + 17) / 118][Stage 60:===================================================>  (113 + 5) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:=================================>                    (74 + 45) / 119][Stage 61:=====================================>                (83 + 36) / 119][Stage 61:==========================================>           (93 + 26) / 119][Stage 61:=================================================>    (110 + 9) / 119][Stage 61:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.565314442 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 96  OR  partitionIndex = 97 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.462439811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:============================>                         (63 + 57) / 120][Stage 62:=================================>                    (74 + 46) / 120][Stage 62:=========================================>            (92 + 28) / 120][Stage 62:================================================>    (110 + 10) / 120][Stage 62:====================================================> (117 + 3) / 120]                                                                                [Stage 63:===========================>                          (62 + 59) / 121][Stage 63:===============================>                      (70 + 51) / 121][Stage 63:==========================================>           (95 + 26) / 121][Stage 63:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.307253044 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 37  OR  partitionIndex = 51 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419838018 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (66 + 49) / 115][Stage 64:====================================>                 (77 + 38) / 115][Stage 64:=============================================>        (97 + 18) / 115][Stage 64:====================================================> (112 + 3) / 115]                                                                                [Stage 65:===================================>                  (77 + 39) / 116][Stage 65:=============================================>        (98 + 18) / 116][Stage 65:===================================================>  (110 + 6) / 116][Stage 65:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.177706727 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408680395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==================================>                   (73 + 40) / 113][Stage 66:=======================================>              (83 + 30) / 113][Stage 66:==========================================>           (89 + 24) / 113][Stage 66:===============================================>     (101 + 12) / 113][Stage 66:=====================================================>(112 + 1) / 113]                                                                                [Stage 67:====================================>                 (77 + 37) / 114][Stage 67:========================================>             (86 + 28) / 114][Stage 67:=============================================>        (97 + 17) / 114][Stage 67:================================================>    (104 + 10) / 114][Stage 67:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.002953955 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 92  OR  partitionIndex = 93 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477257679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:====================================>                 (77 + 36) / 113][Stage 68:==========================================>           (88 + 25) / 113][Stage 68:============================================>         (94 + 19) / 113][Stage 68:===================================================>  (107 + 6) / 113][Stage 68:=====================================================>(111 + 2) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:=======================================>              (83 + 31) / 114][Stage 69:=============================================>        (96 + 18) / 114][Stage 69:=================================================>    (105 + 9) / 114][Stage 69:====================================================> (111 + 3) / 114][Stage 69:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.459886213 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4177878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:================================>                     (72 + 46) / 118][Stage 70:==================================>                   (75 + 43) / 118][Stage 70:====================================>                 (80 + 38) / 118][Stage 70:============================================>         (97 + 21) / 118][Stage 70:==================================================>   (110 + 8) / 118][Stage 70:=====================================================>(117 + 1) / 118]                                                                                [Stage 71:=================================>                    (73 + 46) / 119][Stage 71:==================================>                   (77 + 42) / 119][Stage 71:====================================>                 (81 + 38) / 119][Stage 71:==========================================>           (93 + 26) / 119][Stage 71:===============================================>     (107 + 12) / 119][Stage 71:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.52335282 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 173  OR  partitionIndex = 174 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370305805 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (83 + 32) / 115][Stage 72:=============================================>        (96 + 19) / 115][Stage 72:==================================================>   (107 + 8) / 115][Stage 72:====================================================> (111 + 4) / 115]                                                                                [Stage 73:======================================>               (83 + 33) / 116][Stage 73:==========================================>           (92 + 24) / 116][Stage 73:===============================================>     (103 + 13) / 116][Stage 73:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.877972029 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418287781 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (60 + 60) / 120][Stage 74:===============================>                      (70 + 50) / 120][Stage 74:========================================>             (89 + 31) / 120][Stage 74:==============================================>      (105 + 15) / 120][Stage 74:====================================================> (117 + 3) / 120]                                                                                [Stage 75:===============================>                      (71 + 50) / 121][Stage 75:====================================>                 (82 + 39) / 121][Stage 75:===========================================>         (100 + 21) / 121][Stage 75:================================================>    (111 + 10) / 121][Stage 75:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.348294893 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.497668848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:======================================>               (80 + 33) / 113][Stage 76:===========================================>          (90 + 23) / 113][Stage 76:==============================================>      (100 + 13) / 113][Stage 76:====================================================> (109 + 4) / 113]                                                                                [Stage 77:========================================>             (86 + 28) / 114][Stage 77:==============================================>       (99 + 15) / 114][Stage 77:==================================================>   (106 + 8) / 114][Stage 77:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.879761578 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387449392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:===================================>                  (75 + 38) / 113][Stage 78:=========================================>            (87 + 26) / 113][Stage 78:============================================>         (93 + 20) / 113][Stage 78:==================================================>   (105 + 8) / 113][Stage 78:=====================================================>(111 + 2) / 113]                                                                                [Stage 79:=======================================>              (84 + 30) / 114][Stage 79:==============================================>      (100 + 14) / 114][Stage 79:==================================================>   (106 + 8) / 114][Stage 79:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.412820825 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.405097039 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:==============================>                       (63 + 50) / 113][Stage 80:=====================================>                (79 + 34) / 113][Stage 80:=============================================>        (95 + 18) / 113][Stage 80:====================================================> (110 + 3) / 113]                                                                                [Stage 81:============================>                         (60 + 54) / 114][Stage 81:===============================>                      (66 + 48) / 114][Stage 81:=====================================>                (79 + 35) / 114][Stage 81:================================================>    (104 + 10) / 114][Stage 81:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.098651244 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422964186 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (60 + 60) / 120][Stage 82:=============================>                        (66 + 54) / 120][Stage 82:====================================>                 (80 + 40) / 120][Stage 82:============================================>        (100 + 20) / 120][Stage 82:====================================================> (116 + 4) / 120]                                                                                [Stage 83:===========================>                          (61 + 60) / 121][Stage 83:================================>                     (73 + 48) / 121][Stage 83:===========================================>          (98 + 23) / 121][Stage 83:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.005940957 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422151626 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (58 + 55) / 113][Stage 84:============================>                         (59 + 54) / 113][Stage 84:=================================>                    (71 + 42) / 113][Stage 84:===========================================>          (92 + 21) / 113][Stage 84:====================================================> (110 + 3) / 113]                                                                                [Stage 85:=============================>                        (63 + 51) / 114][Stage 85:=====================================>                (80 + 34) / 114][Stage 85:=============================================>        (97 + 17) / 114][Stage 85:====================================================> (110 + 4) / 114][Stage 85:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.235652541 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398428518 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (58 + 55) / 113][Stage 86:============================>                         (60 + 53) / 113][Stage 86:=================================>                    (71 + 42) / 113][Stage 86:============================================>         (93 + 20) / 113]                                                                                [Stage 87:============================>                         (60 + 54) / 114][Stage 87:===============================>                      (67 + 47) / 114][Stage 87:========================================>             (85 + 29) / 114][Stage 87:=================================================>    (105 + 9) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.062211686 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410886883 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:============================>                         (60 + 53) / 113][Stage 88:===================================>                  (74 + 39) / 113][Stage 88:============================================>         (94 + 19) / 113][Stage 88:=================================================>    (104 + 9) / 113]                                                                                [Stage 89:===========================>                          (59 + 55) / 114][Stage 89:=================================>                    (70 + 44) / 114][Stage 89:==========================================>           (90 + 24) / 114][Stage 89:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.072178994 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394397898 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:=================================>                    (74 + 44) / 118][Stage 90:=====================================>                (81 + 37) / 118][Stage 90:========================================>             (88 + 30) / 118][Stage 90:==============================================>      (103 + 15) / 118][Stage 90:===================================================>  (113 + 5) / 118]                                                                                [Stage 91:=================================>                    (74 + 45) / 119][Stage 91:====================================>                 (81 + 38) / 119][Stage 91:===========================================>          (96 + 23) / 119][Stage 91:===================================================>  (113 + 6) / 119][Stage 91:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.541432283 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353281484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (83 + 32) / 115][Stage 92:========================================>             (86 + 29) / 115][Stage 92:================================================>    (105 + 10) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:========================================>             (87 + 29) / 116][Stage 93:=============================================>        (97 + 19) / 116][Stage 93:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.644838403 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421863311 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (60 + 60) / 120][Stage 94:==============================>                       (68 + 52) / 120][Stage 94:===================================>                  (78 + 42) / 120][Stage 94:========================================>             (91 + 29) / 120][Stage 94:===================================================>  (114 + 6) / 120]                                                                                [Stage 95:=============================>                        (67 + 54) / 121][Stage 95:====================================>                 (81 + 40) / 121][Stage 95:=============================================>       (103 + 18) / 121][Stage 95:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.041525368 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394190036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===========================>                          (58 + 55) / 113][Stage 96:==============================>                       (64 + 49) / 113][Stage 96:======================================>               (81 + 32) / 113][Stage 96:===========================================>          (91 + 22) / 113][Stage 96:===================================================>  (107 + 6) / 113]                                                                                [Stage 97:=============================>                        (62 + 52) / 114][Stage 97:===================================>                  (75 + 39) / 114][Stage 97:==========================================>           (90 + 24) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.070436888 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368682263 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===================================>                  (75 + 38) / 113][Stage 98:========================================>             (84 + 29) / 113][Stage 98:============================================>         (94 + 19) / 113][Stage 98:=================================================>    (104 + 9) / 113][Stage 98:====================================================> (109 + 4) / 113][Stage 98:=====================================================>(112 + 1) / 113]                                                                                [Stage 99:======================================>               (82 + 32) / 114][Stage 99:============================================>         (93 + 21) / 114][Stage 99:=================================================>    (105 + 9) / 114][Stage 99:=====================================================>(112 + 2) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.352608588 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.517605146 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:================================>                    (74 + 46) / 120][Stage 100:====================================>                (83 + 37) / 120][Stage 100:=============================================>      (105 + 15) / 120][Stage 100:====================================================>(119 + 1) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:=============================>                       (68 + 53) / 121][Stage 101:=======================================>             (91 + 30) / 121][Stage 101:===============================================>    (111 + 10) / 121][Stage 101:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.059934091 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 193  OR  partitionIndex = 207 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408168666 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:===========================>                         (59 + 54) / 113][Stage 102:==============================>                      (64 + 49) / 113][Stage 102:=====================================>               (80 + 33) / 113][Stage 102:=============================================>       (97 + 16) / 113][Stage 102:===================================================> (110 + 3) / 113]                                                                                [Stage 103:===========================>                         (60 + 54) / 114][Stage 103:====================================>                (78 + 36) / 114][Stage 103:==========================================>          (92 + 22) / 114][Stage 103:===============================================>    (104 + 10) / 114][Stage 103:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.245281318 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390827997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (58 + 55) / 113][Stage 104:===============================>                     (67 + 46) / 113][Stage 104:=========================================>           (88 + 25) / 113][Stage 104:===================================================> (110 + 3) / 113]                                                                                [Stage 105:=============================>                       (63 + 51) / 114][Stage 105:=================================>                   (73 + 41) / 114][Stage 105:=========================================>           (90 + 24) / 114][Stage 105:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.963596005 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 155  OR  partitionIndex = 169 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.386361034 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:=====================================>               (82 + 33) / 115][Stage 106:==========================================>          (92 + 23) / 115][Stage 106:=================================================>   (108 + 7) / 115][Stage 106:====================================================>(114 + 1) / 115]                                                                                [Stage 107:======================================>              (84 + 32) / 116][Stage 107:=========================================>           (91 + 25) / 116][Stage 107:=================================================>   (109 + 7) / 116][Stage 107:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.665511423 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 110  OR  partitionIndex = 96 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422923536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (61 + 59) / 120][Stage 108:==============================>                      (68 + 52) / 120][Stage 108:===================================>                 (81 + 39) / 120][Stage 108:=============================================>      (105 + 15) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:===============================>                     (71 + 50) / 121][Stage 109:========================================>            (92 + 29) / 121][Stage 109:==================================================>  (116 + 5) / 121][Stage 109:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.077893617 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389909177 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (59 + 54) / 113][Stage 110:=============================>                       (63 + 50) / 113][Stage 110:=====================================>               (81 + 32) / 113][Stage 110:=============================================>       (98 + 15) / 113][Stage 110:====================================================>(112 + 1) / 113]                                                                                [Stage 111:============================>                        (61 + 53) / 114][Stage 111:=================================>                   (71 + 43) / 114][Stage 111:=============================================>       (98 + 16) / 114][Stage 111:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.030625794 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 84  OR  partitionIndex = 70 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390180338 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:=============================>                       (63 + 50) / 113][Stage 112:=======================================>             (85 + 28) / 113][Stage 112:==============================================>     (102 + 11) / 113]                                                                                [Stage 113:===========================>                         (60 + 54) / 114][Stage 113:================================>                    (69 + 45) / 114][Stage 113:========================================>            (88 + 26) / 114][Stage 113:=================================================>   (107 + 7) / 114]                                                                                Time elapsed: 3.064437957 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399646525 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:==========================>                          (61 + 59) / 120][Stage 114:===============================>                     (71 + 49) / 120][Stage 114:======================================>              (88 + 32) / 120][Stage 114:=============================================>      (105 + 15) / 120][Stage 114:====================================================>(118 + 2) / 120]                                                                                [Stage 115:=============================>                       (68 + 53) / 121][Stage 115:===================================>                 (81 + 40) / 121][Stage 115:=============================================>      (105 + 16) / 121]                                                                                Time elapsed: 3.090047256 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 104  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341742392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:======================================>              (84 + 31) / 115][Stage 116:===========================================>         (95 + 20) / 115][Stage 116:================================================>    (106 + 9) / 115][Stage 116:===================================================> (112 + 3) / 115]                                                                                [Stage 117:========================================>            (88 + 28) / 116][Stage 117:==============================================>     (104 + 12) / 116][Stage 117:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.688399993 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33691795 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=====================================>               (81 + 34) / 115][Stage 118:======================================>              (84 + 31) / 115][Stage 118:===========================================>         (95 + 20) / 115][Stage 118:==================================================>  (109 + 6) / 115]                                                                                [Stage 119:=======================================>             (86 + 30) / 116][Stage 119:============================================>        (97 + 19) / 116][Stage 119:===================================================> (112 + 4) / 116][Stage 119:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.676084409 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400850007 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:==========================>                          (60 + 60) / 120][Stage 120:============================>                        (64 + 56) / 120][Stage 120:==================================>                  (77 + 43) / 120][Stage 120:=============================================>      (106 + 14) / 120][Stage 120:====================================================>(119 + 1) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:============================>                        (66 + 55) / 121][Stage 121:===================================>                 (80 + 41) / 121][Stage 121:===========================================>        (101 + 20) / 121][Stage 121:===================================================> (118 + 3) / 121][Stage 121:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.216170998 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392908162 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:==========================>                          (60 + 61) / 121][Stage 122:===============================>                     (71 + 50) / 121][Stage 122:==========================================>          (96 + 25) / 121][Stage 122:=================================================>   (114 + 7) / 121]                                                                                [Stage 123:==========================>                          (61 + 61) / 122][Stage 123:================================>                    (74 + 48) / 122][Stage 123:======================================>              (89 + 33) / 122][Stage 123:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 2.994380297 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 71  OR  partitionIndex = 85 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401559188 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:===========================>                         (59 + 54) / 113][Stage 124:=================================>                   (72 + 41) / 113][Stage 124:==========================================>          (91 + 22) / 113][Stage 124:==============================================>     (100 + 13) / 113][Stage 124:====================================================>(112 + 1) / 113]                                                                                [Stage 125:===========================>                         (60 + 54) / 114][Stage 125:===============================>                     (67 + 47) / 114][Stage 125:=======================================>             (85 + 29) / 114][Stage 125:==============================================>     (102 + 12) / 114][Stage 125:===================================================> (111 + 3) / 114][Stage 125:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.387517764 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354808042 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=================================>                   (72 + 41) / 113][Stage 126:======================================>              (83 + 30) / 113][Stage 126:============================================>        (94 + 19) / 113][Stage 126:==============================================>     (102 + 11) / 113][Stage 126:===================================================> (109 + 4) / 113]                                                                                [Stage 127:=====================================>               (80 + 34) / 114][Stage 127:=========================================>           (90 + 24) / 114][Stage 127:=============================================>      (100 + 14) / 114][Stage 127:==================================================>  (109 + 5) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.082129515 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 38  OR  partitionIndex = 39 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391519383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==============================>                      (66 + 49) / 115][Stage 128:===================================>                 (78 + 37) / 115][Stage 128:=============================================>      (100 + 15) / 115][Stage 128:===================================================> (111 + 4) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:================================>                    (71 + 45) / 116][Stage 129:======================================>              (84 + 32) / 116][Stage 129:=============================================>      (101 + 15) / 116][Stage 129:==================================================>  (111 + 5) / 116][Stage 129:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.414020728 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378919117 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=================================>                   (72 + 43) / 115][Stage 130:========================================>            (87 + 28) / 115][Stage 130:===================================================> (111 + 4) / 115]                                                                                [Stage 131:================================>                    (72 + 44) / 116][Stage 131:========================================>            (88 + 28) / 116][Stage 131:=============================================>      (101 + 15) / 116]                                                                                Time elapsed: 2.541413614 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353248382 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=====================================>               (79 + 34) / 113][Stage 132:=======================================>             (85 + 28) / 113][Stage 132:============================================>        (95 + 18) / 113][Stage 132:================================================>    (104 + 9) / 113][Stage 132:====================================================>(111 + 2) / 113]                                                                                [Stage 133:==================================>                  (75 + 39) / 114][Stage 133:=======================================>             (86 + 28) / 114][Stage 133:===========================================>         (94 + 20) / 114][Stage 133:================================================>    (105 + 9) / 114][Stage 133:===================================================> (111 + 3) / 114][Stage 133:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.510311427 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 202  OR  partitionIndex = 214 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413569517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:==============================>                      (70 + 50) / 120][Stage 134:=======================================>             (89 + 31) / 120][Stage 134:==================================================>  (115 + 5) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (66 + 55) / 121][Stage 135:===================================>                 (81 + 40) / 121][Stage 135:===========================================>        (102 + 19) / 121][Stage 135:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.957338041 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356264625 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==================================>                  (73 + 40) / 113][Stage 136:=======================================>             (85 + 28) / 113][Stage 136:============================================>        (95 + 18) / 113][Stage 136:=================================================>   (105 + 8) / 113]                                                                                [Stage 137:===================================>                 (77 + 37) / 114][Stage 137:=======================================>             (86 + 28) / 114][Stage 137:============================================>        (96 + 18) / 114][Stage 137:===============================================>    (104 + 10) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.651734385 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 147  OR  partitionIndex = 148 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.337189095 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (81 + 34) / 115][Stage 138:=========================================>           (90 + 25) / 115][Stage 138:==============================================>     (103 + 12) / 115][Stage 138:==================================================>  (109 + 6) / 115][Stage 138:====================================================>(113 + 2) / 115]                                                                                [Stage 139:=====================================>               (82 + 34) / 116][Stage 139:=========================================>           (90 + 26) / 116][Stage 139:=============================================>      (102 + 14) / 116][Stage 139:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.810691864 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355837806 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:=================================>                   (71 + 42) / 113][Stage 140:======================================>              (82 + 31) / 113][Stage 140:==========================================>          (91 + 22) / 113][Stage 140:==============================================>     (100 + 13) / 113][Stage 140:==================================================>  (108 + 5) / 113]                                                                                [Stage 141:======================================>              (82 + 32) / 114][Stage 141:==========================================>          (92 + 22) / 114][Stage 141:==============================================>      (99 + 15) / 114][Stage 141:==================================================>  (108 + 6) / 114][Stage 141:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.086894207 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398376591 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 61) / 121][Stage 142:============================>                        (65 + 56) / 121][Stage 142:========================================>            (93 + 28) / 121][Stage 142:==============================================>     (109 + 12) / 121][Stage 142:====================================================>(120 + 1) / 121]                                                                                [Stage 143:==========================>                          (61 + 61) / 122][Stage 143:============================>                        (66 + 56) / 122][Stage 143:===================================>                 (81 + 41) / 122][Stage 143:===========================================>        (103 + 19) / 122][Stage 143:==================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.18702719 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385273984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:=============================>                       (64 + 51) / 115][Stage 144:==================================>                  (74 + 41) / 115][Stage 144:=========================================>           (89 + 26) / 115][Stage 144:=================================================>   (107 + 8) / 115][Stage 144:====================================================>(114 + 1) / 115]                                                                                [Stage 145:==================================>                  (75 + 41) / 116][Stage 145:=======================================>             (86 + 30) / 116][Stage 145:============================================>        (98 + 18) / 116][Stage 145:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.739624734 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401189734 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:===========================>                         (62 + 58) / 120][Stage 146:=============================>                       (66 + 54) / 120][Stage 146:======================================>              (88 + 32) / 120][Stage 146:===================================================> (116 + 4) / 120]                                                                                [Stage 147:==========================>                          (61 + 60) / 121][Stage 147:=============================>                       (67 + 54) / 121][Stage 147:=====================================>               (85 + 36) / 121][Stage 147:===============================================>    (111 + 10) / 121][Stage 147:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.979828377 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.473645336 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===================================>                 (78 + 37) / 115][Stage 148:==========================================>          (92 + 23) / 115][Stage 148:================================================>    (106 + 9) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:===============================>                     (70 + 46) / 116][Stage 149:=====================================>               (81 + 35) / 116][Stage 149:==========================================>          (92 + 24) / 116][Stage 149:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.7391343 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351774506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:====================================>                (77 + 36) / 113][Stage 150:=========================================>           (88 + 25) / 113][Stage 150:==============================================>     (102 + 11) / 113][Stage 150:===================================================> (110 + 3) / 113][Stage 150:====================================================>(111 + 2) / 113]                                                                                [Stage 151:===================================>                 (77 + 37) / 114][Stage 151:========================================>            (88 + 26) / 114][Stage 151:=============================================>      (100 + 14) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.306716096 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 82  OR  partitionIndex = 94 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394808812 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:============================>                        (60 + 53) / 113][Stage 152:==============================>                      (65 + 48) / 113][Stage 152:======================================>              (83 + 30) / 113][Stage 152:=================================================>   (105 + 8) / 113][Stage 152:====================================================>(112 + 1) / 113]                                                                                [Stage 153:===========================>                         (59 + 55) / 114][Stage 153:=============================>                       (63 + 51) / 114][Stage 153:====================================>                (79 + 35) / 114][Stage 153:===============================================>    (104 + 10) / 114][Stage 153:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.177444024 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39146663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (59 + 54) / 113][Stage 154:============================>                        (61 + 52) / 113][Stage 154:====================================>                (77 + 36) / 113][Stage 154:=============================================>       (97 + 16) / 113][Stage 154:===================================================> (109 + 4) / 113]                                                                                [Stage 155:=============================>                       (63 + 51) / 114][Stage 155:===================================>                 (77 + 37) / 114][Stage 155:=============================================>      (100 + 14) / 114][Stage 155:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.105085206 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 113  OR  partitionIndex = 114 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359619732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==================================>                  (73 + 40) / 113][Stage 156:=======================================>             (85 + 28) / 113][Stage 156:=============================================>       (96 + 17) / 113][Stage 156:==================================================>  (107 + 6) / 113][Stage 156:====================================================>(112 + 1) / 113]                                                                                [Stage 157:=======================================>             (86 + 28) / 114][Stage 157:===========================================>         (94 + 20) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.047863395 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358889911 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:================================>                    (73 + 45) / 118][Stage 158:=====================================>               (83 + 35) / 118][Stage 158:===========================================>         (96 + 22) / 118][Stage 158:===============================================>    (108 + 10) / 118][Stage 158:====================================================>(116 + 2) / 118][Stage 158:====================================================>(117 + 1) / 118]                                                                                [Stage 159:================================>                    (73 + 46) / 119][Stage 159:================================>                    (74 + 45) / 119][Stage 159:========================================>            (91 + 28) / 119][Stage 159:==============================================>     (107 + 12) / 119][Stage 159:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.583651536 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383148987 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===========================>                         (59 + 54) / 113][Stage 160:============================>                        (60 + 53) / 113][Stage 160:====================================>                (77 + 36) / 113][Stage 160:=============================================>       (96 + 17) / 113]                                                                                [Stage 161:============================>                        (62 + 52) / 114][Stage 161:================================>                    (70 + 44) / 114][Stage 161:===========================================>         (94 + 20) / 114][Stage 161:=================================================>   (106 + 8) / 114][Stage 161:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.052603746 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370545319 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:>                                                      (0 + 0) / 118][Stage 162:================================>                    (72 + 46) / 118][Stage 162:===================================>                 (78 + 40) / 118][Stage 162:======================================>              (85 + 33) / 118][Stage 162:============================================>        (99 + 19) / 118][Stage 162:=================================================>   (111 + 7) / 118]                                                                                [Stage 163:================================>                    (74 + 45) / 119][Stage 163:===================================>                 (80 + 39) / 119][Stage 163:========================================>            (91 + 28) / 119][Stage 163:============================================>       (102 + 17) / 119][Stage 163:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.293124313 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.350304988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (81 + 32) / 113][Stage 164:=========================================>           (88 + 25) / 113][Stage 164:==============================================>     (101 + 12) / 113][Stage 164:===================================================> (109 + 4) / 113]                                                                                [Stage 165:====================================>                (79 + 35) / 114][Stage 165:==========================================>          (91 + 23) / 114][Stage 165:==============================================>     (102 + 12) / 114][Stage 165:====================================================>(112 + 2) / 114][Stage 165:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.315337631 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 215  OR  partitionIndex = 229 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352103529 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==================================>                  (73 + 40) / 113][Stage 166:=======================================>             (85 + 28) / 113][Stage 166:==============================================>      (99 + 14) / 113][Stage 166:==================================================>  (107 + 6) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===================================>                 (76 + 38) / 114][Stage 167:=========================================>           (89 + 25) / 114][Stage 167:============================================>        (95 + 19) / 114][Stage 167:=================================================>   (106 + 8) / 114][Stage 167:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 2.960805924 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356536852 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:======================================>              (84 + 31) / 115][Stage 168:=============================================>       (98 + 17) / 115][Stage 168:==================================================>  (110 + 5) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:======================================>              (84 + 32) / 116][Stage 169:=========================================>           (91 + 25) / 116][Stage 169:==============================================>     (104 + 12) / 116][Stage 169:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.807345496 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392178274 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (59 + 54) / 113][Stage 170:==============================>                      (65 + 48) / 113][Stage 170:====================================>                (78 + 35) / 113][Stage 170:==============================================>     (100 + 13) / 113][Stage 170:====================================================>(112 + 1) / 113]                                                                                [Stage 171:===========================>                         (60 + 54) / 114][Stage 171:==============================>                      (66 + 48) / 114][Stage 171:======================================>              (82 + 32) / 114][Stage 171:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 2.967806455 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370569222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:=================================>                   (74 + 44) / 118][Stage 172:====================================>                (82 + 36) / 118][Stage 172:=======================================>             (87 + 31) / 118][Stage 172:=============================================>      (104 + 14) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:================================>                    (74 + 45) / 119][Stage 173:=======================================>             (88 + 31) / 119][Stage 173:=============================================>      (103 + 16) / 119][Stage 173:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.288644931 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 160  OR  partitionIndex = 161 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.330645399 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=====================================>               (82 + 33) / 115][Stage 174:========================================>            (88 + 27) / 115][Stage 174:==============================================>     (103 + 12) / 115][Stage 174:===================================================> (111 + 4) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:=====================================>               (82 + 34) / 116][Stage 175:========================================>            (88 + 28) / 116][Stage 175:================================================>    (107 + 9) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.882304631 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388409834 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:>                                                      (0 + 0) / 120][Stage 176:==========================>                          (60 + 60) / 120][Stage 176:=============================>                       (67 + 53) / 120][Stage 176:=======================================>             (89 + 31) / 120][Stage 176:==============================================>     (108 + 12) / 120][Stage 176:====================================================>(119 + 1) / 120]                                                                                [Stage 177:==========================>                          (61 + 60) / 121][Stage 177:=============================>                       (67 + 54) / 121][Stage 177:=================================>                   (76 + 45) / 121][Stage 177:==========================================>          (97 + 24) / 121][Stage 177:===================================================> (117 + 4) / 121][Stage 177:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.406752911 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382978971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:==============================>                      (66 + 47) / 113][Stage 178:======================================>              (83 + 30) / 113][Stage 178:==================================================>  (107 + 6) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:=============================>                       (64 + 50) / 114][Stage 179:===================================>                 (77 + 37) / 114][Stage 179:=============================================>      (100 + 14) / 114][Stage 179:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.23350485 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358325957 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:====================================>                (78 + 35) / 113][Stage 180:=============================================>       (96 + 17) / 113][Stage 180:==============================================>     (101 + 12) / 113][Stage 180:==================================================>  (107 + 6) / 113][Stage 180:====================================================>(112 + 1) / 113]                                                                                [Stage 181:=====================================>               (80 + 34) / 114][Stage 181:===========================================>         (93 + 21) / 114][Stage 181:===============================================>    (104 + 10) / 114][Stage 181:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.070849996 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417179032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:============================>                        (61 + 52) / 113][Stage 182:===================================>                 (75 + 38) / 113][Stage 182:===========================================>         (93 + 20) / 113][Stage 182:==================================================>  (107 + 6) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:===========================>                         (60 + 54) / 114][Stage 183:=================================>                   (71 + 43) / 114][Stage 183:=======================================>             (85 + 29) / 114][Stage 183:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 3.011046524 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358793058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:=====================================>               (79 + 34) / 113][Stage 184:==========================================>          (91 + 22) / 113][Stage 184:==============================================>     (102 + 11) / 113][Stage 184:===================================================> (109 + 4) / 113][Stage 184:====================================================>(112 + 1) / 113]                                                                                [Stage 185:====================================>                (79 + 35) / 114][Stage 185:=========================================>           (89 + 25) / 114][Stage 185:==============================================>      (99 + 15) / 114][Stage 185:=================================================>   (106 + 8) / 114][Stage 185:===================================================> (111 + 3) / 114][Stage 185:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.716500775 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 139  OR  partitionIndex = 140 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349375432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=======================================>             (84 + 29) / 113][Stage 186:==========================================>          (91 + 22) / 113][Stage 186:==============================================>     (102 + 11) / 113][Stage 186:==================================================>  (108 + 5) / 113]                                                                                [Stage 187:=======================================>             (86 + 28) / 114][Stage 187:============================================>        (96 + 18) / 114][Stage 187:=================================================>   (106 + 8) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.872531987 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383520833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (59 + 54) / 113][Stage 188:=============================>                       (63 + 50) / 113][Stage 188:==================================>                  (73 + 40) / 113][Stage 188:============================================>        (95 + 18) / 113][Stage 188:===================================================> (110 + 3) / 113]                                                                                [Stage 189:===========================>                         (60 + 54) / 114][Stage 189:================================>                    (69 + 45) / 114][Stage 189:=======================================>             (84 + 30) / 114][Stage 189:==================================================>  (109 + 5) / 114][Stage 189:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.069043431 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339840787 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:======================================>              (83 + 32) / 115][Stage 190:==========================================>          (92 + 23) / 115][Stage 190:=================================================>   (107 + 8) / 115]                                                                                [Stage 191:========================================>            (88 + 28) / 116][Stage 191:============================================>       (100 + 16) / 116][Stage 191:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.486717658 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.347818432 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:======================================>              (83 + 30) / 113][Stage 192:==========================================>          (90 + 23) / 113][Stage 192:==============================================>     (100 + 13) / 113][Stage 192:==================================================>  (108 + 5) / 113]                                                                                [Stage 193:======================================>              (83 + 31) / 114][Stage 193:=============================================>       (97 + 17) / 114][Stage 193:=================================================>   (106 + 8) / 114][Stage 193:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.017234565 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378808752 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:=================================>                   (75 + 43) / 118][Stage 194:=====================================>               (84 + 34) / 118][Stage 194:===========================================>         (97 + 21) / 118][Stage 194:===================================================> (115 + 3) / 118]                                                                                [Stage 195:=================================>                   (76 + 43) / 119][Stage 195:=======================================>             (89 + 30) / 119][Stage 195:==========================================>          (96 + 23) / 119][Stage 195:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.200474462 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.344578012 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:=====================================>               (81 + 34) / 115][Stage 196:=======================================>             (86 + 29) / 115][Stage 196:==============================================>     (102 + 13) / 115][Stage 196:===================================================> (112 + 3) / 115]                                                                                [Stage 197:======================================>              (84 + 32) / 116][Stage 197:=========================================>           (90 + 26) / 116][Stage 197:==============================================>     (103 + 13) / 116][Stage 197:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.515373185 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395018943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (69 + 46) / 115][Stage 198:====================================>                (80 + 35) / 115][Stage 198:===========================================>         (94 + 21) / 115][Stage 198:=================================================>   (108 + 7) / 115][Stage 198:====================================================>(114 + 1) / 115]                                                                                [Stage 199:===============================>                     (70 + 46) / 116][Stage 199:======================================>              (84 + 32) / 116][Stage 199:============================================>        (98 + 18) / 116][Stage 199:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.866762644 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 152 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 152 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349516796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:=====================================>               (81 + 32) / 113][Stage 200:===========================================>         (93 + 20) / 113][Stage 200:===============================================>    (103 + 10) / 113][Stage 200:===================================================> (110 + 3) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:===================================>                 (76 + 38) / 114][Stage 201:========================================>            (87 + 27) / 114][Stage 201:==========================================>          (92 + 22) / 114][Stage 201:==================================================>  (108 + 6) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.143932418 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/22 00:20:47 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:45174) dropped. RpcEnv already stopped.
17/05/22 00:20:47 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.36:45174) dropped. RpcEnv already stopped.

real	10m0.083s
user	11m33.184s
sys	0m36.632s
