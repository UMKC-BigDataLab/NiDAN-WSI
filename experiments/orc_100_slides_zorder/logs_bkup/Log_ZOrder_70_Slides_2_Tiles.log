Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 09:13:17 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:13:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:13:31 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:13:32 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 09:13:34 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 09:13:44 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522091333-0440).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.361593682 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:========================>                              (52 + 63) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (69 + 46) / 115][Stage 0:====================================>                  (76 + 39) / 115][Stage 0:=====================================>                 (79 + 36) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:===============================================>      (102 + 13) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:=====================================================> (112 + 3) / 115][Stage 0:======================================================>(113 + 2) / 115]                                                                                [Stage 1:==============================>                        (65 + 51) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:=================================>                     (71 + 45) / 116][Stage 1:======================================>                (81 + 35) / 116][Stage 1:==========================================>            (89 + 27) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:==============================================>        (99 + 17) / 116][Stage 1:=====================================================> (112 + 4) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.773523084 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=177 AND partitionZIndex<=178,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.65078043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:==============================>                        (63 + 52) / 115][Stage 2:======================================>                (80 + 35) / 115][Stage 2:=======================================>               (82 + 33) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:===========================================>           (91 + 24) / 115][Stage 2:===============================================>      (101 + 14) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:====================================================>  (110 + 5) / 115]                                                                                [Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:======================================>                (82 + 34) / 116][Stage 3:=========================================>             (87 + 29) / 116][Stage 3:=============================================>         (97 + 19) / 116][Stage 3:===============================================>      (101 + 15) / 116][Stage 3:===================================================>   (109 + 7) / 116][Stage 3:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.60880902 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=189 AND partitionZIndex<=190,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.585162379 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:>                                                        (0 + 0) / 115][Stage 4:====================================>                  (77 + 38) / 115][Stage 4:======================================>                (80 + 35) / 115][Stage 4:========================================>              (85 + 30) / 115][Stage 4:==========================================>            (88 + 27) / 115][Stage 4:=============================================>         (96 + 19) / 115][Stage 4:================================================>     (104 + 11) / 115][Stage 4:======================================================>(114 + 1) / 115]                                                                                [Stage 5:======================================>                (81 + 35) / 116][Stage 5:=========================================>             (87 + 29) / 116][Stage 5:===========================================>           (91 + 25) / 116][Stage 5:=============================================>         (96 + 20) / 116][Stage 5:================================================>     (104 + 12) / 116][Stage 5:=====================================================> (112 + 4) / 116]                                                                                Time elapsed: 4.005414449 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=202", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=201 AND partitionZIndex<=202,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.590436975 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (71 + 47) / 118][Stage 6:=================================>                     (72 + 46) / 118][Stage 6:==================================>                    (74 + 44) / 118][Stage 6:====================================>                  (78 + 40) / 118][Stage 6:======================================>                (82 + 36) / 118][Stage 6:=======================================>               (84 + 34) / 118][Stage 6:===========================================>           (93 + 25) / 118][Stage 6:=================================================>    (108 + 10) / 118][Stage 6:=====================================================> (115 + 3) / 118][Stage 6:======================================================>(117 + 1) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:==================================>                    (74 + 45) / 119][Stage 7:====================================>                  (79 + 40) / 119][Stage 7:=========================================>             (89 + 30) / 119][Stage 7:=========================================>             (90 + 29) / 119][Stage 7:===========================================>           (94 + 25) / 119][Stage 7:=============================================>        (100 + 19) / 119][Stage 7:=================================================>    (109 + 10) / 119][Stage 7:====================================================>  (114 + 5) / 119]                                                                                Time elapsed: 5.132623983 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=28 AND partitionZIndex<=29,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.670849488 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:=============================>                         (60 + 53) / 113][Stage 8:====================================>                  (75 + 38) / 113][Stage 8:==========================================>            (88 + 25) / 113][Stage 8:===============================================>       (98 + 15) / 113][Stage 8:===================================================>   (106 + 7) / 113][Stage 8:=====================================================> (109 + 4) / 113]                                                                                [Stage 9:============================>                          (59 + 55) / 114][Stage 9:===============================>                       (65 + 49) / 114][Stage 9:====================================>                  (76 + 38) / 114][Stage 9:=============================================>         (95 + 19) / 114][Stage 9:=================================================>    (104 + 10) / 114][Stage 9:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.158433854 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=17 AND partitionZIndex<=18,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.612501759 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===========================>                          (57 + 56) / 113][Stage 10:============================>                         (59 + 54) / 113][Stage 10:===============================>                      (66 + 47) / 113][Stage 10:====================================>                 (77 + 36) / 113][Stage 10:=============================================>        (96 + 17) / 113][Stage 10:==================================================>   (106 + 7) / 113][Stage 10:=====================================================>(112 + 1) / 113]                                                                                [Stage 11:===========================>                          (59 + 55) / 114][Stage 11:=============================>                        (63 + 51) / 114][Stage 11:====================================>                 (76 + 38) / 114][Stage 11:============================================>         (94 + 20) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.780686178 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=37 AND partitionZIndex<=38,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.625404976 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:===============================>                      (68 + 47) / 115][Stage 12:==================================>                   (74 + 41) / 115][Stage 12:=====================================>                (80 + 35) / 115][Stage 12:=============================================>        (97 + 18) / 115][Stage 12:=================================================>    (106 + 9) / 115][Stage 12:====================================================> (111 + 4) / 115]                                                                                [Stage 13:==================================>                   (74 + 42) / 116][Stage 13:======================================>               (82 + 34) / 116][Stage 13:==========================================>           (91 + 25) / 116][Stage 13:=============================================>        (98 + 18) / 116][Stage 13:===============================================>     (104 + 12) / 116][Stage 13:====================================================> (112 + 4) / 116][Stage 13:=====================================================>(114 + 2) / 116][Stage 13:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 5.261974618 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=168 AND partitionZIndex<=169,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.527953113 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:=============================>                        (63 + 52) / 115][Stage 14:==================================>                   (73 + 42) / 115][Stage 14:=======================================>              (85 + 30) / 115][Stage 14:=========================================>            (89 + 26) / 115][Stage 14:=============================================>        (96 + 19) / 115][Stage 14:================================================>    (105 + 10) / 115][Stage 14:===================================================>  (110 + 5) / 115]                                                                                [Stage 15:===============================>                      (67 + 49) / 116][Stage 15:=====================================>                (81 + 35) / 116][Stage 15:===========================================>          (93 + 23) / 116][Stage 15:==============================================>       (99 + 17) / 116][Stage 15:==============================================>      (102 + 14) / 116][Stage 15:===============================================>     (104 + 12) / 116][Stage 15:===================================================>  (111 + 5) / 116][Stage 15:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.262940158 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=28", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=27 AND partitionZIndex<=28,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.567539908 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:>                                                       (0 + 0) / 121][Stage 16:========================>                             (56 + 65) / 121][Stage 16:==========================>                           (59 + 62) / 121][Stage 16:=================================>                    (74 + 47) / 121][Stage 16:======================================>               (87 + 34) / 121][Stage 16:===========================================>         (100 + 21) / 121][Stage 16:=============================================>       (104 + 17) / 121][Stage 16:===================================================>  (116 + 5) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:============================>                         (65 + 57) / 122][Stage 17:======================================>               (86 + 36) / 122][Stage 17:=============================================>       (104 + 18) / 122][Stage 17:================================================>    (111 + 11) / 122][Stage 17:=====================================================>(120 + 2) / 122][Stage 17:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.174150321 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=183 AND partitionZIndex<=184,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.548318112 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===========================>                          (60 + 60) / 120][Stage 18:==============================>                       (68 + 52) / 120][Stage 18:====================================>                 (82 + 38) / 120][Stage 18:===========================================>          (96 + 24) / 120][Stage 18:====================================================> (117 + 3) / 120]                                                                                [Stage 19:============================>                         (63 + 58) / 121][Stage 19:===============================>                      (70 + 51) / 121][Stage 19:======================================>               (87 + 34) / 121][Stage 19:===============================================>     (108 + 13) / 121][Stage 19:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.555578604 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=234 AND partitionZIndex<=235,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.537757462 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:==============================>                       (66 + 49) / 115][Stage 20:===================================>                  (76 + 39) / 115][Stage 20:==========================================>           (90 + 25) / 115][Stage 20:===============================================>     (103 + 12) / 115][Stage 20:====================================================> (111 + 4) / 115][Stage 20:=====================================================>(114 + 1) / 115]                                                                                [Stage 21:===================================>                  (76 + 40) / 116][Stage 21:============================================>         (96 + 20) / 116][Stage 21:===================================================>  (110 + 6) / 116][Stage 21:====================================================> (113 + 3) / 116][Stage 21:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.824733946 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=82 AND partitionZIndex<=83,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471173208 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:================================>                     (72 + 46) / 118][Stage 22:====================================>                 (79 + 39) / 118][Stage 22:=======================================>              (86 + 32) / 118][Stage 22:============================================>         (97 + 21) / 118][Stage 22:================================================>    (107 + 11) / 118][Stage 22:===================================================>  (112 + 6) / 118]                                                                                [Stage 23:=================================>                    (74 + 45) / 119][Stage 23:====================================>                 (81 + 38) / 119][Stage 23:======================================>               (84 + 35) / 119][Stage 23:============================================>         (97 + 22) / 119][Stage 23:================================================>    (109 + 10) / 119][Stage 23:====================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.804099426 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=143 AND partitionZIndex<=144,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524954605 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (60 + 60) / 120][Stage 24:===========================>                          (61 + 59) / 120][Stage 24:================================>                     (73 + 47) / 120][Stage 24:==========================================>           (95 + 25) / 120][Stage 24:==================================================>   (113 + 7) / 120][Stage 24:=====================================================>(119 + 1) / 120]                                                                                [Stage 25:===========================>                          (61 + 60) / 121][Stage 25:=================================>                    (74 + 47) / 121][Stage 25:==========================================>           (96 + 25) / 121][Stage 25:==================================================>   (113 + 8) / 121][Stage 25:===================================================>  (115 + 6) / 121][Stage 25:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.718754459 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=97 AND partitionZIndex<=98,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.514537075 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:==========================>                           (60 + 61) / 121][Stage 26:================================>                     (72 + 49) / 121][Stage 26:========================================>             (90 + 31) / 121][Stage 26:=================================================>    (112 + 9) / 121]                                                                                [Stage 27:===========================>                          (61 + 61) / 122][Stage 27:=============================>                        (67 + 55) / 122][Stage 27:======================================>               (87 + 35) / 122][Stage 27:===============================================>     (110 + 12) / 122][Stage 27:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.390645526 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=158 AND partitionZIndex<=159,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.502882481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===========================>                          (60 + 60) / 120][Stage 28:===========================>                          (61 + 59) / 120][Stage 28:=================================>                    (74 + 46) / 120][Stage 28:=====================================>                (84 + 36) / 120][Stage 28:===========================================>          (97 + 23) / 120][Stage 28:=================================================>    (111 + 9) / 120][Stage 28:====================================================> (116 + 4) / 120]                                                                                [Stage 29:============================>                         (63 + 58) / 121][Stage 29:===================================>                  (79 + 42) / 121][Stage 29:============================================>         (99 + 22) / 121][Stage 29:====================================================> (118 + 3) / 121][Stage 29:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.654378073 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=64 AND partitionZIndex<=65,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.495485419 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:==============================>                       (63 + 50) / 113][Stage 30:==================================>                   (72 + 41) / 113][Stage 30:==============================================>       (98 + 15) / 113][Stage 30:==================================================>   (106 + 7) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:============================>                         (60 + 54) / 114][Stage 31:==============================>                       (65 + 49) / 114][Stage 31:=====================================>                (80 + 34) / 114][Stage 31:=================================================>    (105 + 9) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.448231794 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=52 AND partitionZIndex<=53,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46126372 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:==============================>                       (66 + 49) / 115][Stage 32:==================================>                   (73 + 42) / 115][Stage 32:=========================================>            (89 + 26) / 115][Stage 32:===============================================>     (102 + 13) / 115][Stage 32:=================================================>    (106 + 9) / 115][Stage 32:==================================================>   (108 + 7) / 115][Stage 32:=====================================================>(114 + 1) / 115]                                                                                [Stage 33:================================>                     (69 + 47) / 116][Stage 33:=======================================>              (85 + 31) / 116][Stage 33:==============================================>      (101 + 15) / 116][Stage 33:==================================================>   (109 + 7) / 116][Stage 33:====================================================> (112 + 4) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.854656214 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=222 AND partitionZIndex<=223,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505755989 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===========================>                          (58 + 55) / 113][Stage 34:================================>                     (67 + 46) / 113][Stage 34:========================================>             (85 + 28) / 113][Stage 34:==================================================>   (106 + 7) / 113][Stage 34:=====================================================>(112 + 1) / 113]                                                                                [Stage 35:==============================>                       (64 + 50) / 114][Stage 35:================================>                     (69 + 45) / 114][Stage 35:=============================================>        (95 + 19) / 114][Stage 35:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.244834684 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=25 AND partitionZIndex<=26,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.504933967 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:============================>                         (64 + 57) / 121][Stage 36:==================================>                   (78 + 43) / 121][Stage 36:=============================================>       (105 + 16) / 121][Stage 36:=====================================================>(120 + 1) / 121]                                                                                [Stage 37:===========================>                          (61 + 61) / 122][Stage 37:============================>                         (65 + 57) / 122][Stage 37:======================================>               (87 + 35) / 122][Stage 37:==================================================>   (113 + 9) / 122][Stage 37:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.082535772 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=164", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=163 AND partitionZIndex<=164,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411652796 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:=====================================>                (79 + 36) / 115][Stage 38:========================================>             (86 + 29) / 115][Stage 38:============================================>         (94 + 21) / 115][Stage 38:==================================================>   (107 + 8) / 115][Stage 38:====================================================> (112 + 3) / 115]                                                                                [Stage 39:========================================>             (88 + 28) / 116][Stage 39:==============================================>      (101 + 15) / 116][Stage 39:====================================================> (112 + 4) / 116][Stage 39:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.042773037 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=111 AND partitionZIndex<=112,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417805094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (83 + 32) / 115][Stage 40:==============================================>       (98 + 17) / 115][Stage 40:=================================================>    (106 + 9) / 115][Stage 40:===================================================>  (110 + 5) / 115]                                                                                [Stage 41:========================================>             (87 + 29) / 116][Stage 41:==============================================>       (99 + 17) / 116][Stage 41:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.771835131 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=85 AND partitionZIndex<=86,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434270541 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (80 + 35) / 115][Stage 42:========================================>             (86 + 29) / 115][Stage 42:==============================================>      (101 + 14) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:=======================================>              (84 + 32) / 116][Stage 43:============================================>         (96 + 20) / 116][Stage 43:===============================================>     (103 + 13) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.769065943 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=126 AND partitionZIndex<=127,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434128641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:================================>                     (72 + 46) / 118][Stage 44:==================================>                   (75 + 43) / 118][Stage 44:========================================>             (88 + 30) / 118][Stage 44:==================================================>   (110 + 8) / 118][Stage 44:=====================================================>(117 + 1) / 118]                                                                                [Stage 45:=================================>                    (74 + 45) / 119][Stage 45:======================================>               (85 + 34) / 119][Stage 45:=============================================>       (103 + 16) / 119][Stage 45:====================================================> (115 + 4) / 119][Stage 45:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.310165654 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=122 AND partitionZIndex<=123,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425392815 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:================================>                     (72 + 46) / 118][Stage 46:===================================>                  (78 + 40) / 118][Stage 46:==========================================>           (92 + 26) / 118][Stage 46:================================================>    (108 + 10) / 118][Stage 46:=====================================================>(116 + 2) / 118]                                                                                [Stage 47:=================================>                    (74 + 45) / 119][Stage 47:====================================>                 (81 + 38) / 119][Stage 47:============================================>        (101 + 18) / 119][Stage 47:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.165511794 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=242 AND partitionZIndex<=243,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.459869515 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==============================>                       (66 + 49) / 115][Stage 48:=====================================>                (80 + 35) / 115][Stage 48:===========================================>          (92 + 23) / 115][Stage 48:===============================================>     (103 + 12) / 115][Stage 48:===================================================>  (110 + 5) / 115]                                                                                [Stage 49:=================================>                    (72 + 44) / 116][Stage 49:=========================================>            (90 + 26) / 116][Stage 49:===============================================>     (105 + 11) / 116][Stage 49:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.998370169 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=77 AND partitionZIndex<=78,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.513565052 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:==========================>                           (60 + 61) / 121][Stage 50:==============================>                       (68 + 53) / 121][Stage 50:======================================>               (87 + 34) / 121][Stage 50:=============================================>       (103 + 18) / 121]                                                                                [Stage 51:===========================>                          (61 + 61) / 122][Stage 51:================================>                     (73 + 49) / 122][Stage 51:==========================================>           (97 + 25) / 122][Stage 51:==================================================>   (113 + 9) / 122][Stage 51:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.154889984 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=70 AND partitionZIndex<=71,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.443123087 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:============================>                         (59 + 54) / 113][Stage 52:=============================>                        (62 + 51) / 113][Stage 52:==================================>                   (72 + 41) / 113][Stage 52:==============================================>      (100 + 13) / 113][Stage 52:====================================================> (110 + 3) / 113]                                                                                [Stage 53:============================>                         (61 + 53) / 114][Stage 53:==================================>                   (73 + 41) / 114][Stage 53:==============================================>       (98 + 16) / 114][Stage 53:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.143719811 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=80 AND partitionZIndex<=81,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45093255 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:===========================>                          (58 + 55) / 113][Stage 54:============================>                         (60 + 53) / 113][Stage 54:=================================>                    (70 + 43) / 113][Stage 54:============================================>         (93 + 20) / 113][Stage 54:=====================================================>(111 + 2) / 113]                                                                                [Stage 55:==============================>                       (64 + 50) / 114][Stage 55:====================================>                 (76 + 38) / 114][Stage 55:=============================================>        (96 + 18) / 114][Stage 55:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.106781244 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=15", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=14 AND partitionZIndex<=15,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44775036 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===========================>                          (60 + 60) / 120][Stage 56:==============================>                       (68 + 52) / 120][Stage 56:==========================================>           (95 + 25) / 120][Stage 56:===================================================>  (114 + 6) / 120][Stage 56:=====================================================>(119 + 1) / 120]                                                                                [Stage 57:===========================>                          (61 + 60) / 121][Stage 57:=============================>                        (65 + 56) / 121][Stage 57:=================================>                    (75 + 46) / 121][Stage 57:=============================================>       (103 + 18) / 121][Stage 57:==================================================>   (114 + 7) / 121][Stage 57:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.572391737 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=96 AND partitionZIndex<=97,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.43739917 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:===============================>                      (68 + 47) / 115][Stage 58:========================================>             (87 + 28) / 115][Stage 58:===============================================>     (104 + 11) / 115][Stage 58:====================================================> (111 + 4) / 115]                                                                                [Stage 59:================================>                     (70 + 46) / 116][Stage 59:=======================================>              (84 + 32) / 116][Stage 59:============================================>         (95 + 21) / 116][Stage 59:=================================================>    (107 + 9) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.03630342 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=109 AND partitionZIndex<=110,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448722903 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:===========================>                          (60 + 60) / 120][Stage 60:============================>                         (64 + 56) / 120][Stage 60:================================>                     (73 + 47) / 120][Stage 60:==============================================>      (106 + 14) / 120][Stage 60:=====================================================>(118 + 2) / 120]                                                                                [Stage 61:===========================>                          (61 + 60) / 121][Stage 61:==============================>                       (68 + 53) / 121][Stage 61:=====================================>                (85 + 36) / 121][Stage 61:==============================================>      (107 + 14) / 121][Stage 61:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.286331226 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=135 AND partitionZIndex<=136,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.549660877 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:==================================>                   (73 + 40) / 113][Stage 62:=========================================>            (87 + 26) / 113][Stage 62:============================================>         (94 + 19) / 113][Stage 62:===================================================>  (107 + 6) / 113][Stage 62:=====================================================>(111 + 2) / 113]                                                                                [Stage 63:========================================>             (85 + 29) / 114][Stage 63:=============================================>        (95 + 19) / 114][Stage 63:==============================================>       (99 + 15) / 114][Stage 63:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.110604596 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=1 AND partitionZIndex<=2,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398339397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===================================>                  (74 + 39) / 113][Stage 64:=========================================>            (86 + 27) / 113][Stage 64:==================================================>   (105 + 8) / 113][Stage 64:=====================================================>(111 + 2) / 113]                                                                                [Stage 65:========================================>             (85 + 29) / 114][Stage 65:=============================================>        (97 + 17) / 114][Stage 65:=================================================>    (105 + 9) / 114][Stage 65:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.016868169 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=101 AND partitionZIndex<=102,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403207731 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:================================>                     (72 + 46) / 118][Stage 66:====================================>                 (80 + 38) / 118][Stage 66:=====================================>                (83 + 35) / 118][Stage 66:==========================================>           (93 + 25) / 118][Stage 66:==============================================>      (104 + 14) / 118][Stage 66:====================================================> (114 + 4) / 118]                                                                                [Stage 67:=================================>                    (74 + 45) / 119][Stage 67:==================================>                   (76 + 43) / 119][Stage 67:=======================================>              (88 + 31) / 119][Stage 67:============================================>        (100 + 19) / 119][Stage 67:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.925766344 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=147 AND partitionZIndex<=148,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389206771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:================================>                     (72 + 46) / 118][Stage 68:==================================>                   (76 + 42) / 118][Stage 68:=======================================>              (86 + 32) / 118][Stage 68:===============================================>     (105 + 13) / 118][Stage 68:====================================================> (115 + 3) / 118]                                                                                [Stage 69:=================================>                    (74 + 45) / 119][Stage 69:=======================================>              (88 + 31) / 119][Stage 69:==============================================>      (104 + 15) / 119][Stage 69:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.070216359 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=10 AND partitionZIndex<=11,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398395838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:=======================================>              (82 + 31) / 113][Stage 70:===========================================>          (90 + 23) / 113][Stage 70:=============================================>        (95 + 18) / 113][Stage 70:=================================================>    (104 + 9) / 113][Stage 70:====================================================> (110 + 3) / 113]                                                                                [Stage 71:====================================>                 (77 + 37) / 114][Stage 71:==========================================>           (89 + 25) / 114][Stage 71:=============================================>        (95 + 19) / 114][Stage 71:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.525703242 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=119 AND partitionZIndex<=120,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407146983 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=================================>                    (73 + 45) / 118][Stage 72:=====================================>                (82 + 36) / 118][Stage 72:=========================================>            (90 + 28) / 118][Stage 72:=================================================>    (109 + 9) / 118][Stage 72:====================================================> (114 + 4) / 118]                                                                                [Stage 73:==================================>                   (76 + 43) / 119][Stage 73:=======================================>              (87 + 32) / 119][Stage 73:============================================>         (99 + 20) / 119][Stage 73:=================================================>    (110 + 9) / 119]                                                                                Time elapsed: 3.419835375 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=44 AND partitionZIndex<=45,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384415397 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=================================>                    (71 + 42) / 113][Stage 74:======================================>               (81 + 32) / 113][Stage 74:===========================================>          (91 + 22) / 113][Stage 74:===============================================>     (102 + 11) / 113][Stage 74:====================================================> (109 + 4) / 113]                                                                                [Stage 75:=======================================>              (83 + 31) / 114][Stage 75:=============================================>        (95 + 19) / 114][Stage 75:==================================================>   (107 + 7) / 114][Stage 75:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.522871275 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=153 AND partitionZIndex<=154,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423886592 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (60 + 60) / 120][Stage 76:===============================>                      (69 + 51) / 120][Stage 76:======================================>               (85 + 35) / 120][Stage 76:=============================================>       (103 + 17) / 120][Stage 76:=====================================================>(118 + 2) / 120]                                                                                [Stage 77:=============================>                        (65 + 56) / 121][Stage 77:==================================>                   (77 + 44) / 121][Stage 77:=============================================>       (105 + 16) / 121][Stage 77:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.29407747 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=104 AND partitionZIndex<=105,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397752016 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:================================>                     (72 + 46) / 118][Stage 78:=================================>                    (73 + 45) / 118][Stage 78:======================================>               (85 + 33) / 118][Stage 78:============================================>         (97 + 21) / 118][Stage 78:==================================================>   (111 + 7) / 118]                                                                                [Stage 79:=================================>                    (73 + 46) / 119][Stage 79:==================================>                   (77 + 42) / 119][Stage 79:=====================================>                (83 + 36) / 119][Stage 79:===========================================>          (96 + 23) / 119][Stage 79:================================================>    (108 + 11) / 119]                                                                                Time elapsed: 3.61750325 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=181 AND partitionZIndex<=182,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407250483 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:===========================>                          (58 + 55) / 113][Stage 80:===============================>                      (66 + 47) / 113][Stage 80:======================================>               (80 + 33) / 113][Stage 80:==============================================>       (97 + 16) / 113][Stage 80:=====================================================>(111 + 2) / 113]                                                                                [Stage 81:=============================>                        (63 + 51) / 114][Stage 81:========================================>             (85 + 29) / 114][Stage 81:==============================================>      (100 + 14) / 114]                                                                                Time elapsed: 3.023518144 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=133 AND partitionZIndex<=134,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431747054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:==========================>                           (60 + 61) / 121][Stage 82:===========================>                          (62 + 59) / 121][Stage 82:=================================>                    (76 + 45) / 121][Stage 82:============================================>         (99 + 22) / 121][Stage 82:==================================================>   (113 + 8) / 121]                                                                                [Stage 83:===========================>                          (62 + 60) / 122][Stage 83:===============================>                      (72 + 50) / 122][Stage 83:=======================================>              (89 + 33) / 122][Stage 83:===============================================>     (110 + 12) / 122][Stage 83:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.286448248 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=154 AND partitionZIndex<=155,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423067789 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:==============================>                       (67 + 53) / 120][Stage 84:====================================>                 (82 + 38) / 120][Stage 84:================================================>    (109 + 11) / 120]                                                                                [Stage 85:=============================>                        (65 + 56) / 121][Stage 85:===================================>                  (80 + 41) / 121][Stage 85:==========================================>           (96 + 25) / 121][Stage 85:==================================================>   (114 + 7) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.315671814 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=136 AND partitionZIndex<=137,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41977584 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:==========================>                           (60 + 61) / 121][Stage 86:============================>                         (63 + 58) / 121][Stage 86:=====================================>                (84 + 37) / 121][Stage 86:==============================================>      (106 + 15) / 121][Stage 86:=====================================================>(119 + 2) / 121]                                                                                [Stage 87:===========================>                          (62 + 60) / 122][Stage 87:==============================>                       (70 + 52) / 122][Stage 87:=========================================>            (93 + 29) / 122][Stage 87:====================================================> (119 + 3) / 122][Stage 87:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.323405196 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=214 AND partitionZIndex<=215,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42336119 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (60 + 60) / 120][Stage 88:==============================>                       (67 + 53) / 120][Stage 88:===================================>                  (79 + 41) / 120][Stage 88:=================================================>    (111 + 9) / 120][Stage 88:====================================================> (117 + 3) / 120]                                                                                [Stage 89:===========================>                          (61 + 60) / 121][Stage 89:==============================>                       (69 + 52) / 121][Stage 89:===================================>                  (79 + 42) / 121][Stage 89:============================================>        (101 + 20) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.214301279 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=101,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.428446585 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (60 + 60) / 120][Stage 90:============================>                         (64 + 56) / 120][Stage 90:====================================>                 (80 + 40) / 120][Stage 90:===============================================>     (108 + 12) / 120][Stage 90:=====================================================>(119 + 1) / 120]                                                                                [Stage 91:============================>                         (64 + 57) / 121][Stage 91:=================================>                    (76 + 45) / 121][Stage 91:===========================================>          (97 + 24) / 121][Stage 91:===================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.083896781 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=88 AND partitionZIndex<=89,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.352368044 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:======================================>               (81 + 34) / 115][Stage 92:========================================>             (87 + 28) / 115][Stage 92:===============================================>     (104 + 11) / 115][Stage 92:====================================================> (111 + 4) / 115][Stage 92:=====================================================>(114 + 1) / 115]                                                                                [Stage 93:========================================>             (88 + 28) / 116][Stage 93:==============================================>      (101 + 15) / 116][Stage 93:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.794918701 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide69"
dataSource: String = /nidan/orc/individualORC/slide69

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=84", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=83 AND partitionZIndex<=84,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346289526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:======================================>               (82 + 33) / 115][Stage 94:========================================>             (86 + 29) / 115][Stage 94:==============================================>      (101 + 14) / 115][Stage 94:====================================================> (112 + 3) / 115]                                                                                [Stage 95:========================================>             (87 + 29) / 116][Stage 95:==============================================>       (99 + 17) / 116][Stage 95:==================================================>   (108 + 8) / 116][Stage 95:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.77736607 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=241 AND partitionZIndex<=242,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367474608 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:======================================>               (81 + 32) / 113][Stage 96:==========================================>           (88 + 25) / 113][Stage 96:==============================================>      (100 + 13) / 113][Stage 96:=====================================================>(111 + 2) / 113]                                                                                [Stage 97:=====================================>                (80 + 34) / 114][Stage 97:============================================>         (93 + 21) / 114][Stage 97:=================================================>    (105 + 9) / 114][Stage 97:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.829476582 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=155 AND partitionZIndex<=156,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3991084 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:==================================>                   (73 + 42) / 115][Stage 98:=========================================>            (88 + 27) / 115][Stage 98:===============================================>     (102 + 13) / 115][Stage 98:===================================================>  (109 + 6) / 115][Stage 98:=====================================================>(113 + 2) / 115]                                                                                [Stage 99:=====================================>                (80 + 36) / 116][Stage 99:===========================================>          (93 + 23) / 116][Stage 99:=================================================>    (107 + 9) / 116][Stage 99:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.197966152 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=12 AND partitionZIndex<=13,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416958391 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:============================>                        (65 + 55) / 120][Stage 100:================================>                    (74 + 46) / 120][Stage 100:===========================================>         (99 + 21) / 120][Stage 100:=================================================>   (111 + 9) / 120]                                                                                [Stage 101:===========================>                         (62 + 59) / 121][Stage 101:==============================>                      (69 + 52) / 121][Stage 101:=======================================>             (91 + 30) / 121][Stage 101:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.506875171 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=52", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=51 AND partitionZIndex<=52,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379560143 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:================================>                    (72 + 46) / 118][Stage 102:=====================================>               (83 + 35) / 118][Stage 102:===========================================>         (97 + 21) / 118][Stage 102:=================================================>   (111 + 7) / 118][Stage 102:====================================================>(117 + 1) / 118]                                                                                [Stage 103:================================>                    (72 + 47) / 119][Stage 103:====================================>                (81 + 38) / 119][Stage 103:===========================================>        (100 + 19) / 119][Stage 103:=================================================>   (111 + 8) / 119][Stage 103:====================================================>(117 + 2) / 119][Stage 103:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.392079517 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=49 AND partitionZIndex<=50,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417292453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 61) / 121][Stage 104:===========================>                         (63 + 58) / 121][Stage 104:=================================>                   (77 + 44) / 121][Stage 104:=========================================>           (94 + 27) / 121][Stage 104:==================================================>  (116 + 5) / 121]                                                                                [Stage 105:==========================>                          (62 + 60) / 122][Stage 105:=============================>                       (69 + 53) / 122][Stage 105:========================================>            (93 + 29) / 122][Stage 105:=================================================>   (114 + 8) / 122][Stage 105:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.230677728 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=185 AND partitionZIndex<=186,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.408615187 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 61) / 121][Stage 106:============================>                        (65 + 56) / 121][Stage 106:=================================>                   (77 + 44) / 121][Stage 106:==========================================>         (100 + 21) / 121][Stage 106:===================================================> (118 + 3) / 121]                                                                                [Stage 107:=============================>                       (67 + 55) / 122][Stage 107:=================================>                   (78 + 44) / 122][Stage 107:===========================================>         (99 + 23) / 122][Stage 107:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.128525351 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=46 AND partitionZIndex<=47,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41635035 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 60) / 120][Stage 108:=================================>                   (75 + 45) / 120][Stage 108:======================================>              (88 + 32) / 120][Stage 108:==============================================>     (107 + 13) / 120][Stage 108:===================================================> (117 + 3) / 120]                                                                                [Stage 109:==========================>                          (61 + 60) / 121][Stage 109:=============================>                       (68 + 53) / 121][Stage 109:=================================>                   (76 + 45) / 121][Stage 109:=========================================>           (95 + 26) / 121][Stage 109:=================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.308772535 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=164 AND partitionZIndex<=165,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406225821 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:==============================>                      (70 + 50) / 120][Stage 110:=====================================>               (86 + 34) / 120][Stage 110:=============================================>      (106 + 14) / 120][Stage 110:====================================================>(119 + 1) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:============================>                        (66 + 55) / 121][Stage 111:=================================>                   (76 + 45) / 121][Stage 111:==========================================>          (97 + 24) / 121][Stage 111:=================================================>   (113 + 8) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.222472624 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=40 AND partitionZIndex<=41,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371775441 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:==================================>                  (74 + 41) / 115][Stage 112:=========================================>           (89 + 26) / 115][Stage 112:=================================================>   (107 + 8) / 115][Stage 112:====================================================>(114 + 1) / 115]                                                                                [Stage 113:==============================>                      (67 + 49) / 116][Stage 113:======================================>              (84 + 32) / 116][Stage 113:=============================================>       (99 + 17) / 116][Stage 113:=================================================>   (109 + 7) / 116][Stage 113:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.118710603 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=199 AND partitionZIndex<=200,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365573003 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (73 + 45) / 118][Stage 114:===================================>                 (78 + 40) / 118][Stage 114:======================================>              (85 + 33) / 118][Stage 114:===========================================>         (96 + 22) / 118][Stage 114:===============================================>    (107 + 11) / 118][Stage 114:==================================================>  (113 + 5) / 118][Stage 114:====================================================>(117 + 1) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:==================================>                  (78 + 41) / 119][Stage 115:=====================================>               (84 + 35) / 119][Stage 115:===========================================>        (100 + 19) / 119][Stage 115:=================================================>   (112 + 7) / 119][Stage 115:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.915269684 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=211 AND partitionZIndex<=212,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38875457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (58 + 55) / 113][Stage 116:=============================>                       (63 + 50) / 113][Stage 116:======================================>              (82 + 31) / 113][Stage 116:============================================>        (94 + 19) / 113][Stage 116:====================================================>(112 + 1) / 113]                                                                                [Stage 117:=============================>                       (63 + 51) / 114][Stage 117:=================================>                   (72 + 42) / 114][Stage 117:========================================>            (87 + 27) / 114][Stage 117:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.116376904 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=117 AND partitionZIndex<=118,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.455514888 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:=================================>                   (72 + 41) / 113][Stage 118:=====================================>               (80 + 33) / 113][Stage 118:===========================================>         (93 + 20) / 113][Stage 118:===============================================>    (103 + 10) / 113][Stage 118:====================================================>(111 + 2) / 113]                                                                                [Stage 119:====================================>                (78 + 36) / 114][Stage 119:========================================>            (88 + 26) / 114][Stage 119:=============================================>      (100 + 14) / 114][Stage 119:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.018758756 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=94 AND partitionZIndex<=95,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377247577 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===============================>                     (69 + 46) / 115][Stage 120:=====================================>               (82 + 33) / 115][Stage 120:=============================================>      (101 + 14) / 115][Stage 120:==================================================>  (110 + 5) / 115]                                                                                [Stage 121:=====================================>               (83 + 33) / 116][Stage 121:============================================>        (98 + 18) / 116][Stage 121:==================================================>  (111 + 5) / 116][Stage 121:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.926878223 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=48 AND partitionZIndex<=49,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33763938 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=====================================>               (82 + 33) / 115][Stage 122:=========================================>           (91 + 24) / 115][Stage 122:===============================================>    (104 + 11) / 115][Stage 122:====================================================>(113 + 2) / 115][Stage 122:====================================================>(114 + 1) / 115]                                                                                [Stage 123:=========================================>           (90 + 26) / 116][Stage 123:=============================================>      (102 + 14) / 116][Stage 123:===================================================> (112 + 4) / 116][Stage 123:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.41238334 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=32", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=31 AND partitionZIndex<=32,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365130421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:==================================>                  (76 + 42) / 118][Stage 124:=======================================>             (89 + 29) / 118][Stage 124:============================================>       (102 + 16) / 118][Stage 124:===================================================> (115 + 3) / 118][Stage 124:====================================================>(117 + 1) / 118]                                                                                [Stage 125:==================================>                  (77 + 42) / 119][Stage 125:======================================>              (86 + 33) / 119][Stage 125:===========================================>        (100 + 19) / 119][Stage 125:===================================================> (116 + 3) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.423694953 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=139 AND partitionZIndex<=140,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371850581 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=================================>                   (72 + 41) / 113][Stage 126:========================================>            (86 + 27) / 113][Stage 126:==============================================>     (100 + 13) / 113][Stage 126:===================================================> (109 + 4) / 113][Stage 126:====================================================>(112 + 1) / 113]                                                                                [Stage 127:==================================>                  (75 + 39) / 114][Stage 127:=======================================>             (86 + 28) / 114][Stage 127:==========================================>          (92 + 22) / 114][Stage 127:=================================================>   (107 + 7) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.987960284 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=42 AND partitionZIndex<=43,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363924878 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:================================>                    (73 + 45) / 118][Stage 128:====================================>                (82 + 36) / 118][Stage 128:==========================================>          (94 + 24) / 118][Stage 128:==============================================>     (105 + 13) / 118][Stage 128:==================================================>  (113 + 5) / 118]                                                                                [Stage 129:================================>                    (73 + 46) / 119][Stage 129:==================================>                  (77 + 42) / 119][Stage 129:========================================>            (91 + 28) / 119][Stage 129:============================================>       (102 + 17) / 119][Stage 129:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.204137903 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=54 AND partitionZIndex<=55,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36157865 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==================================>                  (74 + 39) / 113][Stage 130:=======================================>             (84 + 29) / 113][Stage 130:============================================>        (95 + 18) / 113][Stage 130:===============================================>    (103 + 10) / 113][Stage 130:=================================================>   (106 + 7) / 113][Stage 130:====================================================>(112 + 1) / 113]                                                                                [Stage 131:==================================>                  (75 + 39) / 114][Stage 131:======================================>              (82 + 32) / 114][Stage 131:============================================>        (95 + 19) / 114][Stage 131:==============================================>     (102 + 12) / 114][Stage 131:===================================================> (110 + 4) / 114][Stage 131:====================================================>(112 + 2) / 114][Stage 131:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.779818447 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=141 AND partitionZIndex<=142,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338000421 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:====================================>                (80 + 35) / 115][Stage 132:======================================>              (84 + 31) / 115][Stage 132:=============================================>       (98 + 17) / 115][Stage 132:==================================================>  (109 + 6) / 115][Stage 132:====================================================>(114 + 1) / 115]                                                                                [Stage 133:=====================================>               (81 + 35) / 116][Stage 133:========================================>            (89 + 27) / 116][Stage 133:============================================>        (98 + 18) / 116][Stage 133:==================================================>  (110 + 6) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.895086169 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide65"
dataSource: String = /nidan/orc/individualORC/slide65

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=90 AND partitionZIndex<=91,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.35823392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==================================>                  (73 + 40) / 113][Stage 134:=======================================>             (84 + 29) / 113][Stage 134:=============================================>       (96 + 17) / 113][Stage 134:=================================================>   (106 + 7) / 113][Stage 134:====================================================>(112 + 1) / 113]                                                                                [Stage 135:==================================>                  (74 + 40) / 114][Stage 135:=======================================>             (84 + 30) / 114][Stage 135:============================================>        (96 + 18) / 114][Stage 135:===================================================> (110 + 4) / 114][Stage 135:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.953720682 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=50 AND partitionZIndex<=51,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351382239 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==================================>                  (73 + 40) / 113][Stage 136:=====================================>               (80 + 33) / 113][Stage 136:===========================================>         (93 + 20) / 113][Stage 136:==============================================>     (102 + 11) / 113][Stage 136:===================================================> (110 + 3) / 113]                                                                                [Stage 137:===================================>                 (76 + 38) / 114][Stage 137:=======================================>             (84 + 30) / 114][Stage 137:===========================================>         (94 + 20) / 114][Stage 137:=================================================>   (106 + 8) / 114][Stage 137:===================================================> (111 + 3) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.715445617 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=21 AND partitionZIndex<=22,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406880064 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:==========================>                          (60 + 61) / 121][Stage 138:==========================>                          (61 + 60) / 121][Stage 138:==================================>                  (78 + 43) / 121][Stage 138:==========================================>         (100 + 21) / 121][Stage 138:===================================================> (117 + 4) / 121]                                                                                [Stage 139:==========================>                          (61 + 61) / 122][Stage 139:=============================>                       (68 + 54) / 122][Stage 139:===================================>                 (81 + 41) / 122][Stage 139:==============================================>     (108 + 14) / 122][Stage 139:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.044057209 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=59 AND partitionZIndex<=60,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39533517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:==========================>                          (60 + 60) / 120][Stage 140:============================>                        (64 + 56) / 120][Stage 140:===================================>                 (80 + 40) / 120][Stage 140:=============================================>      (106 + 14) / 120][Stage 140:===================================================> (117 + 3) / 120]                                                                                [Stage 141:============================>                        (64 + 57) / 121][Stage 141:=================================>                   (77 + 44) / 121][Stage 141:===========================================>        (101 + 20) / 121][Stage 141:====================================================>(119 + 2) / 121][Stage 141:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.251907124 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=247", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=246 AND partitionZIndex<=247,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393586845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 61) / 121][Stage 142:==============================>                      (69 + 52) / 121][Stage 142:=====================================>               (85 + 36) / 121][Stage 142:=============================================>      (106 + 15) / 121][Stage 142:====================================================>(119 + 2) / 121]                                                                                [Stage 143:==========================>                          (61 + 61) / 122][Stage 143:=============================>                       (69 + 53) / 122][Stage 143:======================================>              (88 + 34) / 122][Stage 143:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 2.981221143 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=128 AND partitionZIndex<=129,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364458599 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:====================================>                (78 + 35) / 113][Stage 144:===========================================>         (93 + 20) / 113][Stage 144:==============================================>     (102 + 11) / 113][Stage 144:===================================================> (109 + 4) / 113][Stage 144:====================================================>(111 + 2) / 113]                                                                                [Stage 145:===================================>                 (77 + 37) / 114][Stage 145:========================================>            (88 + 26) / 114][Stage 145:=============================================>       (98 + 16) / 114][Stage 145:===================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.95660233 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide62"
dataSource: String = /nidan/orc/individualORC/slide62

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=202 AND partitionZIndex<=203,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343795358 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:=====================================>               (81 + 34) / 115][Stage 146:============================================>        (97 + 18) / 115][Stage 146:=================================================>   (107 + 8) / 115][Stage 146:==================================================>  (110 + 5) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:======================================>              (84 + 32) / 116][Stage 147:=========================================>           (91 + 25) / 116][Stage 147:===============================================>    (106 + 10) / 116][Stage 147:===================================================> (113 + 3) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.993228939 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=118 AND partitionZIndex<=119,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399264862 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:==========================>                          (60 + 61) / 121][Stage 148:===========================>                         (62 + 59) / 121][Stage 148:===================================>                 (81 + 40) / 121][Stage 148:=============================================>      (105 + 16) / 121][Stage 148:===================================================> (118 + 3) / 121]                                                                                [Stage 149:==========================>                          (61 + 61) / 122][Stage 149:=============================>                       (69 + 53) / 122][Stage 149:====================================>                (84 + 38) / 122][Stage 149:===========================================>        (103 + 19) / 122][Stage 149:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.023629828 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=188 AND partitionZIndex<=189,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382537712 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (71 + 44) / 115][Stage 150:======================================>              (83 + 32) / 115][Stage 150:============================================>        (97 + 18) / 115][Stage 150:================================================>    (106 + 9) / 115][Stage 150:===================================================> (111 + 4) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:================================>                    (72 + 44) / 116][Stage 151:========================================>            (89 + 27) / 116][Stage 151:============================================>       (100 + 16) / 116][Stage 151:==================================================>  (110 + 6) / 116][Stage 151:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.197309723 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=148 AND partitionZIndex<=149,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33791754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:======================================>              (83 + 32) / 115][Stage 152:=========================================>           (91 + 24) / 115][Stage 152:===============================================>    (105 + 10) / 115]                                                                                [Stage 153:=======================================>             (86 + 30) / 116][Stage 153:===========================================>         (95 + 21) / 116][Stage 153:==================================================>  (110 + 6) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.766591448 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=174 AND partitionZIndex<=175,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339693065 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:=======================================>             (85 + 30) / 115][Stage 154:==========================================>          (92 + 23) / 115][Stage 154:===============================================>    (105 + 10) / 115]                                                                                [Stage 155:=======================================>             (86 + 30) / 116][Stage 155:=============================================>       (99 + 17) / 116][Stage 155:==================================================>  (110 + 6) / 116][Stage 155:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.609895564 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=75 AND partitionZIndex<=76,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351909022 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:====================================>                (78 + 35) / 113][Stage 156:=========================================>           (89 + 24) / 113][Stage 156:==============================================>     (102 + 11) / 113][Stage 156:===================================================> (110 + 3) / 113]                                                                                [Stage 157:======================================>              (83 + 31) / 114][Stage 157:=============================================>       (98 + 16) / 114][Stage 157:==================================================>  (108 + 6) / 114][Stage 157:====================================================>(112 + 2) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.997739672 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide68"
dataSource: String = /nidan/orc/individualORC/slide68

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=47 AND partitionZIndex<=48,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363422175 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:================================>                    (72 + 46) / 118][Stage 158:==================================>                  (76 + 42) / 118][Stage 158:========================================>            (91 + 27) / 118][Stage 158:============================================>       (101 + 17) / 118][Stage 158:==================================================>  (112 + 6) / 118][Stage 158:====================================================>(117 + 1) / 118]                                                                                [Stage 159:================================>                    (73 + 46) / 119][Stage 159:==================================>                  (78 + 41) / 119][Stage 159:========================================>            (90 + 29) / 119][Stage 159:============================================>       (102 + 17) / 119][Stage 159:==================================================>  (113 + 6) / 119][Stage 159:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.501857223 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=156 AND partitionZIndex<=157,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362533813 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (72 + 46) / 118][Stage 160:==================================>                  (77 + 41) / 118][Stage 160:========================================>            (91 + 27) / 118][Stage 160:============================================>       (101 + 17) / 118][Stage 160:====================================================>(117 + 1) / 118]                                                                                [Stage 161:================================>                    (73 + 46) / 119][Stage 161:==================================>                  (77 + 42) / 119][Stage 161:====================================>                (83 + 36) / 119][Stage 161:===========================================>         (98 + 21) / 119][Stage 161:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.317097437 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=6 AND partitionZIndex<=7,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381632909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===============================>                     (69 + 46) / 115][Stage 162:======================================>              (83 + 32) / 115][Stage 162:=============================================>       (98 + 17) / 115][Stage 162:==================================================>  (109 + 6) / 115]                                                                                [Stage 163:================================>                    (71 + 45) / 116][Stage 163:=======================================>             (86 + 30) / 116][Stage 163:===============================================>    (105 + 11) / 116][Stage 163:===================================================> (112 + 4) / 116][Stage 163:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.340707167 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=72 AND partitionZIndex<=73,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378168839 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:===========================>                         (58 + 55) / 113][Stage 164:==============================>                      (64 + 49) / 113][Stage 164:========================================>            (86 + 27) / 113][Stage 164:==============================================>     (100 + 13) / 113]                                                                                [Stage 165:============================>                        (61 + 53) / 114][Stage 165:================================>                    (70 + 44) / 114][Stage 165:============================================>        (95 + 19) / 114][Stage 165:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.053866538 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=33 AND partitionZIndex<=34,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404495777 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==========================>                          (60 + 60) / 120][Stage 166:===========================>                         (63 + 57) / 120][Stage 166:==================================>                  (79 + 41) / 120][Stage 166:===============================================>    (110 + 10) / 120][Stage 166:====================================================>(119 + 1) / 120]                                                                                [Stage 167:==========================>                          (61 + 60) / 121][Stage 167:================================>                    (74 + 47) / 121][Stage 167:======================================>              (89 + 32) / 121][Stage 167:=================================================>   (114 + 7) / 121][Stage 167:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.089876304 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=152 AND partitionZIndex<=153,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.367684968 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==================================>                  (74 + 41) / 115][Stage 168:=======================================>             (85 + 30) / 115][Stage 168:==============================================>     (103 + 12) / 115][Stage 168:===================================================> (112 + 3) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:=================================>                   (73 + 43) / 116][Stage 169:========================================>            (88 + 28) / 116][Stage 169:===============================================>    (105 + 11) / 116][Stage 169:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.879552901 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=24 AND partitionZIndex<=25,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395984792 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 60) / 120][Stage 170:================================>                    (73 + 47) / 120][Stage 170:======================================>              (88 + 32) / 120][Stage 170:==================================================>  (115 + 5) / 120]                                                                                [Stage 171:============================>                        (65 + 56) / 121][Stage 171:=================================>                   (77 + 44) / 121][Stage 171:============================================>       (104 + 17) / 121][Stage 171:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.903664292 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=76 AND partitionZIndex<=77,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339943746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:=====================================>               (82 + 33) / 115][Stage 172:=======================================>             (85 + 30) / 115][Stage 172:===========================================>         (94 + 21) / 115][Stage 172:===============================================>    (105 + 10) / 115][Stage 172:===================================================> (111 + 4) / 115]                                                                                [Stage 173:======================================>              (85 + 31) / 116][Stage 173:==========================================>          (93 + 23) / 116][Stage 173:==============================================>     (104 + 12) / 116][Stage 173:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.967675482 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=172 AND partitionZIndex<=173,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373107344 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=================================>                   (72 + 43) / 115][Stage 174:=========================================>           (90 + 25) / 115][Stage 174:================================================>    (106 + 9) / 115][Stage 174:===================================================> (111 + 4) / 115]                                                                                [Stage 175:====================================>                (80 + 36) / 116][Stage 175:=============================================>       (99 + 17) / 116][Stage 175:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.761240911 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=116 AND partitionZIndex<=117,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.363367995 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:================================>                    (73 + 45) / 118][Stage 176:====================================>                (82 + 36) / 118][Stage 176:========================================>            (91 + 27) / 118][Stage 176:==============================================>     (105 + 13) / 118][Stage 176:===================================================> (115 + 3) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:=================================>                   (76 + 43) / 119][Stage 177:======================================>              (86 + 33) / 119][Stage 177:===========================================>        (100 + 19) / 119][Stage 177:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.31512995 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=69 AND partitionZIndex<=70,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.380987207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:==============================>                      (66 + 49) / 115][Stage 178:==================================>                  (74 + 41) / 115][Stage 178:========================================>            (88 + 27) / 115][Stage 178:==================================================>  (109 + 6) / 115]                                                                                [Stage 179:===============================>                     (68 + 48) / 116][Stage 179:===================================>                 (77 + 39) / 116][Stage 179:============================================>        (98 + 18) / 116][Stage 179:===============================================>    (106 + 10) / 116][Stage 179:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.770379917 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=36 AND partitionZIndex<=37,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.349614094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=====================================>               (80 + 33) / 113][Stage 180:=========================================>           (89 + 24) / 113][Stage 180:=============================================>       (96 + 17) / 113][Stage 180:==================================================>  (108 + 5) / 113]                                                                                [Stage 181:======================================>              (82 + 32) / 114][Stage 181:=========================================>           (89 + 25) / 114][Stage 181:==============================================>     (103 + 11) / 114][Stage 181:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.338150618 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=203 AND partitionZIndex<=204,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382105951 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:==================================>                  (74 + 39) / 113][Stage 182:=======================================>             (85 + 28) / 113][Stage 182:===========================================>         (93 + 20) / 113][Stage 182:=================================================>   (106 + 7) / 113][Stage 182:====================================================>(112 + 1) / 113]                                                                                [Stage 183:=======================================>             (86 + 28) / 114][Stage 183:=============================================>       (97 + 17) / 114][Stage 183:==============================================>     (103 + 11) / 114][Stage 183:===================================================> (110 + 4) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.13950955 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=5 AND partitionZIndex<=6,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419614262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (60 + 61) / 121][Stage 184:=================================>                   (76 + 45) / 121][Stage 184:=======================================>             (90 + 31) / 121][Stage 184:==================================================>  (116 + 5) / 121]                                                                                [Stage 185:==========================>                          (62 + 60) / 122][Stage 185:==============================>                      (71 + 51) / 122][Stage 185:=========================================>           (96 + 26) / 122][Stage 185:===============================================>    (112 + 10) / 122][Stage 185:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.194898673 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=78 AND partitionZIndex<=79,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378642021 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:===========================>                         (59 + 54) / 113][Stage 186:==============================>                      (64 + 49) / 113][Stage 186:======================================>              (83 + 30) / 113][Stage 186:==============================================>     (100 + 13) / 113][Stage 186:===================================================> (109 + 4) / 113]                                                                                [Stage 187:=============================>                       (63 + 51) / 114][Stage 187:=================================>                   (73 + 41) / 114][Stage 187:==========================================>          (91 + 23) / 114][Stage 187:=================================================>   (107 + 7) / 114][Stage 187:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.332470801 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=81 AND partitionZIndex<=82,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388399969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:==========================>                          (60 + 60) / 120][Stage 188:==========================>                          (61 + 59) / 120][Stage 188:================================>                    (74 + 46) / 120][Stage 188:=============================================>      (104 + 16) / 120][Stage 188:===================================================> (117 + 3) / 120]                                                                                [Stage 189:============================>                        (64 + 57) / 121][Stage 189:================================>                    (74 + 47) / 121][Stage 189:=========================================>           (95 + 26) / 121][Stage 189:=============================================>      (107 + 14) / 121][Stage 189:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.164182142 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=212 AND partitionZIndex<=213,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343169056 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:=======================================>             (85 + 30) / 115][Stage 190:============================================>        (97 + 18) / 115][Stage 190:==================================================>  (110 + 5) / 115][Stage 190:====================================================>(114 + 1) / 115]                                                                                [Stage 191:======================================>              (84 + 32) / 116][Stage 191:==========================================>          (93 + 23) / 116][Stage 191:===============================================>    (106 + 10) / 116][Stage 191:===================================================> (113 + 3) / 116][Stage 191:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.906771162 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=217 AND partitionZIndex<=218,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.328767913 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:======================================>              (83 + 32) / 115][Stage 192:========================================>            (88 + 27) / 115][Stage 192:================================================>    (106 + 9) / 115][Stage 192:====================================================>(114 + 1) / 115]                                                                                [Stage 193:======================================>              (84 + 32) / 116][Stage 193:=========================================>           (90 + 26) / 116][Stage 193:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.475060984 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=20 AND partitionZIndex<=21,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38870907 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:===========================>                         (58 + 55) / 113][Stage 194:==============================>                      (66 + 47) / 113][Stage 194:======================================>              (82 + 31) / 113][Stage 194:============================================>        (95 + 18) / 113][Stage 194:===================================================> (110 + 3) / 113]                                                                                [Stage 195:===========================>                         (59 + 55) / 114][Stage 195:================================>                    (69 + 45) / 114][Stage 195:=======================================>             (85 + 29) / 114][Stage 195:================================================>    (105 + 9) / 114][Stage 195:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.255824134 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=178 AND partitionZIndex<=179,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404001495 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:==========================>                          (60 + 60) / 120][Stage 196:==============================>                      (69 + 51) / 120][Stage 196:=====================================>               (84 + 36) / 120][Stage 196:==============================================>     (107 + 13) / 120]                                                                                [Stage 197:===========================>                         (62 + 59) / 121][Stage 197:==============================>                      (69 + 52) / 121][Stage 197:========================================>            (92 + 29) / 121][Stage 197:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.008253141 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=108 AND partitionZIndex<=109,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407468586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:=================================>                   (73 + 42) / 115][Stage 198:==========================================>          (93 + 22) / 115][Stage 198:===============================================>    (105 + 10) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:===============================>                     (70 + 46) / 116][Stage 199:=====================================>               (83 + 33) / 116][Stage 199:=============================================>      (101 + 15) / 116][Stage 199:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.639979732 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=185", 2))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=184 AND partitionZIndex<=185,2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357048516 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:====================================>                (78 + 35) / 113][Stage 200:========================================>            (86 + 27) / 113][Stage 200:=============================================>       (96 + 17) / 113][Stage 200:===================================================> (109 + 4) / 113][Stage 200:====================================================>(112 + 1) / 113]                                                                                [Stage 201:=======================================>             (84 + 30) / 114][Stage 201:===========================================>         (93 + 21) / 114][Stage 201:==============================================>     (102 + 12) / 114][Stage 201:===================================================> (111 + 3) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.293353805 seconds
res203: Int = 0

scala> 

scala> :quit

real	10m3.903s
user	11m32.488s
sys	0m38.700s
