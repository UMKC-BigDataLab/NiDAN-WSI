Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 05:10:43 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 05:10:58 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 05:10:58 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 05:10:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 05:11:00 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 05:11:11 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522051100-0417).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.420024611 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                        (0 + 0) / 115][Stage 0:>                                                      (0 + 112) / 115][Stage 0:================>                                      (35 + 80) / 115][Stage 0:==========================>                            (55 + 60) / 115][Stage 0:============================>                          (60 + 55) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:================================>                      (67 + 48) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:===================================>                   (74 + 41) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:============================================>          (92 + 23) / 115][Stage 0:=============================================>         (96 + 19) / 115][Stage 0:================================================>     (103 + 12) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:====================================================>  (110 + 5) / 115][Stage 0:======================================================>(114 + 1) / 115]                                                                                [Stage 1:======================>                                (47 + 69) / 116][Stage 1:=============================>                         (63 + 53) / 116][Stage 1:===============================>                       (67 + 49) / 116][Stage 1:==================================>                    (72 + 44) / 116][Stage 1:===================================>                   (75 + 41) / 116][Stage 1:========================================>              (85 + 31) / 116][Stage 1:=============================================>         (95 + 21) / 116][Stage 1:==================================================>    (107 + 9) / 116][Stage 1:====================================================>  (110 + 6) / 116][Stage 1:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 12.762635418 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.777294209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:========================>                              (54 + 66) / 120][Stage 2:===========================>                           (59 + 61) / 120][Stage 2:===========================>                           (61 + 59) / 120][Stage 2:============================>                          (63 + 57) / 120][Stage 2:=================================>                     (73 + 47) / 120][Stage 2:==========================================>            (93 + 27) / 120][Stage 2:==================================================>    (111 + 9) / 120][Stage 2:=====================================================> (117 + 3) / 120]                                                                                [Stage 3:===========================>                           (60 + 61) / 121][Stage 3:============================>                          (63 + 58) / 121][Stage 3:==============================>                        (66 + 55) / 121][Stage 3:==================================>                    (76 + 45) / 121][Stage 3:======================================>                (84 + 37) / 121][Stage 3:=============================================>        (103 + 18) / 121][Stage 3:==================================================>    (112 + 9) / 121]                                                                                Time elapsed: 4.778020369 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 160 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 174  OR  partitionIndex = 160 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.691153395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==============================>                        (64 + 51) / 115][Stage 4:================================>                      (67 + 48) / 115][Stage 4:===================================>                   (75 + 40) / 115][Stage 4:=====================================>                 (78 + 37) / 115][Stage 4:=========================================>             (87 + 28) / 115][Stage 4:==============================================>        (98 + 17) / 115][Stage 4:===================================================>   (107 + 8) / 115][Stage 4:=====================================================> (111 + 4) / 115][Stage 4:======================================================>(113 + 2) / 115]                                                                                [Stage 5:==============================>                        (65 + 51) / 116][Stage 5:===================================>                   (74 + 42) / 116][Stage 5:=====================================>                 (80 + 36) / 116][Stage 5:=========================================>             (87 + 29) / 116][Stage 5:===========================================>           (92 + 24) / 116][Stage 5:==============================================>        (99 + 17) / 116][Stage 5:==================================================>    (107 + 9) / 116][Stage 5:======================================================>(114 + 2) / 116]                                                                                Time elapsed: 4.937429724 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 76 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.704446846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=========================>                             (56 + 65) / 121][Stage 6:=========================>                             (57 + 64) / 121][Stage 6:============================>                          (63 + 58) / 121][Stage 6:==============================>                        (68 + 53) / 121][Stage 6:===================================>                   (78 + 43) / 121][Stage 6:=====================================>                 (83 + 38) / 121][Stage 6:============================================>          (98 + 23) / 121][Stage 6:===================================================>   (114 + 7) / 121]                                                                                [Stage 7:===========================>                           (62 + 60) / 122][Stage 7:===============================>                       (69 + 53) / 122][Stage 7:====================================>                  (80 + 42) / 122][Stage 7:========================================>              (90 + 32) / 122][Stage 7:===========================================>           (97 + 25) / 122][Stage 7:===================================================>   (115 + 7) / 122]                                                                                Time elapsed: 4.327396301 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.492542466 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:=====================================>                 (79 + 36) / 115][Stage 8:========================================>              (85 + 30) / 115][Stage 8:===========================================>           (90 + 25) / 115][Stage 8:==============================================>        (98 + 17) / 115][Stage 8:===============================================>       (99 + 16) / 115][Stage 8:================================================>     (103 + 12) / 115][Stage 8:===================================================>   (108 + 7) / 115]                                                                                [Stage 9:=======================================>               (83 + 33) / 116][Stage 9:==========================================>            (89 + 27) / 116][Stage 9:==============================================>        (99 + 17) / 116][Stage 9:===============================================>      (102 + 14) / 116][Stage 9:===================================================>   (109 + 7) / 116][Stage 9:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.884296405 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 42  OR  partitionIndex = 43 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.50159174 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:===================================>                  (74 + 39) / 113][Stage 10:========================================>             (85 + 28) / 113][Stage 10:===========================================>          (91 + 22) / 113][Stage 10:==============================================>       (97 + 16) / 113][Stage 10:================================================>    (103 + 10) / 113][Stage 10:=====================================================>(111 + 2) / 113]                                                                                [Stage 11:===================================>                  (74 + 40) / 114][Stage 11:=========================================>            (88 + 26) / 114][Stage 11:============================================>         (93 + 21) / 114][Stage 11:==============================================>      (101 + 13) / 114][Stage 11:====================================================> (110 + 4) / 114][Stage 11:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.051224309 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.485337317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (72 + 43) / 115][Stage 12:======================================>               (82 + 33) / 115][Stage 12:==========================================>           (91 + 24) / 115][Stage 12:==============================================>       (98 + 17) / 115][Stage 12:==============================================>       (99 + 16) / 115][Stage 12:===============================================>     (103 + 12) / 115][Stage 12:===================================================>  (110 + 5) / 115][Stage 12:=====================================================>(114 + 1) / 115]                                                                                [Stage 13:======================================>               (82 + 34) / 116][Stage 13:========================================>             (87 + 29) / 116][Stage 13:==============================================>      (101 + 15) / 116][Stage 13:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.718448881 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.471367863 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:===================================>                  (75 + 38) / 113][Stage 14:========================================>             (85 + 28) / 113][Stage 14:============================================>         (93 + 20) / 113][Stage 14:==============================================>       (97 + 16) / 113][Stage 14:==================================================>   (105 + 8) / 113][Stage 14:=====================================================>(111 + 2) / 113]                                                                                [Stage 15:====================================>                 (78 + 36) / 114][Stage 15:=========================================>            (87 + 27) / 114][Stage 15:==============================================>       (99 + 15) / 114][Stage 15:=================================================>    (105 + 9) / 114][Stage 15:===================================================>  (108 + 6) / 114][Stage 15:====================================================> (110 + 4) / 114][Stage 15:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.951725641 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.520464672 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:>                                                       (0 + 0) / 115][Stage 16:==============================>                       (66 + 49) / 115][Stage 16:==================================>                   (73 + 42) / 115][Stage 16:=========================================>            (88 + 27) / 115][Stage 16:============================================>         (95 + 20) / 115][Stage 16:==============================================>      (101 + 14) / 115][Stage 16:===================================================>  (110 + 5) / 115]                                                                                [Stage 17:===============================>                      (68 + 48) / 116][Stage 17:====================================>                 (78 + 38) / 116][Stage 17:============================================>         (95 + 21) / 116][Stage 17:=============================================>        (98 + 18) / 116][Stage 17:==================================================>   (108 + 8) / 116][Stage 17:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.982062557 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.460850941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:=================================>                    (71 + 42) / 113][Stage 18:=======================================>              (83 + 30) / 113][Stage 18:===========================================>          (91 + 22) / 113][Stage 18:===============================================>     (102 + 11) / 113][Stage 18:==================================================>   (106 + 7) / 113][Stage 18:=====================================================>(111 + 2) / 113][Stage 18:=====================================================>(112 + 1) / 113]                                                                                [Stage 19:==================================>                   (72 + 42) / 114][Stage 19:=====================================>                (80 + 34) / 114][Stage 19:==========================================>           (89 + 25) / 114][Stage 19:==============================================>       (99 + 15) / 114][Stage 19:=================================================>    (105 + 9) / 114][Stage 19:====================================================> (110 + 4) / 114][Stage 19:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.59620731 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.555316667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:=========================>                            (57 + 64) / 121][Stage 20:===========================>                          (61 + 60) / 121][Stage 20:======================================>               (87 + 34) / 121][Stage 20:============================================>        (102 + 19) / 121][Stage 20:===============================================>     (108 + 13) / 121][Stage 20:=================================================>    (112 + 9) / 121][Stage 20:=====================================================>(119 + 2) / 121][Stage 20:=====================================================>(120 + 1) / 121]                                                                                [Stage 21:========================>                             (56 + 66) / 122][Stage 21:===========================>                          (62 + 60) / 122][Stage 21:===================================>                  (80 + 42) / 122][Stage 21:==========================================>           (97 + 25) / 122][Stage 21:==================================================>   (114 + 8) / 122][Stage 21:====================================================> (119 + 3) / 122][Stage 21:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 4.258358001 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.566900171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===================================>                  (75 + 38) / 113][Stage 22:==========================================>           (89 + 24) / 113][Stage 22:==============================================>       (97 + 16) / 113][Stage 22:================================================>    (103 + 10) / 113][Stage 22:=====================================================>(111 + 2) / 113]                                                                                [Stage 23:==================================>                   (72 + 42) / 114][Stage 23:======================================>               (81 + 33) / 114][Stage 23:==========================================>           (89 + 25) / 114][Stage 23:================================================>    (104 + 10) / 114][Stage 23:===================================================>  (108 + 6) / 114][Stage 23:====================================================> (110 + 4) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.600832398 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.501658559 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (58 + 55) / 113][Stage 24:============================>                         (60 + 53) / 113][Stage 24:===================================>                  (74 + 39) / 113][Stage 24:===========================================>          (91 + 22) / 113][Stage 24:=================================================>    (104 + 9) / 113][Stage 24:=====================================================>(112 + 1) / 113]                                                                                [Stage 25:===========================>                          (59 + 55) / 114][Stage 25:=============================>                        (63 + 51) / 114][Stage 25:====================================>                 (76 + 38) / 114][Stage 25:=============================================>        (95 + 19) / 114][Stage 25:===============================================>     (102 + 12) / 114][Stage 25:=====================================================>(112 + 2) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.602839684 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 115  OR  partitionIndex = 116 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.528721264 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:===========================>                          (60 + 60) / 120][Stage 26:=============================>                        (66 + 54) / 120][Stage 26:=================================>                    (75 + 45) / 120][Stage 26:=========================================>            (92 + 28) / 120][Stage 26:===============================================>     (108 + 12) / 120][Stage 26:=====================================================>(118 + 2) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:================================>                     (73 + 48) / 121][Stage 27:======================================>               (86 + 35) / 121][Stage 27:==============================================>      (107 + 14) / 121][Stage 27:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.517632654 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.46297851 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:===============================>                      (67 + 48) / 115][Stage 28:======================================>               (81 + 34) / 115][Stage 28:=============================================>        (96 + 19) / 115][Stage 28:==================================================>   (108 + 7) / 115][Stage 28:=====================================================>(113 + 2) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:=================================>                    (71 + 45) / 116][Stage 29:======================================>               (83 + 33) / 116][Stage 29:============================================>         (95 + 21) / 116][Stage 29:===============================================>     (105 + 11) / 116][Stage 29:===================================================>  (111 + 5) / 116][Stage 29:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.507916175 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431584848 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:======================================>               (81 + 34) / 115][Stage 30:========================================>             (86 + 29) / 115][Stage 30:============================================>         (95 + 20) / 115][Stage 30:==================================================>   (107 + 8) / 115][Stage 30:=====================================================>(114 + 1) / 115]                                                                                [Stage 31:========================================>             (86 + 30) / 116][Stage 31:==============================================>      (101 + 15) / 116][Stage 31:===============================================>     (103 + 13) / 116][Stage 31:===============================================>     (105 + 11) / 116][Stage 31:==================================================>   (109 + 7) / 116][Stage 31:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.334836452 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.475299522 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (58 + 55) / 113][Stage 32:==============================>                       (64 + 49) / 113][Stage 32:=======================================>              (82 + 31) / 113][Stage 32:===============================================>      (99 + 14) / 113][Stage 32:=====================================================>(112 + 1) / 113]                                                                                [Stage 33:===========================>                          (59 + 55) / 114][Stage 33:==============================>                       (65 + 49) / 114][Stage 33:==================================>                   (72 + 42) / 114][Stage 33:==============================================>       (99 + 15) / 114][Stage 33:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.165683641 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465600123 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:===================================>                  (75 + 40) / 115][Stage 34:===========================================>          (92 + 23) / 115][Stage 34:===============================================>     (103 + 12) / 115][Stage 34:==================================================>   (108 + 7) / 115][Stage 34:===================================================>  (110 + 5) / 115][Stage 34:=====================================================>(113 + 2) / 115]                                                                                [Stage 35:===============================>                      (68 + 48) / 116][Stage 35:=======================================>              (85 + 31) / 116][Stage 35:==============================================>       (99 + 17) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.219025748 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.503400392 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:===========================>                          (60 + 60) / 120][Stage 36:===============================>                      (69 + 51) / 120][Stage 36:========================================>             (89 + 31) / 120][Stage 36:================================================>    (110 + 10) / 120]                                                                                [Stage 37:============================>                         (63 + 58) / 121][Stage 37:===================================>                  (80 + 41) / 121][Stage 37:===========================================>         (100 + 21) / 121][Stage 37:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.058072597 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.630158788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===========================>                          (60 + 60) / 120][Stage 38:================================>                     (73 + 47) / 120][Stage 38:=========================================>            (93 + 27) / 120][Stage 38:===============================================>     (108 + 12) / 120][Stage 38:===================================================>  (114 + 6) / 120][Stage 38:=====================================================>(118 + 2) / 120][Stage 38:=====================================================>(119 + 1) / 120]                                                                                [Stage 39:===========================>                          (61 + 60) / 121][Stage 39:==============================>                       (69 + 52) / 121][Stage 39:=====================================>                (83 + 38) / 121][Stage 39:=================================================>    (112 + 9) / 121]                                                                                Time elapsed: 3.586608707 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 221  OR  partitionIndex = 235 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.399470484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:======================================>               (81 + 34) / 115][Stage 40:=============================================>        (97 + 18) / 115][Stage 40:==================================================>   (108 + 7) / 115][Stage 40:====================================================> (111 + 4) / 115][Stage 40:=====================================================>(114 + 1) / 115]                                                                                [Stage 41:=========================================>            (89 + 27) / 116][Stage 41:=============================================>       (100 + 16) / 116][Stage 41:=================================================>    (107 + 9) / 116][Stage 41:===================================================>  (111 + 5) / 116][Stage 41:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.342689651 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.478301153 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:==============================>                       (66 + 49) / 115][Stage 42:=================================>                    (71 + 44) / 115][Stage 42:=========================================>            (89 + 26) / 115][Stage 42:==================================================>   (107 + 8) / 115]                                                                                [Stage 43:==================================>                   (74 + 42) / 116][Stage 43:============================================>         (96 + 20) / 116][Stage 43:===================================================>  (111 + 5) / 116][Stage 43:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.772563017 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 194  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.535893458 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:=====================================>                (79 + 36) / 115][Stage 44:=========================================>            (88 + 27) / 115][Stage 44:==============================================>       (99 + 16) / 115][Stage 44:====================================================> (111 + 4) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:==========================================>           (91 + 25) / 116][Stage 45:==================================================>   (109 + 7) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.686366359 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457817073 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==============================>                       (65 + 50) / 115][Stage 46:===================================>                  (76 + 39) / 115][Stage 46:============================================>         (95 + 20) / 115][Stage 46:===================================================>  (109 + 6) / 115][Stage 46:=====================================================>(113 + 2) / 115]                                                                                [Stage 47:================================>                     (70 + 46) / 116][Stage 47:=====================================>                (81 + 35) / 116][Stage 47:=============================================>        (97 + 19) / 116][Stage 47:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.805705825 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426062589 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:==================================>                   (73 + 40) / 113][Stage 48:========================================>             (84 + 29) / 113][Stage 48:=============================================>        (96 + 17) / 113][Stage 48:==================================================>   (106 + 7) / 113][Stage 48:=====================================================>(112 + 1) / 113]                                                                                [Stage 49:===================================>                  (75 + 39) / 114][Stage 49:=========================================>            (88 + 26) / 114][Stage 49:=============================================>        (96 + 18) / 114][Stage 49:==================================================>   (106 + 8) / 114][Stage 49:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.063206033 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 19  OR  partitionIndex = 20 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.450074742 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:===========================>                          (58 + 55) / 113][Stage 50:================================>                     (67 + 46) / 113][Stage 50:=========================================>            (86 + 27) / 113][Stage 50:==================================================>   (105 + 8) / 113]                                                                                [Stage 51:============================>                         (60 + 54) / 114][Stage 51:===============================>                      (66 + 48) / 114][Stage 51:======================================>               (81 + 33) / 114][Stage 51:==============================================>       (99 + 15) / 114][Stage 51:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.309628316 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465733803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:============================>                         (60 + 53) / 113][Stage 52:===================================>                  (75 + 38) / 113][Stage 52:==============================================>      (100 + 13) / 113][Stage 52:=====================================================>(111 + 2) / 113][Stage 52:=====================================================>(112 + 1) / 113]                                                                                [Stage 53:===========================>                          (59 + 55) / 114][Stage 53:==============================>                       (64 + 50) / 114][Stage 53:=====================================>                (80 + 34) / 114][Stage 53:==============================================>       (98 + 16) / 114][Stage 53:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.38993533 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide37"
dataSource: String = /nidan/orc/individualORC/slide37

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411238349 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:====================================>                 (76 + 37) / 113][Stage 54:===========================================>          (90 + 23) / 113][Stage 54:===============================================>     (102 + 11) / 113][Stage 54:===================================================>  (108 + 5) / 113]                                                                                [Stage 55:=====================================>                (80 + 34) / 114][Stage 55:=========================================>            (88 + 26) / 114][Stage 55:===============================================>     (102 + 12) / 114][Stage 55:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 2.935173129 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.439592941 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:==============================>                       (66 + 49) / 115][Stage 56:=====================================>                (79 + 36) / 115][Stage 56:==============================================>       (98 + 17) / 115][Stage 56:===================================================>  (110 + 5) / 115][Stage 56:=====================================================>(114 + 1) / 115]                                                                                [Stage 57:===============================>                      (67 + 49) / 116][Stage 57:=====================================>                (81 + 35) / 116][Stage 57:============================================>         (95 + 21) / 116][Stage 57:=================================================>    (107 + 9) / 116][Stage 57:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.045553641 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4293633 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:================================>                     (70 + 45) / 115][Stage 58:========================================>             (86 + 29) / 115][Stage 58:==============================================>      (100 + 15) / 115][Stage 58:====================================================> (112 + 3) / 115]                                                                                [Stage 59:===================================>                  (76 + 40) / 116][Stage 59:============================================>         (96 + 20) / 116][Stage 59:===================================================>  (111 + 5) / 116][Stage 59:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.9485208 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4854984 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:==============================>                       (66 + 49) / 115][Stage 60:======================================>               (81 + 34) / 115][Stage 60:============================================>         (94 + 21) / 115][Stage 60:===================================================>  (109 + 6) / 115]                                                                                [Stage 61:================================>                     (70 + 46) / 116][Stage 61:========================================>             (88 + 28) / 116][Stage 61:==============================================>      (101 + 15) / 116][Stage 61:===============================================>     (105 + 11) / 116][Stage 61:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.329355889 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 29  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391550032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:=====================================>                (80 + 35) / 115][Stage 62:======================================>               (82 + 33) / 115][Stage 62:===========================================>          (93 + 22) / 115][Stage 62:===============================================>     (102 + 13) / 115][Stage 62:==================================================>   (108 + 7) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:========================================>             (86 + 30) / 116][Stage 63:============================================>         (96 + 20) / 116][Stage 63:===============================================>     (104 + 12) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.441319667 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420253385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==============================>                       (64 + 51) / 115][Stage 64:===================================>                  (76 + 39) / 115][Stage 64:==========================================>           (90 + 25) / 115][Stage 64:==================================================>   (108 + 7) / 115]                                                                                [Stage 65:==============================>                       (66 + 50) / 116][Stage 65:=====================================>                (81 + 35) / 116][Stage 65:==============================================>       (99 + 17) / 116][Stage 65:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.593572308 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.589412467 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:==========================>                           (60 + 61) / 121][Stage 66:=============================>                        (65 + 56) / 121][Stage 66:==================================>                   (77 + 44) / 121][Stage 66:=============================================>       (105 + 16) / 121][Stage 66:===================================================>  (116 + 5) / 121]                                                                                [Stage 67:===========================>                          (62 + 60) / 122][Stage 67:==================================>                   (77 + 45) / 122][Stage 67:==========================================>           (95 + 27) / 122][Stage 67:===================================================>  (116 + 6) / 122][Stage 67:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.277481184 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377169335 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:======================================>               (81 + 34) / 115][Stage 68:=======================================>              (85 + 30) / 115][Stage 68:============================================>         (94 + 21) / 115][Stage 68:=================================================>    (106 + 9) / 115][Stage 68:=====================================================>(113 + 2) / 115][Stage 68:=====================================================>(114 + 1) / 115]                                                                                [Stage 69:======================================>               (82 + 34) / 116][Stage 69:========================================>             (87 + 29) / 116][Stage 69:============================================>         (96 + 20) / 116][Stage 69:==================================================>   (108 + 8) / 116][Stage 69:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.201626407 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.454261757 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===========================>                          (60 + 60) / 120][Stage 70:=============================>                        (66 + 54) / 120][Stage 70:======================================>               (86 + 34) / 120][Stage 70:==================================================>   (112 + 8) / 120]                                                                                [Stage 71:===========================>                          (61 + 60) / 121][Stage 71:=================================>                    (75 + 46) / 121][Stage 71:=========================================>            (92 + 29) / 121][Stage 71:==================================================>   (114 + 7) / 121][Stage 71:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.106323593 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 171  OR  partitionIndex = 172 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379639365 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:=======================================>              (84 + 31) / 115][Stage 72:=============================================>        (96 + 19) / 115][Stage 72:===================================================>  (109 + 6) / 115][Stage 72:=====================================================>(114 + 1) / 115]                                                                                [Stage 73:======================================>               (82 + 34) / 116][Stage 73:=========================================>            (90 + 26) / 116][Stage 73:================================================>    (106 + 10) / 116][Stage 73:====================================================> (112 + 4) / 116][Stage 73:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.922461513 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 97  OR  partitionIndex = 111 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362777239 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:=======================================>              (84 + 31) / 115][Stage 74:==========================================>           (90 + 25) / 115][Stage 74:==============================================>      (100 + 15) / 115][Stage 74:===============================================>     (103 + 12) / 115][Stage 74:====================================================> (112 + 3) / 115]                                                                                [Stage 75:=======================================>              (85 + 31) / 116][Stage 75:=============================================>        (97 + 19) / 116][Stage 75:==================================================>   (108 + 8) / 116][Stage 75:====================================================> (113 + 3) / 116][Stage 75:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.191585564 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 142  OR  partitionIndex = 154 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.440640663 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==================================>                   (73 + 42) / 115][Stage 76:========================================>             (87 + 28) / 115][Stage 76:================================================>    (105 + 10) / 115][Stage 76:====================================================> (111 + 4) / 115]                                                                                [Stage 77:=================================>                    (71 + 45) / 116][Stage 77:=======================================>              (85 + 31) / 116][Stage 77:==============================================>      (101 + 15) / 116][Stage 77:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.823706425 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37594413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=====================================>                (80 + 35) / 115][Stage 78:========================================>             (86 + 29) / 115][Stage 78:=============================================>        (96 + 19) / 115][Stage 78:==============================================>      (101 + 14) / 115][Stage 78:=================================================>    (106 + 9) / 115][Stage 78:=====================================================>(114 + 1) / 115]                                                                                [Stage 79:======================================>               (82 + 34) / 116][Stage 79:=======================================>              (84 + 32) / 116][Stage 79:===========================================>          (93 + 23) / 116][Stage 79:==============================================>      (102 + 14) / 116][Stage 79:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.123394236 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.505059915 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:============================>                         (59 + 54) / 113][Stage 80:===============================>                      (66 + 47) / 113][Stage 80:=====================================>                (78 + 35) / 113][Stage 80:=============================================>        (96 + 17) / 113][Stage 80:===================================================>  (108 + 5) / 113]                                                                                [Stage 81:===========================>                          (59 + 55) / 114][Stage 81:===============================>                      (66 + 48) / 114][Stage 81:======================================>               (82 + 32) / 114][Stage 81:===============================================>     (102 + 12) / 114][Stage 81:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.19879937 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 201  OR  partitionIndex = 202 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393685059 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (72 + 46) / 118][Stage 82:==================================>                   (76 + 42) / 118][Stage 82:======================================>               (84 + 34) / 118][Stage 82:===========================================>          (96 + 22) / 118][Stage 82:==================================================>   (110 + 8) / 118][Stage 82:=====================================================>(117 + 1) / 118]                                                                                [Stage 83:=================================>                    (74 + 45) / 119][Stage 83:===================================>                  (79 + 40) / 119][Stage 83:=======================================>              (86 + 33) / 119][Stage 83:============================================>         (97 + 22) / 119][Stage 83:===================================================>  (113 + 6) / 119][Stage 83:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.672950464 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 98  OR  partitionIndex = 99 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354795108 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:=======================================>              (85 + 30) / 115][Stage 84:============================================>         (94 + 21) / 115][Stage 84:====================================================> (112 + 3) / 115]                                                                                [Stage 85:======================================>               (82 + 34) / 116][Stage 85:=============================================>        (97 + 19) / 116][Stage 85:===============================================>     (105 + 11) / 116][Stage 85:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.743384768 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37334086 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:=================================>                    (70 + 43) / 113][Stage 86:=======================================>              (82 + 31) / 113][Stage 86:============================================>         (94 + 19) / 113][Stage 86:===============================================>     (101 + 12) / 113][Stage 86:===================================================>  (108 + 5) / 113]                                                                                [Stage 87:=====================================>                (79 + 35) / 114][Stage 87:=========================================>            (87 + 27) / 114][Stage 87:=============================================>        (95 + 19) / 114][Stage 87:================================================>    (104 + 10) / 114][Stage 87:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.51360236 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 158  OR  partitionIndex = 159 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395554527 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:==================================>                   (72 + 41) / 113][Stage 88:========================================>             (85 + 28) / 113][Stage 88:============================================>         (94 + 19) / 113][Stage 88:===============================================>     (101 + 12) / 113][Stage 88:===================================================>  (108 + 5) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:===================================>                  (75 + 39) / 114][Stage 89:========================================>             (86 + 28) / 114][Stage 89:===========================================>          (92 + 22) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.2582996 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390071226 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:================================>                     (72 + 46) / 118][Stage 90:=================================>                    (73 + 45) / 118][Stage 90:=====================================>                (83 + 35) / 118][Stage 90:==============================================>      (104 + 14) / 118][Stage 90:====================================================> (114 + 4) / 118]                                                                                [Stage 91:=================================>                    (73 + 46) / 119][Stage 91:===================================>                  (79 + 40) / 119][Stage 91:========================================>             (90 + 29) / 119][Stage 91:================================================>    (108 + 11) / 119][Stage 91:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.059856464 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 74  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.423082395 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:===========================>                          (60 + 60) / 120][Stage 92:===========================>                          (62 + 58) / 120][Stage 92:===============================>                      (71 + 49) / 120][Stage 92:==========================================>           (95 + 25) / 120][Stage 92:====================================================> (117 + 3) / 120]                                                                                [Stage 93:============================>                         (63 + 58) / 121][Stage 93:=================================>                    (75 + 46) / 121][Stage 93:===========================================>          (98 + 23) / 121][Stage 93:==================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.125699081 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 1  OR  partitionIndex = 15 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.422927533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (61 + 59) / 120][Stage 94:===============================>                      (70 + 50) / 120][Stage 94:=========================================>            (92 + 28) / 120][Stage 94:===============================================>     (108 + 12) / 120]                                                                                [Stage 95:===========================>                          (61 + 60) / 121][Stage 95:===================================>                  (79 + 42) / 121][Stage 95:===========================================>          (97 + 24) / 121][Stage 95:==================================================>   (114 + 7) / 121]                                                                                Time elapsed: 3.283911278 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394629002 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:===============================>                      (68 + 47) / 115][Stage 96:======================================>               (82 + 33) / 115][Stage 96:==============================================>       (98 + 17) / 115][Stage 96:==================================================>   (108 + 7) / 115]                                                                                [Stage 97:===================================>                  (77 + 39) / 116][Stage 97:=======================================>              (85 + 31) / 116][Stage 97:=============================================>       (100 + 16) / 116][Stage 97:===================================================>  (111 + 5) / 116][Stage 97:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.97277312 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417701333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (58 + 55) / 113][Stage 98:==============================>                       (63 + 50) / 113][Stage 98:======================================>               (81 + 32) / 113][Stage 98:==============================================>      (100 + 13) / 113][Stage 98:=====================================================>(111 + 2) / 113]                                                                                [Stage 99:=============================>                        (62 + 52) / 114][Stage 99:====================================>                 (76 + 38) / 114][Stage 99:============================================>         (93 + 21) / 114][Stage 99:==================================================>   (107 + 7) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.187284139 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 213  OR  partitionIndex = 227 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366967774 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:===================================>                 (75 + 38) / 113][Stage 100:=========================================>           (89 + 24) / 113][Stage 100:============================================>        (95 + 18) / 113][Stage 100:==================================================>  (108 + 5) / 113][Stage 100:====================================================>(112 + 1) / 113]                                                                                [Stage 101:=====================================>               (81 + 33) / 114][Stage 101:============================================>        (96 + 18) / 114][Stage 101:==============================================>     (103 + 11) / 114][Stage 101:==================================================>  (109 + 5) / 114][Stage 101:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.302540108 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 13  OR  partitionIndex = 27 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382212534 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:=============================>                       (65 + 50) / 115][Stage 102:=====================================>               (81 + 34) / 115][Stage 102:===========================================>         (94 + 21) / 115][Stage 102:=================================================>   (108 + 7) / 115][Stage 102:===================================================> (112 + 3) / 115]                                                                                [Stage 103:==================================>                  (75 + 41) / 116][Stage 103:==========================================>          (93 + 23) / 116][Stage 103:=================================================>   (108 + 8) / 116][Stage 103:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.643851942 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413630057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:==============================>                      (68 + 52) / 120][Stage 104:===================================>                 (80 + 40) / 120][Stage 104:=============================================>      (105 + 15) / 120][Stage 104:===================================================> (116 + 4) / 120][Stage 104:====================================================>(119 + 1) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:==============================>                      (70 + 51) / 121][Stage 105:=========================================>           (94 + 27) / 121][Stage 105:===================================================> (118 + 3) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.336937781 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431552586 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:==========================>                          (60 + 60) / 120][Stage 106:==============================>                      (69 + 51) / 120][Stage 106:=====================================>               (85 + 35) / 120][Stage 106:===============================================>    (110 + 10) / 120][Stage 106:====================================================>(118 + 2) / 120]                                                                                [Stage 107:==========================>                          (61 + 60) / 121][Stage 107:==============================>                      (70 + 51) / 121][Stage 107:==========================================>          (96 + 25) / 121][Stage 107:=================================================>   (113 + 8) / 121]                                                                                Time elapsed: 3.044305536 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 31  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.435525302 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:==========================>                          (60 + 61) / 121][Stage 108:============================>                        (66 + 55) / 121][Stage 108:=====================================>               (85 + 36) / 121][Stage 108:===============================================>    (110 + 11) / 121][Stage 108:===================================================> (118 + 3) / 121]                                                                                [Stage 109:===========================>                         (64 + 58) / 122][Stage 109:=================================>                   (78 + 44) / 122][Stage 109:===========================================>        (103 + 19) / 122][Stage 109:===================================================> (118 + 4) / 122][Stage 109:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.306544921 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418790497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 60) / 120][Stage 110:============================>                        (65 + 55) / 120][Stage 110:================================>                    (74 + 46) / 120][Stage 110:===========================================>        (100 + 20) / 120][Stage 110:===================================================> (117 + 3) / 120]                                                                                [Stage 111:==========================>                          (61 + 60) / 121][Stage 111:============================>                        (64 + 57) / 121][Stage 111:====================================>                (84 + 37) / 121][Stage 111:===========================================>        (101 + 20) / 121][Stage 111:===================================================> (118 + 3) / 121][Stage 111:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.386528092 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343555563 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 34) / 115][Stage 112:======================================>              (84 + 31) / 115][Stage 112:===========================================>         (95 + 20) / 115][Stage 112:==================================================>  (110 + 5) / 115]                                                                                [Stage 113:========================================>            (89 + 27) / 116][Stage 113:=============================================>      (101 + 15) / 116][Stage 113:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.596646905 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346842715 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:======================================>              (84 + 31) / 115][Stage 114:============================================>        (96 + 19) / 115][Stage 114:===============================================>    (105 + 10) / 115][Stage 114:====================================================>(114 + 1) / 115]                                                                                [Stage 115:=======================================>             (86 + 30) / 116][Stage 115:============================================>        (98 + 18) / 116][Stage 115:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.69775474 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398602838 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:===========================>                         (62 + 58) / 120][Stage 116:===============================>                     (71 + 49) / 120][Stage 116:========================================>            (92 + 28) / 120][Stage 116:=================================================>   (112 + 8) / 120][Stage 116:====================================================>(119 + 1) / 120]                                                                                [Stage 117:==========================>                          (61 + 60) / 121][Stage 117:===============================>                     (73 + 48) / 121][Stage 117:=========================================>           (94 + 27) / 121][Stage 117:=================================================>   (112 + 9) / 121][Stage 117:====================================================>(119 + 2) / 121][Stage 117:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.553399182 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404747141 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==========================>                          (60 + 60) / 120][Stage 118:===============================>                     (72 + 48) / 120][Stage 118:===========================================>        (101 + 19) / 120][Stage 118:=================================================>   (113 + 7) / 120]                                                                                [Stage 119:===========================>                         (63 + 58) / 121][Stage 119:===============================>                     (71 + 50) / 121][Stage 119:==========================================>         (100 + 21) / 121][Stage 119:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.032557986 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 108  OR  partitionIndex = 64 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401566489 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:===========================>                         (63 + 57) / 120][Stage 120:===================================>                 (80 + 40) / 120][Stage 120:=============================================>      (106 + 14) / 120][Stage 120:====================================================>(118 + 2) / 120]                                                                                [Stage 121:==========================>                          (61 + 60) / 121][Stage 121:============================>                        (64 + 57) / 121][Stage 121:===================================>                 (80 + 41) / 121][Stage 121:=============================================>      (106 + 15) / 121][Stage 121:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.928195178 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 32  OR  partitionIndex = 33 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394894383 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===========================>                         (62 + 58) / 120][Stage 122:=================================>                   (75 + 45) / 120][Stage 122:========================================>            (91 + 29) / 120][Stage 122:==================================================>  (115 + 5) / 120]                                                                                [Stage 123:==========================>                          (61 + 60) / 121][Stage 123:============================>                        (65 + 56) / 121][Stage 123:==================================>                  (79 + 42) / 121][Stage 123:==========================================>         (100 + 21) / 121][Stage 123:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 2.928352878 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362053854 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:====================================>                (82 + 36) / 118][Stage 124:=============================================>      (103 + 15) / 118][Stage 124:===================================================> (114 + 4) / 118]                                                                                [Stage 125:================================>                    (73 + 46) / 119][Stage 125:====================================>                (81 + 38) / 119][Stage 125:===========================================>         (97 + 22) / 119][Stage 125:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.240787357 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 214  OR  partitionIndex = 215 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354925667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:=================================>                   (72 + 41) / 113][Stage 126:======================================>              (82 + 31) / 113][Stage 126:===========================================>         (92 + 21) / 113][Stage 126:==================================================>  (108 + 5) / 113][Stage 126:====================================================>(111 + 2) / 113]                                                                                [Stage 127:======================================>              (83 + 31) / 114][Stage 127:===========================================>         (93 + 21) / 114][Stage 127:=================================================>   (106 + 8) / 114][Stage 127:===================================================> (111 + 3) / 114][Stage 127:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.110876649 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 146  OR  partitionIndex = 158 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.355547628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:====================================>                (77 + 36) / 113][Stage 128:========================================>            (87 + 26) / 113][Stage 128:=============================================>       (96 + 17) / 113][Stage 128:=================================================>   (106 + 7) / 113][Stage 128:====================================================>(112 + 1) / 113]                                                                                [Stage 129:====================================>                (78 + 36) / 114][Stage 129:=========================================>           (90 + 24) / 114][Stage 129:==============================================>     (102 + 12) / 114][Stage 129:=================================================>   (107 + 7) / 114][Stage 129:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.946786348 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341315253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:=====================================>               (82 + 33) / 115][Stage 130:=======================================>             (86 + 29) / 115][Stage 130:=============================================>       (99 + 16) / 115][Stage 130:==================================================>  (110 + 5) / 115][Stage 130:====================================================>(114 + 1) / 115]                                                                                [Stage 131:=======================================>             (86 + 30) / 116][Stage 131:============================================>        (98 + 18) / 116][Stage 131:===============================================>    (106 + 10) / 116][Stage 131:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.93471172 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398428536 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:==========================>                          (60 + 60) / 120][Stage 132:=============================>                       (66 + 54) / 120][Stage 132:=====================================>               (85 + 35) / 120][Stage 132:=============================================>      (106 + 14) / 120]                                                                                [Stage 133:===========================>                         (62 + 59) / 121][Stage 133:=================================>                   (77 + 44) / 121][Stage 133:=======================================>             (91 + 30) / 121][Stage 133:==============================================>     (109 + 12) / 121][Stage 133:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.980155277 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343822562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:=====================================>               (82 + 33) / 115][Stage 134:=========================================>           (89 + 26) / 115][Stage 134:=============================================>       (98 + 17) / 115][Stage 134:===================================================> (111 + 4) / 115]                                                                                [Stage 135:=======================================>             (86 + 30) / 116][Stage 135:===========================================>         (95 + 21) / 116][Stage 135:==============================================>     (103 + 13) / 116][Stage 135:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.080759469 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 152 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 166  OR  partitionIndex = 152 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376866771 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==============================>                      (66 + 49) / 115][Stage 136:======================================>              (83 + 32) / 115][Stage 136:=============================================>       (99 + 16) / 115][Stage 136:=================================================>   (107 + 8) / 115][Stage 136:==================================================>  (110 + 5) / 115][Stage 136:====================================================>(114 + 1) / 115]                                                                                [Stage 137:===================================>                 (78 + 38) / 116][Stage 137:==========================================>          (93 + 23) / 116][Stage 137:================================================>    (107 + 9) / 116][Stage 137:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.362239988 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334822547 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (82 + 33) / 115][Stage 138:==========================================>          (93 + 22) / 115][Stage 138:=================================================>   (107 + 8) / 115]                                                                                [Stage 139:=====================================>               (83 + 33) / 116][Stage 139:=========================================>           (90 + 26) / 116][Stage 139:==============================================>     (104 + 12) / 116][Stage 139:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.872614435 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 236  OR  partitionIndex = 192 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398001533 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:===========================>                         (62 + 59) / 121][Stage 140:=============================>                       (67 + 54) / 121][Stage 140:=====================================>               (86 + 35) / 121][Stage 140:=================================================>   (113 + 8) / 121]                                                                                [Stage 141:==========================>                          (62 + 60) / 122][Stage 141:================================>                    (75 + 47) / 122][Stage 141:========================================>            (94 + 28) / 122][Stage 141:=================================================>   (115 + 7) / 122][Stage 141:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.16886785 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 162 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.382332393 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:===========================>                         (59 + 54) / 113][Stage 142:============================>                        (60 + 53) / 113][Stage 142:==================================>                  (74 + 39) / 113][Stage 142:===============================================>    (103 + 10) / 113][Stage 142:===================================================> (110 + 3) / 113]                                                                                [Stage 143:===========================>                         (59 + 55) / 114][Stage 143:================================>                    (69 + 45) / 114][Stage 143:======================================>              (83 + 31) / 114][Stage 143:==============================================>     (103 + 11) / 114]                                                                                Time elapsed: 2.988048644 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393839497 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:===========================>                         (63 + 57) / 120][Stage 144:================================>                    (73 + 47) / 120][Stage 144:===========================================>         (99 + 21) / 120][Stage 144:==================================================>  (114 + 6) / 120]                                                                                [Stage 145:===========================>                         (63 + 58) / 121][Stage 145:==================================>                  (78 + 43) / 121][Stage 145:==========================================>          (98 + 23) / 121][Stage 145:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.106377046 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39438788 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 61) / 121][Stage 146:============================>                        (64 + 57) / 121][Stage 146:================================>                    (75 + 46) / 121][Stage 146:==========================================>         (100 + 21) / 121][Stage 146:===============================================>    (110 + 11) / 121][Stage 146:====================================================>(120 + 1) / 121]                                                                                [Stage 147:============================>                        (66 + 56) / 122][Stage 147:===================================>                 (82 + 40) / 122][Stage 147:=============================================>      (107 + 15) / 122][Stage 147:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.209307166 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361035949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:================================>                    (72 + 46) / 118][Stage 148:===================================>                 (79 + 39) / 118][Stage 148:=========================================>           (92 + 26) / 118][Stage 148:===================================================> (114 + 4) / 118]                                                                                [Stage 149:=================================>                   (76 + 43) / 119][Stage 149:========================================>            (90 + 29) / 119][Stage 149:==============================================>     (106 + 13) / 119][Stage 149:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.019086223 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 218  OR  partitionIndex = 219 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364378503 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:================================>                    (72 + 46) / 118][Stage 150:==================================>                  (76 + 42) / 118][Stage 150:======================================>              (86 + 32) / 118][Stage 150:===========================================>         (97 + 21) / 118][Stage 150:==============================================>     (106 + 12) / 118]                                                                                [Stage 151:================================>                    (73 + 46) / 119][Stage 151:=====================================>               (84 + 35) / 119][Stage 151:===========================================>         (97 + 22) / 119][Stage 151:=================================================>   (111 + 8) / 119]                                                                                Time elapsed: 3.183298124 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360145945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:================================>                    (72 + 46) / 118][Stage 152:=================================>                   (74 + 44) / 118][Stage 152:======================================>              (86 + 32) / 118][Stage 152:============================================>       (101 + 17) / 118][Stage 152:====================================================>(117 + 1) / 118]                                                                                [Stage 153:================================>                    (73 + 46) / 119][Stage 153:===================================>                 (79 + 40) / 119][Stage 153:===========================================>         (98 + 21) / 119][Stage 153:==================================================>  (113 + 6) / 119][Stage 153:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.967082779 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370725126 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:================================>                    (73 + 45) / 118][Stage 154:======================================>              (85 + 33) / 118][Stage 154:===========================================>         (96 + 22) / 118][Stage 154:=================================================>   (111 + 7) / 118]                                                                                [Stage 155:================================>                    (73 + 46) / 119][Stage 155:====================================>                (81 + 38) / 119][Stage 155:============================================>        (99 + 20) / 119][Stage 155:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.062010448 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385038243 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:===========================>                         (59 + 54) / 113][Stage 156:=============================>                       (63 + 50) / 113][Stage 156:===================================>                 (75 + 38) / 113][Stage 156:=============================================>       (96 + 17) / 113][Stage 156:====================================================>(111 + 2) / 113]                                                                                [Stage 157:===========================>                         (60 + 54) / 114][Stage 157:================================>                    (70 + 44) / 114][Stage 157:=========================================>           (89 + 25) / 114][Stage 157:==============================================>     (103 + 11) / 114][Stage 157:====================================================>(112 + 2) / 114][Stage 157:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.541434939 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33055333 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:======================================>              (83 + 32) / 115][Stage 158:=======================================>             (86 + 29) / 115][Stage 158:==============================================>     (102 + 13) / 115][Stage 158:====================================================>(113 + 2) / 115]                                                                                [Stage 159:=====================================>               (82 + 34) / 116][Stage 159:========================================>            (89 + 27) / 116][Stage 159:==============================================>     (104 + 12) / 116][Stage 159:=================================================>   (109 + 7) / 116][Stage 159:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.863902514 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.362382513 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:================================>                    (73 + 45) / 118][Stage 160:===================================>                 (79 + 39) / 118][Stage 160:=======================================>             (89 + 29) / 118][Stage 160:==============================================>     (106 + 12) / 118][Stage 160:====================================================>(116 + 2) / 118]                                                                                [Stage 161:================================>                    (74 + 45) / 119][Stage 161:==================================>                  (77 + 42) / 119][Stage 161:====================================>                (82 + 37) / 119][Stage 161:=========================================>           (93 + 26) / 119][Stage 161:===============================================>    (108 + 11) / 119][Stage 161:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.405074105 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 164 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 178  OR  partitionIndex = 164 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385336803 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:===========================>                         (59 + 54) / 113][Stage 162:=============================>                       (62 + 51) / 113][Stage 162:====================================>                (78 + 35) / 113][Stage 162:==============================================>     (102 + 11) / 113][Stage 162:====================================================>(111 + 2) / 113]                                                                                [Stage 163:============================>                        (61 + 53) / 114][Stage 163:==================================>                  (74 + 40) / 114][Stage 163:========================================>            (87 + 27) / 114][Stage 163:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.022475291 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401314185 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:==============================>                      (69 + 52) / 121][Stage 164:===================================>                 (81 + 40) / 121][Stage 164:===================================================> (117 + 4) / 121]                                                                                [Stage 165:==========================>                          (61 + 61) / 122][Stage 165:============================>                        (66 + 56) / 122][Stage 165:===================================>                 (81 + 41) / 122][Stage 165:==========================================>          (98 + 24) / 122][Stage 165:=================================================>   (115 + 7) / 122]                                                                                Time elapsed: 2.962721017 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide22"
dataSource: String = /nidan/orc/individualORC/slide22

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377787314 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:===========================>                         (58 + 55) / 113][Stage 166:==============================>                      (66 + 47) / 113][Stage 166:========================================>            (86 + 27) / 113][Stage 166:=================================================>   (105 + 8) / 113][Stage 166:====================================================>(112 + 1) / 113]                                                                                [Stage 167:===========================>                         (60 + 54) / 114][Stage 167:===============================>                     (67 + 47) / 114][Stage 167:======================================>              (83 + 31) / 114][Stage 167:==============================================>     (102 + 12) / 114][Stage 167:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.135716352 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.332170456 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:=====================================>               (81 + 34) / 115][Stage 168:=========================================>           (89 + 26) / 115][Stage 168:=============================================>       (99 + 16) / 115][Stage 168:==================================================>  (109 + 6) / 115][Stage 168:====================================================>(114 + 1) / 115]                                                                                [Stage 169:====================================>                (80 + 36) / 116][Stage 169:========================================>            (89 + 27) / 116][Stage 169:===============================================>    (106 + 10) / 116]                                                                                Time elapsed: 2.646583943 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 79  OR  partitionIndex = 80 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411668246 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:==========================>                          (60 + 61) / 121][Stage 170:=============================>                       (67 + 54) / 121][Stage 170:====================================>                (84 + 37) / 121][Stage 170:=============================================>      (105 + 16) / 121][Stage 170:===================================================> (117 + 4) / 121]                                                                                [Stage 171:============================>                        (65 + 57) / 122][Stage 171:==================================>                  (79 + 43) / 122][Stage 171:===========================================>        (102 + 20) / 122][Stage 171:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.089551051 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356575811 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (73 + 45) / 118][Stage 172:=====================================>               (84 + 34) / 118][Stage 172:===========================================>         (97 + 21) / 118][Stage 172:================================================>    (109 + 9) / 118][Stage 172:====================================================>(117 + 1) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:====================================>                (81 + 38) / 119][Stage 173:==========================================>          (96 + 23) / 119][Stage 173:===============================================>    (109 + 10) / 119][Stage 173:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.462444924 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.334043043 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:=====================================>               (81 + 34) / 115][Stage 174:==========================================>          (93 + 22) / 115][Stage 174:=================================================>   (107 + 8) / 115][Stage 174:====================================================>(113 + 2) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:======================================>              (85 + 31) / 116][Stage 175:==========================================>          (93 + 23) / 116][Stage 175:================================================>    (107 + 9) / 116][Stage 175:==================================================>  (111 + 5) / 116][Stage 175:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.938283979 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.392429891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:==========================>                          (60 + 60) / 120][Stage 176:===============================>                     (71 + 49) / 120][Stage 176:=====================================>               (85 + 35) / 120][Stage 176:==============================================>     (107 + 13) / 120][Stage 176:====================================================>(119 + 1) / 120]                                                                                [Stage 177:==========================>                          (61 + 60) / 121][Stage 177:===============================>                     (71 + 50) / 121][Stage 177:=========================================>           (94 + 27) / 121][Stage 177:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.034777895 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389489539 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:============================>                        (60 + 53) / 113][Stage 178:=================================>                   (71 + 42) / 113][Stage 178:======================================>              (83 + 30) / 113][Stage 178:=================================================>   (106 + 7) / 113][Stage 178:====================================================>(112 + 1) / 113]                                                                                [Stage 179:===========================>                         (59 + 55) / 114][Stage 179:===============================>                     (67 + 47) / 114][Stage 179:=======================================>             (85 + 29) / 114][Stage 179:=================================================>   (106 + 8) / 114]                                                                                Time elapsed: 3.094649527 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394816979 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:==========================>                          (61 + 59) / 120][Stage 180:==================================>                  (77 + 43) / 120][Stage 180:===========================================>         (98 + 22) / 120][Stage 180:=================================================>   (112 + 8) / 120]                                                                                [Stage 181:==========================>                          (61 + 60) / 121][Stage 181:================================>                    (75 + 46) / 121][Stage 181:==========================================>          (97 + 24) / 121][Stage 181:===============================================>    (110 + 11) / 121][Stage 181:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.098472661 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397241929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:=================================>                   (72 + 43) / 115][Stage 182:======================================>              (84 + 31) / 115][Stage 182:=============================================>       (99 + 16) / 115][Stage 182:================================================>    (106 + 9) / 115][Stage 182:===================================================> (112 + 3) / 115][Stage 182:====================================================>(114 + 1) / 115]                                                                                [Stage 183:===============================>                     (70 + 46) / 116][Stage 183:=====================================>               (82 + 34) / 116][Stage 183:===========================================>         (96 + 20) / 116][Stage 183:===============================================>    (105 + 11) / 116][Stage 183:===================================================> (113 + 3) / 116][Stage 183:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.409821756 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.381040846 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:================================>                    (71 + 44) / 115][Stage 184:=========================================>           (89 + 26) / 115][Stage 184:============================================>        (97 + 18) / 115][Stage 184:===================================================> (111 + 4) / 115]                                                                                [Stage 185:===================================>                 (78 + 38) / 116][Stage 185:=========================================>           (90 + 26) / 116][Stage 185:===============================================>    (105 + 11) / 116][Stage 185:=================================================>   (108 + 8) / 116][Stage 185:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.112553476 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 99  OR  partitionIndex = 113 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.331671213 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:====================================>                (80 + 35) / 115][Stage 186:========================================>            (88 + 27) / 115][Stage 186:=============================================>       (99 + 16) / 115][Stage 186:===================================================> (111 + 4) / 115][Stage 186:===================================================> (112 + 3) / 115]                                                                                [Stage 187:======================================>              (84 + 32) / 116][Stage 187:=========================================>           (90 + 26) / 116][Stage 187:==============================================>     (103 + 13) / 116][Stage 187:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.06774598 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376001926 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===============================>                     (68 + 47) / 115][Stage 188:====================================>                (79 + 36) / 115][Stage 188:========================================>            (88 + 27) / 115][Stage 188:===============================================>    (104 + 11) / 115][Stage 188:====================================================>(114 + 1) / 115]                                                                                [Stage 189:===================================>                 (78 + 38) / 116][Stage 189:==========================================>          (94 + 22) / 116][Stage 189:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.727009271 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39244135 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:==========================>                          (60 + 60) / 120][Stage 190:===========================>                         (62 + 58) / 120][Stage 190:===================================>                 (80 + 40) / 120][Stage 190:===========================================>        (101 + 19) / 120][Stage 190:===================================================> (116 + 4) / 120]                                                                                [Stage 191:==========================>                          (61 + 60) / 121][Stage 191:==============================>                      (69 + 52) / 121][Stage 191:====================================>                (84 + 37) / 121][Stage 191:=============================================>      (105 + 16) / 121][Stage 191:==================================================>  (116 + 5) / 121]                                                                                Time elapsed: 3.095102425 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 68  OR  partitionIndex = 69 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346609751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (70 + 43) / 113][Stage 192:=====================================>               (80 + 33) / 113][Stage 192:===========================================>         (93 + 20) / 113][Stage 192:===============================================>    (103 + 10) / 113][Stage 192:==================================================>  (108 + 5) / 113][Stage 192:====================================================>(112 + 1) / 113]                                                                                [Stage 193:=======================================>             (84 + 30) / 114][Stage 193:===========================================>         (93 + 21) / 114][Stage 193:=================================================>   (107 + 7) / 114][Stage 193:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.207591963 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.358392317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=====================================>               (81 + 32) / 113][Stage 194:===========================================>         (93 + 20) / 113][Stage 194:===============================================>    (103 + 10) / 113][Stage 194:==================================================>  (107 + 6) / 113][Stage 194:====================================================>(112 + 1) / 113]                                                                                [Stage 195:==================================>                  (74 + 40) / 114][Stage 195:========================================>            (87 + 27) / 114][Stage 195:===========================================>         (94 + 20) / 114][Stage 195:================================================>    (105 + 9) / 114][Stage 195:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.148983774 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413022909 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (62 + 59) / 121][Stage 196:================================>                    (75 + 46) / 121][Stage 196:=========================================>           (94 + 27) / 121][Stage 196:=================================================>   (112 + 9) / 121]                                                                                [Stage 197:==========================>                          (61 + 61) / 122][Stage 197:===============================>                     (73 + 49) / 122][Stage 197:=====================================>               (86 + 36) / 122][Stage 197:=================================================>   (114 + 8) / 122]                                                                                Time elapsed: 3.109954081 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.529294203 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:==========================>                          (61 + 60) / 121][Stage 198:===============================>                     (71 + 50) / 121][Stage 198:=======================================>             (90 + 31) / 121][Stage 198:==================================================>  (116 + 5) / 121]                                                                                [Stage 199:============================>                        (65 + 57) / 122][Stage 199:==================================>                  (79 + 43) / 122][Stage 199:==========================================>          (97 + 25) / 122][Stage 199:===============================================>    (112 + 10) / 122]                                                                                Time elapsed: 3.112195449 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 229  OR  partitionIndex = 230 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.341811632 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 200:>                                                      (0 + 0) / 113][Stage 200:==================================>                  (74 + 39) / 113][Stage 200:=========================================>           (88 + 25) / 113][Stage 200:=============================================>       (98 + 15) / 113][Stage 200:==================================================>  (108 + 5) / 113]                                                                                [Stage 201:====================================>                (79 + 35) / 114][Stage 201:==========================================>          (91 + 23) / 114][Stage 201:================================================>    (105 + 9) / 114][Stage 201:===================================================> (111 + 3) / 114][Stage 201:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 2.966989883 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/22 05:20:37 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.31:44128) dropped. RpcEnv already stopped.

real	9m57.494s
user	11m33.448s
sys	0m36.464s
