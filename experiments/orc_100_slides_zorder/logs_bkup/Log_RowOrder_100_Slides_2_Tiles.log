Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/23 09:31:54 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/23 09:32:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/23 09:32:08 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/23 09:32:09 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/23 09:32:11 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/23 09:32:21 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170523093211-0549).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.448465315 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:>                                                      (0 + 113) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:==============================>                        (64 + 51) / 115][Stage 0:===============================>                       (65 + 50) / 115][Stage 0:=================================>                     (70 + 45) / 115][Stage 0:=====================================>                 (78 + 37) / 115][Stage 0:=============================================>         (95 + 20) / 115][Stage 0:===============================================>      (101 + 14) / 115][Stage 0:================================================>     (104 + 11) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:====================================================>  (109 + 6) / 115][Stage 0:====================================================>  (110 + 5) / 115]                                                                                [Stage 1:===========================>                           (58 + 58) / 116][Stage 1:==============================>                        (64 + 52) / 116][Stage 1:================================>                      (69 + 47) / 116][Stage 1:===================================>                   (74 + 42) / 116][Stage 1:=======================================>               (83 + 33) / 116][Stage 1:=============================================>         (96 + 20) / 116][Stage 1:===============================================>      (101 + 15) / 116][Stage 1:=====================================================> (113 + 3) / 116]                                                                                Time elapsed: 12.385558135 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.62627945 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:========================>                              (52 + 63) / 115][Stage 2:===================================>                   (75 + 40) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:=======================================>               (83 + 32) / 115][Stage 2:==========================================>            (89 + 26) / 115][Stage 2:===============================================>      (102 + 13) / 115][Stage 2:===================================================>   (107 + 8) / 115][Stage 2:======================================================>(114 + 1) / 115]                                                                                [Stage 3:======================================>                (81 + 35) / 116][Stage 3:========================================>              (85 + 31) / 116][Stage 3:==========================================>            (90 + 26) / 116][Stage 3:==============================================>        (99 + 17) / 116][Stage 3:====================================================>  (111 + 5) / 116][Stage 3:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.264767531 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.678643997 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:==================================>                    (70 + 43) / 113][Stage 4:====================================>                  (74 + 39) / 113][Stage 4:=====================================>                 (77 + 36) / 113][Stage 4:========================================>              (83 + 30) / 113][Stage 4:=============================================>         (93 + 20) / 113][Stage 4:==================================================>    (104 + 9) / 113][Stage 4:=====================================================> (110 + 3) / 113][Stage 4:======================================================>(111 + 2) / 113]                                                                                [Stage 5:==================================>                    (71 + 43) / 114][Stage 5:===================================>                   (74 + 40) / 114][Stage 5:=====================================>                 (78 + 36) / 114][Stage 5:=========================================>             (87 + 27) / 114][Stage 5:===============================================>       (98 + 16) / 114][Stage 5:====================================================>  (108 + 6) / 114][Stage 5:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.542939095 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 135  OR  partitionIndex = 149 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.687573385 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:========================>                              (53 + 68) / 121][Stage 6:==========================>                            (59 + 62) / 121][Stage 6:============================>                          (63 + 58) / 121][Stage 6:=============================>                         (65 + 56) / 121][Stage 6:=================================>                     (73 + 48) / 121][Stage 6:=====================================>                 (83 + 38) / 121][Stage 6:================================================>     (109 + 12) / 121][Stage 6:=====================================================> (118 + 3) / 121]                                                                                [Stage 7:===========================>                           (60 + 62) / 122][Stage 7:============================>                          (63 + 59) / 122][Stage 7:===============================>                       (69 + 53) / 122][Stage 7:====================================>                  (80 + 42) / 122][Stage 7:============================================>         (101 + 21) / 122][Stage 7:================================================>     (109 + 13) / 122][Stage 7:=====================================================> (118 + 4) / 122]                                                                                Time elapsed: 4.29895626 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.588838071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:============================>                          (58 + 55) / 113][Stage 8:===============================>                       (64 + 49) / 113][Stage 8:====================================>                  (76 + 37) / 113][Stage 8:===========================================>           (90 + 23) / 113][Stage 8:================================================>     (101 + 12) / 113][Stage 8:=================================================>    (103 + 10) / 113][Stage 8:====================================================>  (107 + 6) / 113]                                                                                [Stage 9:============================>                          (60 + 54) / 114][Stage 9:=================================>                     (69 + 45) / 114][Stage 9:======================================>                (80 + 34) / 114][Stage 9:==========================================>            (88 + 26) / 114][Stage 9:================================================>     (103 + 11) / 114][Stage 9:=====================================================> (111 + 3) / 114]                                                                                Time elapsed: 4.250239166 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 231  OR  partitionIndex = 232 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.477531417 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:=====================================>                (79 + 36) / 115][Stage 10:======================================>               (83 + 32) / 115][Stage 10:=========================================>            (89 + 26) / 115][Stage 10:=============================================>        (97 + 18) / 115][Stage 10:==============================================>      (101 + 14) / 115][Stage 10:====================================================> (111 + 4) / 115]                                                                                [Stage 11:======================================>               (82 + 34) / 116][Stage 11:==========================================>           (92 + 24) / 116][Stage 11:===============================================>     (103 + 13) / 116][Stage 11:===============================================>     (104 + 12) / 116][Stage 11:=================================================>    (107 + 9) / 116][Stage 11:====================================================> (113 + 3) / 116][Stage 11:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.020019815 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208  OR  partitionIndex = 194 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 208  OR  partitionIndex = 194 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510926744 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:=================================>                    (70 + 43) / 113][Stage 12:====================================>                 (77 + 36) / 113][Stage 12:==========================================>           (88 + 25) / 113][Stage 12:============================================>         (93 + 20) / 113][Stage 12:=================================================>    (104 + 9) / 113][Stage 12:====================================================> (109 + 4) / 113][Stage 12:=====================================================>(112 + 1) / 113]                                                                                [Stage 13:==================================>                   (72 + 42) / 114][Stage 13:======================================>               (81 + 33) / 114][Stage 13:===========================================>          (92 + 22) / 114][Stage 13:===============================================>     (103 + 11) / 114][Stage 13:===================================================>  (109 + 5) / 114][Stage 13:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.890628253 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 2 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 16  OR  partitionIndex = 2 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.542795481 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:================================>                     (72 + 46) / 118][Stage 14:===================================>                  (77 + 41) / 118][Stage 14:========================================>             (88 + 30) / 118][Stage 14:=============================================>        (99 + 19) / 118][Stage 14:==============================================>      (104 + 14) / 118][Stage 14:=================================================>    (109 + 9) / 118][Stage 14:===================================================>  (112 + 6) / 118]                                                                                [Stage 15:=================================>                    (73 + 46) / 119][Stage 15:====================================>                 (80 + 39) / 119][Stage 15:===========================================>          (95 + 24) / 119][Stage 15:==============================================>      (104 + 15) / 119][Stage 15:=================================================>    (110 + 9) / 119][Stage 15:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 4.17449837 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide70"
dataSource: String = /nidan/orc/individualORC/slide70

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.588677948 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==========================>                           (60 + 61) / 121][Stage 16:===============================>                      (70 + 51) / 121][Stage 16:=======================================>              (89 + 32) / 121][Stage 16:===============================================>     (109 + 12) / 121][Stage 16:====================================================> (117 + 4) / 121]                                                                                [Stage 17:===========================>                          (61 + 61) / 122][Stage 17:=============================>                        (67 + 55) / 122][Stage 17:======================================>               (87 + 35) / 122][Stage 17:==============================================>      (107 + 15) / 122][Stage 17:====================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.57573231 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 199  OR  partitionIndex = 200 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.509239454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:===============================>                      (68 + 47) / 115][Stage 18:=========================================>            (88 + 27) / 115][Stage 18:===============================================>     (103 + 12) / 115][Stage 18:===================================================>  (110 + 5) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:================================>                     (70 + 46) / 116][Stage 19:=======================================>              (84 + 32) / 116][Stage 19:============================================>         (96 + 20) / 116][Stage 19:================================================>    (106 + 10) / 116][Stage 19:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.395866913 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510224377 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:====================================>                 (77 + 36) / 113][Stage 20:==========================================>           (88 + 25) / 113][Stage 20:=============================================>        (96 + 17) / 113][Stage 20:================================================>    (103 + 10) / 113][Stage 20:===================================================>  (108 + 5) / 113][Stage 20:=====================================================>(111 + 2) / 113]                                                                                [Stage 21:==================================>                   (72 + 42) / 114][Stage 21:=========================================>            (88 + 26) / 114][Stage 21:============================================>         (93 + 21) / 114][Stage 21:==============================================>       (99 + 15) / 114][Stage 21:===================================================>  (109 + 5) / 114][Stage 21:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.549735746 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 122  OR  partitionIndex = 123 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.556234504 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:==========================>                           (60 + 61) / 121][Stage 22:============================>                         (63 + 58) / 121][Stage 22:==================================>                   (77 + 44) / 121][Stage 22:============================================>         (99 + 22) / 121][Stage 22:===============================================>     (108 + 13) / 121][Stage 22:=================================================>    (112 + 9) / 121][Stage 22:=====================================================>(119 + 2) / 121]                                                                                [Stage 23:===========================>                          (61 + 61) / 122][Stage 23:=============================>                        (66 + 56) / 122][Stage 23:====================================>                 (83 + 39) / 122][Stage 23:===========================================>         (101 + 21) / 122][Stage 23:===================================================>  (117 + 5) / 122]                                                                                Time elapsed: 3.942566366 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 23  OR  partitionIndex = 24 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.530499901 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:==========================>                           (60 + 61) / 121][Stage 24:===============================>                      (71 + 50) / 121][Stage 24:=========================================>            (94 + 27) / 121][Stage 24:================================================>    (110 + 11) / 121][Stage 24:=====================================================>(120 + 1) / 121]                                                                                [Stage 25:===========================>                          (61 + 61) / 122][Stage 25:===========================>                          (63 + 59) / 122][Stage 25:====================================>                 (83 + 39) / 122][Stage 25:==============================================>      (108 + 14) / 122][Stage 25:===================================================>  (117 + 5) / 122][Stage 25:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.399328944 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.51455943 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:>                                                       (0 + 0) / 120][Stage 26:===========================>                          (60 + 60) / 120][Stage 26:=============================>                        (65 + 55) / 120][Stage 26:====================================>                 (82 + 38) / 120][Stage 26:============================================>        (100 + 20) / 120][Stage 26:=================================================>    (111 + 9) / 120]                                                                                [Stage 27:===========================>                          (61 + 60) / 121][Stage 27:=============================>                        (65 + 56) / 121][Stage 27:=====================================>                (85 + 36) / 121][Stage 27:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.322547457 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413021845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:======================================>               (81 + 34) / 115][Stage 28:========================================>             (87 + 28) / 115][Stage 28:==============================================>       (98 + 17) / 115][Stage 28:===============================================>     (104 + 11) / 115][Stage 28:====================================================> (112 + 3) / 115]                                                                                [Stage 29:=======================================>              (84 + 32) / 116][Stage 29:=============================================>        (97 + 19) / 116][Stage 29:===============================================>     (103 + 13) / 116][Stage 29:====================================================> (112 + 4) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.266810059 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.499035401 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:============================>                         (59 + 54) / 113][Stage 30:================================>                     (67 + 46) / 113][Stage 30:========================================>             (85 + 28) / 113][Stage 30:================================================>    (103 + 10) / 113][Stage 30:=====================================================>(112 + 1) / 113]                                                                                [Stage 31:=============================>                        (62 + 52) / 114][Stage 31:===================================>                  (75 + 39) / 114][Stage 31:===========================================>          (92 + 22) / 114][Stage 31:===============================================>     (102 + 12) / 114][Stage 31:====================================================> (110 + 4) / 114][Stage 31:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.619420809 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 64  OR  partitionIndex = 65 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410782698 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:=====================================>                (80 + 35) / 115][Stage 32:=======================================>              (84 + 31) / 115][Stage 32:=============================================>        (96 + 19) / 115][Stage 32:=================================================>    (106 + 9) / 115][Stage 32:=====================================================>(113 + 2) / 115]                                                                                [Stage 33:=======================================>              (85 + 31) / 116][Stage 33:============================================>         (96 + 20) / 116][Stage 33:===================================================>  (110 + 6) / 116][Stage 33:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.292439361 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 2  OR  partitionIndex = 3 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414963471 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:=======================================>              (85 + 30) / 115][Stage 34:===========================================>          (92 + 23) / 115][Stage 34:================================================>    (105 + 10) / 115][Stage 34:=====================================================>(114 + 1) / 115]                                                                                [Stage 35:=======================================>              (84 + 32) / 116][Stage 35:==========================================>           (91 + 25) / 116][Stage 35:===============================================>     (105 + 11) / 116][Stage 35:===================================================>  (110 + 6) / 116][Stage 35:====================================================> (113 + 3) / 116]                                                                                Time elapsed: 3.366006636 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.524021921 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:==========================>                           (60 + 61) / 121][Stage 36:=============================>                        (65 + 56) / 121][Stage 36:=====================================>                (85 + 36) / 121][Stage 36:==================================================>   (114 + 7) / 121][Stage 36:=====================================================>(119 + 2) / 121]                                                                                [Stage 37:============================>                         (64 + 58) / 122][Stage 37:==================================>                   (77 + 45) / 122][Stage 37:===========================================>         (101 + 21) / 122][Stage 37:===================================================>  (117 + 5) / 122][Stage 37:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.421254753 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 36  OR  partitionIndex = 37 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.469880127 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:===================================>                  (75 + 38) / 113][Stage 38:=======================================>              (83 + 30) / 113][Stage 38:==============================================>      (100 + 13) / 113][Stage 38:================================================>    (103 + 10) / 113][Stage 38:====================================================> (110 + 3) / 113]                                                                                [Stage 39:=====================================>                (80 + 34) / 114][Stage 39:=========================================>            (87 + 27) / 114][Stage 39:==============================================>      (100 + 14) / 114][Stage 39:===================================================>  (109 + 5) / 114][Stage 39:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.548393741 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 20  OR  partitionIndex = 6 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.486909461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:==========================>                           (60 + 61) / 121][Stage 40:=============================>                        (65 + 56) / 121][Stage 40:=================================>                    (74 + 47) / 121][Stage 40:===========================================>          (97 + 24) / 121][Stage 40:=====================================================>(120 + 1) / 121]                                                                                [Stage 41:===========================>                          (63 + 59) / 122][Stage 41:==================================>                   (77 + 45) / 122][Stage 41:=======================================>              (89 + 33) / 122][Stage 41:=============================================>       (104 + 18) / 122][Stage 41:===================================================>  (117 + 5) / 122][Stage 41:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.575598468 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425768986 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:=====================================>                (79 + 36) / 115][Stage 42:=======================================>              (84 + 31) / 115][Stage 42:==============================================>      (101 + 14) / 115][Stage 42:=====================================================>(113 + 2) / 115]                                                                                [Stage 43:========================================>             (86 + 30) / 116][Stage 43:==============================================>      (102 + 14) / 116][Stage 43:====================================================> (112 + 4) / 116][Stage 43:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.212690145 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide21"
dataSource: String = /nidan/orc/individualORC/slide21

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 18  OR  partitionIndex = 30 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.521387312 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:===========================>                          (61 + 60) / 121][Stage 44:================================>                     (72 + 49) / 121][Stage 44:=======================================>              (88 + 33) / 121][Stage 44:================================================>    (111 + 10) / 121]                                                                                [Stage 45:===========================>                          (61 + 61) / 122][Stage 45:===============================>                      (71 + 51) / 122][Stage 45:==========================================>           (95 + 27) / 122][Stage 45:==================================================>   (115 + 7) / 122]                                                                                Time elapsed: 3.072117713 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 22  OR  partitionIndex = 34 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.484645695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:==========================>                           (60 + 61) / 121][Stage 46:=============================>                        (67 + 54) / 121][Stage 46:========================================>             (91 + 30) / 121][Stage 46:=============================================>       (105 + 16) / 121]                                                                                [Stage 47:===========================>                          (61 + 61) / 122][Stage 47:==============================>                       (70 + 52) / 122][Stage 47:=====================================>                (85 + 37) / 122][Stage 47:=============================================>       (104 + 18) / 122][Stage 47:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.110199096 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide80"
dataSource: String = /nidan/orc/individualORC/slide80

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 63  OR  partitionIndex = 77 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.470322328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:===========================>                          (60 + 60) / 120][Stage 48:=============================>                        (66 + 54) / 120][Stage 48:=======================================>              (88 + 32) / 120][Stage 48:=============================================>       (103 + 17) / 120][Stage 48:===================================================>  (114 + 6) / 120][Stage 48:====================================================> (116 + 4) / 120][Stage 48:=====================================================>(119 + 1) / 120]                                                                                [Stage 49:============================>                         (63 + 58) / 121][Stage 49:=================================>                    (75 + 46) / 121][Stage 49:======================================>               (86 + 35) / 121][Stage 49:===============================================>     (109 + 12) / 121][Stage 49:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.731618068 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.45215733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:================================>                     (72 + 46) / 118][Stage 50:=================================>                    (73 + 45) / 118][Stage 50:====================================>                 (79 + 39) / 118][Stage 50:======================================>               (84 + 34) / 118][Stage 50:============================================>        (100 + 18) / 118][Stage 50:=====================================================>(117 + 1) / 118]                                                                                [Stage 51:=================================>                    (73 + 46) / 119][Stage 51:===================================>                  (79 + 40) / 119][Stage 51:=======================================>              (86 + 33) / 119][Stage 51:============================================>         (97 + 22) / 119][Stage 51:==============================================>      (104 + 15) / 119][Stage 51:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.622349118 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40846171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:======================================>               (81 + 34) / 115][Stage 52:=========================================>            (89 + 26) / 115][Stage 52:==============================================>      (101 + 14) / 115][Stage 52:=====================================================>(113 + 2) / 115]                                                                                [Stage 53:=========================================>            (90 + 26) / 116][Stage 53:=============================================>       (100 + 16) / 116][Stage 53:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.689302486 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 151  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.465061292 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:==========================>                           (60 + 61) / 121][Stage 54:============================>                         (63 + 58) / 121][Stage 54:====================================>                 (82 + 39) / 121][Stage 54:==============================================>      (106 + 15) / 121][Stage 54:=====================================================>(119 + 2) / 121]                                                                                [Stage 55:===========================>                          (61 + 61) / 122][Stage 55:==============================>                       (68 + 54) / 122][Stage 55:=======================================>              (90 + 32) / 122][Stage 55:==============================================>      (107 + 15) / 122][Stage 55:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.293035961 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 17  OR  partitionIndex = 18 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.424905603 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:===============================>                      (68 + 47) / 115][Stage 56:=====================================>                (79 + 36) / 115][Stage 56:==============================================>      (100 + 15) / 115][Stage 56:====================================================> (111 + 4) / 115]                                                                                [Stage 57:=================================>                    (73 + 43) / 116][Stage 57:========================================>             (88 + 28) / 116][Stage 57:===============================================>     (104 + 12) / 116][Stage 57:=====================================================>(114 + 2) / 116][Stage 57:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.818386807 seconds
res59: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 72  OR  partitionIndex = 73 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.482974449 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:====================================>                 (77 + 36) / 113][Stage 58:==========================================>           (88 + 25) / 113][Stage 58:==============================================>       (98 + 15) / 113][Stage 58:===================================================>  (108 + 5) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:====================================>                 (76 + 38) / 114][Stage 59:==========================================>           (89 + 25) / 114][Stage 59:=============================================>        (96 + 18) / 114][Stage 59:==================================================>   (106 + 8) / 114][Stage 59:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.133707931 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 78  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407419387 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:=====================================>                (79 + 34) / 113][Stage 60:========================================>             (84 + 29) / 113][Stage 60:===============================================>      (99 + 14) / 113][Stage 60:===================================================>  (107 + 6) / 113][Stage 60:====================================================> (110 + 3) / 113][Stage 60:=====================================================>(112 + 1) / 113]                                                                                [Stage 61:===================================>                  (74 + 40) / 114][Stage 61:=======================================>              (83 + 31) / 114][Stage 61:=============================================>        (96 + 18) / 114][Stage 61:==============================================>      (100 + 14) / 114][Stage 61:=================================================>    (105 + 9) / 114][Stage 61:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.843486627 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.40229341 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:================================>                     (72 + 46) / 118][Stage 62:==================================>                   (76 + 42) / 118][Stage 62:=====================================>                (82 + 36) / 118][Stage 62:===========================================>          (96 + 22) / 118][Stage 62:=================================================>    (109 + 9) / 118][Stage 62:=====================================================>(116 + 2) / 118]                                                                                [Stage 63:=================================>                    (74 + 45) / 119][Stage 63:===================================>                  (79 + 40) / 119][Stage 63:======================================>               (84 + 35) / 119][Stage 63:==========================================>           (94 + 25) / 119][Stage 63:================================================>    (109 + 10) / 119][Stage 63:=====================================================>(117 + 2) / 119][Stage 63:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.849912508 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 60  OR  partitionIndex = 61 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398858159 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:==================================>                   (73 + 40) / 113][Stage 64:==========================================>           (88 + 25) / 113][Stage 64:============================================>         (93 + 20) / 113][Stage 64:==================================================>   (106 + 7) / 113][Stage 64:=====================================================>(111 + 2) / 113][Stage 64:=====================================================>(112 + 1) / 113]                                                                                [Stage 65:========================================>             (86 + 28) / 114][Stage 65:============================================>         (93 + 21) / 114][Stage 65:=================================================>    (105 + 9) / 114][Stage 65:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.294649726 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 233  OR  partitionIndex = 234 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395079267 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:=====================================>                (79 + 34) / 113][Stage 66:========================================>             (85 + 28) / 113][Stage 66:============================================>         (94 + 19) / 113][Stage 66:================================================>    (103 + 10) / 113][Stage 66:====================================================> (110 + 3) / 113]                                                                                [Stage 67:========================================>             (85 + 29) / 114][Stage 67:=============================================>        (96 + 18) / 114][Stage 67:===============================================>     (103 + 11) / 114][Stage 67:=====================================================>(112 + 2) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.312214422 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide71"
dataSource: String = /nidan/orc/individualORC/slide71

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432560588 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (58 + 55) / 113][Stage 68:===============================>                      (65 + 48) / 113][Stage 68:======================================>               (80 + 33) / 113][Stage 68:=============================================>        (96 + 17) / 113][Stage 68:===================================================>  (108 + 5) / 113][Stage 68:=====================================================>(112 + 1) / 113]                                                                                [Stage 69:=============================>                        (63 + 51) / 114][Stage 69:=================================>                    (71 + 43) / 114][Stage 69:===========================================>          (92 + 22) / 114][Stage 69:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.350689886 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide81"
dataSource: String = /nidan/orc/individualORC/slide81

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426155447 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:===============================>                      (67 + 48) / 115][Stage 70:=====================================>                (79 + 36) / 115][Stage 70:============================================>         (95 + 20) / 115][Stage 70:===============================================>     (102 + 13) / 115][Stage 70:=====================================================>(114 + 1) / 115]                                                                                [Stage 71:===============================>                      (68 + 48) / 116][Stage 71:=======================================>              (84 + 32) / 116][Stage 71:============================================>         (95 + 21) / 116][Stage 71:================================================>    (106 + 10) / 116][Stage 71:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.25843187 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.446610733 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:============================>                         (59 + 54) / 113][Stage 72:=============================>                        (61 + 52) / 113][Stage 72:================================>                     (68 + 45) / 113][Stage 72:===========================================>          (92 + 21) / 113][Stage 72:=================================================>    (104 + 9) / 113]                                                                                [Stage 73:=============================>                        (62 + 52) / 114][Stage 73:================================>                     (69 + 45) / 114][Stage 73:========================================>             (86 + 28) / 114][Stage 73:==============================================>      (100 + 14) / 114][Stage 73:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.290269652 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide29"
dataSource: String = /nidan/orc/individualORC/slide29

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434748154 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:===========================>                          (58 + 55) / 113][Stage 74:==============================>                       (63 + 50) / 113][Stage 74:====================================>                 (76 + 37) / 113][Stage 74:==========================================>           (89 + 24) / 113][Stage 74:==================================================>   (106 + 7) / 113]                                                                                [Stage 75:=============================>                        (63 + 51) / 114][Stage 75:=================================>                    (70 + 44) / 114][Stage 75:======================================>               (82 + 32) / 114][Stage 75:==============================================>      (101 + 13) / 114][Stage 75:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.324416581 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide99"
dataSource: String = /nidan/orc/individualORC/slide99

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431590285 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:===========================>                          (58 + 55) / 113][Stage 76:===================================>                  (74 + 39) / 113][Stage 76:==========================================>           (89 + 24) / 113][Stage 76:==================================================>   (106 + 7) / 113]                                                                                [Stage 77:============================>                         (61 + 53) / 114][Stage 77:==================================>                   (73 + 41) / 114][Stage 77:============================================>         (93 + 21) / 114][Stage 77:===============================================>     (102 + 12) / 114][Stage 77:===================================================>  (109 + 5) / 114][Stage 77:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.408044709 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384268032 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (71 + 42) / 113][Stage 78:========================================>             (84 + 29) / 113][Stage 78:=============================================>        (96 + 17) / 113][Stage 78:=================================================>    (104 + 9) / 113][Stage 78:===================================================>  (107 + 6) / 113]                                                                                [Stage 79:======================================>               (81 + 33) / 114][Stage 79:===========================================>          (91 + 23) / 114][Stage 79:===============================================>     (102 + 12) / 114][Stage 79:==================================================>   (107 + 7) / 114][Stage 79:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.209729613 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide61"
dataSource: String = /nidan/orc/individualORC/slide61

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 162  OR  partitionIndex = 163 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384572454 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:=================================>                    (73 + 45) / 118][Stage 80:===================================>                  (78 + 40) / 118][Stage 80:=======================================>              (86 + 32) / 118][Stage 80:===========================================>          (95 + 23) / 118][Stage 80:================================================>    (108 + 10) / 118]                                                                                [Stage 81:=================================>                    (73 + 46) / 119][Stage 81:=====================================>                (82 + 37) / 119][Stage 81:=======================================>              (88 + 31) / 119][Stage 81:============================================>         (98 + 21) / 119][Stage 81:===================================================>  (114 + 5) / 119]                                                                                Time elapsed: 3.434495254 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide24"
dataSource: String = /nidan/orc/individualORC/slide24

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 192  OR  partitionIndex = 193 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.560698318 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:===========================>                          (60 + 60) / 120][Stage 82:============================>                         (64 + 56) / 120][Stage 82:==================================>                   (77 + 43) / 120][Stage 82:===========================================>          (97 + 23) / 120][Stage 82:===================================================>  (115 + 5) / 120]                                                                                [Stage 83:===========================>                          (61 + 60) / 121][Stage 83:===================================>                  (79 + 42) / 121][Stage 83:=============================================>       (103 + 18) / 121][Stage 83:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.099758161 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 144  OR  partitionIndex = 130 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.437051062 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (61 + 59) / 120][Stage 84:===============================>                      (71 + 49) / 120][Stage 84:=======================================>              (87 + 33) / 120][Stage 84:=============================================>       (103 + 17) / 120]                                                                                [Stage 85:===========================>                          (61 + 60) / 121][Stage 85:================================>                     (72 + 49) / 121][Stage 85:========================================>             (91 + 30) / 121][Stage 85:================================================>    (111 + 10) / 121][Stage 85:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.185791597 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371642171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:======================================>               (81 + 34) / 115][Stage 86:=========================================>            (89 + 26) / 115][Stage 86:=================================================>    (106 + 9) / 115][Stage 86:=====================================================>(114 + 1) / 115]                                                                                [Stage 87:======================================>               (82 + 34) / 116][Stage 87:========================================>             (88 + 28) / 116][Stage 87:=============================================>       (100 + 16) / 116][Stage 87:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.620671204 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide100"
dataSource: String = /nidan/orc/individualORC/slide100

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 207  OR  partitionIndex = 208 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39298682 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:======================================>               (81 + 32) / 113][Stage 88:===========================================>          (90 + 23) / 113][Stage 88:================================================>    (103 + 10) / 113][Stage 88:===================================================>  (107 + 6) / 113][Stage 88:====================================================> (109 + 4) / 113][Stage 88:=====================================================>(112 + 1) / 113]                                                                                [Stage 89:=====================================>                (80 + 34) / 114][Stage 89:===========================================>          (91 + 23) / 114][Stage 89:===============================================>     (103 + 11) / 114][Stage 89:=====================================================>(112 + 2) / 114][Stage 89:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.906684589 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide87"
dataSource: String = /nidan/orc/individualORC/slide87

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 70  OR  partitionIndex = 71 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.421371631 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:===========================>                          (60 + 60) / 120][Stage 90:===========================>                          (62 + 58) / 120][Stage 90:================================>                     (72 + 48) / 120][Stage 90:===========================================>          (97 + 23) / 120][Stage 90:====================================================> (117 + 3) / 120]                                                                                [Stage 91:===========================>                          (61 + 60) / 121][Stage 91:==============================>                       (68 + 53) / 121][Stage 91:======================================>               (87 + 34) / 121][Stage 91:==============================================>      (107 + 14) / 121]                                                                                Time elapsed: 3.277494631 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide85"
dataSource: String = /nidan/orc/individualORC/slide85

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 149  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.413670307 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:============================>                         (59 + 54) / 113][Stage 92:===============================>                      (66 + 47) / 113][Stage 92:======================================>               (80 + 33) / 113][Stage 92:====================================================> (109 + 4) / 113][Stage 92:=====================================================>(112 + 1) / 113]                                                                                [Stage 93:===========================>                          (59 + 55) / 114][Stage 93:=============================>                        (62 + 52) / 114][Stage 93:====================================>                 (78 + 36) / 114][Stage 93:============================================>         (94 + 20) / 114][Stage 93:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.137918443 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 121  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425336124 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:===========================>                          (58 + 55) / 113][Stage 94:============================>                         (59 + 54) / 113][Stage 94:====================================>                 (76 + 37) / 113][Stage 94:==============================================>       (98 + 15) / 113][Stage 94:=====================================================>(112 + 1) / 113]                                                                                [Stage 95:=============================>                        (62 + 52) / 114][Stage 95:===================================>                  (74 + 40) / 114][Stage 95:==========================================>           (90 + 24) / 114][Stage 95:=================================================>    (105 + 9) / 114][Stage 95:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.203373033 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide82"
dataSource: String = /nidan/orc/individualORC/slide82

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379702517 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=================================>                    (73 + 45) / 118][Stage 96:=====================================>                (83 + 35) / 118][Stage 96:=================================================>    (109 + 9) / 118]                                                                                [Stage 97:=================================>                    (73 + 46) / 119][Stage 97:==================================>                   (77 + 42) / 119][Stage 97:=======================================>              (88 + 31) / 119][Stage 97:===============================================>     (107 + 12) / 119]                                                                                Time elapsed: 2.711114094 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 186  OR  partitionIndex = 187 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407996649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:===========================>                          (58 + 55) / 113][Stage 98:================================>                     (68 + 45) / 113][Stage 98:========================================>             (84 + 29) / 113][Stage 98:================================================>    (103 + 10) / 113]                                                                                [Stage 99:==============================>                       (64 + 50) / 114][Stage 99:====================================>                 (76 + 38) / 114][Stage 99:==========================================>           (89 + 25) / 114][Stage 99:===============================================>     (102 + 12) / 114][Stage 99:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.092826358 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide94"
dataSource: String = /nidan/orc/individualORC/slide94

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 172  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433376969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (60 + 60) / 120][Stage 100:=============================>                       (67 + 53) / 120][Stage 100:======================================>              (87 + 33) / 120][Stage 100:===============================================>    (109 + 11) / 120]                                                                                [Stage 101:===========================>                         (63 + 58) / 121][Stage 101:================================>                    (75 + 46) / 121][Stage 101:=========================================>           (95 + 26) / 121][Stage 101:=================================================>   (112 + 9) / 121]                                                                                Time elapsed: 3.067682618 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 112  OR  partitionIndex = 8 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41797116 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 61) / 121][Stage 102:==============================>                      (69 + 52) / 121][Stage 102:=====================================>               (85 + 36) / 121][Stage 102:=================================================>   (112 + 9) / 121]                                                                                [Stage 103:==========================>                          (61 + 61) / 122][Stage 103:=============================>                       (67 + 55) / 122][Stage 103:=====================================>               (87 + 35) / 122][Stage 103:===============================================>    (112 + 10) / 122][Stage 103:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.097329833 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407012905 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:===========================>                         (59 + 54) / 113][Stage 104:=============================>                       (62 + 51) / 113][Stage 104:======================================>              (83 + 30) / 113][Stage 104:==============================================>      (99 + 14) / 113][Stage 104:=================================================>   (106 + 7) / 113][Stage 104:===================================================> (109 + 4) / 113]                                                                                [Stage 105:=============================>                       (64 + 50) / 114][Stage 105:====================================>                (78 + 36) / 114][Stage 105:===========================================>         (94 + 20) / 114][Stage 105:==================================================>  (108 + 6) / 114][Stage 105:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.601178309 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide75"
dataSource: String = /nidan/orc/individualORC/slide75

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.41786094 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:================================>                    (73 + 45) / 118][Stage 106:===================================>                 (80 + 38) / 118][Stage 106:============================================>        (99 + 19) / 118][Stage 106:===================================================> (115 + 3) / 118]                                                                                [Stage 107:=================================>                   (75 + 44) / 119][Stage 107:====================================>                (81 + 38) / 119][Stage 107:============================================>       (102 + 17) / 119][Stage 107:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.046050228 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 43  OR  partitionIndex = 57 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.425917726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:============================>                        (61 + 52) / 113][Stage 108:================================>                    (69 + 44) / 113][Stage 108:============================================>        (94 + 19) / 113][Stage 108:=================================================>   (105 + 8) / 113]                                                                                [Stage 109:=============================>                       (64 + 50) / 114][Stage 109:====================================>                (78 + 36) / 114][Stage 109:===========================================>         (94 + 20) / 114][Stage 109:==================================================>  (109 + 5) / 114][Stage 109:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.200479623 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide91"
dataSource: String = /nidan/orc/individualORC/slide91

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419823707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:==========================>                          (60 + 61) / 121][Stage 110:==========================>                          (61 + 60) / 121][Stage 110:=================================>                   (76 + 45) / 121][Stage 110:===========================================>         (99 + 22) / 121][Stage 110:====================================================>(119 + 2) / 121]                                                                                [Stage 111:==========================>                          (61 + 61) / 122][Stage 111:==========================>                          (62 + 60) / 122][Stage 111:==================================>                  (80 + 42) / 122][Stage 111:===========================================>        (103 + 19) / 122][Stage 111:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.021195548 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 180  OR  partitionIndex = 181 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.357898768 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:=====================================>               (81 + 32) / 113][Stage 112:==========================================>          (90 + 23) / 113][Stage 112:==============================================>     (101 + 12) / 113][Stage 112:===================================================> (109 + 4) / 113][Stage 112:====================================================>(112 + 1) / 113]                                                                                [Stage 113:===================================>                 (77 + 37) / 114][Stage 113:=======================================>             (86 + 28) / 114][Stage 113:==========================================>          (92 + 22) / 114][Stage 113:================================================>    (105 + 9) / 114]                                                                                Time elapsed: 2.981361741 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 167  OR  partitionIndex = 168 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369485845 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:==================================>                  (77 + 41) / 118][Stage 114:========================================>            (91 + 27) / 118][Stage 114:=============================================>      (104 + 14) / 118][Stage 114:===================================================> (114 + 4) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:===================================>                 (80 + 39) / 119][Stage 115:========================================>            (92 + 27) / 119][Stage 115:===========================================>        (100 + 19) / 119][Stage 115:===================================================> (116 + 3) / 119][Stage 115:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.558368031 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.510999258 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:==========================>                          (60 + 61) / 121][Stage 116:===========================>                         (63 + 58) / 121][Stage 116:==================================>                  (79 + 42) / 121][Stage 116:==========================================>          (97 + 24) / 121][Stage 116:===================================================> (117 + 4) / 121]                                                                                [Stage 117:===========================>                         (63 + 59) / 122][Stage 117:=================================>                   (78 + 44) / 122][Stage 117:===========================================>        (103 + 19) / 122][Stage 117:==================================================>  (116 + 6) / 122][Stage 117:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.224006659 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide64"
dataSource: String = /nidan/orc/individualORC/slide64

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 209 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393720163 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:===========================>                         (59 + 54) / 113][Stage 118:==============================>                      (64 + 49) / 113][Stage 118:====================================>                (77 + 36) / 113][Stage 118:============================================>        (95 + 18) / 113][Stage 118:===================================================> (110 + 3) / 113]                                                                                [Stage 119:=============================>                       (63 + 51) / 114][Stage 119:=================================>                   (73 + 41) / 114][Stage 119:==============================================>      (99 + 15) / 114][Stage 119:===================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.132903527 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.420508169 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 102 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.33668256 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:======================================>              (83 + 32) / 115][Stage 120:=========================================>           (90 + 25) / 115][Stage 120:=============================================>      (100 + 15) / 115][Stage 120:===================================================> (111 + 4) / 115][Stage 120:====================================================>(113 + 2) / 115]                                                                                [Stage 121:=====================================>               (82 + 34) / 116][Stage 121:===========================================>         (96 + 20) / 116][Stage 121:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.736715076 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide79"
dataSource: String = /nidan/orc/individualORC/slide79

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 75  OR  partitionIndex = 89 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.361141459 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:===================================>                 (76 + 37) / 113][Stage 122:========================================>            (87 + 26) / 113][Stage 122:==============================================>     (100 + 13) / 113][Stage 122:====================================================>(111 + 2) / 113]                                                                                [Stage 123:=================================>                   (73 + 41) / 114][Stage 123:======================================>              (82 + 32) / 114][Stage 123:=============================================>      (100 + 14) / 114][Stage 123:=================================================>   (106 + 8) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.903661171 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 153  OR  partitionIndex = 167 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385484676 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:================================>                    (72 + 46) / 118][Stage 124:===================================>                 (78 + 40) / 118][Stage 124:=========================================>           (92 + 26) / 118][Stage 124:===============================================>    (107 + 11) / 118][Stage 124:====================================================>(117 + 1) / 118]                                                                                [Stage 125:=================================>                   (76 + 43) / 119][Stage 125:=======================================>             (88 + 31) / 119][Stage 125:================================================>    (110 + 9) / 119][Stage 125:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.1310403 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide67"
dataSource: String = /nidan/orc/individualORC/slide67

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 164  OR  partitionIndex = 165 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.393605702 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==============================>                      (67 + 48) / 115][Stage 126:===================================>                 (77 + 38) / 115][Stage 126:==========================================>          (92 + 23) / 115][Stage 126:=================================================>   (107 + 8) / 115]                                                                                [Stage 127:====================================>                (80 + 36) / 116][Stage 127:============================================>        (98 + 18) / 116][Stage 127:==================================================>  (110 + 6) / 116][Stage 127:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.730959277 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide90"
dataSource: String = /nidan/orc/individualORC/slide90

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 235  OR  partitionIndex = 236 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.34923078 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:=====================================>               (82 + 33) / 115][Stage 128:========================================>            (88 + 27) / 115][Stage 128:=============================================>       (99 + 16) / 115][Stage 128:====================================================>(114 + 1) / 115]                                                                                [Stage 129:=======================================>             (87 + 29) / 116][Stage 129:===========================================>         (95 + 21) / 116][Stage 129:=================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.701326503 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369840166 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:================================>                    (73 + 45) / 118][Stage 130:===================================>                 (79 + 39) / 118][Stage 130:======================================>              (85 + 33) / 118][Stage 130:============================================>       (101 + 17) / 118][Stage 130:====================================================>(116 + 2) / 118]                                                                                [Stage 131:================================>                    (73 + 46) / 119][Stage 131:=================================>                   (76 + 43) / 119][Stage 131:=====================================>               (84 + 35) / 119][Stage 131:============================================>        (99 + 20) / 119][Stage 131:================================================>    (110 + 9) / 119][Stage 131:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.78583762 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide95"
dataSource: String = /nidan/orc/individualORC/slide95

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 46 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378622074 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:================================>                    (70 + 45) / 115][Stage 132:=====================================>               (82 + 33) / 115][Stage 132:=============================================>      (100 + 15) / 115][Stage 132:===================================================> (111 + 4) / 115]                                                                                [Stage 133:==============================>                      (67 + 49) / 116][Stage 133:====================================>                (79 + 37) / 116][Stage 133:=========================================>           (90 + 26) / 116][Stage 133:=================================================>   (108 + 8) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.73303751 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide84"
dataSource: String = /nidan/orc/individualORC/slide84

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 40  OR  partitionIndex = 41 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417983761 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 61) / 121][Stage 134:===========================>                         (62 + 59) / 121][Stage 134:==================================>                  (79 + 42) / 121][Stage 134:=========================================>           (94 + 27) / 121][Stage 134:==================================================>  (115 + 6) / 121]                                                                                [Stage 135:============================>                        (65 + 57) / 122][Stage 135:===================================>                 (82 + 40) / 122][Stage 135:============================================>       (105 + 17) / 122][Stage 135:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.121178068 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 161  OR  partitionIndex = 175 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356834364 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:=====================================>               (80 + 33) / 113][Stage 136:=========================================>           (88 + 25) / 113][Stage 136:==========================================>          (90 + 23) / 113][Stage 136:==================================================>  (107 + 6) / 113][Stage 136:====================================================>(111 + 2) / 113]                                                                                [Stage 137:==================================>                  (75 + 39) / 114][Stage 137:=========================================>           (90 + 24) / 114][Stage 137:==============================================>      (99 + 15) / 114][Stage 137:=================================================>   (106 + 8) / 114][Stage 137:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.157306905 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide97"
dataSource: String = /nidan/orc/individualORC/slide97

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346024209 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:=====================================>               (82 + 33) / 115][Stage 138:=========================================>           (91 + 24) / 115][Stage 138:============================================>        (97 + 18) / 115][Stage 138:====================================================>(114 + 1) / 115]                                                                                [Stage 139:=====================================>               (83 + 33) / 116][Stage 139:==========================================>          (93 + 23) / 116][Stage 139:==============================================>     (104 + 12) / 116][Stage 139:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.929454514 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 53  OR  partitionIndex = 54 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.343617501 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:======================================>              (83 + 32) / 115][Stage 140:=============================================>       (99 + 16) / 115][Stage 140:===================================================> (111 + 4) / 115][Stage 140:====================================================>(114 + 1) / 115]                                                                                [Stage 141:=======================================>             (87 + 29) / 116][Stage 141:==============================================>     (104 + 12) / 116][Stage 141:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.866658812 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 16 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432341047 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:======================================>              (83 + 32) / 115][Stage 142:==========================================>          (93 + 22) / 115][Stage 142:=================================================>   (108 + 7) / 115][Stage 142:====================================================>(114 + 1) / 115]                                                                                [Stage 143:=======================================>             (87 + 29) / 116][Stage 143:============================================>       (100 + 16) / 116][Stage 143:===================================================> (112 + 4) / 116][Stage 143:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.212461501 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 59  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.406382324 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:============================>                        (64 + 56) / 120][Stage 144:=====================================>               (85 + 35) / 120][Stage 144:==============================================>     (108 + 12) / 120][Stage 144:====================================================>(119 + 1) / 120]                                                                                [Stage 145:==========================>                          (61 + 60) / 121][Stage 145:============================>                        (64 + 57) / 121][Stage 145:=================================>                   (76 + 45) / 121][Stage 145:===========================================>        (102 + 19) / 121][Stage 145:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.027977549 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 45  OR  partitionIndex = 59 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.403465434 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:==========================>                          (60 + 60) / 120][Stage 146:===============================>                     (71 + 49) / 120][Stage 146:=========================================>           (94 + 26) / 120][Stage 146:===================================================> (116 + 4) / 120]                                                                                [Stage 147:===========================>                         (63 + 58) / 121][Stage 147:===============================>                     (71 + 50) / 121][Stage 147:=======================================>             (90 + 31) / 121][Stage 147:=================================================>   (114 + 7) / 121][Stage 147:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.153918613 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 183  OR  partitionIndex = 197 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38026262 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:>                                                      (0 + 0) / 115][Stage 148:===============================>                     (69 + 46) / 115][Stage 148:=======================================>             (86 + 29) / 115][Stage 148:============================================>        (96 + 19) / 115][Stage 148:=================================================>   (107 + 8) / 115][Stage 148:====================================================>(113 + 2) / 115]                                                                                [Stage 149:===============================>                     (68 + 48) / 116][Stage 149:=====================================>               (81 + 35) / 116][Stage 149:=========================================>           (91 + 25) / 116][Stage 149:==================================================>  (111 + 5) / 116][Stage 149:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.945037643 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 216  OR  partitionIndex = 217 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401851088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:============================>                        (60 + 53) / 113][Stage 150:===================================>                 (75 + 38) / 113][Stage 150:===========================================>         (93 + 20) / 113][Stage 150:===============================================>    (103 + 10) / 113][Stage 150:====================================================>(112 + 1) / 113]                                                                                [Stage 151:===========================>                         (60 + 54) / 114][Stage 151:==============================>                      (66 + 48) / 114][Stage 151:===========================================>         (93 + 21) / 114][Stage 151:=================================================>   (107 + 7) / 114][Stage 151:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.371598191 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 165  OR  partitionIndex = 179 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.431830125 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:==========================>                          (60 + 61) / 121][Stage 152:===========================>                         (62 + 59) / 121][Stage 152:===================================>                 (80 + 41) / 121][Stage 152:===========================================>        (102 + 19) / 121][Stage 152:===================================================> (117 + 4) / 121][Stage 152:====================================================>(120 + 1) / 121]                                                                                [Stage 153:==========================>                          (61 + 61) / 122][Stage 153:============================>                        (66 + 56) / 122][Stage 153:==================================>                  (79 + 43) / 122][Stage 153:==============================================>     (108 + 14) / 122][Stage 153:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.20916405 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide66"
dataSource: String = /nidan/orc/individualORC/slide66

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 74 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 88  OR  partitionIndex = 74 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.407697628 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:===========================>                         (62 + 58) / 120][Stage 154:================================>                    (74 + 46) / 120][Stage 154:=========================================>           (94 + 26) / 120][Stage 154:==================================================>  (114 + 6) / 120]                                                                                [Stage 155:===========================>                         (62 + 59) / 121][Stage 155:===============================>                     (73 + 48) / 121][Stage 155:======================================>              (88 + 33) / 121][Stage 155:===============================================>    (111 + 10) / 121]                                                                                Time elapsed: 3.105447337 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 150  OR  partitionIndex = 151 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39908222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:============================>                        (64 + 57) / 121][Stage 156:===============================>                     (72 + 49) / 121][Stage 156:=======================================>             (91 + 30) / 121][Stage 156:=================================================>   (114 + 7) / 121][Stage 156:====================================================>(120 + 1) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:==============================>                      (71 + 51) / 122][Stage 157:=======================================>             (92 + 30) / 122][Stage 157:===============================================>    (112 + 10) / 122][Stage 157:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.251012324 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 137  OR  partitionIndex = 138 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339598928 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:=====================================>               (82 + 33) / 115][Stage 158:=========================================>           (91 + 24) / 115][Stage 158:=================================================>   (107 + 8) / 115]                                                                                [Stage 159:=====================================>               (83 + 33) / 116][Stage 159:==========================================>          (92 + 24) / 116][Stage 159:=============================================>      (102 + 14) / 116][Stage 159:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.618346316 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414569769 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:==========================>                          (60 + 61) / 121][Stage 160:==============================>                      (70 + 51) / 121][Stage 160:=====================================>               (86 + 35) / 121][Stage 160:==============================================>     (109 + 12) / 121]                                                                                [Stage 161:==========================>                          (61 + 61) / 122][Stage 161:===============================>                     (73 + 49) / 122][Stage 161:========================================>            (94 + 28) / 122][Stage 161:=============================================>      (107 + 15) / 122][Stage 161:===================================================> (119 + 3) / 122]                                                                                Time elapsed: 3.142216935 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide63"
dataSource: String = /nidan/orc/individualORC/slide63

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 39  OR  partitionIndex = 53 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400348164 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:>                                                      (0 + 0) / 121][Stage 162:==========================>                          (60 + 61) / 121][Stage 162:=============================>                       (67 + 54) / 121][Stage 162:===================================>                 (82 + 39) / 121][Stage 162:==================================================>  (115 + 6) / 121]                                                                                [Stage 163:===========================>                         (63 + 59) / 122][Stage 163:===============================>                     (73 + 49) / 122][Stage 163:=====================================>               (87 + 35) / 122][Stage 163:==============================================>     (110 + 12) / 122]                                                                                Time elapsed: 2.990410089 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365234751 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:=====================================>               (81 + 34) / 115][Stage 164:=========================================>           (90 + 25) / 115][Stage 164:==============================================>     (103 + 12) / 115][Stage 164:===================================================> (111 + 4) / 115]                                                                                [Stage 165:======================================>              (85 + 31) / 116][Stage 165:=========================================>           (90 + 26) / 116][Stage 165:=================================================>   (108 + 8) / 116]                                                                                Time elapsed: 2.635070729 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 230  OR  partitionIndex = 216 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391641576 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:=================================>                   (72 + 43) / 115][Stage 166:========================================>            (88 + 27) / 115][Stage 166:==============================================>     (102 + 13) / 115][Stage 166:====================================================>(113 + 2) / 115][Stage 166:====================================================>(114 + 1) / 115]                                                                                [Stage 167:==================================>                  (76 + 40) / 116][Stage 167:==========================================>          (94 + 22) / 116][Stage 167:===============================================>    (106 + 10) / 116][Stage 167:====================================================>(114 + 2) / 116][Stage 167:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.255539059 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364582729 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:================================>                    (73 + 45) / 118][Stage 168:==================================>                  (77 + 41) / 118][Stage 168:=======================================>             (88 + 30) / 118][Stage 168:=========================================>           (93 + 25) / 118][Stage 168:==============================================>     (106 + 12) / 118][Stage 168:====================================================>(117 + 1) / 118]                                                                                [Stage 169:=================================>                   (76 + 43) / 119][Stage 169:====================================>                (82 + 37) / 119][Stage 169:=========================================>           (94 + 25) / 119][Stage 169:===============================================>    (109 + 10) / 119][Stage 169:====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.465017971 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide15"
dataSource: String = /nidan/orc/individualORC/slide15

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 189  OR  partitionIndex = 203 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.391217695 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:===========================>                         (58 + 55) / 113][Stage 170:===============================>                     (67 + 46) / 113][Stage 170:======================================>              (82 + 31) / 113][Stage 170:==============================================>     (101 + 12) / 113][Stage 170:==================================================>  (107 + 6) / 113]                                                                                [Stage 171:============================>                        (62 + 52) / 114][Stage 171:=================================>                   (71 + 43) / 114][Stage 171:===========================================>         (94 + 20) / 114][Stage 171:=================================================>   (106 + 8) / 114][Stage 171:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.376852728 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 118  OR  partitionIndex = 104 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.378642494 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:================================>                    (72 + 46) / 118][Stage 172:================================>                    (73 + 45) / 118][Stage 172:==================================>                  (76 + 42) / 118][Stage 172:====================================>                (82 + 36) / 118][Stage 172:============================================>       (101 + 17) / 118][Stage 172:==================================================>  (113 + 5) / 118]                                                                                [Stage 173:================================>                    (73 + 46) / 119][Stage 173:=================================>                   (75 + 44) / 119][Stage 173:====================================>                (81 + 38) / 119][Stage 173:=======================================>             (88 + 31) / 119][Stage 173:=============================================>      (105 + 14) / 119][Stage 173:===================================================> (116 + 3) / 119]                                                                                Time elapsed: 3.762443664 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.372900476 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:==============================>                      (66 + 49) / 115][Stage 174:==================================>                  (75 + 40) / 115][Stage 174:===========================================>         (94 + 21) / 115][Stage 174:==================================================>  (109 + 6) / 115]                                                                                [Stage 175:===============================>                     (70 + 46) / 116][Stage 175:=======================================>             (86 + 30) / 116][Stage 175:=============================================>       (99 + 17) / 116][Stage 175:====================================================>(114 + 2) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.355151678 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide96"
dataSource: String = /nidan/orc/individualORC/slide96

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 107  OR  partitionIndex = 108 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369661526 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:================================>                    (72 + 46) / 118][Stage 176:=================================>                   (74 + 44) / 118][Stage 176:===================================>                 (78 + 40) / 118][Stage 176:=====================================>               (83 + 35) / 118][Stage 176:==========================================>          (95 + 23) / 118][Stage 176:==================================================>  (112 + 6) / 118][Stage 176:====================================================>(117 + 1) / 118]                                                                                [Stage 177:================================>                    (73 + 46) / 119][Stage 177:=================================>                   (76 + 43) / 119][Stage 177:=====================================>               (85 + 34) / 119][Stage 177:=========================================>           (94 + 25) / 119][Stage 177:===============================================>    (109 + 10) / 119]                                                                                Time elapsed: 3.856402805 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 91  OR  partitionIndex = 105 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339003567 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:======================================>              (84 + 31) / 115][Stage 178:===========================================>         (95 + 20) / 115][Stage 178:===============================================>    (104 + 11) / 115][Stage 178:====================================================>(114 + 1) / 115]                                                                                [Stage 179:=====================================>               (81 + 35) / 116][Stage 179:========================================>            (89 + 27) / 116][Stage 179:============================================>        (97 + 19) / 116][Stage 179:================================================>    (107 + 9) / 116]                                                                                Time elapsed: 2.712735558 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 116  OR  partitionIndex = 72 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.432867308 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:>                                                      (0 + 0) / 113][Stage 180:===========================>                         (59 + 54) / 113][Stage 180:===============================>                     (68 + 45) / 113][Stage 180:=====================================>               (81 + 32) / 113][Stage 180:================================================>    (104 + 9) / 113]                                                                                [Stage 181:===========================>                         (60 + 54) / 114][Stage 181:================================>                    (70 + 44) / 114][Stage 181:===========================================>         (94 + 20) / 114][Stage 181:===================================================> (111 + 3) / 114][Stage 181:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.088041482 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.379781057 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:====================================>                (77 + 36) / 113][Stage 182:===========================================>         (92 + 21) / 113][Stage 182:==============================================>     (102 + 11) / 113][Stage 182:==================================================>  (108 + 5) / 113]                                                                                [Stage 183:===================================>                 (77 + 37) / 114][Stage 183:==========================================>          (91 + 23) / 114][Stage 183:=============================================>       (98 + 16) / 114][Stage 183:==================================================>  (109 + 5) / 114][Stage 183:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.282471945 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 141  OR  partitionIndex = 142 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.371313891 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:===============================>                     (68 + 47) / 115][Stage 184:======================================>              (84 + 31) / 115][Stage 184:============================================>        (96 + 19) / 115][Stage 184:===============================================>    (105 + 10) / 115][Stage 184:====================================================>(114 + 1) / 115]                                                                                [Stage 185:===============================>                     (69 + 47) / 116][Stage 185:=======================================>             (86 + 30) / 116][Stage 185:============================================>        (98 + 18) / 116][Stage 185:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.793238416 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 206  OR  partitionIndex = 218 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370547988 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:=====================================>               (82 + 33) / 115][Stage 186:==========================================>          (92 + 23) / 115][Stage 186:==============================================>     (103 + 12) / 115][Stage 186:===================================================> (112 + 3) / 115][Stage 186:====================================================>(114 + 1) / 115]                                                                                [Stage 187:=====================================>               (82 + 34) / 116][Stage 187:========================================>            (89 + 27) / 116][Stage 187:=============================================>      (102 + 14) / 116][Stage 187:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.999118076 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 124 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365143871 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:=================================>                   (74 + 44) / 118][Stage 188:====================================>                (82 + 36) / 118][Stage 188:==========================================>          (94 + 24) / 118][Stage 188:==============================================>     (106 + 12) / 118][Stage 188:====================================================>(116 + 2) / 118]                                                                                [Stage 189:================================>                    (74 + 45) / 119][Stage 189:====================================>                (81 + 38) / 119][Stage 189:===========================================>         (98 + 21) / 119][Stage 189:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.277555669 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 181  OR  partitionIndex = 195 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.364721289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:====================================>                (82 + 36) / 118][Stage 190:=============================================>      (104 + 14) / 118]                                                                                [Stage 191:================================>                    (74 + 45) / 119][Stage 191:===================================>                 (79 + 40) / 119][Stage 191:==========================================>          (95 + 24) / 119][Stage 191:=================================================>   (112 + 7) / 119]                                                                                Time elapsed: 2.896471107 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide89"
dataSource: String = /nidan/orc/individualORC/slide89

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 131  OR  partitionIndex = 145 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.365211451 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:==================================>                  (77 + 41) / 118][Stage 192:=========================================>           (93 + 25) / 118][Stage 192:================================================>    (109 + 9) / 118][Stage 192:====================================================>(117 + 1) / 118]                                                                                [Stage 193:================================>                    (74 + 45) / 119][Stage 193:==================================>                  (77 + 42) / 119][Stage 193:=======================================>             (88 + 31) / 119][Stage 193:=============================================>      (105 + 14) / 119][Stage 193:===================================================> (115 + 4) / 119]                                                                                Time elapsed: 3.091966154 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 109  OR  partitionIndex = 110 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.37759887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:=================================>                   (74 + 44) / 118][Stage 194:===================================>                 (79 + 39) / 118][Stage 194:========================================>            (91 + 27) / 118][Stage 194:=============================================>      (104 + 14) / 118][Stage 194:=================================================>   (111 + 7) / 118][Stage 194:====================================================>(116 + 2) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:=================================>                   (75 + 44) / 119][Stage 195:======================================>              (86 + 33) / 119][Stage 195:==========================================>          (96 + 23) / 119][Stage 195:=================================================>   (111 + 8) / 119][Stage 195:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.583980891 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 52  OR  partitionIndex = 60 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.388708726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:================================>                    (71 + 44) / 115][Stage 196:======================================>              (83 + 32) / 115][Stage 196:=============================================>      (100 + 15) / 115][Stage 196:==================================================>  (109 + 6) / 115]                                                                                [Stage 197:===============================>                     (69 + 47) / 116][Stage 197:========================================>            (88 + 28) / 116][Stage 197:============================================>       (100 + 16) / 116][Stage 197:==================================================>  (111 + 5) / 116][Stage 197:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.189273106 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377836971 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, ind ex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:===============================>                     (69 + 46) / 115][Stage 198:===================================>                 (77 + 38) / 115][Stage 198:============================================>        (97 + 18) / 115][Stage 198:==================================================>  (109 + 6) / 115][Stage 198:====================================================>(113 + 2) / 115]                                                                                [Stage 199:=================================>                   (73 + 43) / 116][Stage 199:=======================================>             (87 + 29) / 116][Stage 199:==============================================>     (104 + 12) / 116][Stage 199:=================================================>   (109 + 7) / 116][Stage 199:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.195078284 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/23 09:41:51 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:51706) dropped. RpcEnv already stopped.
17/05/23 09:41:51 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.4:51706) dropped. RpcEnv already stopped.

real	10m0.029s
user	11m31.364s
sys	0m38.756s
