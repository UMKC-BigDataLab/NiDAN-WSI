Warning: Ignoring non-spark config property: hive.exec.reducers.bytes.per.reducer=67108864
Warning: Ignoring non-spark config property: hive.fetch.task.aggr=false
Warning: Ignoring non-spark config property: hive.merge.sparkfiles=false
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask=true
Warning: Ignoring non-spark config property: hive.merge.size.per.task=256000000
Warning: Ignoring non-spark config property: hive.smbjoin.cache.rows=10000
Warning: Ignoring non-spark config property: hive.merge.smallfiles.avgsize=16000000
Warning: Ignoring non-spark config property: hive.optimize.sort.dynamic.partition=false
Warning: Ignoring non-spark config property: hive.exec.orc.default.stripe.size=67108864
Warning: Ignoring non-spark config property: hive.vectorized.execution.enabled=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication.min.reducer=4
Warning: Ignoring non-spark config property: hive.orc.splits.include.file.footer=false
Warning: Ignoring non-spark config property: hive.merge.mapfiles=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.list-status.num-threads=5
Warning: Ignoring non-spark config property: hive.vectorized.groupby.checkinterval=4096
Warning: Ignoring non-spark config property: hive.compute.query.using.stats=true
Warning: Ignoring non-spark config property: mapreduce.input.fileinputformat.split.maxsize=750000000
Warning: Ignoring non-spark config property: hive.merge.orcfile.stripe.level=true
Warning: Ignoring non-spark config property: hive.auto.convert.join.noconditionaltask.size=894435328
Warning: Ignoring non-spark config property: hive.fetch.task.conversion.threshold=1073741824
Warning: Ignoring non-spark config property: hive.auto.convert.join=true
Warning: Ignoring non-spark config property: hive.optimize.reducededuplication=true
Warning: Ignoring non-spark config property: hive.vectorized.groupby.flush.percent=0.1
Warning: Ignoring non-spark config property: hive.fetch.task.conversion=more
Warning: Ignoring non-spark config property: hive.limit.pushdown.memory.usage=0.4
Warning: Ignoring non-spark config property: hive.vectorized.execution.reduce.enabled=false
Warning: Ignoring non-spark config property: hive.map.aggr=true
Warning: Ignoring non-spark config property: hive.stats.autogather=true
Warning: Ignoring non-spark config property: hive.stats.fetch.column.stats=true
Warning: Ignoring non-spark config property: hive.cbo.enable=true
Warning: Ignoring non-spark config property: hive.map.aggr.hash.percentmemory=0.5
Warning: Ignoring non-spark config property: hive.optimize.index.filter=true
Warning: Ignoring non-spark config property: hive.optimize.bucketmapjoin.sortedmerge=false
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
17/05/22 07:59:05 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 07:59:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 07:59:20 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 07:59:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
17/05/22 07:59:23 WARN spark.SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead.
17/05/22 07:59:33 WARN metastore.ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
Spark context Web UI available at http://128.110.152.45:4040
Spark context available as 'sc' (master = spark://ctl:7077, app id = app-20170522075922-0433).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.1.0
      /_/
         
Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_121)
Type in expressions to have them evaluated.
Type :help for more information.

scala> import java.io.File
import java.io.File

scala> import java.io.FileOutputStream
import java.io.FileOutputStream

scala> import org.apache.spark.sql._
import org.apache.spark.sql._

scala> 

scala> val queryMsg = "#QUERY "
queryMsg: String = "#QUERY "

scala> val loadDBMsg = "#LOAD_DB "
loadDBMsg: String = "#LOAD_DB "

scala> val loadTable = "#LOAD_TABLE "
loadTable: String = "#LOAD_TABLE "

scala> val loadsqlHive = "#LOAD_SQL_CONTEXT "
loadsqlHive: String = "#LOAD_SQL_CONTEXT "

scala> 

scala> def show_timing[T](proc: => T): T = {
     |     val start=System.nanoTime()
     |     val res = proc
     |     val end = System.nanoTime()
     |     println("Time elapsed: " + (end-start)/1000000000.0 + " seconds")
     |     res
     | }
show_timing: [T](proc: => T)T

scala> 

scala> val writeToLocal = (in:(Array[Byte], Long, String)) =>{
     |     val bytes = in._1
     |     val output = in._3
     |     
     |     val writer = new FileOutputStream(output)
     |     writer.write(bytes)
     |     writer.close
     |     1
     |   }
writeToLocal: ((Array[Byte], Long, String)) => Int = <function1>

scala>   
     | val sqlContext = new org.apache.spark.sql.hive.HiveContext(sc)
warning: there was one deprecation warning; re-run with -deprecation for details
sqlContext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@52737c1

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> 

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 4.410506894 seconds

scala> val queries = List(("SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107", 8))
queries: List[(String, Int)] = List((SELECT imageBytes FROM data WHERE partitionZIndex>=100 AND partitionZIndex<=107,8))

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 0:>                                                      (0 + 112) / 115][Stage 0:======================>                                (47 + 68) / 115][Stage 0:===========================>                           (58 + 57) / 115][Stage 0:==============================>                        (63 + 52) / 115][Stage 0:===============================>                       (66 + 49) / 115][Stage 0:=================================>                     (71 + 44) / 115][Stage 0:====================================>                  (77 + 38) / 115][Stage 0:======================================>                (80 + 35) / 115][Stage 0:===========================================>           (90 + 25) / 115][Stage 0:==============================================>       (100 + 15) / 115][Stage 0:=================================================>    (105 + 10) / 115][Stage 0:==================================================>    (106 + 9) / 115][Stage 0:=====================================================> (111 + 4) / 115]                                                                                [Stage 1:============================>                          (60 + 56) / 116][Stage 1:==============================>                        (65 + 51) / 116][Stage 1:===============================>                       (66 + 50) / 116][Stage 1:==================================>                    (73 + 43) / 116][Stage 1:=====================================>                 (80 + 36) / 116][Stage 1:========================================>              (86 + 30) / 116][Stage 1:=============================================>         (97 + 19) / 116][Stage 1:=================================================>    (106 + 10) / 116][Stage 1:=====================================================> (113 + 3) / 116][Stage 1:======================================================>(115 + 1) / 116]                                                                                Time elapsed: 12.537796844 seconds
res2: Int = 0

scala> 

scala>  
     | val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 124  OR  partitionIndex = 125 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.747342965 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 2:============================>                          (60 + 55) / 115][Stage 2:===============================>                       (65 + 50) / 115][Stage 2:=================================>                     (69 + 46) / 115][Stage 2:======================================>                (81 + 34) / 115][Stage 2:============================================>          (93 + 22) / 115][Stage 2:==============================================>        (97 + 18) / 115][Stage 2:=================================================>    (105 + 10) / 115][Stage 2:=====================================================> (111 + 4) / 115]                                                                                [Stage 3:==============================>                        (64 + 52) / 116][Stage 3:==================================>                    (72 + 44) / 116][Stage 3:=====================================>                 (80 + 36) / 116][Stage 3:========================================>              (86 + 30) / 116][Stage 3:=============================================>         (97 + 19) / 116][Stage 3:================================================>     (105 + 11) / 116][Stage 3:===================================================>   (108 + 8) / 116]                                                                                Time elapsed: 4.776400544 seconds
res5: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 90  OR  partitionIndex = 91 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.718979045 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 4:=======================>                               (48 + 65) / 113][Stage 4:=======================>                               (49 + 64) / 113][Stage 4:===========================>                           (57 + 56) / 113][Stage 4:==================================>                    (70 + 43) / 113][Stage 4:======================================>                (79 + 34) / 113][Stage 4:==========================================>            (87 + 26) / 113][Stage 4:===================================================>   (106 + 7) / 113][Stage 4:=====================================================> (110 + 3) / 113]                                                                                [Stage 5:===========================>                           (58 + 56) / 114][Stage 5:==============================>                        (64 + 50) / 114][Stage 5:=====================================>                 (78 + 36) / 114][Stage 5:===========================================>           (90 + 24) / 114][Stage 5:================================================>     (102 + 12) / 114][Stage 5:====================================================>  (109 + 5) / 114][Stage 5:======================================================>(112 + 2) / 114]                                                                                Time elapsed: 4.419702392 seconds
res7: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide26"
dataSource: String = /nidan/orc/individualORC/slide26

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 101  OR  partitionIndex = 115 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.623103612 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 6:=================================>                     (72 + 46) / 118][Stage 6:==================================>                    (74 + 44) / 118][Stage 6:==================================>                    (75 + 43) / 118][Stage 6:====================================>                  (79 + 39) / 118][Stage 6:=========================================>             (88 + 30) / 118][Stage 6:===========================================>           (94 + 24) / 118][Stage 6:================================================>     (105 + 13) / 118][Stage 6:=====================================================> (114 + 4) / 118]                                                                                [Stage 7:=================================>                     (73 + 46) / 119][Stage 7:==================================>                    (74 + 45) / 119][Stage 7:====================================>                  (79 + 40) / 119][Stage 7:====================================>                  (80 + 39) / 119][Stage 7:=======================================>               (85 + 34) / 119][Stage 7:===========================================>           (95 + 24) / 119][Stage 7:================================================>     (107 + 12) / 119][Stage 7:====================================================>  (114 + 5) / 119]                                                                                Time elapsed: 4.804463248 seconds
res9: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 220  OR  partitionIndex = 221 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.663059247 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 8:========================>                              (53 + 68) / 121][Stage 8:===========================>                           (60 + 61) / 121][Stage 8:===========================>                           (61 + 60) / 121][Stage 8:===============================>                       (70 + 51) / 121][Stage 8:========================================>              (88 + 33) / 121][Stage 8:=============================================>        (101 + 20) / 121][Stage 8:====================================================>  (115 + 6) / 121]                                                                                [Stage 9:===========================>                           (61 + 61) / 122][Stage 9:=============================>                         (65 + 57) / 122][Stage 9:======================================>                (86 + 36) / 122][Stage 9:============================================>          (99 + 23) / 122][Stage 9:================================================>     (110 + 12) / 122][Stage 9:====================================================>  (117 + 5) / 122]                                                                                Time elapsed: 4.05199443 seconds
res11: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 211  OR  partitionIndex = 225 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.591651184 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 10:==========================>                           (60 + 61) / 121][Stage 10:================================>                     (73 + 48) / 121][Stage 10:=========================================>            (94 + 27) / 121][Stage 10:=============================================>       (105 + 16) / 121][Stage 10:==================================================>   (114 + 7) / 121]                                                                                [Stage 11:===========================>                          (61 + 61) / 122][Stage 11:===========================>                          (62 + 60) / 122][Stage 11:===================================>                  (81 + 41) / 122][Stage 11:==========================================>           (96 + 26) / 122][Stage 11:==================================================>   (113 + 9) / 122][Stage 11:====================================================> (118 + 4) / 122][Stage 11:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.992400102 seconds
res13: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 66  OR  partitionIndex = 67 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.736409196 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 12:==========================>                           (60 + 61) / 121][Stage 12:===========================>                          (62 + 59) / 121][Stage 12:=================================>                    (74 + 47) / 121][Stage 12:=======================================>              (89 + 32) / 121][Stage 12:============================================>         (99 + 22) / 121][Stage 12:==================================================>   (114 + 7) / 121]                                                                                [Stage 13:===========================>                          (61 + 61) / 122][Stage 13:=============================>                        (66 + 56) / 122][Stage 13:=====================================>                (84 + 38) / 122][Stage 13:===============================================>     (110 + 12) / 122][Stage 13:===================================================>  (117 + 5) / 122][Stage 13:=====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.859682387 seconds
res15: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide48"
dataSource: String = /nidan/orc/individualORC/slide48

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 163  OR  partitionIndex = 177 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452771669 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 14:======================================>               (81 + 34) / 115][Stage 14:===========================================>          (92 + 23) / 115][Stage 14:===============================================>     (103 + 12) / 115][Stage 14:===================================================>  (109 + 6) / 115][Stage 14:====================================================> (112 + 3) / 115]                                                                                [Stage 15:======================================>               (82 + 34) / 116][Stage 15:===========================================>          (94 + 22) / 116][Stage 15:==================================================>   (109 + 7) / 116][Stage 15:====================================================> (112 + 4) / 116][Stage 15:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.398251014 seconds
res17: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide23"
dataSource: String = /nidan/orc/individualORC/slide23

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 196  OR  partitionIndex = 182 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.489985315 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 16:==================================>                   (72 + 41) / 113][Stage 16:========================================>             (84 + 29) / 113][Stage 16:===============================================>      (99 + 14) / 113][Stage 16:==================================================>   (106 + 7) / 113][Stage 16:===================================================>  (108 + 5) / 113][Stage 16:=====================================================>(112 + 1) / 113]                                                                                [Stage 17:==================================>                   (72 + 42) / 114][Stage 17:======================================>               (82 + 32) / 114][Stage 17:=============================================>        (97 + 17) / 114][Stage 17:===============================================>     (102 + 12) / 114][Stage 17:================================================>    (104 + 10) / 114][Stage 17:==================================================>   (107 + 7) / 114][Stage 17:====================================================> (111 + 3) / 114][Stage 17:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 4.013305828 seconds
res19: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide39"
dataSource: String = /nidan/orc/individualORC/slide39

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 124 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 168  OR  partitionIndex = 124 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.518891118 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 18:==============================>                       (66 + 49) / 115][Stage 18:======================================>               (83 + 32) / 115][Stage 18:============================================>         (95 + 20) / 115][Stage 18:==================================================>   (107 + 8) / 115][Stage 18:=====================================================>(114 + 1) / 115]                                                                                [Stage 19:==============================>                       (65 + 51) / 116][Stage 19:======================================>               (82 + 34) / 116][Stage 19:=============================================>        (97 + 19) / 116][Stage 19:===================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.037215609 seconds
res21: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 195  OR  partitionIndex = 196 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.565412171 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 20:===========================>                          (60 + 60) / 120][Stage 20:============================>                         (63 + 57) / 120][Stage 20:====================================>                 (80 + 40) / 120][Stage 20:=============================================>       (102 + 18) / 120][Stage 20:=================================================>    (111 + 9) / 120][Stage 20:===================================================>  (114 + 6) / 120][Stage 20:=====================================================>(118 + 2) / 120][Stage 20:=====================================================>(119 + 1) / 120]                                                                                [Stage 21:============================>                         (63 + 58) / 121][Stage 21:==================================>                   (77 + 44) / 121][Stage 21:============================================>        (101 + 20) / 121][Stage 21:==================================================>   (114 + 7) / 121][Stage 21:====================================================> (118 + 3) / 121]                                                                                Time elapsed: 4.061740349 seconds
res23: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide36"
dataSource: String = /nidan/orc/individualORC/slide36

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 61  OR  partitionIndex = 75 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.512131679 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 22:===========================>                          (57 + 56) / 113][Stage 22:===========================>                          (58 + 55) / 113][Stage 22:===============================>                      (65 + 48) / 113][Stage 22:======================================>               (80 + 33) / 113][Stage 22:============================================>         (94 + 19) / 113][Stage 22:==================================================>   (105 + 8) / 113][Stage 22:=====================================================>(111 + 2) / 113]                                                                                [Stage 23:=============================>                        (62 + 52) / 114][Stage 23:==================================>                   (73 + 41) / 114][Stage 23:========================================>             (85 + 29) / 114][Stage 23:==================================================>   (107 + 7) / 114][Stage 23:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.673690645 seconds
res25: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide1"
dataSource: String = /nidan/orc/individualORC/slide1

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 119 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.491740361 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 24:===========================>                          (58 + 55) / 113][Stage 24:=============================>                        (62 + 51) / 113][Stage 24:====================================>                 (77 + 36) / 113][Stage 24:==============================================>      (100 + 13) / 113][Stage 24:===================================================>  (108 + 5) / 113][Stage 24:=====================================================>(111 + 2) / 113]                                                                                [Stage 25:============================>                         (60 + 54) / 114][Stage 25:=================================>                    (71 + 43) / 114][Stage 25:==========================================>           (90 + 24) / 114][Stage 25:=================================================>    (105 + 9) / 114][Stage 25:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.566884102 seconds
res27: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 228  OR  partitionIndex = 184 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447122994 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 26:================================>                     (72 + 46) / 118][Stage 26:=================================>                    (74 + 44) / 118][Stage 26:====================================>                 (80 + 38) / 118][Stage 26:===========================================>          (94 + 24) / 118][Stage 26:==================================================>   (110 + 8) / 118][Stage 26:====================================================> (115 + 3) / 118]                                                                                [Stage 27:=================================>                    (73 + 46) / 119][Stage 27:==================================>                   (77 + 42) / 119][Stage 27:=====================================>                (82 + 37) / 119][Stage 27:============================================>         (97 + 22) / 119][Stage 27:================================================>    (108 + 11) / 119][Stage 27:=====================================================>(117 + 2) / 119]                                                                                Time elapsed: 3.596220728 seconds
res29: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 73  OR  partitionIndex = 87 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410221929 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 28:=====================================>                (79 + 36) / 115][Stage 28:========================================>             (86 + 29) / 115][Stage 28:============================================>         (95 + 20) / 115][Stage 28:===============================================>     (103 + 12) / 115][Stage 28:=====================================================>(114 + 1) / 115]                                                                                [Stage 29:=======================================>              (85 + 31) / 116][Stage 29:==========================================>           (92 + 24) / 116][Stage 29:===============================================>     (105 + 11) / 116][Stage 29:===================================================>  (111 + 5) / 116][Stage 29:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.364167367 seconds
res31: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 41  OR  partitionIndex = 55 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.545848275 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 30:==========================>                           (60 + 61) / 121][Stage 30:===========================>                          (61 + 60) / 121][Stage 30:================================>                     (72 + 49) / 121][Stage 30:===========================================>         (100 + 21) / 121][Stage 30:====================================================> (117 + 4) / 121]                                                                                [Stage 31:===========================>                          (62 + 60) / 122][Stage 31:===============================>                      (72 + 50) / 122][Stage 31:==========================================>           (95 + 27) / 122][Stage 31:==================================================>   (115 + 7) / 122][Stage 31:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.234288998 seconds
res33: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide3"
dataSource: String = /nidan/orc/individualORC/slide3

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 143  OR  partitionIndex = 144 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.585233249 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 32:===========================>                          (60 + 60) / 120][Stage 32:=============================>                        (65 + 55) / 120][Stage 32:====================================>                 (80 + 40) / 120][Stage 32:=============================================>       (103 + 17) / 120][Stage 32:====================================================> (116 + 4) / 120][Stage 32:=====================================================>(119 + 1) / 120]                                                                                [Stage 33:===========================>                          (61 + 60) / 121][Stage 33:================================>                     (72 + 49) / 121][Stage 33:=========================================>            (93 + 28) / 121][Stage 33:=====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.203931573 seconds
res35: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 89  OR  partitionIndex = 90 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.416807568 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 34:======================================>               (83 + 32) / 115][Stage 34:===========================================>          (92 + 23) / 115][Stage 34:==============================================>      (100 + 15) / 115][Stage 34:==================================================>   (108 + 7) / 115]                                                                                [Stage 35:======================================>               (83 + 33) / 116][Stage 35:==========================================>           (91 + 25) / 116][Stage 35:==================================================>   (108 + 8) / 116][Stage 35:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.893055329 seconds
res37: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 34  OR  partitionIndex = 35 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.463314081 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 36:=================================>                    (73 + 45) / 118][Stage 36:==================================>                   (76 + 42) / 118][Stage 36:==========================================>           (92 + 26) / 118][Stage 36:===============================================>     (106 + 12) / 118][Stage 36:=====================================================>(116 + 2) / 118]                                                                                [Stage 37:=================================>                    (74 + 45) / 119][Stage 37:======================================>               (84 + 35) / 119][Stage 37:============================================>         (97 + 22) / 119][Stage 37:==================================================>   (111 + 8) / 119][Stage 37:=====================================================>(117 + 2) / 119][Stage 37:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.53512574 seconds
res39: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 179  OR  partitionIndex = 180 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426013654 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 38:====================================>                 (76 + 37) / 113][Stage 38:==========================================>           (89 + 24) / 113][Stage 38:============================================>         (94 + 19) / 113][Stage 38:=================================================>    (104 + 9) / 113][Stage 38:=====================================================>(111 + 2) / 113][Stage 38:=====================================================>(112 + 1) / 113]                                                                                [Stage 39:====================================>                 (77 + 37) / 114][Stage 39:========================================>             (86 + 28) / 114][Stage 39:==============================================>      (100 + 14) / 114][Stage 39:==================================================>   (107 + 7) / 114][Stage 39:=====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.375956848 seconds
res41: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 62  OR  partitionIndex = 63 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.457063103 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 40:====================================>                 (76 + 37) / 113][Stage 40:===========================================>          (90 + 23) / 113][Stage 40:=============================================>        (95 + 18) / 113][Stage 40:=================================================>    (104 + 9) / 113][Stage 40:=====================================================>(111 + 2) / 113]                                                                                [Stage 41:======================================>               (81 + 33) / 114][Stage 41:=============================================>        (96 + 18) / 114][Stage 41:===============================================>     (102 + 12) / 114][Stage 41:==================================================>   (107 + 7) / 114][Stage 41:====================================================> (111 + 3) / 114][Stage 41:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.631211957 seconds
res43: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 132  OR  partitionIndex = 133 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.641282869 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 42:===========================>                          (60 + 60) / 120][Stage 42:============================>                         (63 + 57) / 120][Stage 42:====================================>                 (81 + 39) / 120][Stage 42:============================================>         (99 + 21) / 120][Stage 42:===================================================>  (115 + 5) / 120]                                                                                [Stage 43:===========================>                          (61 + 60) / 121][Stage 43:==============================>                       (69 + 52) / 121][Stage 43:========================================>             (91 + 30) / 121][Stage 43:================================================>    (110 + 11) / 121][Stage 43:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.365654661 seconds
res45: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide41"
dataSource: String = /nidan/orc/individualORC/slide41

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 133  OR  partitionIndex = 147 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397395853 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 44:========================================>             (86 + 29) / 115][Stage 44:==============================================>       (98 + 17) / 115][Stage 44:==================================================>   (107 + 8) / 115]                                                                                [Stage 45:=======================================>              (84 + 32) / 116][Stage 45:============================================>         (96 + 20) / 116][Stage 45:=================================================>    (107 + 9) / 116][Stage 45:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.762342541 seconds
res47: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide58"
dataSource: String = /nidan/orc/individualORC/slide58

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 46  OR  partitionIndex = 32 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395577969 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 46:====================================>                 (77 + 36) / 113][Stage 46:=========================================>            (87 + 26) / 113][Stage 46:=================================================>    (104 + 9) / 113][Stage 46:=====================================================>(112 + 1) / 113]                                                                                [Stage 47:===================================>                  (74 + 40) / 114][Stage 47:======================================>               (82 + 32) / 114][Stage 47:==========================================>           (90 + 24) / 114][Stage 47:===============================================>     (102 + 12) / 114][Stage 47:===================================================>  (109 + 5) / 114][Stage 47:=====================================================>(112 + 2) / 114][Stage 47:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.540700863 seconds
res49: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 190  OR  partitionIndex = 191 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.3923574 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 48:======================================>               (82 + 33) / 115][Stage 48:============================================>         (94 + 21) / 115][Stage 48:=================================================>    (106 + 9) / 115][Stage 48:=====================================================>(113 + 2) / 115]                                                                                [Stage 49:========================================>             (87 + 29) / 116][Stage 49:=============================================>        (97 + 19) / 116][Stage 49:===================================================>  (110 + 6) / 116][Stage 49:====================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.912282131 seconds
res51: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 128  OR  partitionIndex = 129 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.442349282 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 50:============================>                         (59 + 54) / 113][Stage 50:===============================>                      (65 + 48) / 113][Stage 50:========================================>             (85 + 28) / 113][Stage 50:=================================================>    (104 + 9) / 113][Stage 50:=====================================================>(112 + 1) / 113]                                                                                [Stage 51:============================>                         (60 + 54) / 114][Stage 51:==============================>                       (65 + 49) / 114][Stage 51:======================================>               (82 + 32) / 114][Stage 51:==============================================>      (101 + 13) / 114][Stage 51:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.143200671 seconds
res53: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 27  OR  partitionIndex = 28 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.467452755 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 52:===========================>                          (61 + 59) / 120][Stage 52:================================>                     (73 + 47) / 120][Stage 52:========================================>             (91 + 29) / 120][Stage 52:==================================================>   (112 + 8) / 120]                                                                                [Stage 53:============================>                         (63 + 58) / 121][Stage 53:================================>                     (72 + 49) / 121][Stage 53:==========================================>           (96 + 25) / 121][Stage 53:===================================================>  (115 + 6) / 121]                                                                                Time elapsed: 3.036492448 seconds
res55: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 191  OR  partitionIndex = 205 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.383589875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 54:======================================>               (82 + 33) / 115][Stage 54:==========================================>           (90 + 25) / 115][Stage 54:==============================================>      (101 + 14) / 115][Stage 54:=====================================================>(113 + 2) / 115]                                                                                [Stage 55:======================================>               (82 + 34) / 116][Stage 55:========================================>             (86 + 30) / 116][Stage 55:=============================================>        (98 + 18) / 116][Stage 55:==================================================>   (108 + 8) / 116][Stage 55:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.84447336 seconds
res57: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.42371887 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
org.apache.spark.sql.catalyst.parser.ParseException:
extraneous input 'partitionIndex' expecting {<EOF>, '.', '[', 'GROUP', 'ORDER', 'HAVING', 'LIMIT', 'OR', 'AND', 'IN', NOT, 'BETWEEN', 'LIKE', RLIKE, 'IS', 'WINDOW', 'UNION', 'EXCEPT', 'MINUS', 'INTERSECT', EQ, '<=>', '<>', '!=', '<', LTE, '>', GTE, '+', '-', '*', '/', '%', 'DIV', '&', '|', '^', 'SORT', 'CLUSTER', 'DISTRIBUTE'}(line 1, pos 57)

== SQL ==
SELECT imageBytes FROM data WHERE  partitionIndex = 120  partitionIndex = 120
---------------------------------------------------------^^^

  at org.apache.spark.sql.catalyst.parser.ParseException.withCommand(ParseDriver.scala:197)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:99)
  at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:45)
  at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:53)
  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)
  at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)
  at $anonfun$1.apply$mcI$sp(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at $anonfun$1.apply(<console>:38)
  at show_timing(<console>:30)
  ... 50 elided

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide9"
dataSource: String = /nidan/orc/individualORC/slide9

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 203  OR  partitionIndex = 204 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.384549278 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 56:=======================================>              (82 + 31) / 113][Stage 56:============================================>         (93 + 20) / 113][Stage 56:=================================================>    (104 + 9) / 113][Stage 56:=====================================================>(112 + 1) / 113]                                                                                [Stage 57:===================================>                  (74 + 40) / 114][Stage 57:=========================================>            (87 + 27) / 114][Stage 57:==============================================>       (98 + 16) / 114][Stage 57:====================================================> (110 + 4) / 114]                                                                                Time elapsed: 3.431038996 seconds
res61: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide51"
dataSource: String = /nidan/orc/individualORC/slide51

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 156  OR  partitionIndex = 157 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38180963 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 58:=================================>                    (70 + 43) / 113][Stage 58:====================================>                 (77 + 36) / 113][Stage 58:===========================================>          (92 + 21) / 113][Stage 58:===============================================>     (101 + 12) / 113][Stage 58:=====================================================>(112 + 1) / 113]                                                                                [Stage 59:===================================>                  (75 + 39) / 114][Stage 59:========================================>             (86 + 28) / 114][Stage 59:==============================================>       (98 + 16) / 114][Stage 59:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 2.831582286 seconds
res63: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 8  OR  partitionIndex = 9 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.434730562 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 60:================================>                     (72 + 46) / 118][Stage 60:=====================================>                (82 + 36) / 118][Stage 60:==========================================>           (92 + 26) / 118][Stage 60:================================================>    (107 + 11) / 118][Stage 60:=====================================================>(117 + 1) / 118]                                                                                [Stage 61:=================================>                    (73 + 46) / 119][Stage 61:===================================>                  (78 + 41) / 119][Stage 61:==========================================>           (94 + 25) / 119][Stage 61:====================================================> (115 + 4) / 119]                                                                                Time elapsed: 2.995670576 seconds
res65: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide60"
dataSource: String = /nidan/orc/individualORC/slide60

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 217  OR  partitionIndex = 231 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.419039317 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 62:===============================>                      (67 + 48) / 115][Stage 62:======================================>               (82 + 33) / 115][Stage 62:===============================================>     (102 + 13) / 115][Stage 62:===================================================>  (109 + 6) / 115][Stage 62:=====================================================>(114 + 1) / 115]                                                                                [Stage 63:================================>                     (69 + 47) / 116][Stage 63:====================================>                 (79 + 37) / 116][Stage 63:=========================================>            (90 + 26) / 116][Stage 63:===================================================>  (110 + 6) / 116][Stage 63:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.987028552 seconds
res67: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 57  OR  partitionIndex = 58 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.44094732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 64:===========================>                          (62 + 58) / 120][Stage 64:====================================>                 (80 + 40) / 120][Stage 64:=============================================>       (102 + 18) / 120][Stage 64:=====================================================>(118 + 2) / 120]                                                                                [Stage 65:===========================>                          (61 + 60) / 121][Stage 65:=============================>                        (66 + 55) / 121][Stage 65:===================================>                  (79 + 42) / 121][Stage 65:============================================>        (102 + 19) / 121][Stage 65:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.092312954 seconds
res69: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 11  OR  partitionIndex = 25 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4269646 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 66:============================>                         (59 + 54) / 113][Stage 66:================================>                     (67 + 46) / 113][Stage 66:=======================================>              (82 + 31) / 113][Stage 66:================================================>    (103 + 10) / 113][Stage 66:====================================================> (109 + 4) / 113]                                                                                [Stage 67:============================>                         (61 + 53) / 114][Stage 67:=================================>                    (70 + 44) / 114][Stage 67:=========================================>            (87 + 27) / 114][Stage 67:==============================================>      (101 + 13) / 114][Stage 67:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.320160186 seconds
res71: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 77  OR  partitionIndex = 78 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.447312438 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 68:===========================>                          (61 + 60) / 121][Stage 68:===============================>                      (70 + 51) / 121][Stage 68:======================================>               (87 + 34) / 121][Stage 68:================================================>    (111 + 10) / 121][Stage 68:=====================================================>(120 + 1) / 121]                                                                                [Stage 69:===========================>                          (61 + 61) / 122][Stage 69:============================>                         (64 + 58) / 122][Stage 69:=====================================>                (85 + 37) / 122][Stage 69:==============================================>      (108 + 14) / 122][Stage 69:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.428707417 seconds
res73: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 114  OR  partitionIndex = 100 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.387641088 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 70:======================================>               (83 + 32) / 115][Stage 70:=========================================>            (88 + 27) / 115][Stage 70:=============================================>        (97 + 18) / 115][Stage 70:===============================================>     (103 + 12) / 115][Stage 70:=====================================================>(113 + 2) / 115]                                                                                [Stage 71:=====================================>                (81 + 35) / 116][Stage 71:=======================================>              (85 + 31) / 116][Stage 71:=============================================>        (98 + 18) / 116][Stage 71:=================================================>    (107 + 9) / 116][Stage 71:====================================================> (113 + 3) / 116][Stage 71:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.191032059 seconds
res75: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide20"
dataSource: String = /nidan/orc/individualORC/slide20

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 177  OR  partitionIndex = 178 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373810328 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 72:======================================>               (82 + 33) / 115][Stage 72:===========================================>          (92 + 23) / 115][Stage 72:================================================>    (105 + 10) / 115][Stage 72:===================================================>  (110 + 5) / 115]                                                                                [Stage 73:======================================>               (82 + 34) / 116][Stage 73:============================================>         (95 + 21) / 116][Stage 73:===================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.758091503 seconds
res77: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide33"
dataSource: String = /nidan/orc/individualORC/slide33

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 51  OR  partitionIndex = 52 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394444667 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 74:================================>                     (72 + 46) / 118][Stage 74:=================================>                    (74 + 44) / 118][Stage 74:=====================================>                (83 + 35) / 118][Stage 74:============================================>        (100 + 18) / 118][Stage 74:===================================================>  (113 + 5) / 118][Stage 74:=====================================================>(117 + 1) / 118]                                                                                [Stage 75:==================================>                   (77 + 42) / 119][Stage 75:=======================================>              (86 + 33) / 119][Stage 75:=================================================>    (110 + 9) / 119][Stage 75:=====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.224142036 seconds
res79: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 44  OR  partitionIndex = 45 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410492593 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 76:==============================>                       (64 + 51) / 115][Stage 76:====================================>                 (77 + 38) / 115][Stage 76:=============================================>        (96 + 19) / 115][Stage 76:===================================================>  (109 + 6) / 115]                                                                                [Stage 77:=================================>                    (72 + 44) / 116][Stage 77:==========================================>           (92 + 24) / 116][Stage 77:==============================================>      (101 + 15) / 116][Stage 77:===================================================>  (110 + 6) / 116][Stage 77:=====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.849336844 seconds
res81: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide47"
dataSource: String = /nidan/orc/individualORC/slide47

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 26  OR  partitionIndex = 38 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.38847381 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 78:=================================>                    (73 + 45) / 118][Stage 78:====================================>                 (79 + 39) / 118][Stage 78:============================================>         (97 + 21) / 118][Stage 78:===================================================>  (113 + 5) / 118]                                                                                [Stage 79:==================================>                   (75 + 44) / 119][Stage 79:======================================>               (85 + 34) / 119][Stage 79:============================================>        (101 + 18) / 119][Stage 79:==================================================>   (112 + 7) / 119]                                                                                Time elapsed: 3.195577137 seconds
res83: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 102  OR  partitionIndex = 103 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.370256259 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 80:====================================>                 (76 + 37) / 113][Stage 80:==========================================>           (88 + 25) / 113][Stage 80:===============================================>     (101 + 12) / 113][Stage 80:===================================================>  (107 + 6) / 113][Stage 80:=====================================================>(112 + 1) / 113]                                                                                [Stage 81:===================================>                  (75 + 39) / 114][Stage 81:=======================================>              (83 + 31) / 114][Stage 81:===========================================>          (92 + 22) / 114][Stage 81:==============================================>      (100 + 14) / 114][Stage 81:===================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.279461678 seconds
res85: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide32"
dataSource: String = /nidan/orc/individualORC/slide32

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 86  OR  partitionIndex = 98 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.395391071 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 82:================================>                     (69 + 46) / 115][Stage 82:=====================================>                (79 + 36) / 115][Stage 82:============================================>         (94 + 21) / 115][Stage 82:================================================>    (105 + 10) / 115][Stage 82:===================================================>  (110 + 5) / 115]                                                                                [Stage 83:=================================>                    (71 + 45) / 116][Stage 83:=========================================>            (89 + 27) / 116][Stage 83:===============================================>     (104 + 12) / 116][Stage 83:===================================================>  (111 + 5) / 116][Stage 83:=====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.173897017 seconds
res87: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 187  OR  partitionIndex = 201 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.418450277 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 84:===========================>                          (60 + 60) / 120][Stage 84:==============================>                       (67 + 53) / 120][Stage 84:=====================================>                (84 + 36) / 120][Stage 84:================================================>    (109 + 11) / 120][Stage 84:=====================================================>(119 + 1) / 120]                                                                                [Stage 85:===========================>                          (62 + 59) / 121][Stage 85:================================>                     (73 + 48) / 121][Stage 85:=========================================>            (93 + 28) / 121][Stage 85:================================================>    (110 + 11) / 121][Stage 85:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.347805575 seconds
res89: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 140  OR  partitionIndex = 126 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.452451874 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 86:===========================>                          (60 + 60) / 120][Stage 86:===============================>                      (71 + 49) / 120][Stage 86:========================================>             (90 + 30) / 120][Stage 86:=================================================>    (111 + 9) / 120]                                                                                [Stage 87:===========================>                          (61 + 60) / 121][Stage 87:=============================>                        (66 + 55) / 121][Stage 87:=====================================>                (83 + 38) / 121][Stage 87:==============================================>      (107 + 14) / 121][Stage 87:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.214520276 seconds
res91: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide17"
dataSource: String = /nidan/orc/individualORC/slide17

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 7  OR  partitionIndex = 21 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.410084613 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 88:===========================>                          (62 + 58) / 120][Stage 88:===============================>                      (70 + 50) / 120][Stage 88:==========================================>           (94 + 26) / 120][Stage 88:===================================================>  (114 + 6) / 120]                                                                                [Stage 89:===========================>                          (62 + 59) / 121][Stage 89:=================================>                    (74 + 47) / 121][Stage 89:========================================>             (90 + 31) / 121][Stage 89:================================================>    (110 + 11) / 121][Stage 89:=====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.185159373 seconds
res93: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 3  OR  partitionIndex = 17 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.483882784 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 90:============================>                         (60 + 53) / 113][Stage 90:==================================>                   (73 + 40) / 113][Stage 90:=========================================>            (86 + 27) / 113][Stage 90:==============================================>       (98 + 15) / 113][Stage 90:=====================================================>(112 + 1) / 113]                                                                                [Stage 91:===========================>                          (59 + 55) / 114][Stage 91:==============================>                       (65 + 49) / 114][Stage 91:=======================================>              (84 + 30) / 114][Stage 91:==============================================>       (98 + 16) / 114][Stage 91:=================================================>    (105 + 9) / 114][Stage 91:=====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.495323401 seconds
res95: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide11"
dataSource: String = /nidan/orc/individualORC/slide11

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 188  OR  partitionIndex = 189 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404761058 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 92:==================================>                   (73 + 42) / 115][Stage 92:==========================================>           (91 + 24) / 115][Stage 92:=================================================>    (106 + 9) / 115][Stage 92:=====================================================>(113 + 2) / 115]                                                                                [Stage 93:=====================================>                (81 + 35) / 116][Stage 93:===========================================>          (94 + 22) / 116][Stage 93:==================================================>   (109 + 7) / 116]                                                                                Time elapsed: 2.741794547 seconds
res97: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide49"
dataSource: String = /nidan/orc/individualORC/slide49

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 6  OR  partitionIndex = 7 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.411627758 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 94:==========================>                           (60 + 61) / 121][Stage 94:============================>                         (63 + 58) / 121][Stage 94:=================================>                    (75 + 46) / 121][Stage 94:==============================================>      (106 + 15) / 121][Stage 94:====================================================> (117 + 4) / 121]                                                                                [Stage 95:===========================>                          (63 + 59) / 122][Stage 95:==================================>                   (78 + 44) / 122][Stage 95:===========================================>         (101 + 21) / 122][Stage 95:=====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.112610829 seconds
res99: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide44"
dataSource: String = /nidan/orc/individualORC/slide44

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 185  OR  partitionIndex = 199 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.360599472 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 96:=====================================>                (78 + 35) / 113][Stage 96:==========================================>           (88 + 25) / 113][Stage 96:==============================================>      (100 + 13) / 113][Stage 96:===================================================>  (108 + 5) / 113][Stage 96:=====================================================>(112 + 1) / 113]                                                                                [Stage 97:====================================>                 (77 + 37) / 114][Stage 97:========================================>             (86 + 28) / 114][Stage 97:==============================================>      (100 + 14) / 114][Stage 97:==================================================>   (107 + 7) / 114][Stage 97:====================================================> (111 + 3) / 114]                                                                                Time elapsed: 3.389760303 seconds
res101: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 190 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 204  OR  partitionIndex = 190 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400372746 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 98:============================>                         (59 + 54) / 113][Stage 98:=============================>                        (62 + 51) / 113][Stage 98:====================================>                 (76 + 37) / 113][Stage 98:===========================================>          (92 + 21) / 113][Stage 98:====================================================> (109 + 4) / 113]                                                                                [Stage 99:=============================>                        (62 + 52) / 114][Stage 99:================================>                     (68 + 46) / 114][Stage 99:========================================>             (85 + 29) / 114][Stage 99:===================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.09159435 seconds
res103: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 170  OR  partitionIndex = 156 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.426783222 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 100:==========================>                          (61 + 59) / 120][Stage 100:==================================>                  (78 + 42) / 120][Stage 100:======================================>              (88 + 32) / 120][Stage 100:==============================================>     (107 + 13) / 120][Stage 100:====================================================>(119 + 1) / 120]                                                                                [Stage 101:==========================>                          (61 + 60) / 121][Stage 101:===============================>                     (72 + 49) / 121][Stage 101:=====================================>               (85 + 36) / 121][Stage 101:=============================================>      (106 + 15) / 121][Stage 101:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 3.284659604 seconds
res105: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide35"
dataSource: String = /nidan/orc/individualORC/slide35

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 105  OR  partitionIndex = 106 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.494867197 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 102:==========================>                          (60 + 61) / 121][Stage 102:===========================>                         (63 + 58) / 121][Stage 102:==================================>                  (78 + 43) / 121][Stage 102:============================================>       (104 + 17) / 121][Stage 102:===================================================> (117 + 4) / 121]                                                                                [Stage 103:==========================>                          (61 + 61) / 122][Stage 103:==============================>                      (70 + 52) / 122][Stage 103:======================================>              (88 + 34) / 122][Stage 103:==============================================>     (110 + 12) / 122][Stage 103:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.277649046 seconds
res107: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide45"
dataSource: String = /nidan/orc/individualORC/slide45

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 126  OR  partitionIndex = 127 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.453128817 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 104:==========================>                          (60 + 60) / 120][Stage 104:=============================>                       (66 + 54) / 120][Stage 104:===================================>                 (80 + 40) / 120][Stage 104:=============================================>      (106 + 14) / 120][Stage 104:====================================================>(119 + 1) / 120]                                                                                [Stage 105:==========================>                          (61 + 60) / 121][Stage 105:==============================>                      (69 + 52) / 121][Stage 105:===================================>                 (80 + 41) / 121][Stage 105:=============================================>      (105 + 16) / 121][Stage 105:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 2.997185263 seconds
res109: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide16"
dataSource: String = /nidan/orc/individualORC/slide16

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 169  OR  partitionIndex = 170 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.368559596 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 106:======================================>              (82 + 31) / 113][Stage 106:=========================================>           (88 + 25) / 113][Stage 106:==============================================>     (101 + 12) / 113][Stage 106:===================================================> (110 + 3) / 113]                                                                                [Stage 107:=====================================>               (80 + 34) / 114][Stage 107:========================================>            (88 + 26) / 114][Stage 107:==============================================>      (99 + 15) / 114][Stage 107:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.879913009 seconds
res111: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 134  OR  partitionIndex = 135 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.458766794 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 108:===============================>                     (68 + 47) / 115][Stage 108:=========================================>           (89 + 26) / 115][Stage 108:==============================================>     (103 + 12) / 115][Stage 108:====================================================>(113 + 2) / 115]                                                                                [Stage 109:=================================>                   (73 + 43) / 116][Stage 109:==========================================>          (92 + 24) / 116][Stage 109:=================================================>   (109 + 7) / 116][Stage 109:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.905862883 seconds
res113: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 182  OR  partitionIndex = 183 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.390625999 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 110:===========================>                         (58 + 55) / 113][Stage 110:============================>                        (61 + 52) / 113][Stage 110:=====================================>               (79 + 34) / 113][Stage 110:==============================================>     (101 + 12) / 113]                                                                                [Stage 111:===========================>                         (59 + 55) / 114][Stage 111:===============================>                     (68 + 46) / 114][Stage 111:=======================================>             (86 + 28) / 114][Stage 111:=================================================>   (107 + 7) / 114][Stage 111:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.15920429 seconds
res115: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 210  OR  partitionIndex = 211 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.389864076 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 112:===========================>                         (59 + 54) / 113][Stage 112:=================================>                   (72 + 41) / 113][Stage 112:===========================================>         (93 + 20) / 113][Stage 112:====================================================>(111 + 2) / 113]                                                                                [Stage 113:============================>                        (62 + 52) / 114][Stage 113:==================================>                  (75 + 39) / 114][Stage 113:============================================>        (95 + 19) / 114][Stage 113:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.960076861 seconds
res117: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 83  OR  partitionIndex = 84 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.369187418 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 114:================================>                    (72 + 46) / 118][Stage 114:=====================================>               (83 + 35) / 118][Stage 114:============================================>        (99 + 19) / 118][Stage 114:====================================================>(116 + 2) / 118]                                                                                [Stage 115:================================>                    (74 + 45) / 119][Stage 115:=====================================>               (84 + 35) / 119][Stage 115:=================================================>   (111 + 8) / 119][Stage 115:====================================================>(117 + 2) / 119][Stage 115:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.102714111 seconds
res119: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide53"
dataSource: String = /nidan/orc/individualORC/slide53

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 175  OR  partitionIndex = 176 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376415558 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 116:================================>                    (70 + 45) / 115][Stage 116:========================================>            (87 + 28) / 115][Stage 116:==============================================>     (102 + 13) / 115][Stage 116:====================================================>(113 + 2) / 115]                                                                                [Stage 117:================================>                    (71 + 45) / 116][Stage 117:=======================================>             (86 + 30) / 116][Stage 117:=============================================>      (102 + 14) / 116][Stage 117:==================================================>  (110 + 6) / 116]                                                                                Time elapsed: 2.775573114 seconds
res121: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 226  OR  partitionIndex = 212 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.376146958 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 118:==============================>                      (67 + 48) / 115][Stage 118:====================================>                (79 + 36) / 115][Stage 118:============================================>        (96 + 19) / 115][Stage 118:=================================================>   (107 + 8) / 115]                                                                                [Stage 119:=================================>                   (73 + 43) / 116][Stage 119:=========================================>           (91 + 25) / 116][Stage 119:===============================================>    (105 + 11) / 116][Stage 119:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 2.864113189 seconds
res123: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 56  OR  partitionIndex = 12 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396161436 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 120:============================>                        (60 + 53) / 113][Stage 120:================================>                    (69 + 44) / 113][Stage 120:======================================>              (83 + 30) / 113][Stage 120:==============================================>     (100 + 13) / 113][Stage 120:====================================================>(112 + 1) / 113]                                                                                [Stage 121:===========================>                         (60 + 54) / 114][Stage 121:===============================>                     (68 + 46) / 114][Stage 121:=========================================>           (90 + 24) / 114][Stage 121:================================================>    (105 + 9) / 114][Stage 121:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.217035202 seconds
res125: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ", 2) )
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 106  OR  partitionIndex = 92 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353624833 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 122:=================================>                   (71 + 42) / 113][Stage 122:======================================>              (82 + 31) / 113][Stage 122:=============================================>       (96 + 17) / 113][Stage 122:==================================================>  (107 + 6) / 113]                                                                                [Stage 123:====================================>                (78 + 36) / 114][Stage 123:=========================================>           (89 + 25) / 114][Stage 123:==============================================>     (101 + 13) / 114][Stage 123:==================================================>  (109 + 5) / 114][Stage 123:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 2.902434701 seconds
res127: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide6"
dataSource: String = /nidan/orc/individualORC/slide6

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 198  OR  partitionIndex = 210 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.351420207 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 124:====================================>                (80 + 35) / 115][Stage 124:=======================================>             (86 + 29) / 115][Stage 124:============================================>        (97 + 18) / 115][Stage 124:===============================================>    (105 + 10) / 115][Stage 124:===================================================> (112 + 3) / 115]                                                                                [Stage 125:======================================>              (85 + 31) / 116][Stage 125:==========================================>          (92 + 24) / 116][Stage 125:==================================================>  (110 + 6) / 116][Stage 125:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.934077132 seconds
res129: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 94  OR  partitionIndex = 95 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400022707 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 126:==================================>                  (74 + 41) / 115][Stage 126:====================================>                (79 + 36) / 115][Stage 126:=============================================>      (100 + 15) / 115][Stage 126:===================================================> (112 + 3) / 115]                                                                                [Stage 127:=====================================>               (82 + 34) / 116][Stage 127:============================================>        (98 + 18) / 116][Stage 127:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 2.684519177 seconds
res131: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 85  OR  partitionIndex = 86 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.356275721 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 128:==================================>                  (73 + 40) / 113][Stage 128:======================================>              (82 + 31) / 113][Stage 128:===========================================>         (92 + 21) / 113][Stage 128:==============================================>     (101 + 12) / 113][Stage 128:==================================================>  (108 + 5) / 113][Stage 128:====================================================>(111 + 2) / 113]                                                                                [Stage 129:=======================================>             (85 + 29) / 114][Stage 129:============================================>        (95 + 19) / 114][Stage 129:==============================================>     (103 + 11) / 114][Stage 129:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.215656001 seconds
res133: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 103  OR  partitionIndex = 117 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377565623 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 130:==============================>                      (66 + 49) / 115][Stage 130:===================================>                 (76 + 39) / 115][Stage 130:=========================================>           (91 + 24) / 115][Stage 130:================================================>    (106 + 9) / 115][Stage 130:====================================================>(114 + 1) / 115]                                                                                [Stage 131:===================================>                 (77 + 39) / 116][Stage 131:==========================================>          (94 + 22) / 116][Stage 131:===================================================> (112 + 4) / 116]                                                                                Time elapsed: 2.81017722 seconds
res135: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide46"
dataSource: String = /nidan/orc/individualORC/slide46

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 138  OR  partitionIndex = 150 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.377972964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 132:=================================>                   (72 + 43) / 115][Stage 132:======================================>              (84 + 31) / 115][Stage 132:=============================================>      (100 + 15) / 115][Stage 132:===================================================> (112 + 3) / 115]                                                                                [Stage 133:================================>                    (72 + 44) / 116][Stage 133:=======================================>             (87 + 29) / 116][Stage 133:=============================================>      (102 + 14) / 116][Stage 133:===============================================>    (105 + 11) / 116][Stage 133:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.136306595 seconds
res137: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 145  OR  partitionIndex = 146 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.394608352 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 134:==========================>                          (60 + 60) / 120][Stage 134:============================>                        (64 + 56) / 120][Stage 134:====================================>                (83 + 37) / 120][Stage 134:===============================================>    (109 + 11) / 120][Stage 134:====================================================>(119 + 1) / 120]                                                                                [Stage 135:==========================>                          (61 + 60) / 121][Stage 135:============================>                        (65 + 56) / 121][Stage 135:===================================>                 (82 + 39) / 121][Stage 135:============================================>       (103 + 18) / 121][Stage 135:===================================================> (118 + 3) / 121][Stage 135:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.338138876 seconds
res139: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide28"
dataSource: String = /nidan/orc/individualORC/slide28

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 197  OR  partitionIndex = 198 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.397951461 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 136:==========================>                          (60 + 61) / 121][Stage 136:==============================>                      (69 + 52) / 121][Stage 136:======================================>              (88 + 33) / 121][Stage 136:=============================================>      (106 + 15) / 121][Stage 136:====================================================>(120 + 1) / 121]                                                                                [Stage 137:==========================>                          (61 + 61) / 122][Stage 137:==============================>                      (71 + 51) / 122][Stage 137:====================================>                (85 + 37) / 122][Stage 137:=============================================>      (107 + 15) / 122][Stage 137:====================================================>(120 + 2) / 122]                                                                                Time elapsed: 3.061473823 seconds
res141: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide2"
dataSource: String = /nidan/orc/individualORC/slide2

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 157  OR  partitionIndex = 171 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.353735875 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 138:===================================>                 (76 + 37) / 113][Stage 138:=========================================>           (88 + 25) / 113][Stage 138:=============================================>       (96 + 17) / 113][Stage 138:=================================================>   (105 + 8) / 113][Stage 138:====================================================>(111 + 2) / 113]                                                                                [Stage 139:=====================================>               (81 + 33) / 114][Stage 139:=========================================>           (89 + 25) / 114][Stage 139:=============================================>      (100 + 14) / 114][Stage 139:==================================================>  (108 + 6) / 114]                                                                                Time elapsed: 3.087503079 seconds
res143: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide50"
dataSource: String = /nidan/orc/individualORC/slide50

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 33  OR  partitionIndex = 47 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385230726 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 140:>                                                      (0 + 0) / 113][Stage 140:===========================>                         (59 + 54) / 113][Stage 140:==============================>                      (65 + 48) / 113][Stage 140:=====================================>               (81 + 32) / 113][Stage 140:=============================================>       (98 + 15) / 113][Stage 140:====================================================>(112 + 1) / 113]                                                                                [Stage 141:============================>                        (61 + 53) / 114][Stage 141:================================>                    (70 + 44) / 114][Stage 141:==========================================>          (91 + 23) / 114][Stage 141:=================================================>   (107 + 7) / 114][Stage 141:====================================================>(112 + 2) / 114]                                                                                Time elapsed: 3.225835637 seconds
res145: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide31"
dataSource: String = /nidan/orc/individualORC/slide31

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 227  OR  partitionIndex = 228 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.396056457 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 142:==========================>                          (60 + 60) / 120][Stage 142:====================================>                (82 + 38) / 120][Stage 142:=============================================>      (105 + 15) / 120][Stage 142:==================================================>  (114 + 6) / 120]                                                                                [Stage 143:===========================>                         (62 + 59) / 121][Stage 143:==============================>                      (70 + 51) / 121][Stage 143:==========================================>          (98 + 23) / 121][Stage 143:===================================================> (117 + 4) / 121]                                                                                Time elapsed: 2.938445293 seconds
res147: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide59"
dataSource: String = /nidan/orc/individualORC/slide59

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 234  OR  partitionIndex = 220 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414306949 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 144:==========================>                          (60 + 60) / 120][Stage 144:=============================>                       (67 + 53) / 120][Stage 144:========================================>            (92 + 28) / 120][Stage 144:=================================================>   (113 + 7) / 120][Stage 144:====================================================>(119 + 1) / 120]                                                                                [Stage 145:===========================>                         (62 + 59) / 121][Stage 145:===============================>                     (73 + 48) / 121][Stage 145:======================================>              (87 + 34) / 121][Stage 145:==============================================>     (109 + 12) / 121][Stage 145:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 3.110447748 seconds
res149: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 129  OR  partitionIndex = 143 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373604932 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 146:================================>                    (71 + 44) / 115][Stage 146:======================================>              (84 + 31) / 115][Stage 146:================================================>    (106 + 9) / 115][Stage 146:====================================================>(114 + 1) / 115]                                                                                [Stage 147:===============================>                     (68 + 48) / 116][Stage 147:=====================================>               (83 + 33) / 116][Stage 147:===========================================>         (95 + 21) / 116][Stage 147:===================================================> (112 + 4) / 116][Stage 147:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.819187693 seconds
res151: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 81  OR  partitionIndex = 82 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.4043289 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 148:===========================>                         (62 + 58) / 120][Stage 148:===============================>                     (71 + 49) / 120][Stage 148:===========================================>        (100 + 20) / 120][Stage 148:===================================================> (116 + 4) / 120]                                                                                [Stage 149:============================>                        (66 + 55) / 121][Stage 149:================================>                    (75 + 46) / 121][Stage 149:===========================================>        (102 + 19) / 121][Stage 149:====================================================>(119 + 2) / 121][Stage 149:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.154273236 seconds
res153: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide34"
dataSource: String = /nidan/orc/individualORC/slide34

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 200  OR  partitionIndex = 186 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.346057014 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 150:=====================================>               (82 + 33) / 115][Stage 150:========================================>            (88 + 27) / 115][Stage 150:================================================>    (106 + 9) / 115][Stage 150:==================================================>  (110 + 5) / 115][Stage 150:====================================================>(114 + 1) / 115]                                                                                [Stage 151:=====================================>               (82 + 34) / 116][Stage 151:==========================================>          (93 + 23) / 116][Stage 151:===============================================>    (106 + 10) / 116][Stage 151:===================================================> (112 + 4) / 116][Stage 151:====================================================>(114 + 2) / 116]                                                                                Time elapsed: 3.083942455 seconds
res155: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide18"
dataSource: String = /nidan/orc/individualORC/slide18

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 130  OR  partitionIndex = 131 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.373836253 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 152:===============================>                     (68 + 47) / 115][Stage 152:====================================>                (80 + 35) / 115][Stage 152:==========================================>          (93 + 22) / 115][Stage 152:=================================================>   (107 + 8) / 115][Stage 152:==================================================>  (109 + 6) / 115]                                                                                [Stage 153:===================================>                 (77 + 39) / 116][Stage 153:==========================================>          (93 + 23) / 116][Stage 153:==============================================>     (104 + 12) / 116][Stage 153:===================================================> (113 + 3) / 116][Stage 153:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 3.34297218 seconds
res157: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide52"
dataSource: String = /nidan/orc/individualORC/slide52

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 67  OR  partitionIndex = 81 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39350649 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 154:==========================>                          (60 + 60) / 120][Stage 154:============================>                        (65 + 55) / 120][Stage 154:===================================>                 (80 + 40) / 120][Stage 154:============================================>       (102 + 18) / 120][Stage 154:====================================================>(118 + 2) / 120]                                                                                [Stage 155:==========================>                          (61 + 60) / 121][Stage 155:=============================>                       (67 + 54) / 121][Stage 155:===================================>                 (80 + 41) / 121][Stage 155:===============================================>    (111 + 10) / 121][Stage 155:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.035006476 seconds
res159: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide56"
dataSource: String = /nidan/orc/individualORC/slide56

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 119  OR  partitionIndex = 120 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.401110252 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 156:==========================>                          (60 + 61) / 121][Stage 156:=============================>                       (67 + 54) / 121][Stage 156:===================================>                 (81 + 40) / 121][Stage 156:=============================================>      (105 + 16) / 121][Stage 156:====================================================>(119 + 2) / 121]                                                                                [Stage 157:==========================>                          (61 + 61) / 122][Stage 157:============================>                        (66 + 56) / 122][Stage 157:=====================================>               (86 + 36) / 122][Stage 157:=============================================>      (107 + 15) / 122][Stage 157:===================================================> (119 + 3) / 122][Stage 157:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.486282313 seconds
res161: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide27"
dataSource: String = /nidan/orc/individualORC/slide27

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 76  OR  partitionIndex = 62 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.339047754 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 158:======================================>              (84 + 31) / 115][Stage 158:=======================================>             (85 + 30) / 115][Stage 158:===========================================>         (95 + 20) / 115][Stage 158:===============================================>    (105 + 10) / 115][Stage 158:====================================================>(114 + 1) / 115]                                                                                [Stage 159:=====================================>               (83 + 33) / 116][Stage 159:========================================>            (88 + 28) / 116][Stage 159:============================================>       (100 + 16) / 116][Stage 159:==================================================>  (111 + 5) / 116]                                                                                Time elapsed: 3.107161386 seconds
res163: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide4"
dataSource: String = /nidan/orc/individualORC/slide4

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 111  OR  partitionIndex = 112 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39677446 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 160:===============================>                     (68 + 47) / 115][Stage 160:===================================>                 (76 + 39) / 115][Stage 160:=========================================>           (91 + 24) / 115][Stage 160:===============================================>    (105 + 10) / 115][Stage 160:====================================================>(114 + 1) / 115]                                                                                [Stage 161:===============================>                     (69 + 47) / 116][Stage 161:=======================================>             (87 + 29) / 116][Stage 161:=============================================>      (102 + 14) / 116][Stage 161:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.649576212 seconds
res165: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 55  OR  partitionIndex = 56 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.398097964 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 162:==========================>                          (60 + 60) / 120][Stage 162:============================>                        (64 + 56) / 120][Stage 162:===================================>                 (81 + 39) / 120][Stage 162:===========================================>        (101 + 19) / 120]                                                                                [Stage 163:===========================>                         (62 + 59) / 121][Stage 163:===============================>                     (71 + 50) / 121][Stage 163:===========================================>         (99 + 22) / 121][Stage 163:===================================================> (118 + 3) / 121]                                                                                Time elapsed: 2.894281076 seconds
res167: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide14"
dataSource: String = /nidan/orc/individualORC/slide14

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 154  OR  partitionIndex = 155 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.415022732 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 164:==========================>                          (60 + 61) / 121][Stage 164:==========================>                          (61 + 60) / 121][Stage 164:===============================>                     (73 + 48) / 121][Stage 164:=======================================>             (91 + 30) / 121][Stage 164:=================================================>   (113 + 8) / 121][Stage 164:====================================================>(120 + 1) / 121]                                                                                [Stage 165:==========================>                          (61 + 61) / 122][Stage 165:==============================>                      (70 + 52) / 122][Stage 165:=====================================>               (87 + 35) / 122][Stage 165:===============================================>    (111 + 11) / 122][Stage 165:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.300635644 seconds
res169: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide30"
dataSource: String = /nidan/orc/individualORC/slide30

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 9  OR  partitionIndex = 23 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.36884508 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 166:==================================>                  (73 + 40) / 113][Stage 166:=======================================>             (84 + 29) / 113][Stage 166:===========================================>         (93 + 20) / 113][Stage 166:==================================================>  (107 + 6) / 113]                                                                                [Stage 167:=====================================>               (81 + 33) / 114][Stage 167:========================================>            (88 + 26) / 114][Stage 167:==============================================>     (102 + 12) / 114][Stage 167:=================================================>   (107 + 7) / 114][Stage 167:==================================================>  (109 + 5) / 114]                                                                                Time elapsed: 3.274683951 seconds
res171: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide10"
dataSource: String = /nidan/orc/individualORC/slide10

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 212  OR  partitionIndex = 213 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.409544557 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 168:==========================>                          (60 + 60) / 120][Stage 168:==============================>                      (69 + 51) / 120][Stage 168:======================================>              (87 + 33) / 120][Stage 168:=================================================>   (111 + 9) / 120][Stage 168:====================================================>(119 + 1) / 120]                                                                                [Stage 169:==========================>                          (61 + 60) / 121][Stage 169:=============================>                       (68 + 53) / 121][Stage 169:===================================>                 (82 + 39) / 121][Stage 169:==========================================>         (100 + 21) / 121][Stage 169:===================================================> (117 + 4) / 121][Stage 169:====================================================>(120 + 1) / 121]                                                                                Time elapsed: 3.274768792 seconds
res173: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 159  OR  partitionIndex = 173 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.448842271 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 170:================================>                    (72 + 46) / 118][Stage 170:====================================>                (81 + 37) / 118][Stage 170:===========================================>         (97 + 21) / 118][Stage 170:====================================================>(116 + 2) / 118]                                                                                [Stage 171:================================>                    (73 + 46) / 119][Stage 171:=================================>                   (76 + 43) / 119][Stage 171:========================================>            (91 + 28) / 119][Stage 171:===============================================>    (109 + 10) / 119][Stage 171:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.899680635 seconds
res175: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide8"
dataSource: String = /nidan/orc/individualORC/slide8

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 0  OR  partitionIndex = 1 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.385223027 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 172:===========================>                         (59 + 54) / 113][Stage 172:==================================>                  (73 + 40) / 113][Stage 172:===========================================>         (92 + 21) / 113][Stage 172:===================================================> (110 + 3) / 113]                                                                                [Stage 173:============================>                        (61 + 53) / 114][Stage 173:=================================>                   (73 + 41) / 114][Stage 173:=========================================>           (89 + 25) / 114][Stage 173:=================================================>   (106 + 8) / 114][Stage 173:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.173327723 seconds
res177: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide13"
dataSource: String = /nidan/orc/individualORC/slide13

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 69  OR  partitionIndex = 83 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.338711054 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 174:========================================>            (87 + 28) / 115][Stage 174:===========================================>         (95 + 20) / 115][Stage 174:==================================================>  (110 + 5) / 115][Stage 174:====================================================>(114 + 1) / 115]                                                                                [Stage 175:======================================>              (84 + 32) / 116][Stage 175:========================================>            (89 + 27) / 116][Stage 175:=============================================>      (102 + 14) / 116][Stage 175:===================================================> (113 + 3) / 116][Stage 175:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 2.874935566 seconds
res179: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide55"
dataSource: String = /nidan/orc/individualORC/slide55

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 100  OR  partitionIndex = 101 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.329038906 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 176:====================================>                (80 + 35) / 115][Stage 176:========================================>            (88 + 27) / 115][Stage 176:=============================================>       (99 + 16) / 115][Stage 176:===================================================> (112 + 3) / 115]                                                                                [Stage 177:======================================>              (84 + 32) / 116][Stage 177:========================================>            (89 + 27) / 116][Stage 177:===========================================>         (96 + 20) / 116][Stage 177:===============================================>    (105 + 11) / 116][Stage 177:===================================================> (113 + 3) / 116]                                                                                Time elapsed: 2.97341359 seconds
res181: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide43"
dataSource: String = /nidan/orc/individualORC/slide43

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 25  OR  partitionIndex = 26 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.375891641 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 178:===========================>                         (59 + 54) / 113][Stage 178:================================>                    (70 + 43) / 113][Stage 178:=======================================>             (84 + 29) / 113][Stage 178:================================================>    (104 + 9) / 113]                                                                                [Stage 179:============================>                        (61 + 53) / 114][Stage 179:==================================>                  (75 + 39) / 114][Stage 179:==============================================>      (99 + 15) / 114][Stage 179:====================================================>(112 + 2) / 114][Stage 179:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.130423663 seconds
res183: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide25"
dataSource: String = /nidan/orc/individualORC/slide25

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 31 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.414254552 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 180:=================================>                   (72 + 43) / 115][Stage 180:=======================================>             (85 + 30) / 115][Stage 180:=============================================>      (101 + 14) / 115][Stage 180:==================================================>  (110 + 5) / 115]                                                                                [Stage 181:=================================>                   (74 + 42) / 116][Stage 181:==========================================>          (92 + 24) / 116][Stage 181:=============================================>      (102 + 14) / 116][Stage 181:===================================================> (112 + 4) / 116][Stage 181:====================================================>(115 + 1) / 116]                                                                                Time elapsed: 4.068365481 seconds
res185: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide40"
dataSource: String = /nidan/orc/individualORC/slide40

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ", 2))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 5  OR  partitionIndex = 19 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.366078453 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 182:================================>                    (73 + 45) / 118][Stage 182:====================================>                (81 + 37) / 118][Stage 182:============================================>        (99 + 19) / 118][Stage 182:====================================================>(117 + 1) / 118]                                                                                [Stage 183:================================>                    (73 + 46) / 119][Stage 183:==================================>                  (78 + 41) / 119][Stage 183:========================================>            (92 + 27) / 119][Stage 183:==================================================>  (114 + 5) / 119]                                                                                Time elapsed: 2.886220882 seconds
res187: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide7"
dataSource: String = /nidan/orc/individualORC/slide7

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 15  OR  partitionIndex = 29 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.39972683 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 184:==========================>                          (60 + 61) / 121][Stage 184:==================================>                  (79 + 42) / 121][Stage 184:==========================================>          (98 + 23) / 121][Stage 184:=================================================>   (113 + 8) / 121]                                                                                [Stage 185:==========================>                          (61 + 61) / 122][Stage 185:================================>                    (74 + 48) / 122][Stage 185:=========================================>           (95 + 27) / 122][Stage 185:==============================================>     (108 + 14) / 122][Stage 185:====================================================>(121 + 1) / 122]                                                                                Time elapsed: 3.176474018 seconds
res189: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide12"
dataSource: String = /nidan/orc/individualORC/slide12

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 225  OR  partitionIndex = 226 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.374204396 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 186:================================>                    (72 + 46) / 118][Stage 186:=====================================>               (83 + 35) / 118][Stage 186:=========================================>           (92 + 26) / 118][Stage 186:=============================================>      (103 + 15) / 118]                                                                                [Stage 187:================================>                    (73 + 46) / 119][Stage 187:===================================>                 (79 + 40) / 119][Stage 187:===========================================>         (97 + 22) / 119][Stage 187:==============================================>     (107 + 12) / 119][Stage 187:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 2.997525744 seconds
res191: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide57"
dataSource: String = /nidan/orc/individualORC/slide57

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 10  OR  partitionIndex = 11 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.404568484 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 188:===========================>                         (58 + 55) / 113][Stage 188:================================>                    (69 + 44) / 113][Stage 188:==========================================>          (90 + 23) / 113][Stage 188:====================================================>(111 + 2) / 113]                                                                                [Stage 189:===========================>                         (59 + 55) / 114][Stage 189:=============================>                       (64 + 50) / 114][Stage 189:=====================================>               (80 + 34) / 114][Stage 189:============================================>        (96 + 18) / 114][Stage 189:=================================================>   (107 + 7) / 114][Stage 189:====================================================>(113 + 1) / 114]                                                                                Time elapsed: 3.278249073 seconds
res193: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide54"
dataSource: String = /nidan/orc/individualORC/slide54

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 205  OR  partitionIndex = 206 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.359406214 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 190:================================>                    (72 + 46) / 118][Stage 190:=================================>                   (74 + 44) / 118][Stage 190:====================================>                (81 + 37) / 118][Stage 190:===========================================>         (97 + 21) / 118][Stage 190:===================================================> (115 + 3) / 118][Stage 190:====================================================>(117 + 1) / 118]                                                                                [Stage 191:=================================>                   (76 + 43) / 119][Stage 191:====================================>                (83 + 36) / 119][Stage 191:=========================================>           (93 + 26) / 119][Stage 191:==============================================>     (107 + 12) / 119][Stage 191:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.41575363 seconds
res195: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide5"
dataSource: String = /nidan/orc/individualORC/slide5

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 136  OR  partitionIndex = 122 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.354174819 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 192:================================>                    (72 + 46) / 118][Stage 192:=================================>                   (74 + 44) / 118][Stage 192:====================================>                (81 + 37) / 118][Stage 192:========================================>            (90 + 28) / 118][Stage 192:============================================>       (102 + 16) / 118][Stage 192:==================================================>  (112 + 6) / 118]                                                                                [Stage 193:================================>                    (73 + 46) / 119][Stage 193:===================================>                 (80 + 39) / 119][Stage 193:=======================================>             (88 + 31) / 119][Stage 193:=============================================>      (105 + 14) / 119][Stage 193:====================================================>(118 + 1) / 119]                                                                                Time elapsed: 3.446941201 seconds
res197: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide19"
dataSource: String = /nidan/orc/individualORC/slide19

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 24  OR  partitionIndex = 10 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.433064506 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 194:================================>                    (72 + 46) / 118][Stage 194:==================================>                  (76 + 42) / 118][Stage 194:=======================================>             (88 + 30) / 118][Stage 194:==============================================>     (106 + 12) / 118][Stage 194:====================================================>(116 + 2) / 118]                                                                                [Stage 195:================================>                    (73 + 46) / 119][Stage 195:======================================>              (86 + 33) / 119][Stage 195:=============================================>      (105 + 14) / 119][Stage 195:==================================================>  (113 + 6) / 119]                                                                                Time elapsed: 3.160681098 seconds
res199: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide38"
dataSource: String = /nidan/orc/individualORC/slide38

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ", 2 ))
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 123  OR  partitionIndex = 137 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.417059521 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 196:===========================>                         (63 + 57) / 120][Stage 196:================================>                    (74 + 46) / 120][Stage 196:=========================================>           (95 + 25) / 120][Stage 196:===============================================>    (110 + 10) / 120][Stage 196:====================================================>(119 + 1) / 120]                                                                                [Stage 197:==========================>                          (61 + 60) / 121][Stage 197:===============================>                     (71 + 50) / 121][Stage 197:=========================================>           (94 + 27) / 121][Stage 197:=================================================>   (112 + 9) / 121][Stage 197:====================================================>(119 + 2) / 121]                                                                                Time elapsed: 3.180269595 seconds
res201: Int = 0

scala> 

scala> val dataSource = "/nidan/orc/individualORC/slide42"
dataSource: String = /nidan/orc/individualORC/slide42

scala> val queries = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ", 2)) 
queries: List[(String, Int)] = List(("SELECT imageBytes FROM data WHERE  partitionIndex = 30  OR  partitionIndex = 42 ",2))

scala> 

scala> // query

scala> show_timing{sqlContext.read.orc(dataSource).createOrReplaceTempView("data")}
Time elapsed: 0.400666413 seconds

scala> 

scala> show_timing{sqlContext.sql(queries(0)._1).map(_.getAs[Array[Byte]](0)).rdd.zipWithIndex.map{case (bytes, in dex) => (bytes, index, s"o6_${index}.JPEG")}.collect.map(writeToLocal).filter(_ => false).size}
[Stage 198:==========================>                          (60 + 61) / 121][Stage 198:==============================>                      (70 + 51) / 121][Stage 198:======================================>              (89 + 32) / 121][Stage 198:=============================================>      (105 + 16) / 121][Stage 198:====================================================>(120 + 1) / 121]                                                                                [Stage 199:==========================>                          (61 + 61) / 122][Stage 199:=============================>                       (67 + 55) / 122][Stage 199:====================================>                (84 + 38) / 122][Stage 199:===============================================>    (111 + 11) / 122]                                                                                Time elapsed: 3.003607127 seconds
res203: Int = 0

scala> 

scala> :quit
17/05/22 08:08:58 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51706) dropped. RpcEnv already stopped.
17/05/22 08:08:58 WARN netty.Dispatcher: Message RemoteProcessDisconnected(128.110.152.12:51706) dropped. RpcEnv already stopped.

real	9m55.233s
user	11m53.116s
sys	0m35.288s
